/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftCommon.fileTransfer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FileTransfer {

  public interface Iface extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Iface {

    /**
     * Открывает сокет для передачи данных с сервера на клиент.
     * 
     * @param path
     */
    public int openReadServerSocket(String path) throws FileNotFoundException, OpenFileException, org.apache.thrift.TException;

    /**
     * Открывает сокет для передачи данных с клиента на сервер.
     * 
     * @param path
     */
    public int openWriteServerSocket(String path) throws OpenFileException, org.apache.thrift.TException;

    /**
     * Закрывает сокет, удаляя по необходимости ранее открытый файл.
     * 
     * @param port
     * @param delFile
     */
    public void closeServerSocket(int port, boolean delFile) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer .AsyncIface {

    public void openReadServerSocket(String path, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.openReadServerSocket_call> resultHandler) throws org.apache.thrift.TException;

    public void openWriteServerSocket(String path, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.openWriteServerSocket_call> resultHandler) throws org.apache.thrift.TException;

    public void closeServerSocket(int port, boolean delFile, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.closeServerSocket_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int openReadServerSocket(String path) throws FileNotFoundException, OpenFileException, org.apache.thrift.TException
    {
      send_openReadServerSocket(path);
      return recv_openReadServerSocket();
    }

    public void send_openReadServerSocket(String path) throws org.apache.thrift.TException
    {
      openReadServerSocket_args args = new openReadServerSocket_args();
      args.setPath(path);
      sendBase("openReadServerSocket", args);
    }

    public int recv_openReadServerSocket() throws FileNotFoundException, OpenFileException, org.apache.thrift.TException
    {
      openReadServerSocket_result result = new openReadServerSocket_result();
      receiveBase(result, "openReadServerSocket");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fnf != null) {
        throw result.fnf;
      }
      if (result.ofe != null) {
        throw result.ofe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "openReadServerSocket failed: unknown result");
    }

    public int openWriteServerSocket(String path) throws OpenFileException, org.apache.thrift.TException
    {
      send_openWriteServerSocket(path);
      return recv_openWriteServerSocket();
    }

    public void send_openWriteServerSocket(String path) throws org.apache.thrift.TException
    {
      openWriteServerSocket_args args = new openWriteServerSocket_args();
      args.setPath(path);
      sendBase("openWriteServerSocket", args);
    }

    public int recv_openWriteServerSocket() throws OpenFileException, org.apache.thrift.TException
    {
      openWriteServerSocket_result result = new openWriteServerSocket_result();
      receiveBase(result, "openWriteServerSocket");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ofe != null) {
        throw result.ofe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "openWriteServerSocket failed: unknown result");
    }

    public void closeServerSocket(int port, boolean delFile) throws org.apache.thrift.TException
    {
      send_closeServerSocket(port, delFile);
      recv_closeServerSocket();
    }

    public void send_closeServerSocket(int port, boolean delFile) throws org.apache.thrift.TException
    {
      closeServerSocket_args args = new closeServerSocket_args();
      args.setPort(port);
      args.setDelFile(delFile);
      sendBase("closeServerSocket", args);
    }

    public void recv_closeServerSocket() throws org.apache.thrift.TException
    {
      closeServerSocket_result result = new closeServerSocket_result();
      receiveBase(result, "closeServerSocket");
      return;
    }

  }
  public static class AsyncClient extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void openReadServerSocket(String path, org.apache.thrift.async.AsyncMethodCallback<openReadServerSocket_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openReadServerSocket_call method_call = new openReadServerSocket_call(path, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openReadServerSocket_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String path;
      public openReadServerSocket_call(String path, org.apache.thrift.async.AsyncMethodCallback<openReadServerSocket_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openReadServerSocket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openReadServerSocket_args args = new openReadServerSocket_args();
        args.setPath(path);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws FileNotFoundException, OpenFileException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openReadServerSocket();
      }
    }

    public void openWriteServerSocket(String path, org.apache.thrift.async.AsyncMethodCallback<openWriteServerSocket_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openWriteServerSocket_call method_call = new openWriteServerSocket_call(path, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openWriteServerSocket_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String path;
      public openWriteServerSocket_call(String path, org.apache.thrift.async.AsyncMethodCallback<openWriteServerSocket_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.path = path;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openWriteServerSocket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openWriteServerSocket_args args = new openWriteServerSocket_args();
        args.setPath(path);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws OpenFileException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openWriteServerSocket();
      }
    }

    public void closeServerSocket(int port, boolean delFile, org.apache.thrift.async.AsyncMethodCallback<closeServerSocket_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeServerSocket_call method_call = new closeServerSocket_call(port, delFile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeServerSocket_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int port;
      private boolean delFile;
      public closeServerSocket_call(int port, boolean delFile, org.apache.thrift.async.AsyncMethodCallback<closeServerSocket_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.port = port;
        this.delFile = delFile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeServerSocket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeServerSocket_args args = new closeServerSocket_args();
        args.setPort(port);
        args.setDelFile(delFile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_closeServerSocket();
      }
    }

  }

  public static class Processor<I extends Iface> extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("openReadServerSocket", new openReadServerSocket());
      processMap.put("openWriteServerSocket", new openWriteServerSocket());
      processMap.put("closeServerSocket", new closeServerSocket());
      return processMap;
    }

    private static class openReadServerSocket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openReadServerSocket_args> {
      public openReadServerSocket() {
        super("openReadServerSocket");
      }

      protected openReadServerSocket_args getEmptyArgsInstance() {
        return new openReadServerSocket_args();
      }

      protected openReadServerSocket_result getResult(I iface, openReadServerSocket_args args) throws org.apache.thrift.TException {
        openReadServerSocket_result result = new openReadServerSocket_result();
        try {
          result.success = iface.openReadServerSocket(args.path);
          result.setSuccessIsSet(true);
        } catch (FileNotFoundException fnf) {
          result.fnf = fnf;
        } catch (OpenFileException ofe) {
          result.ofe = ofe;
        }
        return result;
      }
    }

    private static class openWriteServerSocket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openWriteServerSocket_args> {
      public openWriteServerSocket() {
        super("openWriteServerSocket");
      }

      protected openWriteServerSocket_args getEmptyArgsInstance() {
        return new openWriteServerSocket_args();
      }

      protected openWriteServerSocket_result getResult(I iface, openWriteServerSocket_args args) throws org.apache.thrift.TException {
        openWriteServerSocket_result result = new openWriteServerSocket_result();
        try {
          result.success = iface.openWriteServerSocket(args.path);
          result.setSuccessIsSet(true);
        } catch (OpenFileException ofe) {
          result.ofe = ofe;
        }
        return result;
      }
    }

    private static class closeServerSocket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeServerSocket_args> {
      public closeServerSocket() {
        super("closeServerSocket");
      }

      protected closeServerSocket_args getEmptyArgsInstance() {
        return new closeServerSocket_args();
      }

      protected closeServerSocket_result getResult(I iface, closeServerSocket_args args) throws org.apache.thrift.TException {
        closeServerSocket_result result = new closeServerSocket_result();
        iface.closeServerSocket(args.port, args.delFile);
        return result;
      }
    }

  }

  public static class openReadServerSocket_args implements org.apache.thrift.TBase<openReadServerSocket_args, openReadServerSocket_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openReadServerSocket_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openReadServerSocket_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openReadServerSocket_argsTupleSchemeFactory());
    }

    public String path; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openReadServerSocket_args.class, metaDataMap);
    }

    public openReadServerSocket_args() {
    }

    public openReadServerSocket_args(
      String path)
    {
      this();
      this.path = path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openReadServerSocket_args(openReadServerSocket_args other) {
      if (other.isSetPath()) {
        this.path = other.path;
      }
    }

    public openReadServerSocket_args deepCopy() {
      return new openReadServerSocket_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
    }

    public String getPath() {
      return this.path;
    }

    public openReadServerSocket_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openReadServerSocket_args)
        return this.equals((openReadServerSocket_args)that);
      return false;
    }

    public boolean equals(openReadServerSocket_args that) {
      if (that == null)
        return false;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(openReadServerSocket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      openReadServerSocket_args typedOther = (openReadServerSocket_args)other;

      lastComparison = Boolean.valueOf(isSetPath()).compareTo(typedOther.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, typedOther.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openReadServerSocket_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openReadServerSocket_argsStandardSchemeFactory implements SchemeFactory {
      public openReadServerSocket_argsStandardScheme getScheme() {
        return new openReadServerSocket_argsStandardScheme();
      }
    }

    private static class openReadServerSocket_argsStandardScheme extends StandardScheme<openReadServerSocket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openReadServerSocket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openReadServerSocket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openReadServerSocket_argsTupleSchemeFactory implements SchemeFactory {
      public openReadServerSocket_argsTupleScheme getScheme() {
        return new openReadServerSocket_argsTupleScheme();
      }
    }

    private static class openReadServerSocket_argsTupleScheme extends TupleScheme<openReadServerSocket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openReadServerSocket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openReadServerSocket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
      }
    }

  }

  public static class openReadServerSocket_result implements org.apache.thrift.TBase<openReadServerSocket_result, openReadServerSocket_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openReadServerSocket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField FNF_FIELD_DESC = new org.apache.thrift.protocol.TField("fnf", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OFE_FIELD_DESC = new org.apache.thrift.protocol.TField("ofe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openReadServerSocket_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openReadServerSocket_resultTupleSchemeFactory());
    }

    public int success; // required
    public FileNotFoundException fnf; // required
    public OpenFileException ofe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FNF((short)1, "fnf"),
      OFE((short)2, "ofe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FNF
            return FNF;
          case 2: // OFE
            return OFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FNF, new org.apache.thrift.meta_data.FieldMetaData("fnf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OFE, new org.apache.thrift.meta_data.FieldMetaData("ofe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openReadServerSocket_result.class, metaDataMap);
    }

    public openReadServerSocket_result() {
    }

    public openReadServerSocket_result(
      int success,
      FileNotFoundException fnf,
      OpenFileException ofe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.fnf = fnf;
      this.ofe = ofe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openReadServerSocket_result(openReadServerSocket_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetFnf()) {
        this.fnf = new FileNotFoundException(other.fnf);
      }
      if (other.isSetOfe()) {
        this.ofe = new OpenFileException(other.ofe);
      }
    }

    public openReadServerSocket_result deepCopy() {
      return new openReadServerSocket_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.fnf = null;
      this.ofe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public openReadServerSocket_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public FileNotFoundException getFnf() {
      return this.fnf;
    }

    public openReadServerSocket_result setFnf(FileNotFoundException fnf) {
      this.fnf = fnf;
      return this;
    }

    public void unsetFnf() {
      this.fnf = null;
    }

    /** Returns true if field fnf is set (has been assigned a value) and false otherwise */
    public boolean isSetFnf() {
      return this.fnf != null;
    }

    public void setFnfIsSet(boolean value) {
      if (!value) {
        this.fnf = null;
      }
    }

    public OpenFileException getOfe() {
      return this.ofe;
    }

    public openReadServerSocket_result setOfe(OpenFileException ofe) {
      this.ofe = ofe;
      return this;
    }

    public void unsetOfe() {
      this.ofe = null;
    }

    /** Returns true if field ofe is set (has been assigned a value) and false otherwise */
    public boolean isSetOfe() {
      return this.ofe != null;
    }

    public void setOfeIsSet(boolean value) {
      if (!value) {
        this.ofe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case FNF:
        if (value == null) {
          unsetFnf();
        } else {
          setFnf((FileNotFoundException)value);
        }
        break;

      case OFE:
        if (value == null) {
          unsetOfe();
        } else {
          setOfe((OpenFileException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case FNF:
        return getFnf();

      case OFE:
        return getOfe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FNF:
        return isSetFnf();
      case OFE:
        return isSetOfe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openReadServerSocket_result)
        return this.equals((openReadServerSocket_result)that);
      return false;
    }

    public boolean equals(openReadServerSocket_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_fnf = true && this.isSetFnf();
      boolean that_present_fnf = true && that.isSetFnf();
      if (this_present_fnf || that_present_fnf) {
        if (!(this_present_fnf && that_present_fnf))
          return false;
        if (!this.fnf.equals(that.fnf))
          return false;
      }

      boolean this_present_ofe = true && this.isSetOfe();
      boolean that_present_ofe = true && that.isSetOfe();
      if (this_present_ofe || that_present_ofe) {
        if (!(this_present_ofe && that_present_ofe))
          return false;
        if (!this.ofe.equals(that.ofe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(openReadServerSocket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      openReadServerSocket_result typedOther = (openReadServerSocket_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFnf()).compareTo(typedOther.isSetFnf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFnf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fnf, typedOther.fnf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOfe()).compareTo(typedOther.isSetOfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ofe, typedOther.ofe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openReadServerSocket_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fnf:");
      if (this.fnf == null) {
        sb.append("null");
      } else {
        sb.append(this.fnf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ofe:");
      if (this.ofe == null) {
        sb.append("null");
      } else {
        sb.append(this.ofe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openReadServerSocket_resultStandardSchemeFactory implements SchemeFactory {
      public openReadServerSocket_resultStandardScheme getScheme() {
        return new openReadServerSocket_resultStandardScheme();
      }
    }

    private static class openReadServerSocket_resultStandardScheme extends StandardScheme<openReadServerSocket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openReadServerSocket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FNF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fnf = new FileNotFoundException();
                struct.fnf.read(iprot);
                struct.setFnfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ofe = new OpenFileException();
                struct.ofe.read(iprot);
                struct.setOfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openReadServerSocket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.fnf != null) {
          oprot.writeFieldBegin(FNF_FIELD_DESC);
          struct.fnf.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ofe != null) {
          oprot.writeFieldBegin(OFE_FIELD_DESC);
          struct.ofe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openReadServerSocket_resultTupleSchemeFactory implements SchemeFactory {
      public openReadServerSocket_resultTupleScheme getScheme() {
        return new openReadServerSocket_resultTupleScheme();
      }
    }

    private static class openReadServerSocket_resultTupleScheme extends TupleScheme<openReadServerSocket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openReadServerSocket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFnf()) {
          optionals.set(1);
        }
        if (struct.isSetOfe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetFnf()) {
          struct.fnf.write(oprot);
        }
        if (struct.isSetOfe()) {
          struct.ofe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openReadServerSocket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fnf = new FileNotFoundException();
          struct.fnf.read(iprot);
          struct.setFnfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ofe = new OpenFileException();
          struct.ofe.read(iprot);
          struct.setOfeIsSet(true);
        }
      }
    }

  }

  public static class openWriteServerSocket_args implements org.apache.thrift.TBase<openWriteServerSocket_args, openWriteServerSocket_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openWriteServerSocket_args");

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openWriteServerSocket_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openWriteServerSocket_argsTupleSchemeFactory());
    }

    public String path; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATH((short)1, "path");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATH
            return PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openWriteServerSocket_args.class, metaDataMap);
    }

    public openWriteServerSocket_args() {
    }

    public openWriteServerSocket_args(
      String path)
    {
      this();
      this.path = path;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openWriteServerSocket_args(openWriteServerSocket_args other) {
      if (other.isSetPath()) {
        this.path = other.path;
      }
    }

    public openWriteServerSocket_args deepCopy() {
      return new openWriteServerSocket_args(this);
    }

    @Override
    public void clear() {
      this.path = null;
    }

    public String getPath() {
      return this.path;
    }

    public openWriteServerSocket_args setPath(String path) {
      this.path = path;
      return this;
    }

    public void unsetPath() {
      this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath() {
      return this.path != null;
    }

    public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATH:
        return getPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATH:
        return isSetPath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openWriteServerSocket_args)
        return this.equals((openWriteServerSocket_args)that);
      return false;
    }

    public boolean equals(openWriteServerSocket_args that) {
      if (that == null)
        return false;

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(openWriteServerSocket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      openWriteServerSocket_args typedOther = (openWriteServerSocket_args)other;

      lastComparison = Boolean.valueOf(isSetPath()).compareTo(typedOther.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, typedOther.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openWriteServerSocket_args(");
      boolean first = true;

      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openWriteServerSocket_argsStandardSchemeFactory implements SchemeFactory {
      public openWriteServerSocket_argsStandardScheme getScheme() {
        return new openWriteServerSocket_argsStandardScheme();
      }
    }

    private static class openWriteServerSocket_argsStandardScheme extends StandardScheme<openWriteServerSocket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openWriteServerSocket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openWriteServerSocket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.path != null) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openWriteServerSocket_argsTupleSchemeFactory implements SchemeFactory {
      public openWriteServerSocket_argsTupleScheme getScheme() {
        return new openWriteServerSocket_argsTupleScheme();
      }
    }

    private static class openWriteServerSocket_argsTupleScheme extends TupleScheme<openWriteServerSocket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openWriteServerSocket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPath()) {
          oprot.writeString(struct.path);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openWriteServerSocket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.path = iprot.readString();
          struct.setPathIsSet(true);
        }
      }
    }

  }

  public static class openWriteServerSocket_result implements org.apache.thrift.TBase<openWriteServerSocket_result, openWriteServerSocket_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openWriteServerSocket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField OFE_FIELD_DESC = new org.apache.thrift.protocol.TField("ofe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openWriteServerSocket_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openWriteServerSocket_resultTupleSchemeFactory());
    }

    public int success; // required
    public OpenFileException ofe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OFE((short)1, "ofe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OFE
            return OFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFE, new org.apache.thrift.meta_data.FieldMetaData("ofe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openWriteServerSocket_result.class, metaDataMap);
    }

    public openWriteServerSocket_result() {
    }

    public openWriteServerSocket_result(
      int success,
      OpenFileException ofe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ofe = ofe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openWriteServerSocket_result(openWriteServerSocket_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetOfe()) {
        this.ofe = new OpenFileException(other.ofe);
      }
    }

    public openWriteServerSocket_result deepCopy() {
      return new openWriteServerSocket_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ofe = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public openWriteServerSocket_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public OpenFileException getOfe() {
      return this.ofe;
    }

    public openWriteServerSocket_result setOfe(OpenFileException ofe) {
      this.ofe = ofe;
      return this;
    }

    public void unsetOfe() {
      this.ofe = null;
    }

    /** Returns true if field ofe is set (has been assigned a value) and false otherwise */
    public boolean isSetOfe() {
      return this.ofe != null;
    }

    public void setOfeIsSet(boolean value) {
      if (!value) {
        this.ofe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case OFE:
        if (value == null) {
          unsetOfe();
        } else {
          setOfe((OpenFileException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case OFE:
        return getOfe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OFE:
        return isSetOfe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openWriteServerSocket_result)
        return this.equals((openWriteServerSocket_result)that);
      return false;
    }

    public boolean equals(openWriteServerSocket_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ofe = true && this.isSetOfe();
      boolean that_present_ofe = true && that.isSetOfe();
      if (this_present_ofe || that_present_ofe) {
        if (!(this_present_ofe && that_present_ofe))
          return false;
        if (!this.ofe.equals(that.ofe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(openWriteServerSocket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      openWriteServerSocket_result typedOther = (openWriteServerSocket_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOfe()).compareTo(typedOther.isSetOfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ofe, typedOther.ofe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openWriteServerSocket_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ofe:");
      if (this.ofe == null) {
        sb.append("null");
      } else {
        sb.append(this.ofe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openWriteServerSocket_resultStandardSchemeFactory implements SchemeFactory {
      public openWriteServerSocket_resultStandardScheme getScheme() {
        return new openWriteServerSocket_resultStandardScheme();
      }
    }

    private static class openWriteServerSocket_resultStandardScheme extends StandardScheme<openWriteServerSocket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openWriteServerSocket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ofe = new OpenFileException();
                struct.ofe.read(iprot);
                struct.setOfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openWriteServerSocket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.ofe != null) {
          oprot.writeFieldBegin(OFE_FIELD_DESC);
          struct.ofe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openWriteServerSocket_resultTupleSchemeFactory implements SchemeFactory {
      public openWriteServerSocket_resultTupleScheme getScheme() {
        return new openWriteServerSocket_resultTupleScheme();
      }
    }

    private static class openWriteServerSocket_resultTupleScheme extends TupleScheme<openWriteServerSocket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openWriteServerSocket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOfe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetOfe()) {
          struct.ofe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openWriteServerSocket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ofe = new OpenFileException();
          struct.ofe.read(iprot);
          struct.setOfeIsSet(true);
        }
      }
    }

  }

  public static class closeServerSocket_args implements org.apache.thrift.TBase<closeServerSocket_args, closeServerSocket_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeServerSocket_args");

    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DEL_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("delFile", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeServerSocket_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeServerSocket_argsTupleSchemeFactory());
    }

    public int port; // required
    public boolean delFile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PORT((short)1, "port"),
      DEL_FILE((short)2, "delFile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PORT
            return PORT;
          case 2: // DEL_FILE
            return DEL_FILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __DELFILE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DEL_FILE, new org.apache.thrift.meta_data.FieldMetaData("delFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeServerSocket_args.class, metaDataMap);
    }

    public closeServerSocket_args() {
    }

    public closeServerSocket_args(
      int port,
      boolean delFile)
    {
      this();
      this.port = port;
      setPortIsSet(true);
      this.delFile = delFile;
      setDelFileIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeServerSocket_args(closeServerSocket_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.port = other.port;
      this.delFile = other.delFile;
    }

    public closeServerSocket_args deepCopy() {
      return new closeServerSocket_args(this);
    }

    @Override
    public void clear() {
      setPortIsSet(false);
      this.port = 0;
      setDelFileIsSet(false);
      this.delFile = false;
    }

    public int getPort() {
      return this.port;
    }

    public closeServerSocket_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bit_vector.clear(__PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return __isset_bit_vector.get(__PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bit_vector.set(__PORT_ISSET_ID, value);
    }

    public boolean isDelFile() {
      return this.delFile;
    }

    public closeServerSocket_args setDelFile(boolean delFile) {
      this.delFile = delFile;
      setDelFileIsSet(true);
      return this;
    }

    public void unsetDelFile() {
      __isset_bit_vector.clear(__DELFILE_ISSET_ID);
    }

    /** Returns true if field delFile is set (has been assigned a value) and false otherwise */
    public boolean isSetDelFile() {
      return __isset_bit_vector.get(__DELFILE_ISSET_ID);
    }

    public void setDelFileIsSet(boolean value) {
      __isset_bit_vector.set(__DELFILE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((Integer)value);
        }
        break;

      case DEL_FILE:
        if (value == null) {
          unsetDelFile();
        } else {
          setDelFile((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PORT:
        return Integer.valueOf(getPort());

      case DEL_FILE:
        return Boolean.valueOf(isDelFile());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PORT:
        return isSetPort();
      case DEL_FILE:
        return isSetDelFile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeServerSocket_args)
        return this.equals((closeServerSocket_args)that);
      return false;
    }

    public boolean equals(closeServerSocket_args that) {
      if (that == null)
        return false;

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_delFile = true;
      boolean that_present_delFile = true;
      if (this_present_delFile || that_present_delFile) {
        if (!(this_present_delFile && that_present_delFile))
          return false;
        if (this.delFile != that.delFile)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(closeServerSocket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      closeServerSocket_args typedOther = (closeServerSocket_args)other;

      lastComparison = Boolean.valueOf(isSetPort()).compareTo(typedOther.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, typedOther.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDelFile()).compareTo(typedOther.isSetDelFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDelFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delFile, typedOther.delFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeServerSocket_args(");
      boolean first = true;

      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("delFile:");
      sb.append(this.delFile);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeServerSocket_argsStandardSchemeFactory implements SchemeFactory {
      public closeServerSocket_argsStandardScheme getScheme() {
        return new closeServerSocket_argsStandardScheme();
      }
    }

    private static class closeServerSocket_argsStandardScheme extends StandardScheme<closeServerSocket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeServerSocket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEL_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.delFile = iprot.readBool();
                struct.setDelFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeServerSocket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DEL_FILE_FIELD_DESC);
        oprot.writeBool(struct.delFile);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeServerSocket_argsTupleSchemeFactory implements SchemeFactory {
      public closeServerSocket_argsTupleScheme getScheme() {
        return new closeServerSocket_argsTupleScheme();
      }
    }

    private static class closeServerSocket_argsTupleScheme extends TupleScheme<closeServerSocket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeServerSocket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPort()) {
          optionals.set(0);
        }
        if (struct.isSetDelFile()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetDelFile()) {
          oprot.writeBool(struct.delFile);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeServerSocket_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(1)) {
          struct.delFile = iprot.readBool();
          struct.setDelFileIsSet(true);
        }
      }
    }

  }

  public static class closeServerSocket_result implements org.apache.thrift.TBase<closeServerSocket_result, closeServerSocket_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeServerSocket_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeServerSocket_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeServerSocket_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeServerSocket_result.class, metaDataMap);
    }

    public closeServerSocket_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeServerSocket_result(closeServerSocket_result other) {
    }

    public closeServerSocket_result deepCopy() {
      return new closeServerSocket_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeServerSocket_result)
        return this.equals((closeServerSocket_result)that);
      return false;
    }

    public boolean equals(closeServerSocket_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(closeServerSocket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      closeServerSocket_result typedOther = (closeServerSocket_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeServerSocket_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeServerSocket_resultStandardSchemeFactory implements SchemeFactory {
      public closeServerSocket_resultStandardScheme getScheme() {
        return new closeServerSocket_resultStandardScheme();
      }
    }

    private static class closeServerSocket_resultStandardScheme extends StandardScheme<closeServerSocket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeServerSocket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeServerSocket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeServerSocket_resultTupleSchemeFactory implements SchemeFactory {
      public closeServerSocket_resultTupleScheme getScheme() {
        return new closeServerSocket_resultTupleScheme();
      }
    }

    private static class closeServerSocket_resultTupleScheme extends TupleScheme<closeServerSocket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeServerSocket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeServerSocket_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
