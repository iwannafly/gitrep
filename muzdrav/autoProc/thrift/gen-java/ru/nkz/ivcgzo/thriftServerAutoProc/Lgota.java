/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftServerAutoProc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Lgota implements org.apache.thrift.TBase<Lgota, Lgota._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Lgota");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LGOT_FIELD_DESC = new org.apache.thrift.protocol.TField("lgot", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DATAL_FIELD_DESC = new org.apache.thrift.protocol.TField("datal", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField GRI_FIELD_DESC = new org.apache.thrift.protocol.TField("gri", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SIN_FIELD_DESC = new org.apache.thrift.protocol.TField("sin", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PP_FIELD_DESC = new org.apache.thrift.protocol.TField("pp", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DRG_FIELD_DESC = new org.apache.thrift.protocol.TField("drg", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField DOT_FIELD_DESC = new org.apache.thrift.protocol.TField("dot", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField OBO_FIELD_DESC = new org.apache.thrift.protocol.TField("obo", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField NDOC_FIELD_DESC = new org.apache.thrift.protocol.TField("ndoc", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LgotaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LgotaTupleSchemeFactory());
  }

  public int id; // optional
  public int npasp; // optional
  public int lgot; // optional
  public long datal; // optional
  public int gri; // optional
  public int sin; // optional
  public int pp; // optional
  public long drg; // optional
  public long dot; // optional
  public int obo; // optional
  public String ndoc; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NPASP((short)2, "npasp"),
    LGOT((short)3, "lgot"),
    DATAL((short)4, "datal"),
    GRI((short)5, "gri"),
    SIN((short)6, "sin"),
    PP((short)7, "pp"),
    DRG((short)8, "drg"),
    DOT((short)9, "dot"),
    OBO((short)10, "obo"),
    NDOC((short)11, "ndoc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NPASP
          return NPASP;
        case 3: // LGOT
          return LGOT;
        case 4: // DATAL
          return DATAL;
        case 5: // GRI
          return GRI;
        case 6: // SIN
          return SIN;
        case 7: // PP
          return PP;
        case 8: // DRG
          return DRG;
        case 9: // DOT
          return DOT;
        case 10: // OBO
          return OBO;
        case 11: // NDOC
          return NDOC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __NPASP_ISSET_ID = 1;
  private static final int __LGOT_ISSET_ID = 2;
  private static final int __DATAL_ISSET_ID = 3;
  private static final int __GRI_ISSET_ID = 4;
  private static final int __SIN_ISSET_ID = 5;
  private static final int __PP_ISSET_ID = 6;
  private static final int __DRG_ISSET_ID = 7;
  private static final int __DOT_ISSET_ID = 8;
  private static final int __OBO_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ID,_Fields.NPASP,_Fields.LGOT,_Fields.DATAL,_Fields.GRI,_Fields.SIN,_Fields.PP,_Fields.DRG,_Fields.DOT,_Fields.OBO,_Fields.NDOC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LGOT, new org.apache.thrift.meta_data.FieldMetaData("lgot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATAL, new org.apache.thrift.meta_data.FieldMetaData("datal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GRI, new org.apache.thrift.meta_data.FieldMetaData("gri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIN, new org.apache.thrift.meta_data.FieldMetaData("sin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PP, new org.apache.thrift.meta_data.FieldMetaData("pp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DRG, new org.apache.thrift.meta_data.FieldMetaData("drg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOT, new org.apache.thrift.meta_data.FieldMetaData("dot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OBO, new org.apache.thrift.meta_data.FieldMetaData("obo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NDOC, new org.apache.thrift.meta_data.FieldMetaData("ndoc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Lgota.class, metaDataMap);
  }

  public Lgota() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Lgota(Lgota other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.npasp = other.npasp;
    this.lgot = other.lgot;
    this.datal = other.datal;
    this.gri = other.gri;
    this.sin = other.sin;
    this.pp = other.pp;
    this.drg = other.drg;
    this.dot = other.dot;
    this.obo = other.obo;
    if (other.isSetNdoc()) {
      this.ndoc = other.ndoc;
    }
  }

  public Lgota deepCopy() {
    return new Lgota(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setNpaspIsSet(false);
    this.npasp = 0;
    setLgotIsSet(false);
    this.lgot = 0;
    setDatalIsSet(false);
    this.datal = 0;
    setGriIsSet(false);
    this.gri = 0;
    setSinIsSet(false);
    this.sin = 0;
    setPpIsSet(false);
    this.pp = 0;
    setDrgIsSet(false);
    this.drg = 0;
    setDotIsSet(false);
    this.dot = 0;
    setOboIsSet(false);
    this.obo = 0;
    this.ndoc = null;
  }

  public int getId() {
    return this.id;
  }

  public Lgota setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getNpasp() {
    return this.npasp;
  }

  public Lgota setNpasp(int npasp) {
    this.npasp = npasp;
    setNpaspIsSet(true);
    return this;
  }

  public void unsetNpasp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NPASP_ISSET_ID);
  }

  /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
  public boolean isSetNpasp() {
    return EncodingUtils.testBit(__isset_bitfield, __NPASP_ISSET_ID);
  }

  public void setNpaspIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NPASP_ISSET_ID, value);
  }

  public int getLgot() {
    return this.lgot;
  }

  public Lgota setLgot(int lgot) {
    this.lgot = lgot;
    setLgotIsSet(true);
    return this;
  }

  public void unsetLgot() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LGOT_ISSET_ID);
  }

  /** Returns true if field lgot is set (has been assigned a value) and false otherwise */
  public boolean isSetLgot() {
    return EncodingUtils.testBit(__isset_bitfield, __LGOT_ISSET_ID);
  }

  public void setLgotIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LGOT_ISSET_ID, value);
  }

  public long getDatal() {
    return this.datal;
  }

  public Lgota setDatal(long datal) {
    this.datal = datal;
    setDatalIsSet(true);
    return this;
  }

  public void unsetDatal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAL_ISSET_ID);
  }

  /** Returns true if field datal is set (has been assigned a value) and false otherwise */
  public boolean isSetDatal() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAL_ISSET_ID);
  }

  public void setDatalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAL_ISSET_ID, value);
  }

  public int getGri() {
    return this.gri;
  }

  public Lgota setGri(int gri) {
    this.gri = gri;
    setGriIsSet(true);
    return this;
  }

  public void unsetGri() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GRI_ISSET_ID);
  }

  /** Returns true if field gri is set (has been assigned a value) and false otherwise */
  public boolean isSetGri() {
    return EncodingUtils.testBit(__isset_bitfield, __GRI_ISSET_ID);
  }

  public void setGriIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GRI_ISSET_ID, value);
  }

  public int getSin() {
    return this.sin;
  }

  public Lgota setSin(int sin) {
    this.sin = sin;
    setSinIsSet(true);
    return this;
  }

  public void unsetSin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIN_ISSET_ID);
  }

  /** Returns true if field sin is set (has been assigned a value) and false otherwise */
  public boolean isSetSin() {
    return EncodingUtils.testBit(__isset_bitfield, __SIN_ISSET_ID);
  }

  public void setSinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIN_ISSET_ID, value);
  }

  public int getPp() {
    return this.pp;
  }

  public Lgota setPp(int pp) {
    this.pp = pp;
    setPpIsSet(true);
    return this;
  }

  public void unsetPp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PP_ISSET_ID);
  }

  /** Returns true if field pp is set (has been assigned a value) and false otherwise */
  public boolean isSetPp() {
    return EncodingUtils.testBit(__isset_bitfield, __PP_ISSET_ID);
  }

  public void setPpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PP_ISSET_ID, value);
  }

  public long getDrg() {
    return this.drg;
  }

  public Lgota setDrg(long drg) {
    this.drg = drg;
    setDrgIsSet(true);
    return this;
  }

  public void unsetDrg() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DRG_ISSET_ID);
  }

  /** Returns true if field drg is set (has been assigned a value) and false otherwise */
  public boolean isSetDrg() {
    return EncodingUtils.testBit(__isset_bitfield, __DRG_ISSET_ID);
  }

  public void setDrgIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DRG_ISSET_ID, value);
  }

  public long getDot() {
    return this.dot;
  }

  public Lgota setDot(long dot) {
    this.dot = dot;
    setDotIsSet(true);
    return this;
  }

  public void unsetDot() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOT_ISSET_ID);
  }

  /** Returns true if field dot is set (has been assigned a value) and false otherwise */
  public boolean isSetDot() {
    return EncodingUtils.testBit(__isset_bitfield, __DOT_ISSET_ID);
  }

  public void setDotIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOT_ISSET_ID, value);
  }

  public int getObo() {
    return this.obo;
  }

  public Lgota setObo(int obo) {
    this.obo = obo;
    setOboIsSet(true);
    return this;
  }

  public void unsetObo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OBO_ISSET_ID);
  }

  /** Returns true if field obo is set (has been assigned a value) and false otherwise */
  public boolean isSetObo() {
    return EncodingUtils.testBit(__isset_bitfield, __OBO_ISSET_ID);
  }

  public void setOboIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OBO_ISSET_ID, value);
  }

  public String getNdoc() {
    return this.ndoc;
  }

  public Lgota setNdoc(String ndoc) {
    this.ndoc = ndoc;
    return this;
  }

  public void unsetNdoc() {
    this.ndoc = null;
  }

  /** Returns true if field ndoc is set (has been assigned a value) and false otherwise */
  public boolean isSetNdoc() {
    return this.ndoc != null;
  }

  public void setNdocIsSet(boolean value) {
    if (!value) {
      this.ndoc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NPASP:
      if (value == null) {
        unsetNpasp();
      } else {
        setNpasp((Integer)value);
      }
      break;

    case LGOT:
      if (value == null) {
        unsetLgot();
      } else {
        setLgot((Integer)value);
      }
      break;

    case DATAL:
      if (value == null) {
        unsetDatal();
      } else {
        setDatal((Long)value);
      }
      break;

    case GRI:
      if (value == null) {
        unsetGri();
      } else {
        setGri((Integer)value);
      }
      break;

    case SIN:
      if (value == null) {
        unsetSin();
      } else {
        setSin((Integer)value);
      }
      break;

    case PP:
      if (value == null) {
        unsetPp();
      } else {
        setPp((Integer)value);
      }
      break;

    case DRG:
      if (value == null) {
        unsetDrg();
      } else {
        setDrg((Long)value);
      }
      break;

    case DOT:
      if (value == null) {
        unsetDot();
      } else {
        setDot((Long)value);
      }
      break;

    case OBO:
      if (value == null) {
        unsetObo();
      } else {
        setObo((Integer)value);
      }
      break;

    case NDOC:
      if (value == null) {
        unsetNdoc();
      } else {
        setNdoc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NPASP:
      return Integer.valueOf(getNpasp());

    case LGOT:
      return Integer.valueOf(getLgot());

    case DATAL:
      return Long.valueOf(getDatal());

    case GRI:
      return Integer.valueOf(getGri());

    case SIN:
      return Integer.valueOf(getSin());

    case PP:
      return Integer.valueOf(getPp());

    case DRG:
      return Long.valueOf(getDrg());

    case DOT:
      return Long.valueOf(getDot());

    case OBO:
      return Integer.valueOf(getObo());

    case NDOC:
      return getNdoc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NPASP:
      return isSetNpasp();
    case LGOT:
      return isSetLgot();
    case DATAL:
      return isSetDatal();
    case GRI:
      return isSetGri();
    case SIN:
      return isSetSin();
    case PP:
      return isSetPp();
    case DRG:
      return isSetDrg();
    case DOT:
      return isSetDot();
    case OBO:
      return isSetObo();
    case NDOC:
      return isSetNdoc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Lgota)
      return this.equals((Lgota)that);
    return false;
  }

  public boolean equals(Lgota that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_npasp = true && this.isSetNpasp();
    boolean that_present_npasp = true && that.isSetNpasp();
    if (this_present_npasp || that_present_npasp) {
      if (!(this_present_npasp && that_present_npasp))
        return false;
      if (this.npasp != that.npasp)
        return false;
    }

    boolean this_present_lgot = true && this.isSetLgot();
    boolean that_present_lgot = true && that.isSetLgot();
    if (this_present_lgot || that_present_lgot) {
      if (!(this_present_lgot && that_present_lgot))
        return false;
      if (this.lgot != that.lgot)
        return false;
    }

    boolean this_present_datal = true && this.isSetDatal();
    boolean that_present_datal = true && that.isSetDatal();
    if (this_present_datal || that_present_datal) {
      if (!(this_present_datal && that_present_datal))
        return false;
      if (this.datal != that.datal)
        return false;
    }

    boolean this_present_gri = true && this.isSetGri();
    boolean that_present_gri = true && that.isSetGri();
    if (this_present_gri || that_present_gri) {
      if (!(this_present_gri && that_present_gri))
        return false;
      if (this.gri != that.gri)
        return false;
    }

    boolean this_present_sin = true && this.isSetSin();
    boolean that_present_sin = true && that.isSetSin();
    if (this_present_sin || that_present_sin) {
      if (!(this_present_sin && that_present_sin))
        return false;
      if (this.sin != that.sin)
        return false;
    }

    boolean this_present_pp = true && this.isSetPp();
    boolean that_present_pp = true && that.isSetPp();
    if (this_present_pp || that_present_pp) {
      if (!(this_present_pp && that_present_pp))
        return false;
      if (this.pp != that.pp)
        return false;
    }

    boolean this_present_drg = true && this.isSetDrg();
    boolean that_present_drg = true && that.isSetDrg();
    if (this_present_drg || that_present_drg) {
      if (!(this_present_drg && that_present_drg))
        return false;
      if (this.drg != that.drg)
        return false;
    }

    boolean this_present_dot = true && this.isSetDot();
    boolean that_present_dot = true && that.isSetDot();
    if (this_present_dot || that_present_dot) {
      if (!(this_present_dot && that_present_dot))
        return false;
      if (this.dot != that.dot)
        return false;
    }

    boolean this_present_obo = true && this.isSetObo();
    boolean that_present_obo = true && that.isSetObo();
    if (this_present_obo || that_present_obo) {
      if (!(this_present_obo && that_present_obo))
        return false;
      if (this.obo != that.obo)
        return false;
    }

    boolean this_present_ndoc = true && this.isSetNdoc();
    boolean that_present_ndoc = true && that.isSetNdoc();
    if (this_present_ndoc || that_present_ndoc) {
      if (!(this_present_ndoc && that_present_ndoc))
        return false;
      if (!this.ndoc.equals(that.ndoc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Lgota other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Lgota typedOther = (Lgota)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNpasp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLgot()).compareTo(typedOther.isSetLgot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLgot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lgot, typedOther.lgot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatal()).compareTo(typedOther.isSetDatal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datal, typedOther.datal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGri()).compareTo(typedOther.isSetGri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gri, typedOther.gri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSin()).compareTo(typedOther.isSetSin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sin, typedOther.sin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPp()).compareTo(typedOther.isSetPp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pp, typedOther.pp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrg()).compareTo(typedOther.isSetDrg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drg, typedOther.drg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDot()).compareTo(typedOther.isSetDot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dot, typedOther.dot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObo()).compareTo(typedOther.isSetObo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obo, typedOther.obo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNdoc()).compareTo(typedOther.isSetNdoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNdoc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ndoc, typedOther.ndoc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Lgota(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetNpasp()) {
      if (!first) sb.append(", ");
      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
    }
    if (isSetLgot()) {
      if (!first) sb.append(", ");
      sb.append("lgot:");
      sb.append(this.lgot);
      first = false;
    }
    if (isSetDatal()) {
      if (!first) sb.append(", ");
      sb.append("datal:");
      sb.append(this.datal);
      first = false;
    }
    if (isSetGri()) {
      if (!first) sb.append(", ");
      sb.append("gri:");
      sb.append(this.gri);
      first = false;
    }
    if (isSetSin()) {
      if (!first) sb.append(", ");
      sb.append("sin:");
      sb.append(this.sin);
      first = false;
    }
    if (isSetPp()) {
      if (!first) sb.append(", ");
      sb.append("pp:");
      sb.append(this.pp);
      first = false;
    }
    if (isSetDrg()) {
      if (!first) sb.append(", ");
      sb.append("drg:");
      sb.append(this.drg);
      first = false;
    }
    if (isSetDot()) {
      if (!first) sb.append(", ");
      sb.append("dot:");
      sb.append(this.dot);
      first = false;
    }
    if (isSetObo()) {
      if (!first) sb.append(", ");
      sb.append("obo:");
      sb.append(this.obo);
      first = false;
    }
    if (isSetNdoc()) {
      if (!first) sb.append(", ");
      sb.append("ndoc:");
      if (this.ndoc == null) {
        sb.append("null");
      } else {
        sb.append(this.ndoc);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LgotaStandardSchemeFactory implements SchemeFactory {
    public LgotaStandardScheme getScheme() {
      return new LgotaStandardScheme();
    }
  }

  private static class LgotaStandardScheme extends StandardScheme<Lgota> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Lgota struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NPASP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.npasp = iprot.readI32();
              struct.setNpaspIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LGOT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lgot = iprot.readI32();
              struct.setLgotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datal = iprot.readI64();
              struct.setDatalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GRI
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gri = iprot.readI32();
              struct.setGriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sin = iprot.readI32();
              struct.setSinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pp = iprot.readI32();
              struct.setPpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DRG
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.drg = iprot.readI64();
              struct.setDrgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DOT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dot = iprot.readI64();
              struct.setDotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OBO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.obo = iprot.readI32();
              struct.setOboIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NDOC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ndoc = iprot.readString();
              struct.setNdocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Lgota struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNpasp()) {
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLgot()) {
        oprot.writeFieldBegin(LGOT_FIELD_DESC);
        oprot.writeI32(struct.lgot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDatal()) {
        oprot.writeFieldBegin(DATAL_FIELD_DESC);
        oprot.writeI64(struct.datal);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGri()) {
        oprot.writeFieldBegin(GRI_FIELD_DESC);
        oprot.writeI32(struct.gri);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSin()) {
        oprot.writeFieldBegin(SIN_FIELD_DESC);
        oprot.writeI32(struct.sin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPp()) {
        oprot.writeFieldBegin(PP_FIELD_DESC);
        oprot.writeI32(struct.pp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDrg()) {
        oprot.writeFieldBegin(DRG_FIELD_DESC);
        oprot.writeI64(struct.drg);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDot()) {
        oprot.writeFieldBegin(DOT_FIELD_DESC);
        oprot.writeI64(struct.dot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetObo()) {
        oprot.writeFieldBegin(OBO_FIELD_DESC);
        oprot.writeI32(struct.obo);
        oprot.writeFieldEnd();
      }
      if (struct.ndoc != null) {
        if (struct.isSetNdoc()) {
          oprot.writeFieldBegin(NDOC_FIELD_DESC);
          oprot.writeString(struct.ndoc);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LgotaTupleSchemeFactory implements SchemeFactory {
    public LgotaTupleScheme getScheme() {
      return new LgotaTupleScheme();
    }
  }

  private static class LgotaTupleScheme extends TupleScheme<Lgota> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Lgota struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetNpasp()) {
        optionals.set(1);
      }
      if (struct.isSetLgot()) {
        optionals.set(2);
      }
      if (struct.isSetDatal()) {
        optionals.set(3);
      }
      if (struct.isSetGri()) {
        optionals.set(4);
      }
      if (struct.isSetSin()) {
        optionals.set(5);
      }
      if (struct.isSetPp()) {
        optionals.set(6);
      }
      if (struct.isSetDrg()) {
        optionals.set(7);
      }
      if (struct.isSetDot()) {
        optionals.set(8);
      }
      if (struct.isSetObo()) {
        optionals.set(9);
      }
      if (struct.isSetNdoc()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetNpasp()) {
        oprot.writeI32(struct.npasp);
      }
      if (struct.isSetLgot()) {
        oprot.writeI32(struct.lgot);
      }
      if (struct.isSetDatal()) {
        oprot.writeI64(struct.datal);
      }
      if (struct.isSetGri()) {
        oprot.writeI32(struct.gri);
      }
      if (struct.isSetSin()) {
        oprot.writeI32(struct.sin);
      }
      if (struct.isSetPp()) {
        oprot.writeI32(struct.pp);
      }
      if (struct.isSetDrg()) {
        oprot.writeI64(struct.drg);
      }
      if (struct.isSetDot()) {
        oprot.writeI64(struct.dot);
      }
      if (struct.isSetObo()) {
        oprot.writeI32(struct.obo);
      }
      if (struct.isSetNdoc()) {
        oprot.writeString(struct.ndoc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Lgota struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.npasp = iprot.readI32();
        struct.setNpaspIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lgot = iprot.readI32();
        struct.setLgotIsSet(true);
      }
      if (incoming.get(3)) {
        struct.datal = iprot.readI64();
        struct.setDatalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.gri = iprot.readI32();
        struct.setGriIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sin = iprot.readI32();
        struct.setSinIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pp = iprot.readI32();
        struct.setPpIsSet(true);
      }
      if (incoming.get(7)) {
        struct.drg = iprot.readI64();
        struct.setDrgIsSet(true);
      }
      if (incoming.get(8)) {
        struct.dot = iprot.readI64();
        struct.setDotIsSet(true);
      }
      if (incoming.get(9)) {
        struct.obo = iprot.readI32();
        struct.setOboIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ndoc = iprot.readString();
        struct.setNdocIsSet(true);
      }
    }
  }

}

