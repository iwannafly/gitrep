/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftServerAutoProc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Patient implements org.apache.thrift.TBase<Patient, Patient._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Patient");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FAM_FIELD_DESC = new org.apache.thrift.protocol.TField("fam", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IM_FIELD_DESC = new org.apache.thrift.protocol.TField("im", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OT_FIELD_DESC = new org.apache.thrift.protocol.TField("ot", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField POL_FIELD_DESC = new org.apache.thrift.protocol.TField("pol", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("datar", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField POMS_TDOC_FIELD_DESC = new org.apache.thrift.protocol.TField("poms_tdoc", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField POMS_SER_FIELD_DESC = new org.apache.thrift.protocol.TField("poms_ser", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField POMS_NOM_FIELD_DESC = new org.apache.thrift.protocol.TField("poms_nom", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TDOC_FIELD_DESC = new org.apache.thrift.protocol.TField("tdoc", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField DOCSER_FIELD_DESC = new org.apache.thrift.protocol.TField("docser", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DOCNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("docnum", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField DATADOC_FIELD_DESC = new org.apache.thrift.protocol.TField("datadoc", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField SNILS_FIELD_DESC = new org.apache.thrift.protocol.TField("snils", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField ADP_OBL_FIELD_DESC = new org.apache.thrift.protocol.TField("adp_obl", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField ADP_RAION_FIELD_DESC = new org.apache.thrift.protocol.TField("adp_raion", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField ADP_GOROD_FIELD_DESC = new org.apache.thrift.protocol.TField("adp_gorod", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField ADP_UL_FIELD_DESC = new org.apache.thrift.protocol.TField("adp_ul", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ADP_DOM_FIELD_DESC = new org.apache.thrift.protocol.TField("adp_dom", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField ADP_KORP_FIELD_DESC = new org.apache.thrift.protocol.TField("adp_korp", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField ADP_KV_FIELD_DESC = new org.apache.thrift.protocol.TField("adp_kv", org.apache.thrift.protocol.TType.STRING, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PatientStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PatientTupleSchemeFactory());
  }

  public int id; // optional
  public int npasp; // optional
  public String fam; // optional
  public String im; // optional
  public String ot; // optional
  public int pol; // optional
  public long datar; // optional
  public int poms_tdoc; // optional
  public String poms_ser; // optional
  public String poms_nom; // optional
  public int tdoc; // optional
  public String docser; // optional
  public String docnum; // optional
  public long datadoc; // optional
  public String snils; // optional
  public String adp_obl; // optional
  public String adp_raion; // optional
  public String adp_gorod; // optional
  public String adp_ul; // optional
  public String adp_dom; // optional
  public String adp_korp; // optional
  public String adp_kv; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NPASP((short)2, "npasp"),
    FAM((short)3, "fam"),
    IM((short)4, "im"),
    OT((short)5, "ot"),
    POL((short)6, "pol"),
    DATAR((short)7, "datar"),
    POMS_TDOC((short)8, "poms_tdoc"),
    POMS_SER((short)9, "poms_ser"),
    POMS_NOM((short)10, "poms_nom"),
    TDOC((short)11, "tdoc"),
    DOCSER((short)12, "docser"),
    DOCNUM((short)13, "docnum"),
    DATADOC((short)14, "datadoc"),
    SNILS((short)15, "snils"),
    ADP_OBL((short)16, "adp_obl"),
    ADP_RAION((short)17, "adp_raion"),
    ADP_GOROD((short)18, "adp_gorod"),
    ADP_UL((short)19, "adp_ul"),
    ADP_DOM((short)20, "adp_dom"),
    ADP_KORP((short)21, "adp_korp"),
    ADP_KV((short)22, "adp_kv");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NPASP
          return NPASP;
        case 3: // FAM
          return FAM;
        case 4: // IM
          return IM;
        case 5: // OT
          return OT;
        case 6: // POL
          return POL;
        case 7: // DATAR
          return DATAR;
        case 8: // POMS_TDOC
          return POMS_TDOC;
        case 9: // POMS_SER
          return POMS_SER;
        case 10: // POMS_NOM
          return POMS_NOM;
        case 11: // TDOC
          return TDOC;
        case 12: // DOCSER
          return DOCSER;
        case 13: // DOCNUM
          return DOCNUM;
        case 14: // DATADOC
          return DATADOC;
        case 15: // SNILS
          return SNILS;
        case 16: // ADP_OBL
          return ADP_OBL;
        case 17: // ADP_RAION
          return ADP_RAION;
        case 18: // ADP_GOROD
          return ADP_GOROD;
        case 19: // ADP_UL
          return ADP_UL;
        case 20: // ADP_DOM
          return ADP_DOM;
        case 21: // ADP_KORP
          return ADP_KORP;
        case 22: // ADP_KV
          return ADP_KV;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __NPASP_ISSET_ID = 1;
  private static final int __POL_ISSET_ID = 2;
  private static final int __DATAR_ISSET_ID = 3;
  private static final int __POMS_TDOC_ISSET_ID = 4;
  private static final int __TDOC_ISSET_ID = 5;
  private static final int __DATADOC_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ID,_Fields.NPASP,_Fields.FAM,_Fields.IM,_Fields.OT,_Fields.POL,_Fields.DATAR,_Fields.POMS_TDOC,_Fields.POMS_SER,_Fields.POMS_NOM,_Fields.TDOC,_Fields.DOCSER,_Fields.DOCNUM,_Fields.DATADOC,_Fields.SNILS,_Fields.ADP_OBL,_Fields.ADP_RAION,_Fields.ADP_GOROD,_Fields.ADP_UL,_Fields.ADP_DOM,_Fields.ADP_KORP,_Fields.ADP_KV};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAM, new org.apache.thrift.meta_data.FieldMetaData("fam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IM, new org.apache.thrift.meta_data.FieldMetaData("im", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OT, new org.apache.thrift.meta_data.FieldMetaData("ot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POL, new org.apache.thrift.meta_data.FieldMetaData("pol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATAR, new org.apache.thrift.meta_data.FieldMetaData("datar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POMS_TDOC, new org.apache.thrift.meta_data.FieldMetaData("poms_tdoc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POMS_SER, new org.apache.thrift.meta_data.FieldMetaData("poms_ser", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POMS_NOM, new org.apache.thrift.meta_data.FieldMetaData("poms_nom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TDOC, new org.apache.thrift.meta_data.FieldMetaData("tdoc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOCSER, new org.apache.thrift.meta_data.FieldMetaData("docser", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCNUM, new org.apache.thrift.meta_data.FieldMetaData("docnum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATADOC, new org.apache.thrift.meta_data.FieldMetaData("datadoc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SNILS, new org.apache.thrift.meta_data.FieldMetaData("snils", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADP_OBL, new org.apache.thrift.meta_data.FieldMetaData("adp_obl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADP_RAION, new org.apache.thrift.meta_data.FieldMetaData("adp_raion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADP_GOROD, new org.apache.thrift.meta_data.FieldMetaData("adp_gorod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADP_UL, new org.apache.thrift.meta_data.FieldMetaData("adp_ul", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADP_DOM, new org.apache.thrift.meta_data.FieldMetaData("adp_dom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADP_KORP, new org.apache.thrift.meta_data.FieldMetaData("adp_korp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADP_KV, new org.apache.thrift.meta_data.FieldMetaData("adp_kv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Patient.class, metaDataMap);
  }

  public Patient() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Patient(Patient other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.npasp = other.npasp;
    if (other.isSetFam()) {
      this.fam = other.fam;
    }
    if (other.isSetIm()) {
      this.im = other.im;
    }
    if (other.isSetOt()) {
      this.ot = other.ot;
    }
    this.pol = other.pol;
    this.datar = other.datar;
    this.poms_tdoc = other.poms_tdoc;
    if (other.isSetPoms_ser()) {
      this.poms_ser = other.poms_ser;
    }
    if (other.isSetPoms_nom()) {
      this.poms_nom = other.poms_nom;
    }
    this.tdoc = other.tdoc;
    if (other.isSetDocser()) {
      this.docser = other.docser;
    }
    if (other.isSetDocnum()) {
      this.docnum = other.docnum;
    }
    this.datadoc = other.datadoc;
    if (other.isSetSnils()) {
      this.snils = other.snils;
    }
    if (other.isSetAdp_obl()) {
      this.adp_obl = other.adp_obl;
    }
    if (other.isSetAdp_raion()) {
      this.adp_raion = other.adp_raion;
    }
    if (other.isSetAdp_gorod()) {
      this.adp_gorod = other.adp_gorod;
    }
    if (other.isSetAdp_ul()) {
      this.adp_ul = other.adp_ul;
    }
    if (other.isSetAdp_dom()) {
      this.adp_dom = other.adp_dom;
    }
    if (other.isSetAdp_korp()) {
      this.adp_korp = other.adp_korp;
    }
    if (other.isSetAdp_kv()) {
      this.adp_kv = other.adp_kv;
    }
  }

  public Patient deepCopy() {
    return new Patient(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setNpaspIsSet(false);
    this.npasp = 0;
    this.fam = null;
    this.im = null;
    this.ot = null;
    setPolIsSet(false);
    this.pol = 0;
    setDatarIsSet(false);
    this.datar = 0;
    setPoms_tdocIsSet(false);
    this.poms_tdoc = 0;
    this.poms_ser = null;
    this.poms_nom = null;
    setTdocIsSet(false);
    this.tdoc = 0;
    this.docser = null;
    this.docnum = null;
    setDatadocIsSet(false);
    this.datadoc = 0;
    this.snils = null;
    this.adp_obl = null;
    this.adp_raion = null;
    this.adp_gorod = null;
    this.adp_ul = null;
    this.adp_dom = null;
    this.adp_korp = null;
    this.adp_kv = null;
  }

  public int getId() {
    return this.id;
  }

  public Patient setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getNpasp() {
    return this.npasp;
  }

  public Patient setNpasp(int npasp) {
    this.npasp = npasp;
    setNpaspIsSet(true);
    return this;
  }

  public void unsetNpasp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NPASP_ISSET_ID);
  }

  /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
  public boolean isSetNpasp() {
    return EncodingUtils.testBit(__isset_bitfield, __NPASP_ISSET_ID);
  }

  public void setNpaspIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NPASP_ISSET_ID, value);
  }

  public String getFam() {
    return this.fam;
  }

  public Patient setFam(String fam) {
    this.fam = fam;
    return this;
  }

  public void unsetFam() {
    this.fam = null;
  }

  /** Returns true if field fam is set (has been assigned a value) and false otherwise */
  public boolean isSetFam() {
    return this.fam != null;
  }

  public void setFamIsSet(boolean value) {
    if (!value) {
      this.fam = null;
    }
  }

  public String getIm() {
    return this.im;
  }

  public Patient setIm(String im) {
    this.im = im;
    return this;
  }

  public void unsetIm() {
    this.im = null;
  }

  /** Returns true if field im is set (has been assigned a value) and false otherwise */
  public boolean isSetIm() {
    return this.im != null;
  }

  public void setImIsSet(boolean value) {
    if (!value) {
      this.im = null;
    }
  }

  public String getOt() {
    return this.ot;
  }

  public Patient setOt(String ot) {
    this.ot = ot;
    return this;
  }

  public void unsetOt() {
    this.ot = null;
  }

  /** Returns true if field ot is set (has been assigned a value) and false otherwise */
  public boolean isSetOt() {
    return this.ot != null;
  }

  public void setOtIsSet(boolean value) {
    if (!value) {
      this.ot = null;
    }
  }

  public int getPol() {
    return this.pol;
  }

  public Patient setPol(int pol) {
    this.pol = pol;
    setPolIsSet(true);
    return this;
  }

  public void unsetPol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POL_ISSET_ID);
  }

  /** Returns true if field pol is set (has been assigned a value) and false otherwise */
  public boolean isSetPol() {
    return EncodingUtils.testBit(__isset_bitfield, __POL_ISSET_ID);
  }

  public void setPolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POL_ISSET_ID, value);
  }

  public long getDatar() {
    return this.datar;
  }

  public Patient setDatar(long datar) {
    this.datar = datar;
    setDatarIsSet(true);
    return this;
  }

  public void unsetDatar() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAR_ISSET_ID);
  }

  /** Returns true if field datar is set (has been assigned a value) and false otherwise */
  public boolean isSetDatar() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAR_ISSET_ID);
  }

  public void setDatarIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAR_ISSET_ID, value);
  }

  public int getPoms_tdoc() {
    return this.poms_tdoc;
  }

  public Patient setPoms_tdoc(int poms_tdoc) {
    this.poms_tdoc = poms_tdoc;
    setPoms_tdocIsSet(true);
    return this;
  }

  public void unsetPoms_tdoc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POMS_TDOC_ISSET_ID);
  }

  /** Returns true if field poms_tdoc is set (has been assigned a value) and false otherwise */
  public boolean isSetPoms_tdoc() {
    return EncodingUtils.testBit(__isset_bitfield, __POMS_TDOC_ISSET_ID);
  }

  public void setPoms_tdocIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POMS_TDOC_ISSET_ID, value);
  }

  public String getPoms_ser() {
    return this.poms_ser;
  }

  public Patient setPoms_ser(String poms_ser) {
    this.poms_ser = poms_ser;
    return this;
  }

  public void unsetPoms_ser() {
    this.poms_ser = null;
  }

  /** Returns true if field poms_ser is set (has been assigned a value) and false otherwise */
  public boolean isSetPoms_ser() {
    return this.poms_ser != null;
  }

  public void setPoms_serIsSet(boolean value) {
    if (!value) {
      this.poms_ser = null;
    }
  }

  public String getPoms_nom() {
    return this.poms_nom;
  }

  public Patient setPoms_nom(String poms_nom) {
    this.poms_nom = poms_nom;
    return this;
  }

  public void unsetPoms_nom() {
    this.poms_nom = null;
  }

  /** Returns true if field poms_nom is set (has been assigned a value) and false otherwise */
  public boolean isSetPoms_nom() {
    return this.poms_nom != null;
  }

  public void setPoms_nomIsSet(boolean value) {
    if (!value) {
      this.poms_nom = null;
    }
  }

  public int getTdoc() {
    return this.tdoc;
  }

  public Patient setTdoc(int tdoc) {
    this.tdoc = tdoc;
    setTdocIsSet(true);
    return this;
  }

  public void unsetTdoc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TDOC_ISSET_ID);
  }

  /** Returns true if field tdoc is set (has been assigned a value) and false otherwise */
  public boolean isSetTdoc() {
    return EncodingUtils.testBit(__isset_bitfield, __TDOC_ISSET_ID);
  }

  public void setTdocIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TDOC_ISSET_ID, value);
  }

  public String getDocser() {
    return this.docser;
  }

  public Patient setDocser(String docser) {
    this.docser = docser;
    return this;
  }

  public void unsetDocser() {
    this.docser = null;
  }

  /** Returns true if field docser is set (has been assigned a value) and false otherwise */
  public boolean isSetDocser() {
    return this.docser != null;
  }

  public void setDocserIsSet(boolean value) {
    if (!value) {
      this.docser = null;
    }
  }

  public String getDocnum() {
    return this.docnum;
  }

  public Patient setDocnum(String docnum) {
    this.docnum = docnum;
    return this;
  }

  public void unsetDocnum() {
    this.docnum = null;
  }

  /** Returns true if field docnum is set (has been assigned a value) and false otherwise */
  public boolean isSetDocnum() {
    return this.docnum != null;
  }

  public void setDocnumIsSet(boolean value) {
    if (!value) {
      this.docnum = null;
    }
  }

  public long getDatadoc() {
    return this.datadoc;
  }

  public Patient setDatadoc(long datadoc) {
    this.datadoc = datadoc;
    setDatadocIsSet(true);
    return this;
  }

  public void unsetDatadoc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATADOC_ISSET_ID);
  }

  /** Returns true if field datadoc is set (has been assigned a value) and false otherwise */
  public boolean isSetDatadoc() {
    return EncodingUtils.testBit(__isset_bitfield, __DATADOC_ISSET_ID);
  }

  public void setDatadocIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATADOC_ISSET_ID, value);
  }

  public String getSnils() {
    return this.snils;
  }

  public Patient setSnils(String snils) {
    this.snils = snils;
    return this;
  }

  public void unsetSnils() {
    this.snils = null;
  }

  /** Returns true if field snils is set (has been assigned a value) and false otherwise */
  public boolean isSetSnils() {
    return this.snils != null;
  }

  public void setSnilsIsSet(boolean value) {
    if (!value) {
      this.snils = null;
    }
  }

  public String getAdp_obl() {
    return this.adp_obl;
  }

  public Patient setAdp_obl(String adp_obl) {
    this.adp_obl = adp_obl;
    return this;
  }

  public void unsetAdp_obl() {
    this.adp_obl = null;
  }

  /** Returns true if field adp_obl is set (has been assigned a value) and false otherwise */
  public boolean isSetAdp_obl() {
    return this.adp_obl != null;
  }

  public void setAdp_oblIsSet(boolean value) {
    if (!value) {
      this.adp_obl = null;
    }
  }

  public String getAdp_raion() {
    return this.adp_raion;
  }

  public Patient setAdp_raion(String adp_raion) {
    this.adp_raion = adp_raion;
    return this;
  }

  public void unsetAdp_raion() {
    this.adp_raion = null;
  }

  /** Returns true if field adp_raion is set (has been assigned a value) and false otherwise */
  public boolean isSetAdp_raion() {
    return this.adp_raion != null;
  }

  public void setAdp_raionIsSet(boolean value) {
    if (!value) {
      this.adp_raion = null;
    }
  }

  public String getAdp_gorod() {
    return this.adp_gorod;
  }

  public Patient setAdp_gorod(String adp_gorod) {
    this.adp_gorod = adp_gorod;
    return this;
  }

  public void unsetAdp_gorod() {
    this.adp_gorod = null;
  }

  /** Returns true if field adp_gorod is set (has been assigned a value) and false otherwise */
  public boolean isSetAdp_gorod() {
    return this.adp_gorod != null;
  }

  public void setAdp_gorodIsSet(boolean value) {
    if (!value) {
      this.adp_gorod = null;
    }
  }

  public String getAdp_ul() {
    return this.adp_ul;
  }

  public Patient setAdp_ul(String adp_ul) {
    this.adp_ul = adp_ul;
    return this;
  }

  public void unsetAdp_ul() {
    this.adp_ul = null;
  }

  /** Returns true if field adp_ul is set (has been assigned a value) and false otherwise */
  public boolean isSetAdp_ul() {
    return this.adp_ul != null;
  }

  public void setAdp_ulIsSet(boolean value) {
    if (!value) {
      this.adp_ul = null;
    }
  }

  public String getAdp_dom() {
    return this.adp_dom;
  }

  public Patient setAdp_dom(String adp_dom) {
    this.adp_dom = adp_dom;
    return this;
  }

  public void unsetAdp_dom() {
    this.adp_dom = null;
  }

  /** Returns true if field adp_dom is set (has been assigned a value) and false otherwise */
  public boolean isSetAdp_dom() {
    return this.adp_dom != null;
  }

  public void setAdp_domIsSet(boolean value) {
    if (!value) {
      this.adp_dom = null;
    }
  }

  public String getAdp_korp() {
    return this.adp_korp;
  }

  public Patient setAdp_korp(String adp_korp) {
    this.adp_korp = adp_korp;
    return this;
  }

  public void unsetAdp_korp() {
    this.adp_korp = null;
  }

  /** Returns true if field adp_korp is set (has been assigned a value) and false otherwise */
  public boolean isSetAdp_korp() {
    return this.adp_korp != null;
  }

  public void setAdp_korpIsSet(boolean value) {
    if (!value) {
      this.adp_korp = null;
    }
  }

  public String getAdp_kv() {
    return this.adp_kv;
  }

  public Patient setAdp_kv(String adp_kv) {
    this.adp_kv = adp_kv;
    return this;
  }

  public void unsetAdp_kv() {
    this.adp_kv = null;
  }

  /** Returns true if field adp_kv is set (has been assigned a value) and false otherwise */
  public boolean isSetAdp_kv() {
    return this.adp_kv != null;
  }

  public void setAdp_kvIsSet(boolean value) {
    if (!value) {
      this.adp_kv = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NPASP:
      if (value == null) {
        unsetNpasp();
      } else {
        setNpasp((Integer)value);
      }
      break;

    case FAM:
      if (value == null) {
        unsetFam();
      } else {
        setFam((String)value);
      }
      break;

    case IM:
      if (value == null) {
        unsetIm();
      } else {
        setIm((String)value);
      }
      break;

    case OT:
      if (value == null) {
        unsetOt();
      } else {
        setOt((String)value);
      }
      break;

    case POL:
      if (value == null) {
        unsetPol();
      } else {
        setPol((Integer)value);
      }
      break;

    case DATAR:
      if (value == null) {
        unsetDatar();
      } else {
        setDatar((Long)value);
      }
      break;

    case POMS_TDOC:
      if (value == null) {
        unsetPoms_tdoc();
      } else {
        setPoms_tdoc((Integer)value);
      }
      break;

    case POMS_SER:
      if (value == null) {
        unsetPoms_ser();
      } else {
        setPoms_ser((String)value);
      }
      break;

    case POMS_NOM:
      if (value == null) {
        unsetPoms_nom();
      } else {
        setPoms_nom((String)value);
      }
      break;

    case TDOC:
      if (value == null) {
        unsetTdoc();
      } else {
        setTdoc((Integer)value);
      }
      break;

    case DOCSER:
      if (value == null) {
        unsetDocser();
      } else {
        setDocser((String)value);
      }
      break;

    case DOCNUM:
      if (value == null) {
        unsetDocnum();
      } else {
        setDocnum((String)value);
      }
      break;

    case DATADOC:
      if (value == null) {
        unsetDatadoc();
      } else {
        setDatadoc((Long)value);
      }
      break;

    case SNILS:
      if (value == null) {
        unsetSnils();
      } else {
        setSnils((String)value);
      }
      break;

    case ADP_OBL:
      if (value == null) {
        unsetAdp_obl();
      } else {
        setAdp_obl((String)value);
      }
      break;

    case ADP_RAION:
      if (value == null) {
        unsetAdp_raion();
      } else {
        setAdp_raion((String)value);
      }
      break;

    case ADP_GOROD:
      if (value == null) {
        unsetAdp_gorod();
      } else {
        setAdp_gorod((String)value);
      }
      break;

    case ADP_UL:
      if (value == null) {
        unsetAdp_ul();
      } else {
        setAdp_ul((String)value);
      }
      break;

    case ADP_DOM:
      if (value == null) {
        unsetAdp_dom();
      } else {
        setAdp_dom((String)value);
      }
      break;

    case ADP_KORP:
      if (value == null) {
        unsetAdp_korp();
      } else {
        setAdp_korp((String)value);
      }
      break;

    case ADP_KV:
      if (value == null) {
        unsetAdp_kv();
      } else {
        setAdp_kv((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NPASP:
      return Integer.valueOf(getNpasp());

    case FAM:
      return getFam();

    case IM:
      return getIm();

    case OT:
      return getOt();

    case POL:
      return Integer.valueOf(getPol());

    case DATAR:
      return Long.valueOf(getDatar());

    case POMS_TDOC:
      return Integer.valueOf(getPoms_tdoc());

    case POMS_SER:
      return getPoms_ser();

    case POMS_NOM:
      return getPoms_nom();

    case TDOC:
      return Integer.valueOf(getTdoc());

    case DOCSER:
      return getDocser();

    case DOCNUM:
      return getDocnum();

    case DATADOC:
      return Long.valueOf(getDatadoc());

    case SNILS:
      return getSnils();

    case ADP_OBL:
      return getAdp_obl();

    case ADP_RAION:
      return getAdp_raion();

    case ADP_GOROD:
      return getAdp_gorod();

    case ADP_UL:
      return getAdp_ul();

    case ADP_DOM:
      return getAdp_dom();

    case ADP_KORP:
      return getAdp_korp();

    case ADP_KV:
      return getAdp_kv();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NPASP:
      return isSetNpasp();
    case FAM:
      return isSetFam();
    case IM:
      return isSetIm();
    case OT:
      return isSetOt();
    case POL:
      return isSetPol();
    case DATAR:
      return isSetDatar();
    case POMS_TDOC:
      return isSetPoms_tdoc();
    case POMS_SER:
      return isSetPoms_ser();
    case POMS_NOM:
      return isSetPoms_nom();
    case TDOC:
      return isSetTdoc();
    case DOCSER:
      return isSetDocser();
    case DOCNUM:
      return isSetDocnum();
    case DATADOC:
      return isSetDatadoc();
    case SNILS:
      return isSetSnils();
    case ADP_OBL:
      return isSetAdp_obl();
    case ADP_RAION:
      return isSetAdp_raion();
    case ADP_GOROD:
      return isSetAdp_gorod();
    case ADP_UL:
      return isSetAdp_ul();
    case ADP_DOM:
      return isSetAdp_dom();
    case ADP_KORP:
      return isSetAdp_korp();
    case ADP_KV:
      return isSetAdp_kv();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Patient)
      return this.equals((Patient)that);
    return false;
  }

  public boolean equals(Patient that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_npasp = true && this.isSetNpasp();
    boolean that_present_npasp = true && that.isSetNpasp();
    if (this_present_npasp || that_present_npasp) {
      if (!(this_present_npasp && that_present_npasp))
        return false;
      if (this.npasp != that.npasp)
        return false;
    }

    boolean this_present_fam = true && this.isSetFam();
    boolean that_present_fam = true && that.isSetFam();
    if (this_present_fam || that_present_fam) {
      if (!(this_present_fam && that_present_fam))
        return false;
      if (!this.fam.equals(that.fam))
        return false;
    }

    boolean this_present_im = true && this.isSetIm();
    boolean that_present_im = true && that.isSetIm();
    if (this_present_im || that_present_im) {
      if (!(this_present_im && that_present_im))
        return false;
      if (!this.im.equals(that.im))
        return false;
    }

    boolean this_present_ot = true && this.isSetOt();
    boolean that_present_ot = true && that.isSetOt();
    if (this_present_ot || that_present_ot) {
      if (!(this_present_ot && that_present_ot))
        return false;
      if (!this.ot.equals(that.ot))
        return false;
    }

    boolean this_present_pol = true && this.isSetPol();
    boolean that_present_pol = true && that.isSetPol();
    if (this_present_pol || that_present_pol) {
      if (!(this_present_pol && that_present_pol))
        return false;
      if (this.pol != that.pol)
        return false;
    }

    boolean this_present_datar = true && this.isSetDatar();
    boolean that_present_datar = true && that.isSetDatar();
    if (this_present_datar || that_present_datar) {
      if (!(this_present_datar && that_present_datar))
        return false;
      if (this.datar != that.datar)
        return false;
    }

    boolean this_present_poms_tdoc = true && this.isSetPoms_tdoc();
    boolean that_present_poms_tdoc = true && that.isSetPoms_tdoc();
    if (this_present_poms_tdoc || that_present_poms_tdoc) {
      if (!(this_present_poms_tdoc && that_present_poms_tdoc))
        return false;
      if (this.poms_tdoc != that.poms_tdoc)
        return false;
    }

    boolean this_present_poms_ser = true && this.isSetPoms_ser();
    boolean that_present_poms_ser = true && that.isSetPoms_ser();
    if (this_present_poms_ser || that_present_poms_ser) {
      if (!(this_present_poms_ser && that_present_poms_ser))
        return false;
      if (!this.poms_ser.equals(that.poms_ser))
        return false;
    }

    boolean this_present_poms_nom = true && this.isSetPoms_nom();
    boolean that_present_poms_nom = true && that.isSetPoms_nom();
    if (this_present_poms_nom || that_present_poms_nom) {
      if (!(this_present_poms_nom && that_present_poms_nom))
        return false;
      if (!this.poms_nom.equals(that.poms_nom))
        return false;
    }

    boolean this_present_tdoc = true && this.isSetTdoc();
    boolean that_present_tdoc = true && that.isSetTdoc();
    if (this_present_tdoc || that_present_tdoc) {
      if (!(this_present_tdoc && that_present_tdoc))
        return false;
      if (this.tdoc != that.tdoc)
        return false;
    }

    boolean this_present_docser = true && this.isSetDocser();
    boolean that_present_docser = true && that.isSetDocser();
    if (this_present_docser || that_present_docser) {
      if (!(this_present_docser && that_present_docser))
        return false;
      if (!this.docser.equals(that.docser))
        return false;
    }

    boolean this_present_docnum = true && this.isSetDocnum();
    boolean that_present_docnum = true && that.isSetDocnum();
    if (this_present_docnum || that_present_docnum) {
      if (!(this_present_docnum && that_present_docnum))
        return false;
      if (!this.docnum.equals(that.docnum))
        return false;
    }

    boolean this_present_datadoc = true && this.isSetDatadoc();
    boolean that_present_datadoc = true && that.isSetDatadoc();
    if (this_present_datadoc || that_present_datadoc) {
      if (!(this_present_datadoc && that_present_datadoc))
        return false;
      if (this.datadoc != that.datadoc)
        return false;
    }

    boolean this_present_snils = true && this.isSetSnils();
    boolean that_present_snils = true && that.isSetSnils();
    if (this_present_snils || that_present_snils) {
      if (!(this_present_snils && that_present_snils))
        return false;
      if (!this.snils.equals(that.snils))
        return false;
    }

    boolean this_present_adp_obl = true && this.isSetAdp_obl();
    boolean that_present_adp_obl = true && that.isSetAdp_obl();
    if (this_present_adp_obl || that_present_adp_obl) {
      if (!(this_present_adp_obl && that_present_adp_obl))
        return false;
      if (!this.adp_obl.equals(that.adp_obl))
        return false;
    }

    boolean this_present_adp_raion = true && this.isSetAdp_raion();
    boolean that_present_adp_raion = true && that.isSetAdp_raion();
    if (this_present_adp_raion || that_present_adp_raion) {
      if (!(this_present_adp_raion && that_present_adp_raion))
        return false;
      if (!this.adp_raion.equals(that.adp_raion))
        return false;
    }

    boolean this_present_adp_gorod = true && this.isSetAdp_gorod();
    boolean that_present_adp_gorod = true && that.isSetAdp_gorod();
    if (this_present_adp_gorod || that_present_adp_gorod) {
      if (!(this_present_adp_gorod && that_present_adp_gorod))
        return false;
      if (!this.adp_gorod.equals(that.adp_gorod))
        return false;
    }

    boolean this_present_adp_ul = true && this.isSetAdp_ul();
    boolean that_present_adp_ul = true && that.isSetAdp_ul();
    if (this_present_adp_ul || that_present_adp_ul) {
      if (!(this_present_adp_ul && that_present_adp_ul))
        return false;
      if (!this.adp_ul.equals(that.adp_ul))
        return false;
    }

    boolean this_present_adp_dom = true && this.isSetAdp_dom();
    boolean that_present_adp_dom = true && that.isSetAdp_dom();
    if (this_present_adp_dom || that_present_adp_dom) {
      if (!(this_present_adp_dom && that_present_adp_dom))
        return false;
      if (!this.adp_dom.equals(that.adp_dom))
        return false;
    }

    boolean this_present_adp_korp = true && this.isSetAdp_korp();
    boolean that_present_adp_korp = true && that.isSetAdp_korp();
    if (this_present_adp_korp || that_present_adp_korp) {
      if (!(this_present_adp_korp && that_present_adp_korp))
        return false;
      if (!this.adp_korp.equals(that.adp_korp))
        return false;
    }

    boolean this_present_adp_kv = true && this.isSetAdp_kv();
    boolean that_present_adp_kv = true && that.isSetAdp_kv();
    if (this_present_adp_kv || that_present_adp_kv) {
      if (!(this_present_adp_kv && that_present_adp_kv))
        return false;
      if (!this.adp_kv.equals(that.adp_kv))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Patient other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Patient typedOther = (Patient)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNpasp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFam()).compareTo(typedOther.isSetFam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fam, typedOther.fam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIm()).compareTo(typedOther.isSetIm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.im, typedOther.im);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOt()).compareTo(typedOther.isSetOt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ot, typedOther.ot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPol()).compareTo(typedOther.isSetPol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pol, typedOther.pol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatar()).compareTo(typedOther.isSetDatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datar, typedOther.datar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoms_tdoc()).compareTo(typedOther.isSetPoms_tdoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoms_tdoc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poms_tdoc, typedOther.poms_tdoc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoms_ser()).compareTo(typedOther.isSetPoms_ser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoms_ser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poms_ser, typedOther.poms_ser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoms_nom()).compareTo(typedOther.isSetPoms_nom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoms_nom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poms_nom, typedOther.poms_nom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTdoc()).compareTo(typedOther.isSetTdoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTdoc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tdoc, typedOther.tdoc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocser()).compareTo(typedOther.isSetDocser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docser, typedOther.docser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocnum()).compareTo(typedOther.isSetDocnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docnum, typedOther.docnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatadoc()).compareTo(typedOther.isSetDatadoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatadoc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datadoc, typedOther.datadoc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnils()).compareTo(typedOther.isSetSnils());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnils()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snils, typedOther.snils);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdp_obl()).compareTo(typedOther.isSetAdp_obl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdp_obl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adp_obl, typedOther.adp_obl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdp_raion()).compareTo(typedOther.isSetAdp_raion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdp_raion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adp_raion, typedOther.adp_raion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdp_gorod()).compareTo(typedOther.isSetAdp_gorod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdp_gorod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adp_gorod, typedOther.adp_gorod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdp_ul()).compareTo(typedOther.isSetAdp_ul());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdp_ul()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adp_ul, typedOther.adp_ul);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdp_dom()).compareTo(typedOther.isSetAdp_dom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdp_dom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adp_dom, typedOther.adp_dom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdp_korp()).compareTo(typedOther.isSetAdp_korp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdp_korp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adp_korp, typedOther.adp_korp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdp_kv()).compareTo(typedOther.isSetAdp_kv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdp_kv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adp_kv, typedOther.adp_kv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Patient(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetNpasp()) {
      if (!first) sb.append(", ");
      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
    }
    if (isSetFam()) {
      if (!first) sb.append(", ");
      sb.append("fam:");
      if (this.fam == null) {
        sb.append("null");
      } else {
        sb.append(this.fam);
      }
      first = false;
    }
    if (isSetIm()) {
      if (!first) sb.append(", ");
      sb.append("im:");
      if (this.im == null) {
        sb.append("null");
      } else {
        sb.append(this.im);
      }
      first = false;
    }
    if (isSetOt()) {
      if (!first) sb.append(", ");
      sb.append("ot:");
      if (this.ot == null) {
        sb.append("null");
      } else {
        sb.append(this.ot);
      }
      first = false;
    }
    if (isSetPol()) {
      if (!first) sb.append(", ");
      sb.append("pol:");
      sb.append(this.pol);
      first = false;
    }
    if (isSetDatar()) {
      if (!first) sb.append(", ");
      sb.append("datar:");
      sb.append(this.datar);
      first = false;
    }
    if (isSetPoms_tdoc()) {
      if (!first) sb.append(", ");
      sb.append("poms_tdoc:");
      sb.append(this.poms_tdoc);
      first = false;
    }
    if (isSetPoms_ser()) {
      if (!first) sb.append(", ");
      sb.append("poms_ser:");
      if (this.poms_ser == null) {
        sb.append("null");
      } else {
        sb.append(this.poms_ser);
      }
      first = false;
    }
    if (isSetPoms_nom()) {
      if (!first) sb.append(", ");
      sb.append("poms_nom:");
      if (this.poms_nom == null) {
        sb.append("null");
      } else {
        sb.append(this.poms_nom);
      }
      first = false;
    }
    if (isSetTdoc()) {
      if (!first) sb.append(", ");
      sb.append("tdoc:");
      sb.append(this.tdoc);
      first = false;
    }
    if (isSetDocser()) {
      if (!first) sb.append(", ");
      sb.append("docser:");
      if (this.docser == null) {
        sb.append("null");
      } else {
        sb.append(this.docser);
      }
      first = false;
    }
    if (isSetDocnum()) {
      if (!first) sb.append(", ");
      sb.append("docnum:");
      if (this.docnum == null) {
        sb.append("null");
      } else {
        sb.append(this.docnum);
      }
      first = false;
    }
    if (isSetDatadoc()) {
      if (!first) sb.append(", ");
      sb.append("datadoc:");
      sb.append(this.datadoc);
      first = false;
    }
    if (isSetSnils()) {
      if (!first) sb.append(", ");
      sb.append("snils:");
      if (this.snils == null) {
        sb.append("null");
      } else {
        sb.append(this.snils);
      }
      first = false;
    }
    if (isSetAdp_obl()) {
      if (!first) sb.append(", ");
      sb.append("adp_obl:");
      if (this.adp_obl == null) {
        sb.append("null");
      } else {
        sb.append(this.adp_obl);
      }
      first = false;
    }
    if (isSetAdp_raion()) {
      if (!first) sb.append(", ");
      sb.append("adp_raion:");
      if (this.adp_raion == null) {
        sb.append("null");
      } else {
        sb.append(this.adp_raion);
      }
      first = false;
    }
    if (isSetAdp_gorod()) {
      if (!first) sb.append(", ");
      sb.append("adp_gorod:");
      if (this.adp_gorod == null) {
        sb.append("null");
      } else {
        sb.append(this.adp_gorod);
      }
      first = false;
    }
    if (isSetAdp_ul()) {
      if (!first) sb.append(", ");
      sb.append("adp_ul:");
      if (this.adp_ul == null) {
        sb.append("null");
      } else {
        sb.append(this.adp_ul);
      }
      first = false;
    }
    if (isSetAdp_dom()) {
      if (!first) sb.append(", ");
      sb.append("adp_dom:");
      if (this.adp_dom == null) {
        sb.append("null");
      } else {
        sb.append(this.adp_dom);
      }
      first = false;
    }
    if (isSetAdp_korp()) {
      if (!first) sb.append(", ");
      sb.append("adp_korp:");
      if (this.adp_korp == null) {
        sb.append("null");
      } else {
        sb.append(this.adp_korp);
      }
      first = false;
    }
    if (isSetAdp_kv()) {
      if (!first) sb.append(", ");
      sb.append("adp_kv:");
      if (this.adp_kv == null) {
        sb.append("null");
      } else {
        sb.append(this.adp_kv);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PatientStandardSchemeFactory implements SchemeFactory {
    public PatientStandardScheme getScheme() {
      return new PatientStandardScheme();
    }
  }

  private static class PatientStandardScheme extends StandardScheme<Patient> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Patient struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NPASP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.npasp = iprot.readI32();
              struct.setNpaspIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fam = iprot.readString();
              struct.setFamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.im = iprot.readString();
              struct.setImIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ot = iprot.readString();
              struct.setOtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pol = iprot.readI32();
              struct.setPolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datar = iprot.readI64();
              struct.setDatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POMS_TDOC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.poms_tdoc = iprot.readI32();
              struct.setPoms_tdocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POMS_SER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.poms_ser = iprot.readString();
              struct.setPoms_serIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // POMS_NOM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.poms_nom = iprot.readString();
              struct.setPoms_nomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TDOC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tdoc = iprot.readI32();
              struct.setTdocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DOCSER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.docser = iprot.readString();
              struct.setDocserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DOCNUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.docnum = iprot.readString();
              struct.setDocnumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DATADOC
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datadoc = iprot.readI64();
              struct.setDatadocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SNILS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.snils = iprot.readString();
              struct.setSnilsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ADP_OBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adp_obl = iprot.readString();
              struct.setAdp_oblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ADP_RAION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adp_raion = iprot.readString();
              struct.setAdp_raionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ADP_GOROD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adp_gorod = iprot.readString();
              struct.setAdp_gorodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ADP_UL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adp_ul = iprot.readString();
              struct.setAdp_ulIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ADP_DOM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adp_dom = iprot.readString();
              struct.setAdp_domIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ADP_KORP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adp_korp = iprot.readString();
              struct.setAdp_korpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ADP_KV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adp_kv = iprot.readString();
              struct.setAdp_kvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Patient struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNpasp()) {
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
      }
      if (struct.fam != null) {
        if (struct.isSetFam()) {
          oprot.writeFieldBegin(FAM_FIELD_DESC);
          oprot.writeString(struct.fam);
          oprot.writeFieldEnd();
        }
      }
      if (struct.im != null) {
        if (struct.isSetIm()) {
          oprot.writeFieldBegin(IM_FIELD_DESC);
          oprot.writeString(struct.im);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ot != null) {
        if (struct.isSetOt()) {
          oprot.writeFieldBegin(OT_FIELD_DESC);
          oprot.writeString(struct.ot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPol()) {
        oprot.writeFieldBegin(POL_FIELD_DESC);
        oprot.writeI32(struct.pol);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDatar()) {
        oprot.writeFieldBegin(DATAR_FIELD_DESC);
        oprot.writeI64(struct.datar);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPoms_tdoc()) {
        oprot.writeFieldBegin(POMS_TDOC_FIELD_DESC);
        oprot.writeI32(struct.poms_tdoc);
        oprot.writeFieldEnd();
      }
      if (struct.poms_ser != null) {
        if (struct.isSetPoms_ser()) {
          oprot.writeFieldBegin(POMS_SER_FIELD_DESC);
          oprot.writeString(struct.poms_ser);
          oprot.writeFieldEnd();
        }
      }
      if (struct.poms_nom != null) {
        if (struct.isSetPoms_nom()) {
          oprot.writeFieldBegin(POMS_NOM_FIELD_DESC);
          oprot.writeString(struct.poms_nom);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTdoc()) {
        oprot.writeFieldBegin(TDOC_FIELD_DESC);
        oprot.writeI32(struct.tdoc);
        oprot.writeFieldEnd();
      }
      if (struct.docser != null) {
        if (struct.isSetDocser()) {
          oprot.writeFieldBegin(DOCSER_FIELD_DESC);
          oprot.writeString(struct.docser);
          oprot.writeFieldEnd();
        }
      }
      if (struct.docnum != null) {
        if (struct.isSetDocnum()) {
          oprot.writeFieldBegin(DOCNUM_FIELD_DESC);
          oprot.writeString(struct.docnum);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDatadoc()) {
        oprot.writeFieldBegin(DATADOC_FIELD_DESC);
        oprot.writeI64(struct.datadoc);
        oprot.writeFieldEnd();
      }
      if (struct.snils != null) {
        if (struct.isSetSnils()) {
          oprot.writeFieldBegin(SNILS_FIELD_DESC);
          oprot.writeString(struct.snils);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adp_obl != null) {
        if (struct.isSetAdp_obl()) {
          oprot.writeFieldBegin(ADP_OBL_FIELD_DESC);
          oprot.writeString(struct.adp_obl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adp_raion != null) {
        if (struct.isSetAdp_raion()) {
          oprot.writeFieldBegin(ADP_RAION_FIELD_DESC);
          oprot.writeString(struct.adp_raion);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adp_gorod != null) {
        if (struct.isSetAdp_gorod()) {
          oprot.writeFieldBegin(ADP_GOROD_FIELD_DESC);
          oprot.writeString(struct.adp_gorod);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adp_ul != null) {
        if (struct.isSetAdp_ul()) {
          oprot.writeFieldBegin(ADP_UL_FIELD_DESC);
          oprot.writeString(struct.adp_ul);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adp_dom != null) {
        if (struct.isSetAdp_dom()) {
          oprot.writeFieldBegin(ADP_DOM_FIELD_DESC);
          oprot.writeString(struct.adp_dom);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adp_korp != null) {
        if (struct.isSetAdp_korp()) {
          oprot.writeFieldBegin(ADP_KORP_FIELD_DESC);
          oprot.writeString(struct.adp_korp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adp_kv != null) {
        if (struct.isSetAdp_kv()) {
          oprot.writeFieldBegin(ADP_KV_FIELD_DESC);
          oprot.writeString(struct.adp_kv);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PatientTupleSchemeFactory implements SchemeFactory {
    public PatientTupleScheme getScheme() {
      return new PatientTupleScheme();
    }
  }

  private static class PatientTupleScheme extends TupleScheme<Patient> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Patient struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetNpasp()) {
        optionals.set(1);
      }
      if (struct.isSetFam()) {
        optionals.set(2);
      }
      if (struct.isSetIm()) {
        optionals.set(3);
      }
      if (struct.isSetOt()) {
        optionals.set(4);
      }
      if (struct.isSetPol()) {
        optionals.set(5);
      }
      if (struct.isSetDatar()) {
        optionals.set(6);
      }
      if (struct.isSetPoms_tdoc()) {
        optionals.set(7);
      }
      if (struct.isSetPoms_ser()) {
        optionals.set(8);
      }
      if (struct.isSetPoms_nom()) {
        optionals.set(9);
      }
      if (struct.isSetTdoc()) {
        optionals.set(10);
      }
      if (struct.isSetDocser()) {
        optionals.set(11);
      }
      if (struct.isSetDocnum()) {
        optionals.set(12);
      }
      if (struct.isSetDatadoc()) {
        optionals.set(13);
      }
      if (struct.isSetSnils()) {
        optionals.set(14);
      }
      if (struct.isSetAdp_obl()) {
        optionals.set(15);
      }
      if (struct.isSetAdp_raion()) {
        optionals.set(16);
      }
      if (struct.isSetAdp_gorod()) {
        optionals.set(17);
      }
      if (struct.isSetAdp_ul()) {
        optionals.set(18);
      }
      if (struct.isSetAdp_dom()) {
        optionals.set(19);
      }
      if (struct.isSetAdp_korp()) {
        optionals.set(20);
      }
      if (struct.isSetAdp_kv()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetNpasp()) {
        oprot.writeI32(struct.npasp);
      }
      if (struct.isSetFam()) {
        oprot.writeString(struct.fam);
      }
      if (struct.isSetIm()) {
        oprot.writeString(struct.im);
      }
      if (struct.isSetOt()) {
        oprot.writeString(struct.ot);
      }
      if (struct.isSetPol()) {
        oprot.writeI32(struct.pol);
      }
      if (struct.isSetDatar()) {
        oprot.writeI64(struct.datar);
      }
      if (struct.isSetPoms_tdoc()) {
        oprot.writeI32(struct.poms_tdoc);
      }
      if (struct.isSetPoms_ser()) {
        oprot.writeString(struct.poms_ser);
      }
      if (struct.isSetPoms_nom()) {
        oprot.writeString(struct.poms_nom);
      }
      if (struct.isSetTdoc()) {
        oprot.writeI32(struct.tdoc);
      }
      if (struct.isSetDocser()) {
        oprot.writeString(struct.docser);
      }
      if (struct.isSetDocnum()) {
        oprot.writeString(struct.docnum);
      }
      if (struct.isSetDatadoc()) {
        oprot.writeI64(struct.datadoc);
      }
      if (struct.isSetSnils()) {
        oprot.writeString(struct.snils);
      }
      if (struct.isSetAdp_obl()) {
        oprot.writeString(struct.adp_obl);
      }
      if (struct.isSetAdp_raion()) {
        oprot.writeString(struct.adp_raion);
      }
      if (struct.isSetAdp_gorod()) {
        oprot.writeString(struct.adp_gorod);
      }
      if (struct.isSetAdp_ul()) {
        oprot.writeString(struct.adp_ul);
      }
      if (struct.isSetAdp_dom()) {
        oprot.writeString(struct.adp_dom);
      }
      if (struct.isSetAdp_korp()) {
        oprot.writeString(struct.adp_korp);
      }
      if (struct.isSetAdp_kv()) {
        oprot.writeString(struct.adp_kv);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Patient struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.npasp = iprot.readI32();
        struct.setNpaspIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fam = iprot.readString();
        struct.setFamIsSet(true);
      }
      if (incoming.get(3)) {
        struct.im = iprot.readString();
        struct.setImIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ot = iprot.readString();
        struct.setOtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pol = iprot.readI32();
        struct.setPolIsSet(true);
      }
      if (incoming.get(6)) {
        struct.datar = iprot.readI64();
        struct.setDatarIsSet(true);
      }
      if (incoming.get(7)) {
        struct.poms_tdoc = iprot.readI32();
        struct.setPoms_tdocIsSet(true);
      }
      if (incoming.get(8)) {
        struct.poms_ser = iprot.readString();
        struct.setPoms_serIsSet(true);
      }
      if (incoming.get(9)) {
        struct.poms_nom = iprot.readString();
        struct.setPoms_nomIsSet(true);
      }
      if (incoming.get(10)) {
        struct.tdoc = iprot.readI32();
        struct.setTdocIsSet(true);
      }
      if (incoming.get(11)) {
        struct.docser = iprot.readString();
        struct.setDocserIsSet(true);
      }
      if (incoming.get(12)) {
        struct.docnum = iprot.readString();
        struct.setDocnumIsSet(true);
      }
      if (incoming.get(13)) {
        struct.datadoc = iprot.readI64();
        struct.setDatadocIsSet(true);
      }
      if (incoming.get(14)) {
        struct.snils = iprot.readString();
        struct.setSnilsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.adp_obl = iprot.readString();
        struct.setAdp_oblIsSet(true);
      }
      if (incoming.get(16)) {
        struct.adp_raion = iprot.readString();
        struct.setAdp_raionIsSet(true);
      }
      if (incoming.get(17)) {
        struct.adp_gorod = iprot.readString();
        struct.setAdp_gorodIsSet(true);
      }
      if (incoming.get(18)) {
        struct.adp_ul = iprot.readString();
        struct.setAdp_ulIsSet(true);
      }
      if (incoming.get(19)) {
        struct.adp_dom = iprot.readString();
        struct.setAdp_domIsSet(true);
      }
      if (incoming.get(20)) {
        struct.adp_korp = iprot.readString();
        struct.setAdp_korpIsSet(true);
      }
      if (incoming.get(21)) {
        struct.adp_kv = iprot.readString();
        struct.setAdp_kvIsSet(true);
      }
    }
  }

}

