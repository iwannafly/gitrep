/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftServerAutoProc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftServerAutoProc {

  public interface Iface extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Iface {

    /**
     * поиск льготника в таблице Patient
     * 
     * @param npasp
     */
    public Patient getPatientInfo(int npasp) throws PatientNotFoundException, org.apache.thrift.TException;

    /**
     * корректировка информации (снилса) пациента
     * 
     * @param npasp
     */
    public int setPatientInfo(Patient npasp) throws org.apache.thrift.TException;

    /**
     * поиск льготы в таблице P_kov
     * 
     * @param npasp
     */
    public List<Lgota> getLgotaInfo(int npasp) throws LgkatNotFoundException, org.apache.thrift.TException;

    /**
     * добавление льготы
     * 
     * @param npasp
     */
    public int addLgotaInfo(Lgota npasp) throws org.apache.thrift.TException;

    /**
     * выбирает информацию о льготнике и корректирует информацию в базе
     * 
     * @param pl
     */
    public String getPL(String pl) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer .AsyncIface {

    public void getPatientInfo(int npasp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPatientInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void setPatientInfo(Patient npasp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setPatientInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void getLgotaInfo(int npasp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getLgotaInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void addLgotaInfo(Lgota npasp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addLgotaInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void getPL(String pl, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPL_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Patient getPatientInfo(int npasp) throws PatientNotFoundException, org.apache.thrift.TException
    {
      send_getPatientInfo(npasp);
      return recv_getPatientInfo();
    }

    public void send_getPatientInfo(int npasp) throws org.apache.thrift.TException
    {
      getPatientInfo_args args = new getPatientInfo_args();
      args.setNpasp(npasp);
      sendBase("getPatientInfo", args);
    }

    public Patient recv_getPatientInfo() throws PatientNotFoundException, org.apache.thrift.TException
    {
      getPatientInfo_result result = new getPatientInfo_result();
      receiveBase(result, "getPatientInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.le != null) {
        throw result.le;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatientInfo failed: unknown result");
    }

    public int setPatientInfo(Patient npasp) throws org.apache.thrift.TException
    {
      send_setPatientInfo(npasp);
      return recv_setPatientInfo();
    }

    public void send_setPatientInfo(Patient npasp) throws org.apache.thrift.TException
    {
      setPatientInfo_args args = new setPatientInfo_args();
      args.setNpasp(npasp);
      sendBase("setPatientInfo", args);
    }

    public int recv_setPatientInfo() throws org.apache.thrift.TException
    {
      setPatientInfo_result result = new setPatientInfo_result();
      receiveBase(result, "setPatientInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setPatientInfo failed: unknown result");
    }

    public List<Lgota> getLgotaInfo(int npasp) throws LgkatNotFoundException, org.apache.thrift.TException
    {
      send_getLgotaInfo(npasp);
      return recv_getLgotaInfo();
    }

    public void send_getLgotaInfo(int npasp) throws org.apache.thrift.TException
    {
      getLgotaInfo_args args = new getLgotaInfo_args();
      args.setNpasp(npasp);
      sendBase("getLgotaInfo", args);
    }

    public List<Lgota> recv_getLgotaInfo() throws LgkatNotFoundException, org.apache.thrift.TException
    {
      getLgotaInfo_result result = new getLgotaInfo_result();
      receiveBase(result, "getLgotaInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.le != null) {
        throw result.le;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLgotaInfo failed: unknown result");
    }

    public int addLgotaInfo(Lgota npasp) throws org.apache.thrift.TException
    {
      send_addLgotaInfo(npasp);
      return recv_addLgotaInfo();
    }

    public void send_addLgotaInfo(Lgota npasp) throws org.apache.thrift.TException
    {
      addLgotaInfo_args args = new addLgotaInfo_args();
      args.setNpasp(npasp);
      sendBase("addLgotaInfo", args);
    }

    public int recv_addLgotaInfo() throws org.apache.thrift.TException
    {
      addLgotaInfo_result result = new addLgotaInfo_result();
      receiveBase(result, "addLgotaInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addLgotaInfo failed: unknown result");
    }

    public String getPL(String pl) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_getPL(pl);
      return recv_getPL();
    }

    public void send_getPL(String pl) throws org.apache.thrift.TException
    {
      getPL_args args = new getPL_args();
      args.setPl(pl);
      sendBase("getPL", args);
    }

    public String recv_getPL() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      getPL_result result = new getPL_result();
      receiveBase(result, "getPL");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPL failed: unknown result");
    }

  }
  public static class AsyncClient extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getPatientInfo(int npasp, org.apache.thrift.async.AsyncMethodCallback<getPatientInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatientInfo_call method_call = new getPatientInfo_call(npasp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatientInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      public getPatientInfo_call(int npasp, org.apache.thrift.async.AsyncMethodCallback<getPatientInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatientInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatientInfo_args args = new getPatientInfo_args();
        args.setNpasp(npasp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Patient getResult() throws PatientNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatientInfo();
      }
    }

    public void setPatientInfo(Patient npasp, org.apache.thrift.async.AsyncMethodCallback<setPatientInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPatientInfo_call method_call = new setPatientInfo_call(npasp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPatientInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Patient npasp;
      public setPatientInfo_call(Patient npasp, org.apache.thrift.async.AsyncMethodCallback<setPatientInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPatientInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPatientInfo_args args = new setPatientInfo_args();
        args.setNpasp(npasp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setPatientInfo();
      }
    }

    public void getLgotaInfo(int npasp, org.apache.thrift.async.AsyncMethodCallback<getLgotaInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLgotaInfo_call method_call = new getLgotaInfo_call(npasp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLgotaInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      public getLgotaInfo_call(int npasp, org.apache.thrift.async.AsyncMethodCallback<getLgotaInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLgotaInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLgotaInfo_args args = new getLgotaInfo_args();
        args.setNpasp(npasp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Lgota> getResult() throws LgkatNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLgotaInfo();
      }
    }

    public void addLgotaInfo(Lgota npasp, org.apache.thrift.async.AsyncMethodCallback<addLgotaInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addLgotaInfo_call method_call = new addLgotaInfo_call(npasp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addLgotaInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Lgota npasp;
      public addLgotaInfo_call(Lgota npasp, org.apache.thrift.async.AsyncMethodCallback<addLgotaInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addLgotaInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addLgotaInfo_args args = new addLgotaInfo_args();
        args.setNpasp(npasp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addLgotaInfo();
      }
    }

    public void getPL(String pl, org.apache.thrift.async.AsyncMethodCallback<getPL_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPL_call method_call = new getPL_call(pl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPL_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pl;
      public getPL_call(String pl, org.apache.thrift.async.AsyncMethodCallback<getPL_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pl = pl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPL", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPL_args args = new getPL_args();
        args.setPl(pl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPL();
      }
    }

  }

  public static class Processor<I extends Iface> extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getPatientInfo", new getPatientInfo());
      processMap.put("setPatientInfo", new setPatientInfo());
      processMap.put("getLgotaInfo", new getLgotaInfo());
      processMap.put("addLgotaInfo", new addLgotaInfo());
      processMap.put("getPL", new getPL());
      return processMap;
    }

    public static class getPatientInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatientInfo_args> {
      public getPatientInfo() {
        super("getPatientInfo");
      }

      public getPatientInfo_args getEmptyArgsInstance() {
        return new getPatientInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPatientInfo_result getResult(I iface, getPatientInfo_args args) throws org.apache.thrift.TException {
        getPatientInfo_result result = new getPatientInfo_result();
        try {
          result.success = iface.getPatientInfo(args.npasp);
        } catch (PatientNotFoundException le) {
          result.le = le;
        }
        return result;
      }
    }

    public static class setPatientInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPatientInfo_args> {
      public setPatientInfo() {
        super("setPatientInfo");
      }

      public setPatientInfo_args getEmptyArgsInstance() {
        return new setPatientInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setPatientInfo_result getResult(I iface, setPatientInfo_args args) throws org.apache.thrift.TException {
        setPatientInfo_result result = new setPatientInfo_result();
        result.success = iface.setPatientInfo(args.npasp);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getLgotaInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLgotaInfo_args> {
      public getLgotaInfo() {
        super("getLgotaInfo");
      }

      public getLgotaInfo_args getEmptyArgsInstance() {
        return new getLgotaInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLgotaInfo_result getResult(I iface, getLgotaInfo_args args) throws org.apache.thrift.TException {
        getLgotaInfo_result result = new getLgotaInfo_result();
        try {
          result.success = iface.getLgotaInfo(args.npasp);
        } catch (LgkatNotFoundException le) {
          result.le = le;
        }
        return result;
      }
    }

    public static class addLgotaInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addLgotaInfo_args> {
      public addLgotaInfo() {
        super("addLgotaInfo");
      }

      public addLgotaInfo_args getEmptyArgsInstance() {
        return new addLgotaInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addLgotaInfo_result getResult(I iface, addLgotaInfo_args args) throws org.apache.thrift.TException {
        addLgotaInfo_result result = new addLgotaInfo_result();
        result.success = iface.addLgotaInfo(args.npasp);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getPL<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPL_args> {
      public getPL() {
        super("getPL");
      }

      public getPL_args getEmptyArgsInstance() {
        return new getPL_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPL_result getResult(I iface, getPL_args args) throws org.apache.thrift.TException {
        getPL_result result = new getPL_result();
        try {
          result.success = iface.getPL(args.pl);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

  }

  public static class getPatientInfo_args implements org.apache.thrift.TBase<getPatientInfo_args, getPatientInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientInfo_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientInfo_argsTupleSchemeFactory());
    }

    public int npasp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientInfo_args.class, metaDataMap);
    }

    public getPatientInfo_args() {
    }

    public getPatientInfo_args(
      int npasp)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientInfo_args(getPatientInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.npasp = other.npasp;
    }

    public getPatientInfo_args deepCopy() {
      return new getPatientInfo_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public getPatientInfo_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return EncodingUtils.testBit(__isset_bitfield, __NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NPASP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientInfo_args)
        return this.equals((getPatientInfo_args)that);
      return false;
    }

    public boolean equals(getPatientInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientInfo_args typedOther = (getPatientInfo_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientInfo_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getPatientInfo_argsStandardScheme getScheme() {
        return new getPatientInfo_argsStandardScheme();
      }
    }

    private static class getPatientInfo_argsStandardScheme extends StandardScheme<getPatientInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getPatientInfo_argsTupleScheme getScheme() {
        return new getPatientInfo_argsTupleScheme();
      }
    }

    private static class getPatientInfo_argsTupleScheme extends TupleScheme<getPatientInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
      }
    }

  }

  public static class getPatientInfo_result implements org.apache.thrift.TBase<getPatientInfo_result, getPatientInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField LE_FIELD_DESC = new org.apache.thrift.protocol.TField("le", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientInfo_resultTupleSchemeFactory());
    }

    public Patient success; // required
    public PatientNotFoundException le; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      LE((short)1, "le");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // LE
            return LE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Patient.class)));
      tmpMap.put(_Fields.LE, new org.apache.thrift.meta_data.FieldMetaData("le", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientInfo_result.class, metaDataMap);
    }

    public getPatientInfo_result() {
    }

    public getPatientInfo_result(
      Patient success,
      PatientNotFoundException le)
    {
      this();
      this.success = success;
      this.le = le;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientInfo_result(getPatientInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new Patient(other.success);
      }
      if (other.isSetLe()) {
        this.le = new PatientNotFoundException(other.le);
      }
    }

    public getPatientInfo_result deepCopy() {
      return new getPatientInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.le = null;
    }

    public Patient getSuccess() {
      return this.success;
    }

    public getPatientInfo_result setSuccess(Patient success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public PatientNotFoundException getLe() {
      return this.le;
    }

    public getPatientInfo_result setLe(PatientNotFoundException le) {
      this.le = le;
      return this;
    }

    public void unsetLe() {
      this.le = null;
    }

    /** Returns true if field le is set (has been assigned a value) and false otherwise */
    public boolean isSetLe() {
      return this.le != null;
    }

    public void setLeIsSet(boolean value) {
      if (!value) {
        this.le = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Patient)value);
        }
        break;

      case LE:
        if (value == null) {
          unsetLe();
        } else {
          setLe((PatientNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case LE:
        return getLe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case LE:
        return isSetLe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientInfo_result)
        return this.equals((getPatientInfo_result)that);
      return false;
    }

    public boolean equals(getPatientInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_le = true && this.isSetLe();
      boolean that_present_le = true && that.isSetLe();
      if (this_present_le || that_present_le) {
        if (!(this_present_le && that_present_le))
          return false;
        if (!this.le.equals(that.le))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientInfo_result typedOther = (getPatientInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLe()).compareTo(typedOther.isSetLe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.le, typedOther.le);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("le:");
      if (this.le == null) {
        sb.append("null");
      } else {
        sb.append(this.le);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getPatientInfo_resultStandardScheme getScheme() {
        return new getPatientInfo_resultStandardScheme();
      }
    }

    private static class getPatientInfo_resultStandardScheme extends StandardScheme<getPatientInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Patient();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // LE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.le = new PatientNotFoundException();
                struct.le.read(iprot);
                struct.setLeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.le != null) {
          oprot.writeFieldBegin(LE_FIELD_DESC);
          struct.le.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getPatientInfo_resultTupleScheme getScheme() {
        return new getPatientInfo_resultTupleScheme();
      }
    }

    private static class getPatientInfo_resultTupleScheme extends TupleScheme<getPatientInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetLe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetLe()) {
          struct.le.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Patient();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.le = new PatientNotFoundException();
          struct.le.read(iprot);
          struct.setLeIsSet(true);
        }
      }
    }

  }

  public static class setPatientInfo_args implements org.apache.thrift.TBase<setPatientInfo_args, setPatientInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPatientInfo_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPatientInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPatientInfo_argsTupleSchemeFactory());
    }

    public Patient npasp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Patient.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPatientInfo_args.class, metaDataMap);
    }

    public setPatientInfo_args() {
    }

    public setPatientInfo_args(
      Patient npasp)
    {
      this();
      this.npasp = npasp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPatientInfo_args(setPatientInfo_args other) {
      if (other.isSetNpasp()) {
        this.npasp = new Patient(other.npasp);
      }
    }

    public setPatientInfo_args deepCopy() {
      return new setPatientInfo_args(this);
    }

    @Override
    public void clear() {
      this.npasp = null;
    }

    public Patient getNpasp() {
      return this.npasp;
    }

    public setPatientInfo_args setNpasp(Patient npasp) {
      this.npasp = npasp;
      return this;
    }

    public void unsetNpasp() {
      this.npasp = null;
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return this.npasp != null;
    }

    public void setNpaspIsSet(boolean value) {
      if (!value) {
        this.npasp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Patient)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return getNpasp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPatientInfo_args)
        return this.equals((setPatientInfo_args)that);
      return false;
    }

    public boolean equals(setPatientInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true && this.isSetNpasp();
      boolean that_present_npasp = true && that.isSetNpasp();
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (!this.npasp.equals(that.npasp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setPatientInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setPatientInfo_args typedOther = (setPatientInfo_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPatientInfo_args(");
      boolean first = true;

      sb.append("npasp:");
      if (this.npasp == null) {
        sb.append("null");
      } else {
        sb.append(this.npasp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (npasp != null) {
        npasp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPatientInfo_argsStandardSchemeFactory implements SchemeFactory {
      public setPatientInfo_argsStandardScheme getScheme() {
        return new setPatientInfo_argsStandardScheme();
      }
    }

    private static class setPatientInfo_argsStandardScheme extends StandardScheme<setPatientInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPatientInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.npasp = new Patient();
                struct.npasp.read(iprot);
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPatientInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.npasp != null) {
          oprot.writeFieldBegin(NPASP_FIELD_DESC);
          struct.npasp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPatientInfo_argsTupleSchemeFactory implements SchemeFactory {
      public setPatientInfo_argsTupleScheme getScheme() {
        return new setPatientInfo_argsTupleScheme();
      }
    }

    private static class setPatientInfo_argsTupleScheme extends TupleScheme<setPatientInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPatientInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNpasp()) {
          struct.npasp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPatientInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.npasp = new Patient();
          struct.npasp.read(iprot);
          struct.setNpaspIsSet(true);
        }
      }
    }

  }

  public static class setPatientInfo_result implements org.apache.thrift.TBase<setPatientInfo_result, setPatientInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPatientInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPatientInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPatientInfo_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPatientInfo_result.class, metaDataMap);
    }

    public setPatientInfo_result() {
    }

    public setPatientInfo_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPatientInfo_result(setPatientInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setPatientInfo_result deepCopy() {
      return new setPatientInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public setPatientInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPatientInfo_result)
        return this.equals((setPatientInfo_result)that);
      return false;
    }

    public boolean equals(setPatientInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setPatientInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setPatientInfo_result typedOther = (setPatientInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPatientInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPatientInfo_resultStandardSchemeFactory implements SchemeFactory {
      public setPatientInfo_resultStandardScheme getScheme() {
        return new setPatientInfo_resultStandardScheme();
      }
    }

    private static class setPatientInfo_resultStandardScheme extends StandardScheme<setPatientInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPatientInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPatientInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPatientInfo_resultTupleSchemeFactory implements SchemeFactory {
      public setPatientInfo_resultTupleScheme getScheme() {
        return new setPatientInfo_resultTupleScheme();
      }
    }

    private static class setPatientInfo_resultTupleScheme extends TupleScheme<setPatientInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPatientInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPatientInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLgotaInfo_args implements org.apache.thrift.TBase<getLgotaInfo_args, getLgotaInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLgotaInfo_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLgotaInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLgotaInfo_argsTupleSchemeFactory());
    }

    public int npasp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLgotaInfo_args.class, metaDataMap);
    }

    public getLgotaInfo_args() {
    }

    public getLgotaInfo_args(
      int npasp)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLgotaInfo_args(getLgotaInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.npasp = other.npasp;
    }

    public getLgotaInfo_args deepCopy() {
      return new getLgotaInfo_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public getLgotaInfo_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return EncodingUtils.testBit(__isset_bitfield, __NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NPASP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLgotaInfo_args)
        return this.equals((getLgotaInfo_args)that);
      return false;
    }

    public boolean equals(getLgotaInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLgotaInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLgotaInfo_args typedOther = (getLgotaInfo_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLgotaInfo_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLgotaInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getLgotaInfo_argsStandardScheme getScheme() {
        return new getLgotaInfo_argsStandardScheme();
      }
    }

    private static class getLgotaInfo_argsStandardScheme extends StandardScheme<getLgotaInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLgotaInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLgotaInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLgotaInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getLgotaInfo_argsTupleScheme getScheme() {
        return new getLgotaInfo_argsTupleScheme();
      }
    }

    private static class getLgotaInfo_argsTupleScheme extends TupleScheme<getLgotaInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLgotaInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLgotaInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
      }
    }

  }

  public static class getLgotaInfo_result implements org.apache.thrift.TBase<getLgotaInfo_result, getLgotaInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLgotaInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField LE_FIELD_DESC = new org.apache.thrift.protocol.TField("le", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLgotaInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLgotaInfo_resultTupleSchemeFactory());
    }

    public List<Lgota> success; // required
    public LgkatNotFoundException le; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      LE((short)1, "le");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // LE
            return LE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Lgota.class))));
      tmpMap.put(_Fields.LE, new org.apache.thrift.meta_data.FieldMetaData("le", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLgotaInfo_result.class, metaDataMap);
    }

    public getLgotaInfo_result() {
    }

    public getLgotaInfo_result(
      List<Lgota> success,
      LgkatNotFoundException le)
    {
      this();
      this.success = success;
      this.le = le;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLgotaInfo_result(getLgotaInfo_result other) {
      if (other.isSetSuccess()) {
        List<Lgota> __this__success = new ArrayList<Lgota>();
        for (Lgota other_element : other.success) {
          __this__success.add(new Lgota(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetLe()) {
        this.le = new LgkatNotFoundException(other.le);
      }
    }

    public getLgotaInfo_result deepCopy() {
      return new getLgotaInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.le = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Lgota> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Lgota elem) {
      if (this.success == null) {
        this.success = new ArrayList<Lgota>();
      }
      this.success.add(elem);
    }

    public List<Lgota> getSuccess() {
      return this.success;
    }

    public getLgotaInfo_result setSuccess(List<Lgota> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public LgkatNotFoundException getLe() {
      return this.le;
    }

    public getLgotaInfo_result setLe(LgkatNotFoundException le) {
      this.le = le;
      return this;
    }

    public void unsetLe() {
      this.le = null;
    }

    /** Returns true if field le is set (has been assigned a value) and false otherwise */
    public boolean isSetLe() {
      return this.le != null;
    }

    public void setLeIsSet(boolean value) {
      if (!value) {
        this.le = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Lgota>)value);
        }
        break;

      case LE:
        if (value == null) {
          unsetLe();
        } else {
          setLe((LgkatNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case LE:
        return getLe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case LE:
        return isSetLe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLgotaInfo_result)
        return this.equals((getLgotaInfo_result)that);
      return false;
    }

    public boolean equals(getLgotaInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_le = true && this.isSetLe();
      boolean that_present_le = true && that.isSetLe();
      if (this_present_le || that_present_le) {
        if (!(this_present_le && that_present_le))
          return false;
        if (!this.le.equals(that.le))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLgotaInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLgotaInfo_result typedOther = (getLgotaInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLe()).compareTo(typedOther.isSetLe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.le, typedOther.le);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLgotaInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("le:");
      if (this.le == null) {
        sb.append("null");
      } else {
        sb.append(this.le);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLgotaInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getLgotaInfo_resultStandardScheme getScheme() {
        return new getLgotaInfo_resultStandardScheme();
      }
    }

    private static class getLgotaInfo_resultStandardScheme extends StandardScheme<getLgotaInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLgotaInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<Lgota>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    Lgota _elem2; // required
                    _elem2 = new Lgota();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // LE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.le = new LgkatNotFoundException();
                struct.le.read(iprot);
                struct.setLeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLgotaInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Lgota _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.le != null) {
          oprot.writeFieldBegin(LE_FIELD_DESC);
          struct.le.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLgotaInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getLgotaInfo_resultTupleScheme getScheme() {
        return new getLgotaInfo_resultTupleScheme();
      }
    }

    private static class getLgotaInfo_resultTupleScheme extends TupleScheme<getLgotaInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLgotaInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetLe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Lgota _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetLe()) {
          struct.le.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLgotaInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Lgota>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              Lgota _elem7; // required
              _elem7 = new Lgota();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.le = new LgkatNotFoundException();
          struct.le.read(iprot);
          struct.setLeIsSet(true);
        }
      }
    }

  }

  public static class addLgotaInfo_args implements org.apache.thrift.TBase<addLgotaInfo_args, addLgotaInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLgotaInfo_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addLgotaInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addLgotaInfo_argsTupleSchemeFactory());
    }

    public Lgota npasp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Lgota.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLgotaInfo_args.class, metaDataMap);
    }

    public addLgotaInfo_args() {
    }

    public addLgotaInfo_args(
      Lgota npasp)
    {
      this();
      this.npasp = npasp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLgotaInfo_args(addLgotaInfo_args other) {
      if (other.isSetNpasp()) {
        this.npasp = new Lgota(other.npasp);
      }
    }

    public addLgotaInfo_args deepCopy() {
      return new addLgotaInfo_args(this);
    }

    @Override
    public void clear() {
      this.npasp = null;
    }

    public Lgota getNpasp() {
      return this.npasp;
    }

    public addLgotaInfo_args setNpasp(Lgota npasp) {
      this.npasp = npasp;
      return this;
    }

    public void unsetNpasp() {
      this.npasp = null;
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return this.npasp != null;
    }

    public void setNpaspIsSet(boolean value) {
      if (!value) {
        this.npasp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Lgota)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return getNpasp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addLgotaInfo_args)
        return this.equals((addLgotaInfo_args)that);
      return false;
    }

    public boolean equals(addLgotaInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true && this.isSetNpasp();
      boolean that_present_npasp = true && that.isSetNpasp();
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (!this.npasp.equals(that.npasp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addLgotaInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addLgotaInfo_args typedOther = (addLgotaInfo_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addLgotaInfo_args(");
      boolean first = true;

      sb.append("npasp:");
      if (this.npasp == null) {
        sb.append("null");
      } else {
        sb.append(this.npasp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (npasp != null) {
        npasp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLgotaInfo_argsStandardSchemeFactory implements SchemeFactory {
      public addLgotaInfo_argsStandardScheme getScheme() {
        return new addLgotaInfo_argsStandardScheme();
      }
    }

    private static class addLgotaInfo_argsStandardScheme extends StandardScheme<addLgotaInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLgotaInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.npasp = new Lgota();
                struct.npasp.read(iprot);
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLgotaInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.npasp != null) {
          oprot.writeFieldBegin(NPASP_FIELD_DESC);
          struct.npasp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLgotaInfo_argsTupleSchemeFactory implements SchemeFactory {
      public addLgotaInfo_argsTupleScheme getScheme() {
        return new addLgotaInfo_argsTupleScheme();
      }
    }

    private static class addLgotaInfo_argsTupleScheme extends TupleScheme<addLgotaInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLgotaInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNpasp()) {
          struct.npasp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLgotaInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.npasp = new Lgota();
          struct.npasp.read(iprot);
          struct.setNpaspIsSet(true);
        }
      }
    }

  }

  public static class addLgotaInfo_result implements org.apache.thrift.TBase<addLgotaInfo_result, addLgotaInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLgotaInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addLgotaInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addLgotaInfo_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLgotaInfo_result.class, metaDataMap);
    }

    public addLgotaInfo_result() {
    }

    public addLgotaInfo_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLgotaInfo_result(addLgotaInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addLgotaInfo_result deepCopy() {
      return new addLgotaInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addLgotaInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addLgotaInfo_result)
        return this.equals((addLgotaInfo_result)that);
      return false;
    }

    public boolean equals(addLgotaInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addLgotaInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addLgotaInfo_result typedOther = (addLgotaInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addLgotaInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLgotaInfo_resultStandardSchemeFactory implements SchemeFactory {
      public addLgotaInfo_resultStandardScheme getScheme() {
        return new addLgotaInfo_resultStandardScheme();
      }
    }

    private static class addLgotaInfo_resultStandardScheme extends StandardScheme<addLgotaInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLgotaInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLgotaInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLgotaInfo_resultTupleSchemeFactory implements SchemeFactory {
      public addLgotaInfo_resultTupleScheme getScheme() {
        return new addLgotaInfo_resultTupleScheme();
      }
    }

    private static class addLgotaInfo_resultTupleScheme extends TupleScheme<addLgotaInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLgotaInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLgotaInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPL_args implements org.apache.thrift.TBase<getPL_args, getPL_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPL_args");

    private static final org.apache.thrift.protocol.TField PL_FIELD_DESC = new org.apache.thrift.protocol.TField("pl", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPL_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPL_argsTupleSchemeFactory());
    }

    public String pl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PL((short)1, "pl");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PL
            return PL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PL, new org.apache.thrift.meta_data.FieldMetaData("pl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPL_args.class, metaDataMap);
    }

    public getPL_args() {
    }

    public getPL_args(
      String pl)
    {
      this();
      this.pl = pl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPL_args(getPL_args other) {
      if (other.isSetPl()) {
        this.pl = other.pl;
      }
    }

    public getPL_args deepCopy() {
      return new getPL_args(this);
    }

    @Override
    public void clear() {
      this.pl = null;
    }

    public String getPl() {
      return this.pl;
    }

    public getPL_args setPl(String pl) {
      this.pl = pl;
      return this;
    }

    public void unsetPl() {
      this.pl = null;
    }

    /** Returns true if field pl is set (has been assigned a value) and false otherwise */
    public boolean isSetPl() {
      return this.pl != null;
    }

    public void setPlIsSet(boolean value) {
      if (!value) {
        this.pl = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PL:
        if (value == null) {
          unsetPl();
        } else {
          setPl((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PL:
        return getPl();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PL:
        return isSetPl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPL_args)
        return this.equals((getPL_args)that);
      return false;
    }

    public boolean equals(getPL_args that) {
      if (that == null)
        return false;

      boolean this_present_pl = true && this.isSetPl();
      boolean that_present_pl = true && that.isSetPl();
      if (this_present_pl || that_present_pl) {
        if (!(this_present_pl && that_present_pl))
          return false;
        if (!this.pl.equals(that.pl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPL_args typedOther = (getPL_args)other;

      lastComparison = Boolean.valueOf(isSetPl()).compareTo(typedOther.isSetPl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pl, typedOther.pl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPL_args(");
      boolean first = true;

      sb.append("pl:");
      if (this.pl == null) {
        sb.append("null");
      } else {
        sb.append(this.pl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPL_argsStandardSchemeFactory implements SchemeFactory {
      public getPL_argsStandardScheme getScheme() {
        return new getPL_argsStandardScheme();
      }
    }

    private static class getPL_argsStandardScheme extends StandardScheme<getPL_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pl = iprot.readString();
                struct.setPlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPL_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pl != null) {
          oprot.writeFieldBegin(PL_FIELD_DESC);
          oprot.writeString(struct.pl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPL_argsTupleSchemeFactory implements SchemeFactory {
      public getPL_argsTupleScheme getScheme() {
        return new getPL_argsTupleScheme();
      }
    }

    private static class getPL_argsTupleScheme extends TupleScheme<getPL_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPL_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPl()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPl()) {
          oprot.writeString(struct.pl);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPL_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pl = iprot.readString();
          struct.setPlIsSet(true);
        }
      }
    }

  }

  public static class getPL_result implements org.apache.thrift.TBase<getPL_result, getPL_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPL_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPL_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPL_resultTupleSchemeFactory());
    }

    public String success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPL_result.class, metaDataMap);
    }

    public getPL_result() {
    }

    public getPL_result(
      String success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.success = success;
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPL_result(getPL_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public getPL_result deepCopy() {
      return new getPL_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getPL_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getPL_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPL_result)
        return this.equals((getPL_result)that);
      return false;
    }

    public boolean equals(getPL_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPL_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPL_result typedOther = (getPL_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPL_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPL_resultStandardSchemeFactory implements SchemeFactory {
      public getPL_resultStandardScheme getScheme() {
        return new getPL_resultStandardScheme();
      }
    }

    private static class getPL_resultStandardScheme extends StandardScheme<getPL_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPL_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPL_resultTupleSchemeFactory implements SchemeFactory {
      public getPL_resultTupleScheme getScheme() {
        return new getPL_resultTupleScheme();
      }
    }

    private static class getPL_resultTupleScheme extends TupleScheme<getPL_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPL_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPL_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

}
