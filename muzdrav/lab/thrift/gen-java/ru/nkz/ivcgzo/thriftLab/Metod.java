/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftLab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Metod implements org.apache.thrift.TBase<Metod, Metod._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Metod");

  private static final org.apache.thrift.protocol.TField OBST_FIELD_DESC = new org.apache.thrift.protocol.TField("obst", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_OBST_FIELD_DESC = new org.apache.thrift.protocol.TField("nameObst", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField C_P0E1_FIELD_DESC = new org.apache.thrift.protocol.TField("cP0e1", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MetodStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MetodTupleSchemeFactory());
  }

  public String obst; // optional
  public String nameObst; // optional
  public int cP0e1; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OBST((short)1, "obst"),
    NAME_OBST((short)2, "nameObst"),
    C_P0E1((short)3, "cP0e1");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OBST
          return OBST;
        case 2: // NAME_OBST
          return NAME_OBST;
        case 3: // C_P0E1
          return C_P0E1;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CP0E1_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.OBST,_Fields.NAME_OBST,_Fields.C_P0E1};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OBST, new org.apache.thrift.meta_data.FieldMetaData("obst", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_OBST, new org.apache.thrift.meta_data.FieldMetaData("nameObst", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.C_P0E1, new org.apache.thrift.meta_data.FieldMetaData("cP0e1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Metod.class, metaDataMap);
  }

  public Metod() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Metod(Metod other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetObst()) {
      this.obst = other.obst;
    }
    if (other.isSetNameObst()) {
      this.nameObst = other.nameObst;
    }
    this.cP0e1 = other.cP0e1;
  }

  public Metod deepCopy() {
    return new Metod(this);
  }

  @Override
  public void clear() {
    this.obst = null;
    this.nameObst = null;
    setCP0e1IsSet(false);
    this.cP0e1 = 0;
  }

  public String getObst() {
    return this.obst;
  }

  public Metod setObst(String obst) {
    this.obst = obst;
    return this;
  }

  public void unsetObst() {
    this.obst = null;
  }

  /** Returns true if field obst is set (has been assigned a value) and false otherwise */
  public boolean isSetObst() {
    return this.obst != null;
  }

  public void setObstIsSet(boolean value) {
    if (!value) {
      this.obst = null;
    }
  }

  public String getNameObst() {
    return this.nameObst;
  }

  public Metod setNameObst(String nameObst) {
    this.nameObst = nameObst;
    return this;
  }

  public void unsetNameObst() {
    this.nameObst = null;
  }

  /** Returns true if field nameObst is set (has been assigned a value) and false otherwise */
  public boolean isSetNameObst() {
    return this.nameObst != null;
  }

  public void setNameObstIsSet(boolean value) {
    if (!value) {
      this.nameObst = null;
    }
  }

  public int getCP0e1() {
    return this.cP0e1;
  }

  public Metod setCP0e1(int cP0e1) {
    this.cP0e1 = cP0e1;
    setCP0e1IsSet(true);
    return this;
  }

  public void unsetCP0e1() {
    __isset_bit_vector.clear(__CP0E1_ISSET_ID);
  }

  /** Returns true if field cP0e1 is set (has been assigned a value) and false otherwise */
  public boolean isSetCP0e1() {
    return __isset_bit_vector.get(__CP0E1_ISSET_ID);
  }

  public void setCP0e1IsSet(boolean value) {
    __isset_bit_vector.set(__CP0E1_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OBST:
      if (value == null) {
        unsetObst();
      } else {
        setObst((String)value);
      }
      break;

    case NAME_OBST:
      if (value == null) {
        unsetNameObst();
      } else {
        setNameObst((String)value);
      }
      break;

    case C_P0E1:
      if (value == null) {
        unsetCP0e1();
      } else {
        setCP0e1((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OBST:
      return getObst();

    case NAME_OBST:
      return getNameObst();

    case C_P0E1:
      return Integer.valueOf(getCP0e1());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OBST:
      return isSetObst();
    case NAME_OBST:
      return isSetNameObst();
    case C_P0E1:
      return isSetCP0e1();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Metod)
      return this.equals((Metod)that);
    return false;
  }

  public boolean equals(Metod that) {
    if (that == null)
      return false;

    boolean this_present_obst = true && this.isSetObst();
    boolean that_present_obst = true && that.isSetObst();
    if (this_present_obst || that_present_obst) {
      if (!(this_present_obst && that_present_obst))
        return false;
      if (!this.obst.equals(that.obst))
        return false;
    }

    boolean this_present_nameObst = true && this.isSetNameObst();
    boolean that_present_nameObst = true && that.isSetNameObst();
    if (this_present_nameObst || that_present_nameObst) {
      if (!(this_present_nameObst && that_present_nameObst))
        return false;
      if (!this.nameObst.equals(that.nameObst))
        return false;
    }

    boolean this_present_cP0e1 = true && this.isSetCP0e1();
    boolean that_present_cP0e1 = true && that.isSetCP0e1();
    if (this_present_cP0e1 || that_present_cP0e1) {
      if (!(this_present_cP0e1 && that_present_cP0e1))
        return false;
      if (this.cP0e1 != that.cP0e1)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Metod other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Metod typedOther = (Metod)other;

    lastComparison = Boolean.valueOf(isSetObst()).compareTo(typedOther.isSetObst());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObst()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obst, typedOther.obst);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameObst()).compareTo(typedOther.isSetNameObst());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameObst()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameObst, typedOther.nameObst);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCP0e1()).compareTo(typedOther.isSetCP0e1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCP0e1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cP0e1, typedOther.cP0e1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Metod(");
    boolean first = true;

    if (isSetObst()) {
      sb.append("obst:");
      if (this.obst == null) {
        sb.append("null");
      } else {
        sb.append(this.obst);
      }
      first = false;
    }
    if (isSetNameObst()) {
      if (!first) sb.append(", ");
      sb.append("nameObst:");
      if (this.nameObst == null) {
        sb.append("null");
      } else {
        sb.append(this.nameObst);
      }
      first = false;
    }
    if (isSetCP0e1()) {
      if (!first) sb.append(", ");
      sb.append("cP0e1:");
      sb.append(this.cP0e1);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MetodStandardSchemeFactory implements SchemeFactory {
    public MetodStandardScheme getScheme() {
      return new MetodStandardScheme();
    }
  }

  private static class MetodStandardScheme extends StandardScheme<Metod> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Metod struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OBST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.obst = iprot.readString();
              struct.setObstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME_OBST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameObst = iprot.readString();
              struct.setNameObstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // C_P0E1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cP0e1 = iprot.readI32();
              struct.setCP0e1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Metod struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.obst != null) {
        if (struct.isSetObst()) {
          oprot.writeFieldBegin(OBST_FIELD_DESC);
          oprot.writeString(struct.obst);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nameObst != null) {
        if (struct.isSetNameObst()) {
          oprot.writeFieldBegin(NAME_OBST_FIELD_DESC);
          oprot.writeString(struct.nameObst);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCP0e1()) {
        oprot.writeFieldBegin(C_P0E1_FIELD_DESC);
        oprot.writeI32(struct.cP0e1);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MetodTupleSchemeFactory implements SchemeFactory {
    public MetodTupleScheme getScheme() {
      return new MetodTupleScheme();
    }
  }

  private static class MetodTupleScheme extends TupleScheme<Metod> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Metod struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetObst()) {
        optionals.set(0);
      }
      if (struct.isSetNameObst()) {
        optionals.set(1);
      }
      if (struct.isSetCP0e1()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetObst()) {
        oprot.writeString(struct.obst);
      }
      if (struct.isSetNameObst()) {
        oprot.writeString(struct.nameObst);
      }
      if (struct.isSetCP0e1()) {
        oprot.writeI32(struct.cP0e1);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Metod struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.obst = iprot.readString();
        struct.setObstIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nameObst = iprot.readString();
        struct.setNameObstIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cP0e1 = iprot.readI32();
        struct.setCP0e1IsSet(true);
      }
    }
  }

}

