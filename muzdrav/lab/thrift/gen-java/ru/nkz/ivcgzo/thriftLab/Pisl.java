/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftLab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Pisl implements org.apache.thrift.TBase<Pisl, Pisl._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Pisl");

  private static final org.apache.thrift.protocol.TField NISL_FIELD_DESC = new org.apache.thrift.protocol.TField("nisl", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CISL_FIELD_DESC = new org.apache.thrift.protocol.TField("cisl", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PCISL_FIELD_DESC = new org.apache.thrift.protocol.TField("pcisl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NAPRAVL_FIELD_DESC = new org.apache.thrift.protocol.TField("napravl", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NAPROTD_FIELD_DESC = new org.apache.thrift.protocol.TField("naprotd", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DATAN_FIELD_DESC = new org.apache.thrift.protocol.TField("datan", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField VRACH_FIELD_DESC = new org.apache.thrift.protocol.TField("vrach", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField DIAG_FIELD_DESC = new org.apache.thrift.protocol.TField("diag", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DATAZ_FIELD_DESC = new org.apache.thrift.protocol.TField("dataz", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField PVIZIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pvizitId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField GOSP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gospId", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PislStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PislTupleSchemeFactory());
  }

  public int nisl; // optional
  public int npasp; // optional
  public int cisl; // optional
  public String pcisl; // optional
  public int napravl; // optional
  public int naprotd; // optional
  public long datan; // optional
  public int vrach; // optional
  public String diag; // optional
  public long dataz; // optional
  public int pvizitId; // optional
  public int gospId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NISL((short)1, "nisl"),
    NPASP((short)2, "npasp"),
    CISL((short)3, "cisl"),
    PCISL((short)4, "pcisl"),
    NAPRAVL((short)5, "napravl"),
    NAPROTD((short)6, "naprotd"),
    DATAN((short)7, "datan"),
    VRACH((short)8, "vrach"),
    DIAG((short)9, "diag"),
    DATAZ((short)10, "dataz"),
    PVIZIT_ID((short)11, "pvizitId"),
    GOSP_ID((short)12, "gospId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NISL
          return NISL;
        case 2: // NPASP
          return NPASP;
        case 3: // CISL
          return CISL;
        case 4: // PCISL
          return PCISL;
        case 5: // NAPRAVL
          return NAPRAVL;
        case 6: // NAPROTD
          return NAPROTD;
        case 7: // DATAN
          return DATAN;
        case 8: // VRACH
          return VRACH;
        case 9: // DIAG
          return DIAG;
        case 10: // DATAZ
          return DATAZ;
        case 11: // PVIZIT_ID
          return PVIZIT_ID;
        case 12: // GOSP_ID
          return GOSP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NISL_ISSET_ID = 0;
  private static final int __NPASP_ISSET_ID = 1;
  private static final int __CISL_ISSET_ID = 2;
  private static final int __NAPRAVL_ISSET_ID = 3;
  private static final int __NAPROTD_ISSET_ID = 4;
  private static final int __DATAN_ISSET_ID = 5;
  private static final int __VRACH_ISSET_ID = 6;
  private static final int __DATAZ_ISSET_ID = 7;
  private static final int __PVIZITID_ISSET_ID = 8;
  private static final int __GOSPID_ISSET_ID = 9;
  private BitSet __isset_bit_vector = new BitSet(10);
  private _Fields optionals[] = {_Fields.NISL,_Fields.NPASP,_Fields.CISL,_Fields.PCISL,_Fields.NAPRAVL,_Fields.NAPROTD,_Fields.DATAN,_Fields.VRACH,_Fields.DIAG,_Fields.DATAZ,_Fields.PVIZIT_ID,_Fields.GOSP_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NISL, new org.apache.thrift.meta_data.FieldMetaData("nisl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CISL, new org.apache.thrift.meta_data.FieldMetaData("cisl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PCISL, new org.apache.thrift.meta_data.FieldMetaData("pcisl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAPRAVL, new org.apache.thrift.meta_data.FieldMetaData("napravl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAPROTD, new org.apache.thrift.meta_data.FieldMetaData("naprotd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATAN, new org.apache.thrift.meta_data.FieldMetaData("datan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VRACH, new org.apache.thrift.meta_data.FieldMetaData("vrach", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIAG, new org.apache.thrift.meta_data.FieldMetaData("diag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATAZ, new org.apache.thrift.meta_data.FieldMetaData("dataz", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PVIZIT_ID, new org.apache.thrift.meta_data.FieldMetaData("pvizitId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GOSP_ID, new org.apache.thrift.meta_data.FieldMetaData("gospId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Pisl.class, metaDataMap);
  }

  public Pisl() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Pisl(Pisl other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.nisl = other.nisl;
    this.npasp = other.npasp;
    this.cisl = other.cisl;
    if (other.isSetPcisl()) {
      this.pcisl = other.pcisl;
    }
    this.napravl = other.napravl;
    this.naprotd = other.naprotd;
    this.datan = other.datan;
    this.vrach = other.vrach;
    if (other.isSetDiag()) {
      this.diag = other.diag;
    }
    this.dataz = other.dataz;
    this.pvizitId = other.pvizitId;
    this.gospId = other.gospId;
  }

  public Pisl deepCopy() {
    return new Pisl(this);
  }

  @Override
  public void clear() {
    setNislIsSet(false);
    this.nisl = 0;
    setNpaspIsSet(false);
    this.npasp = 0;
    setCislIsSet(false);
    this.cisl = 0;
    this.pcisl = null;
    setNapravlIsSet(false);
    this.napravl = 0;
    setNaprotdIsSet(false);
    this.naprotd = 0;
    setDatanIsSet(false);
    this.datan = 0;
    setVrachIsSet(false);
    this.vrach = 0;
    this.diag = null;
    setDatazIsSet(false);
    this.dataz = 0;
    setPvizitIdIsSet(false);
    this.pvizitId = 0;
    setGospIdIsSet(false);
    this.gospId = 0;
  }

  public int getNisl() {
    return this.nisl;
  }

  public Pisl setNisl(int nisl) {
    this.nisl = nisl;
    setNislIsSet(true);
    return this;
  }

  public void unsetNisl() {
    __isset_bit_vector.clear(__NISL_ISSET_ID);
  }

  /** Returns true if field nisl is set (has been assigned a value) and false otherwise */
  public boolean isSetNisl() {
    return __isset_bit_vector.get(__NISL_ISSET_ID);
  }

  public void setNislIsSet(boolean value) {
    __isset_bit_vector.set(__NISL_ISSET_ID, value);
  }

  public int getNpasp() {
    return this.npasp;
  }

  public Pisl setNpasp(int npasp) {
    this.npasp = npasp;
    setNpaspIsSet(true);
    return this;
  }

  public void unsetNpasp() {
    __isset_bit_vector.clear(__NPASP_ISSET_ID);
  }

  /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
  public boolean isSetNpasp() {
    return __isset_bit_vector.get(__NPASP_ISSET_ID);
  }

  public void setNpaspIsSet(boolean value) {
    __isset_bit_vector.set(__NPASP_ISSET_ID, value);
  }

  public int getCisl() {
    return this.cisl;
  }

  public Pisl setCisl(int cisl) {
    this.cisl = cisl;
    setCislIsSet(true);
    return this;
  }

  public void unsetCisl() {
    __isset_bit_vector.clear(__CISL_ISSET_ID);
  }

  /** Returns true if field cisl is set (has been assigned a value) and false otherwise */
  public boolean isSetCisl() {
    return __isset_bit_vector.get(__CISL_ISSET_ID);
  }

  public void setCislIsSet(boolean value) {
    __isset_bit_vector.set(__CISL_ISSET_ID, value);
  }

  public String getPcisl() {
    return this.pcisl;
  }

  public Pisl setPcisl(String pcisl) {
    this.pcisl = pcisl;
    return this;
  }

  public void unsetPcisl() {
    this.pcisl = null;
  }

  /** Returns true if field pcisl is set (has been assigned a value) and false otherwise */
  public boolean isSetPcisl() {
    return this.pcisl != null;
  }

  public void setPcislIsSet(boolean value) {
    if (!value) {
      this.pcisl = null;
    }
  }

  public int getNapravl() {
    return this.napravl;
  }

  public Pisl setNapravl(int napravl) {
    this.napravl = napravl;
    setNapravlIsSet(true);
    return this;
  }

  public void unsetNapravl() {
    __isset_bit_vector.clear(__NAPRAVL_ISSET_ID);
  }

  /** Returns true if field napravl is set (has been assigned a value) and false otherwise */
  public boolean isSetNapravl() {
    return __isset_bit_vector.get(__NAPRAVL_ISSET_ID);
  }

  public void setNapravlIsSet(boolean value) {
    __isset_bit_vector.set(__NAPRAVL_ISSET_ID, value);
  }

  public int getNaprotd() {
    return this.naprotd;
  }

  public Pisl setNaprotd(int naprotd) {
    this.naprotd = naprotd;
    setNaprotdIsSet(true);
    return this;
  }

  public void unsetNaprotd() {
    __isset_bit_vector.clear(__NAPROTD_ISSET_ID);
  }

  /** Returns true if field naprotd is set (has been assigned a value) and false otherwise */
  public boolean isSetNaprotd() {
    return __isset_bit_vector.get(__NAPROTD_ISSET_ID);
  }

  public void setNaprotdIsSet(boolean value) {
    __isset_bit_vector.set(__NAPROTD_ISSET_ID, value);
  }

  public long getDatan() {
    return this.datan;
  }

  public Pisl setDatan(long datan) {
    this.datan = datan;
    setDatanIsSet(true);
    return this;
  }

  public void unsetDatan() {
    __isset_bit_vector.clear(__DATAN_ISSET_ID);
  }

  /** Returns true if field datan is set (has been assigned a value) and false otherwise */
  public boolean isSetDatan() {
    return __isset_bit_vector.get(__DATAN_ISSET_ID);
  }

  public void setDatanIsSet(boolean value) {
    __isset_bit_vector.set(__DATAN_ISSET_ID, value);
  }

  public int getVrach() {
    return this.vrach;
  }

  public Pisl setVrach(int vrach) {
    this.vrach = vrach;
    setVrachIsSet(true);
    return this;
  }

  public void unsetVrach() {
    __isset_bit_vector.clear(__VRACH_ISSET_ID);
  }

  /** Returns true if field vrach is set (has been assigned a value) and false otherwise */
  public boolean isSetVrach() {
    return __isset_bit_vector.get(__VRACH_ISSET_ID);
  }

  public void setVrachIsSet(boolean value) {
    __isset_bit_vector.set(__VRACH_ISSET_ID, value);
  }

  public String getDiag() {
    return this.diag;
  }

  public Pisl setDiag(String diag) {
    this.diag = diag;
    return this;
  }

  public void unsetDiag() {
    this.diag = null;
  }

  /** Returns true if field diag is set (has been assigned a value) and false otherwise */
  public boolean isSetDiag() {
    return this.diag != null;
  }

  public void setDiagIsSet(boolean value) {
    if (!value) {
      this.diag = null;
    }
  }

  public long getDataz() {
    return this.dataz;
  }

  public Pisl setDataz(long dataz) {
    this.dataz = dataz;
    setDatazIsSet(true);
    return this;
  }

  public void unsetDataz() {
    __isset_bit_vector.clear(__DATAZ_ISSET_ID);
  }

  /** Returns true if field dataz is set (has been assigned a value) and false otherwise */
  public boolean isSetDataz() {
    return __isset_bit_vector.get(__DATAZ_ISSET_ID);
  }

  public void setDatazIsSet(boolean value) {
    __isset_bit_vector.set(__DATAZ_ISSET_ID, value);
  }

  public int getPvizitId() {
    return this.pvizitId;
  }

  public Pisl setPvizitId(int pvizitId) {
    this.pvizitId = pvizitId;
    setPvizitIdIsSet(true);
    return this;
  }

  public void unsetPvizitId() {
    __isset_bit_vector.clear(__PVIZITID_ISSET_ID);
  }

  /** Returns true if field pvizitId is set (has been assigned a value) and false otherwise */
  public boolean isSetPvizitId() {
    return __isset_bit_vector.get(__PVIZITID_ISSET_ID);
  }

  public void setPvizitIdIsSet(boolean value) {
    __isset_bit_vector.set(__PVIZITID_ISSET_ID, value);
  }

  public int getGospId() {
    return this.gospId;
  }

  public Pisl setGospId(int gospId) {
    this.gospId = gospId;
    setGospIdIsSet(true);
    return this;
  }

  public void unsetGospId() {
    __isset_bit_vector.clear(__GOSPID_ISSET_ID);
  }

  /** Returns true if field gospId is set (has been assigned a value) and false otherwise */
  public boolean isSetGospId() {
    return __isset_bit_vector.get(__GOSPID_ISSET_ID);
  }

  public void setGospIdIsSet(boolean value) {
    __isset_bit_vector.set(__GOSPID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NISL:
      if (value == null) {
        unsetNisl();
      } else {
        setNisl((Integer)value);
      }
      break;

    case NPASP:
      if (value == null) {
        unsetNpasp();
      } else {
        setNpasp((Integer)value);
      }
      break;

    case CISL:
      if (value == null) {
        unsetCisl();
      } else {
        setCisl((Integer)value);
      }
      break;

    case PCISL:
      if (value == null) {
        unsetPcisl();
      } else {
        setPcisl((String)value);
      }
      break;

    case NAPRAVL:
      if (value == null) {
        unsetNapravl();
      } else {
        setNapravl((Integer)value);
      }
      break;

    case NAPROTD:
      if (value == null) {
        unsetNaprotd();
      } else {
        setNaprotd((Integer)value);
      }
      break;

    case DATAN:
      if (value == null) {
        unsetDatan();
      } else {
        setDatan((Long)value);
      }
      break;

    case VRACH:
      if (value == null) {
        unsetVrach();
      } else {
        setVrach((Integer)value);
      }
      break;

    case DIAG:
      if (value == null) {
        unsetDiag();
      } else {
        setDiag((String)value);
      }
      break;

    case DATAZ:
      if (value == null) {
        unsetDataz();
      } else {
        setDataz((Long)value);
      }
      break;

    case PVIZIT_ID:
      if (value == null) {
        unsetPvizitId();
      } else {
        setPvizitId((Integer)value);
      }
      break;

    case GOSP_ID:
      if (value == null) {
        unsetGospId();
      } else {
        setGospId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NISL:
      return Integer.valueOf(getNisl());

    case NPASP:
      return Integer.valueOf(getNpasp());

    case CISL:
      return Integer.valueOf(getCisl());

    case PCISL:
      return getPcisl();

    case NAPRAVL:
      return Integer.valueOf(getNapravl());

    case NAPROTD:
      return Integer.valueOf(getNaprotd());

    case DATAN:
      return Long.valueOf(getDatan());

    case VRACH:
      return Integer.valueOf(getVrach());

    case DIAG:
      return getDiag();

    case DATAZ:
      return Long.valueOf(getDataz());

    case PVIZIT_ID:
      return Integer.valueOf(getPvizitId());

    case GOSP_ID:
      return Integer.valueOf(getGospId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NISL:
      return isSetNisl();
    case NPASP:
      return isSetNpasp();
    case CISL:
      return isSetCisl();
    case PCISL:
      return isSetPcisl();
    case NAPRAVL:
      return isSetNapravl();
    case NAPROTD:
      return isSetNaprotd();
    case DATAN:
      return isSetDatan();
    case VRACH:
      return isSetVrach();
    case DIAG:
      return isSetDiag();
    case DATAZ:
      return isSetDataz();
    case PVIZIT_ID:
      return isSetPvizitId();
    case GOSP_ID:
      return isSetGospId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Pisl)
      return this.equals((Pisl)that);
    return false;
  }

  public boolean equals(Pisl that) {
    if (that == null)
      return false;

    boolean this_present_nisl = true && this.isSetNisl();
    boolean that_present_nisl = true && that.isSetNisl();
    if (this_present_nisl || that_present_nisl) {
      if (!(this_present_nisl && that_present_nisl))
        return false;
      if (this.nisl != that.nisl)
        return false;
    }

    boolean this_present_npasp = true && this.isSetNpasp();
    boolean that_present_npasp = true && that.isSetNpasp();
    if (this_present_npasp || that_present_npasp) {
      if (!(this_present_npasp && that_present_npasp))
        return false;
      if (this.npasp != that.npasp)
        return false;
    }

    boolean this_present_cisl = true && this.isSetCisl();
    boolean that_present_cisl = true && that.isSetCisl();
    if (this_present_cisl || that_present_cisl) {
      if (!(this_present_cisl && that_present_cisl))
        return false;
      if (this.cisl != that.cisl)
        return false;
    }

    boolean this_present_pcisl = true && this.isSetPcisl();
    boolean that_present_pcisl = true && that.isSetPcisl();
    if (this_present_pcisl || that_present_pcisl) {
      if (!(this_present_pcisl && that_present_pcisl))
        return false;
      if (!this.pcisl.equals(that.pcisl))
        return false;
    }

    boolean this_present_napravl = true && this.isSetNapravl();
    boolean that_present_napravl = true && that.isSetNapravl();
    if (this_present_napravl || that_present_napravl) {
      if (!(this_present_napravl && that_present_napravl))
        return false;
      if (this.napravl != that.napravl)
        return false;
    }

    boolean this_present_naprotd = true && this.isSetNaprotd();
    boolean that_present_naprotd = true && that.isSetNaprotd();
    if (this_present_naprotd || that_present_naprotd) {
      if (!(this_present_naprotd && that_present_naprotd))
        return false;
      if (this.naprotd != that.naprotd)
        return false;
    }

    boolean this_present_datan = true && this.isSetDatan();
    boolean that_present_datan = true && that.isSetDatan();
    if (this_present_datan || that_present_datan) {
      if (!(this_present_datan && that_present_datan))
        return false;
      if (this.datan != that.datan)
        return false;
    }

    boolean this_present_vrach = true && this.isSetVrach();
    boolean that_present_vrach = true && that.isSetVrach();
    if (this_present_vrach || that_present_vrach) {
      if (!(this_present_vrach && that_present_vrach))
        return false;
      if (this.vrach != that.vrach)
        return false;
    }

    boolean this_present_diag = true && this.isSetDiag();
    boolean that_present_diag = true && that.isSetDiag();
    if (this_present_diag || that_present_diag) {
      if (!(this_present_diag && that_present_diag))
        return false;
      if (!this.diag.equals(that.diag))
        return false;
    }

    boolean this_present_dataz = true && this.isSetDataz();
    boolean that_present_dataz = true && that.isSetDataz();
    if (this_present_dataz || that_present_dataz) {
      if (!(this_present_dataz && that_present_dataz))
        return false;
      if (this.dataz != that.dataz)
        return false;
    }

    boolean this_present_pvizitId = true && this.isSetPvizitId();
    boolean that_present_pvizitId = true && that.isSetPvizitId();
    if (this_present_pvizitId || that_present_pvizitId) {
      if (!(this_present_pvizitId && that_present_pvizitId))
        return false;
      if (this.pvizitId != that.pvizitId)
        return false;
    }

    boolean this_present_gospId = true && this.isSetGospId();
    boolean that_present_gospId = true && that.isSetGospId();
    if (this_present_gospId || that_present_gospId) {
      if (!(this_present_gospId && that_present_gospId))
        return false;
      if (this.gospId != that.gospId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Pisl other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Pisl typedOther = (Pisl)other;

    lastComparison = Boolean.valueOf(isSetNisl()).compareTo(typedOther.isSetNisl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNisl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nisl, typedOther.nisl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNpasp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCisl()).compareTo(typedOther.isSetCisl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCisl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cisl, typedOther.cisl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPcisl()).compareTo(typedOther.isSetPcisl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPcisl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcisl, typedOther.pcisl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNapravl()).compareTo(typedOther.isSetNapravl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNapravl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.napravl, typedOther.napravl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNaprotd()).compareTo(typedOther.isSetNaprotd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNaprotd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.naprotd, typedOther.naprotd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatan()).compareTo(typedOther.isSetDatan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datan, typedOther.datan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVrach()).compareTo(typedOther.isSetVrach());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVrach()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vrach, typedOther.vrach);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiag()).compareTo(typedOther.isSetDiag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diag, typedOther.diag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataz()).compareTo(typedOther.isSetDataz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataz, typedOther.dataz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPvizitId()).compareTo(typedOther.isSetPvizitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPvizitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pvizitId, typedOther.pvizitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGospId()).compareTo(typedOther.isSetGospId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGospId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gospId, typedOther.gospId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Pisl(");
    boolean first = true;

    if (isSetNisl()) {
      sb.append("nisl:");
      sb.append(this.nisl);
      first = false;
    }
    if (isSetNpasp()) {
      if (!first) sb.append(", ");
      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
    }
    if (isSetCisl()) {
      if (!first) sb.append(", ");
      sb.append("cisl:");
      sb.append(this.cisl);
      first = false;
    }
    if (isSetPcisl()) {
      if (!first) sb.append(", ");
      sb.append("pcisl:");
      if (this.pcisl == null) {
        sb.append("null");
      } else {
        sb.append(this.pcisl);
      }
      first = false;
    }
    if (isSetNapravl()) {
      if (!first) sb.append(", ");
      sb.append("napravl:");
      sb.append(this.napravl);
      first = false;
    }
    if (isSetNaprotd()) {
      if (!first) sb.append(", ");
      sb.append("naprotd:");
      sb.append(this.naprotd);
      first = false;
    }
    if (isSetDatan()) {
      if (!first) sb.append(", ");
      sb.append("datan:");
      sb.append(this.datan);
      first = false;
    }
    if (isSetVrach()) {
      if (!first) sb.append(", ");
      sb.append("vrach:");
      sb.append(this.vrach);
      first = false;
    }
    if (isSetDiag()) {
      if (!first) sb.append(", ");
      sb.append("diag:");
      if (this.diag == null) {
        sb.append("null");
      } else {
        sb.append(this.diag);
      }
      first = false;
    }
    if (isSetDataz()) {
      if (!first) sb.append(", ");
      sb.append("dataz:");
      sb.append(this.dataz);
      first = false;
    }
    if (isSetPvizitId()) {
      if (!first) sb.append(", ");
      sb.append("pvizitId:");
      sb.append(this.pvizitId);
      first = false;
    }
    if (isSetGospId()) {
      if (!first) sb.append(", ");
      sb.append("gospId:");
      sb.append(this.gospId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PislStandardSchemeFactory implements SchemeFactory {
    public PislStandardScheme getScheme() {
      return new PislStandardScheme();
    }
  }

  private static class PislStandardScheme extends StandardScheme<Pisl> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Pisl struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NISL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nisl = iprot.readI32();
              struct.setNislIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NPASP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.npasp = iprot.readI32();
              struct.setNpaspIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CISL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cisl = iprot.readI32();
              struct.setCislIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PCISL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pcisl = iprot.readString();
              struct.setPcislIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAPRAVL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.napravl = iprot.readI32();
              struct.setNapravlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAPROTD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.naprotd = iprot.readI32();
              struct.setNaprotdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datan = iprot.readI64();
              struct.setDatanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VRACH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vrach = iprot.readI32();
              struct.setVrachIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DIAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.diag = iprot.readString();
              struct.setDiagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DATAZ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataz = iprot.readI64();
              struct.setDatazIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PVIZIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pvizitId = iprot.readI32();
              struct.setPvizitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // GOSP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gospId = iprot.readI32();
              struct.setGospIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Pisl struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetNisl()) {
        oprot.writeFieldBegin(NISL_FIELD_DESC);
        oprot.writeI32(struct.nisl);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNpasp()) {
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCisl()) {
        oprot.writeFieldBegin(CISL_FIELD_DESC);
        oprot.writeI32(struct.cisl);
        oprot.writeFieldEnd();
      }
      if (struct.pcisl != null) {
        if (struct.isSetPcisl()) {
          oprot.writeFieldBegin(PCISL_FIELD_DESC);
          oprot.writeString(struct.pcisl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNapravl()) {
        oprot.writeFieldBegin(NAPRAVL_FIELD_DESC);
        oprot.writeI32(struct.napravl);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNaprotd()) {
        oprot.writeFieldBegin(NAPROTD_FIELD_DESC);
        oprot.writeI32(struct.naprotd);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDatan()) {
        oprot.writeFieldBegin(DATAN_FIELD_DESC);
        oprot.writeI64(struct.datan);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVrach()) {
        oprot.writeFieldBegin(VRACH_FIELD_DESC);
        oprot.writeI32(struct.vrach);
        oprot.writeFieldEnd();
      }
      if (struct.diag != null) {
        if (struct.isSetDiag()) {
          oprot.writeFieldBegin(DIAG_FIELD_DESC);
          oprot.writeString(struct.diag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDataz()) {
        oprot.writeFieldBegin(DATAZ_FIELD_DESC);
        oprot.writeI64(struct.dataz);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPvizitId()) {
        oprot.writeFieldBegin(PVIZIT_ID_FIELD_DESC);
        oprot.writeI32(struct.pvizitId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGospId()) {
        oprot.writeFieldBegin(GOSP_ID_FIELD_DESC);
        oprot.writeI32(struct.gospId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PislTupleSchemeFactory implements SchemeFactory {
    public PislTupleScheme getScheme() {
      return new PislTupleScheme();
    }
  }

  private static class PislTupleScheme extends TupleScheme<Pisl> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Pisl struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNisl()) {
        optionals.set(0);
      }
      if (struct.isSetNpasp()) {
        optionals.set(1);
      }
      if (struct.isSetCisl()) {
        optionals.set(2);
      }
      if (struct.isSetPcisl()) {
        optionals.set(3);
      }
      if (struct.isSetNapravl()) {
        optionals.set(4);
      }
      if (struct.isSetNaprotd()) {
        optionals.set(5);
      }
      if (struct.isSetDatan()) {
        optionals.set(6);
      }
      if (struct.isSetVrach()) {
        optionals.set(7);
      }
      if (struct.isSetDiag()) {
        optionals.set(8);
      }
      if (struct.isSetDataz()) {
        optionals.set(9);
      }
      if (struct.isSetPvizitId()) {
        optionals.set(10);
      }
      if (struct.isSetGospId()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetNisl()) {
        oprot.writeI32(struct.nisl);
      }
      if (struct.isSetNpasp()) {
        oprot.writeI32(struct.npasp);
      }
      if (struct.isSetCisl()) {
        oprot.writeI32(struct.cisl);
      }
      if (struct.isSetPcisl()) {
        oprot.writeString(struct.pcisl);
      }
      if (struct.isSetNapravl()) {
        oprot.writeI32(struct.napravl);
      }
      if (struct.isSetNaprotd()) {
        oprot.writeI32(struct.naprotd);
      }
      if (struct.isSetDatan()) {
        oprot.writeI64(struct.datan);
      }
      if (struct.isSetVrach()) {
        oprot.writeI32(struct.vrach);
      }
      if (struct.isSetDiag()) {
        oprot.writeString(struct.diag);
      }
      if (struct.isSetDataz()) {
        oprot.writeI64(struct.dataz);
      }
      if (struct.isSetPvizitId()) {
        oprot.writeI32(struct.pvizitId);
      }
      if (struct.isSetGospId()) {
        oprot.writeI32(struct.gospId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Pisl struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.nisl = iprot.readI32();
        struct.setNislIsSet(true);
      }
      if (incoming.get(1)) {
        struct.npasp = iprot.readI32();
        struct.setNpaspIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cisl = iprot.readI32();
        struct.setCislIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pcisl = iprot.readString();
        struct.setPcislIsSet(true);
      }
      if (incoming.get(4)) {
        struct.napravl = iprot.readI32();
        struct.setNapravlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.naprotd = iprot.readI32();
        struct.setNaprotdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.datan = iprot.readI64();
        struct.setDatanIsSet(true);
      }
      if (incoming.get(7)) {
        struct.vrach = iprot.readI32();
        struct.setVrachIsSet(true);
      }
      if (incoming.get(8)) {
        struct.diag = iprot.readString();
        struct.setDiagIsSet(true);
      }
      if (incoming.get(9)) {
        struct.dataz = iprot.readI64();
        struct.setDatazIsSet(true);
      }
      if (incoming.get(10)) {
        struct.pvizitId = iprot.readI32();
        struct.setPvizitIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.gospId = iprot.readI32();
        struct.setGospIdIsSet(true);
      }
    }
  }

}

