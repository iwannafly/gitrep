/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftLab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Pokaz implements org.apache.thrift.TBase<Pokaz, Pokaz._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Pokaz");

  private static final org.apache.thrift.protocol.TField PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("pcod", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_N_FIELD_DESC = new org.apache.thrift.protocol.TField("nameN", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STOIM_FIELD_DESC = new org.apache.thrift.protocol.TField("stoim", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField C_P0E1_FIELD_DESC = new org.apache.thrift.protocol.TField("cP0e1", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField C_NNZ1_FIELD_DESC = new org.apache.thrift.protocol.TField("cNnz1", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VYBOR_FIELD_DESC = new org.apache.thrift.protocol.TField("vybor", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PokazStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PokazTupleSchemeFactory());
  }

  public String pcod; // optional
  public String nameN; // optional
  public double stoim; // optional
  public int cP0e1; // optional
  public String cNnz1; // optional
  public boolean vybor; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PCOD((short)1, "pcod"),
    NAME_N((short)2, "nameN"),
    STOIM((short)3, "stoim"),
    C_P0E1((short)4, "cP0e1"),
    C_NNZ1((short)5, "cNnz1"),
    VYBOR((short)6, "vybor");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PCOD
          return PCOD;
        case 2: // NAME_N
          return NAME_N;
        case 3: // STOIM
          return STOIM;
        case 4: // C_P0E1
          return C_P0E1;
        case 5: // C_NNZ1
          return C_NNZ1;
        case 6: // VYBOR
          return VYBOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STOIM_ISSET_ID = 0;
  private static final int __CP0E1_ISSET_ID = 1;
  private static final int __VYBOR_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  private _Fields optionals[] = {_Fields.PCOD,_Fields.NAME_N,_Fields.STOIM,_Fields.C_P0E1,_Fields.C_NNZ1,_Fields.VYBOR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PCOD, new org.apache.thrift.meta_data.FieldMetaData("pcod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_N, new org.apache.thrift.meta_data.FieldMetaData("nameN", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOIM, new org.apache.thrift.meta_data.FieldMetaData("stoim", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.C_P0E1, new org.apache.thrift.meta_data.FieldMetaData("cP0e1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.C_NNZ1, new org.apache.thrift.meta_data.FieldMetaData("cNnz1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VYBOR, new org.apache.thrift.meta_data.FieldMetaData("vybor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Pokaz.class, metaDataMap);
  }

  public Pokaz() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Pokaz(Pokaz other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetPcod()) {
      this.pcod = other.pcod;
    }
    if (other.isSetNameN()) {
      this.nameN = other.nameN;
    }
    this.stoim = other.stoim;
    this.cP0e1 = other.cP0e1;
    if (other.isSetCNnz1()) {
      this.cNnz1 = other.cNnz1;
    }
    this.vybor = other.vybor;
  }

  public Pokaz deepCopy() {
    return new Pokaz(this);
  }

  @Override
  public void clear() {
    this.pcod = null;
    this.nameN = null;
    setStoimIsSet(false);
    this.stoim = 0.0;
    setCP0e1IsSet(false);
    this.cP0e1 = 0;
    this.cNnz1 = null;
    setVyborIsSet(false);
    this.vybor = false;
  }

  public String getPcod() {
    return this.pcod;
  }

  public Pokaz setPcod(String pcod) {
    this.pcod = pcod;
    return this;
  }

  public void unsetPcod() {
    this.pcod = null;
  }

  /** Returns true if field pcod is set (has been assigned a value) and false otherwise */
  public boolean isSetPcod() {
    return this.pcod != null;
  }

  public void setPcodIsSet(boolean value) {
    if (!value) {
      this.pcod = null;
    }
  }

  public String getNameN() {
    return this.nameN;
  }

  public Pokaz setNameN(String nameN) {
    this.nameN = nameN;
    return this;
  }

  public void unsetNameN() {
    this.nameN = null;
  }

  /** Returns true if field nameN is set (has been assigned a value) and false otherwise */
  public boolean isSetNameN() {
    return this.nameN != null;
  }

  public void setNameNIsSet(boolean value) {
    if (!value) {
      this.nameN = null;
    }
  }

  public double getStoim() {
    return this.stoim;
  }

  public Pokaz setStoim(double stoim) {
    this.stoim = stoim;
    setStoimIsSet(true);
    return this;
  }

  public void unsetStoim() {
    __isset_bit_vector.clear(__STOIM_ISSET_ID);
  }

  /** Returns true if field stoim is set (has been assigned a value) and false otherwise */
  public boolean isSetStoim() {
    return __isset_bit_vector.get(__STOIM_ISSET_ID);
  }

  public void setStoimIsSet(boolean value) {
    __isset_bit_vector.set(__STOIM_ISSET_ID, value);
  }

  public int getCP0e1() {
    return this.cP0e1;
  }

  public Pokaz setCP0e1(int cP0e1) {
    this.cP0e1 = cP0e1;
    setCP0e1IsSet(true);
    return this;
  }

  public void unsetCP0e1() {
    __isset_bit_vector.clear(__CP0E1_ISSET_ID);
  }

  /** Returns true if field cP0e1 is set (has been assigned a value) and false otherwise */
  public boolean isSetCP0e1() {
    return __isset_bit_vector.get(__CP0E1_ISSET_ID);
  }

  public void setCP0e1IsSet(boolean value) {
    __isset_bit_vector.set(__CP0E1_ISSET_ID, value);
  }

  public String getCNnz1() {
    return this.cNnz1;
  }

  public Pokaz setCNnz1(String cNnz1) {
    this.cNnz1 = cNnz1;
    return this;
  }

  public void unsetCNnz1() {
    this.cNnz1 = null;
  }

  /** Returns true if field cNnz1 is set (has been assigned a value) and false otherwise */
  public boolean isSetCNnz1() {
    return this.cNnz1 != null;
  }

  public void setCNnz1IsSet(boolean value) {
    if (!value) {
      this.cNnz1 = null;
    }
  }

  public boolean isVybor() {
    return this.vybor;
  }

  public Pokaz setVybor(boolean vybor) {
    this.vybor = vybor;
    setVyborIsSet(true);
    return this;
  }

  public void unsetVybor() {
    __isset_bit_vector.clear(__VYBOR_ISSET_ID);
  }

  /** Returns true if field vybor is set (has been assigned a value) and false otherwise */
  public boolean isSetVybor() {
    return __isset_bit_vector.get(__VYBOR_ISSET_ID);
  }

  public void setVyborIsSet(boolean value) {
    __isset_bit_vector.set(__VYBOR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PCOD:
      if (value == null) {
        unsetPcod();
      } else {
        setPcod((String)value);
      }
      break;

    case NAME_N:
      if (value == null) {
        unsetNameN();
      } else {
        setNameN((String)value);
      }
      break;

    case STOIM:
      if (value == null) {
        unsetStoim();
      } else {
        setStoim((Double)value);
      }
      break;

    case C_P0E1:
      if (value == null) {
        unsetCP0e1();
      } else {
        setCP0e1((Integer)value);
      }
      break;

    case C_NNZ1:
      if (value == null) {
        unsetCNnz1();
      } else {
        setCNnz1((String)value);
      }
      break;

    case VYBOR:
      if (value == null) {
        unsetVybor();
      } else {
        setVybor((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PCOD:
      return getPcod();

    case NAME_N:
      return getNameN();

    case STOIM:
      return Double.valueOf(getStoim());

    case C_P0E1:
      return Integer.valueOf(getCP0e1());

    case C_NNZ1:
      return getCNnz1();

    case VYBOR:
      return Boolean.valueOf(isVybor());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PCOD:
      return isSetPcod();
    case NAME_N:
      return isSetNameN();
    case STOIM:
      return isSetStoim();
    case C_P0E1:
      return isSetCP0e1();
    case C_NNZ1:
      return isSetCNnz1();
    case VYBOR:
      return isSetVybor();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Pokaz)
      return this.equals((Pokaz)that);
    return false;
  }

  public boolean equals(Pokaz that) {
    if (that == null)
      return false;

    boolean this_present_pcod = true && this.isSetPcod();
    boolean that_present_pcod = true && that.isSetPcod();
    if (this_present_pcod || that_present_pcod) {
      if (!(this_present_pcod && that_present_pcod))
        return false;
      if (!this.pcod.equals(that.pcod))
        return false;
    }

    boolean this_present_nameN = true && this.isSetNameN();
    boolean that_present_nameN = true && that.isSetNameN();
    if (this_present_nameN || that_present_nameN) {
      if (!(this_present_nameN && that_present_nameN))
        return false;
      if (!this.nameN.equals(that.nameN))
        return false;
    }

    boolean this_present_stoim = true && this.isSetStoim();
    boolean that_present_stoim = true && that.isSetStoim();
    if (this_present_stoim || that_present_stoim) {
      if (!(this_present_stoim && that_present_stoim))
        return false;
      if (this.stoim != that.stoim)
        return false;
    }

    boolean this_present_cP0e1 = true && this.isSetCP0e1();
    boolean that_present_cP0e1 = true && that.isSetCP0e1();
    if (this_present_cP0e1 || that_present_cP0e1) {
      if (!(this_present_cP0e1 && that_present_cP0e1))
        return false;
      if (this.cP0e1 != that.cP0e1)
        return false;
    }

    boolean this_present_cNnz1 = true && this.isSetCNnz1();
    boolean that_present_cNnz1 = true && that.isSetCNnz1();
    if (this_present_cNnz1 || that_present_cNnz1) {
      if (!(this_present_cNnz1 && that_present_cNnz1))
        return false;
      if (!this.cNnz1.equals(that.cNnz1))
        return false;
    }

    boolean this_present_vybor = true && this.isSetVybor();
    boolean that_present_vybor = true && that.isSetVybor();
    if (this_present_vybor || that_present_vybor) {
      if (!(this_present_vybor && that_present_vybor))
        return false;
      if (this.vybor != that.vybor)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Pokaz other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Pokaz typedOther = (Pokaz)other;

    lastComparison = Boolean.valueOf(isSetPcod()).compareTo(typedOther.isSetPcod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPcod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcod, typedOther.pcod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameN()).compareTo(typedOther.isSetNameN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameN, typedOther.nameN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStoim()).compareTo(typedOther.isSetStoim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stoim, typedOther.stoim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCP0e1()).compareTo(typedOther.isSetCP0e1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCP0e1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cP0e1, typedOther.cP0e1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCNnz1()).compareTo(typedOther.isSetCNnz1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCNnz1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cNnz1, typedOther.cNnz1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVybor()).compareTo(typedOther.isSetVybor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVybor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vybor, typedOther.vybor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Pokaz(");
    boolean first = true;

    if (isSetPcod()) {
      sb.append("pcod:");
      if (this.pcod == null) {
        sb.append("null");
      } else {
        sb.append(this.pcod);
      }
      first = false;
    }
    if (isSetNameN()) {
      if (!first) sb.append(", ");
      sb.append("nameN:");
      if (this.nameN == null) {
        sb.append("null");
      } else {
        sb.append(this.nameN);
      }
      first = false;
    }
    if (isSetStoim()) {
      if (!first) sb.append(", ");
      sb.append("stoim:");
      sb.append(this.stoim);
      first = false;
    }
    if (isSetCP0e1()) {
      if (!first) sb.append(", ");
      sb.append("cP0e1:");
      sb.append(this.cP0e1);
      first = false;
    }
    if (isSetCNnz1()) {
      if (!first) sb.append(", ");
      sb.append("cNnz1:");
      if (this.cNnz1 == null) {
        sb.append("null");
      } else {
        sb.append(this.cNnz1);
      }
      first = false;
    }
    if (isSetVybor()) {
      if (!first) sb.append(", ");
      sb.append("vybor:");
      sb.append(this.vybor);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PokazStandardSchemeFactory implements SchemeFactory {
    public PokazStandardScheme getScheme() {
      return new PokazStandardScheme();
    }
  }

  private static class PokazStandardScheme extends StandardScheme<Pokaz> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Pokaz struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PCOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pcod = iprot.readString();
              struct.setPcodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME_N
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameN = iprot.readString();
              struct.setNameNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STOIM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.stoim = iprot.readDouble();
              struct.setStoimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // C_P0E1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cP0e1 = iprot.readI32();
              struct.setCP0e1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // C_NNZ1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cNnz1 = iprot.readString();
              struct.setCNnz1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VYBOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.vybor = iprot.readBool();
              struct.setVyborIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Pokaz struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pcod != null) {
        if (struct.isSetPcod()) {
          oprot.writeFieldBegin(PCOD_FIELD_DESC);
          oprot.writeString(struct.pcod);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nameN != null) {
        if (struct.isSetNameN()) {
          oprot.writeFieldBegin(NAME_N_FIELD_DESC);
          oprot.writeString(struct.nameN);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStoim()) {
        oprot.writeFieldBegin(STOIM_FIELD_DESC);
        oprot.writeDouble(struct.stoim);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCP0e1()) {
        oprot.writeFieldBegin(C_P0E1_FIELD_DESC);
        oprot.writeI32(struct.cP0e1);
        oprot.writeFieldEnd();
      }
      if (struct.cNnz1 != null) {
        if (struct.isSetCNnz1()) {
          oprot.writeFieldBegin(C_NNZ1_FIELD_DESC);
          oprot.writeString(struct.cNnz1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVybor()) {
        oprot.writeFieldBegin(VYBOR_FIELD_DESC);
        oprot.writeBool(struct.vybor);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PokazTupleSchemeFactory implements SchemeFactory {
    public PokazTupleScheme getScheme() {
      return new PokazTupleScheme();
    }
  }

  private static class PokazTupleScheme extends TupleScheme<Pokaz> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Pokaz struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPcod()) {
        optionals.set(0);
      }
      if (struct.isSetNameN()) {
        optionals.set(1);
      }
      if (struct.isSetStoim()) {
        optionals.set(2);
      }
      if (struct.isSetCP0e1()) {
        optionals.set(3);
      }
      if (struct.isSetCNnz1()) {
        optionals.set(4);
      }
      if (struct.isSetVybor()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetPcod()) {
        oprot.writeString(struct.pcod);
      }
      if (struct.isSetNameN()) {
        oprot.writeString(struct.nameN);
      }
      if (struct.isSetStoim()) {
        oprot.writeDouble(struct.stoim);
      }
      if (struct.isSetCP0e1()) {
        oprot.writeI32(struct.cP0e1);
      }
      if (struct.isSetCNnz1()) {
        oprot.writeString(struct.cNnz1);
      }
      if (struct.isSetVybor()) {
        oprot.writeBool(struct.vybor);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Pokaz struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.pcod = iprot.readString();
        struct.setPcodIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nameN = iprot.readString();
        struct.setNameNIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stoim = iprot.readDouble();
        struct.setStoimIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cP0e1 = iprot.readI32();
        struct.setCP0e1IsSet(true);
      }
      if (incoming.get(4)) {
        struct.cNnz1 = iprot.readString();
        struct.setCNnz1IsSet(true);
      }
      if (incoming.get(5)) {
        struct.vybor = iprot.readBool();
        struct.setVyborIsSet(true);
      }
    }
  }

}

