/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftLab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PokazMet implements org.apache.thrift.TBase<PokazMet, PokazMet._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PokazMet");

  private static final org.apache.thrift.protocol.TField PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("pcod", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_N_FIELD_DESC = new org.apache.thrift.protocol.TField("nameN", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VYBOR_FIELD_DESC = new org.apache.thrift.protocol.TField("vybor", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PokazMetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PokazMetTupleSchemeFactory());
  }

  public String pcod; // optional
  public String nameN; // optional
  public boolean vybor; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PCOD((short)1, "pcod"),
    NAME_N((short)2, "nameN"),
    VYBOR((short)3, "vybor");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PCOD
          return PCOD;
        case 2: // NAME_N
          return NAME_N;
        case 3: // VYBOR
          return VYBOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VYBOR_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.PCOD,_Fields.NAME_N,_Fields.VYBOR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PCOD, new org.apache.thrift.meta_data.FieldMetaData("pcod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_N, new org.apache.thrift.meta_data.FieldMetaData("nameN", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VYBOR, new org.apache.thrift.meta_data.FieldMetaData("vybor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PokazMet.class, metaDataMap);
  }

  public PokazMet() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PokazMet(PokazMet other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetPcod()) {
      this.pcod = other.pcod;
    }
    if (other.isSetNameN()) {
      this.nameN = other.nameN;
    }
    this.vybor = other.vybor;
  }

  public PokazMet deepCopy() {
    return new PokazMet(this);
  }

  @Override
  public void clear() {
    this.pcod = null;
    this.nameN = null;
    setVyborIsSet(false);
    this.vybor = false;
  }

  public String getPcod() {
    return this.pcod;
  }

  public PokazMet setPcod(String pcod) {
    this.pcod = pcod;
    return this;
  }

  public void unsetPcod() {
    this.pcod = null;
  }

  /** Returns true if field pcod is set (has been assigned a value) and false otherwise */
  public boolean isSetPcod() {
    return this.pcod != null;
  }

  public void setPcodIsSet(boolean value) {
    if (!value) {
      this.pcod = null;
    }
  }

  public String getNameN() {
    return this.nameN;
  }

  public PokazMet setNameN(String nameN) {
    this.nameN = nameN;
    return this;
  }

  public void unsetNameN() {
    this.nameN = null;
  }

  /** Returns true if field nameN is set (has been assigned a value) and false otherwise */
  public boolean isSetNameN() {
    return this.nameN != null;
  }

  public void setNameNIsSet(boolean value) {
    if (!value) {
      this.nameN = null;
    }
  }

  public boolean isVybor() {
    return this.vybor;
  }

  public PokazMet setVybor(boolean vybor) {
    this.vybor = vybor;
    setVyborIsSet(true);
    return this;
  }

  public void unsetVybor() {
    __isset_bit_vector.clear(__VYBOR_ISSET_ID);
  }

  /** Returns true if field vybor is set (has been assigned a value) and false otherwise */
  public boolean isSetVybor() {
    return __isset_bit_vector.get(__VYBOR_ISSET_ID);
  }

  public void setVyborIsSet(boolean value) {
    __isset_bit_vector.set(__VYBOR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PCOD:
      if (value == null) {
        unsetPcod();
      } else {
        setPcod((String)value);
      }
      break;

    case NAME_N:
      if (value == null) {
        unsetNameN();
      } else {
        setNameN((String)value);
      }
      break;

    case VYBOR:
      if (value == null) {
        unsetVybor();
      } else {
        setVybor((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PCOD:
      return getPcod();

    case NAME_N:
      return getNameN();

    case VYBOR:
      return Boolean.valueOf(isVybor());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PCOD:
      return isSetPcod();
    case NAME_N:
      return isSetNameN();
    case VYBOR:
      return isSetVybor();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PokazMet)
      return this.equals((PokazMet)that);
    return false;
  }

  public boolean equals(PokazMet that) {
    if (that == null)
      return false;

    boolean this_present_pcod = true && this.isSetPcod();
    boolean that_present_pcod = true && that.isSetPcod();
    if (this_present_pcod || that_present_pcod) {
      if (!(this_present_pcod && that_present_pcod))
        return false;
      if (!this.pcod.equals(that.pcod))
        return false;
    }

    boolean this_present_nameN = true && this.isSetNameN();
    boolean that_present_nameN = true && that.isSetNameN();
    if (this_present_nameN || that_present_nameN) {
      if (!(this_present_nameN && that_present_nameN))
        return false;
      if (!this.nameN.equals(that.nameN))
        return false;
    }

    boolean this_present_vybor = true && this.isSetVybor();
    boolean that_present_vybor = true && that.isSetVybor();
    if (this_present_vybor || that_present_vybor) {
      if (!(this_present_vybor && that_present_vybor))
        return false;
      if (this.vybor != that.vybor)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PokazMet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PokazMet typedOther = (PokazMet)other;

    lastComparison = Boolean.valueOf(isSetPcod()).compareTo(typedOther.isSetPcod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPcod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcod, typedOther.pcod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameN()).compareTo(typedOther.isSetNameN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameN, typedOther.nameN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVybor()).compareTo(typedOther.isSetVybor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVybor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vybor, typedOther.vybor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PokazMet(");
    boolean first = true;

    if (isSetPcod()) {
      sb.append("pcod:");
      if (this.pcod == null) {
        sb.append("null");
      } else {
        sb.append(this.pcod);
      }
      first = false;
    }
    if (isSetNameN()) {
      if (!first) sb.append(", ");
      sb.append("nameN:");
      if (this.nameN == null) {
        sb.append("null");
      } else {
        sb.append(this.nameN);
      }
      first = false;
    }
    if (isSetVybor()) {
      if (!first) sb.append(", ");
      sb.append("vybor:");
      sb.append(this.vybor);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PokazMetStandardSchemeFactory implements SchemeFactory {
    public PokazMetStandardScheme getScheme() {
      return new PokazMetStandardScheme();
    }
  }

  private static class PokazMetStandardScheme extends StandardScheme<PokazMet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PokazMet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PCOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pcod = iprot.readString();
              struct.setPcodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME_N
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameN = iprot.readString();
              struct.setNameNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VYBOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.vybor = iprot.readBool();
              struct.setVyborIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PokazMet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pcod != null) {
        if (struct.isSetPcod()) {
          oprot.writeFieldBegin(PCOD_FIELD_DESC);
          oprot.writeString(struct.pcod);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nameN != null) {
        if (struct.isSetNameN()) {
          oprot.writeFieldBegin(NAME_N_FIELD_DESC);
          oprot.writeString(struct.nameN);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVybor()) {
        oprot.writeFieldBegin(VYBOR_FIELD_DESC);
        oprot.writeBool(struct.vybor);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PokazMetTupleSchemeFactory implements SchemeFactory {
    public PokazMetTupleScheme getScheme() {
      return new PokazMetTupleScheme();
    }
  }

  private static class PokazMetTupleScheme extends TupleScheme<PokazMet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PokazMet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPcod()) {
        optionals.set(0);
      }
      if (struct.isSetNameN()) {
        optionals.set(1);
      }
      if (struct.isSetVybor()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPcod()) {
        oprot.writeString(struct.pcod);
      }
      if (struct.isSetNameN()) {
        oprot.writeString(struct.nameN);
      }
      if (struct.isSetVybor()) {
        oprot.writeBool(struct.vybor);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PokazMet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.pcod = iprot.readString();
        struct.setPcodIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nameN = iprot.readString();
        struct.setNameNIsSet(true);
      }
      if (incoming.get(2)) {
        struct.vybor = iprot.readBool();
        struct.setVyborIsSet(true);
      }
    }
  }

}

