/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftLab;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftLab {

  public interface Iface extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Iface {

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getVidIssled() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getLabs(int clpu) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> getOrgAndSys(int cotd) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

    public List<Metod> getMetod(int kodissl) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

    public List<PokazMet> getPokazMet(String cNnz1, int cotd) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

    public List<Pokaz> getPokaz(int kodissl, String kodsyst) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

    public int AddPisl(Pisl npisl) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

    public int AddPrezd(PrezD di) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

    public int AddPrezl(PrezL li) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getPoliclinic() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getStacionarTypes() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getLpu() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer .AsyncIface {

    public void getVidIssled(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getVidIssled_call> resultHandler) throws org.apache.thrift.TException;

    public void getLabs(int clpu, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getLabs_call> resultHandler) throws org.apache.thrift.TException;

    public void getOrgAndSys(int cotd, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getOrgAndSys_call> resultHandler) throws org.apache.thrift.TException;

    public void getMetod(int kodissl, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMetod_call> resultHandler) throws org.apache.thrift.TException;

    public void getPokazMet(String cNnz1, int cotd, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPokazMet_call> resultHandler) throws org.apache.thrift.TException;

    public void getPokaz(int kodissl, String kodsyst, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPokaz_call> resultHandler) throws org.apache.thrift.TException;

    public void AddPisl(Pisl npisl, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddPisl_call> resultHandler) throws org.apache.thrift.TException;

    public void AddPrezd(PrezD di, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddPrezd_call> resultHandler) throws org.apache.thrift.TException;

    public void AddPrezl(PrezL li, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddPrezl_call> resultHandler) throws org.apache.thrift.TException;

    public void getPoliclinic(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPoliclinic_call> resultHandler) throws org.apache.thrift.TException;

    public void getStacionarTypes(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getStacionarTypes_call> resultHandler) throws org.apache.thrift.TException;

    public void getLpu(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getLpu_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getVidIssled() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_getVidIssled();
      return recv_getVidIssled();
    }

    public void send_getVidIssled() throws org.apache.thrift.TException
    {
      getVidIssled_args args = new getVidIssled_args();
      sendBase("getVidIssled", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> recv_getVidIssled() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      getVidIssled_result result = new getVidIssled_result();
      receiveBase(result, "getVidIssled");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVidIssled failed: unknown result");
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getLabs(int clpu) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_getLabs(clpu);
      return recv_getLabs();
    }

    public void send_getLabs(int clpu) throws org.apache.thrift.TException
    {
      getLabs_args args = new getLabs_args();
      args.setClpu(clpu);
      sendBase("getLabs", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> recv_getLabs() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      getLabs_result result = new getLabs_result();
      receiveBase(result, "getLabs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLabs failed: unknown result");
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> getOrgAndSys(int cotd) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_getOrgAndSys(cotd);
      return recv_getOrgAndSys();
    }

    public void send_getOrgAndSys(int cotd) throws org.apache.thrift.TException
    {
      getOrgAndSys_args args = new getOrgAndSys_args();
      args.setCotd(cotd);
      sendBase("getOrgAndSys", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> recv_getOrgAndSys() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      getOrgAndSys_result result = new getOrgAndSys_result();
      receiveBase(result, "getOrgAndSys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrgAndSys failed: unknown result");
    }

    public List<Metod> getMetod(int kodissl) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_getMetod(kodissl);
      return recv_getMetod();
    }

    public void send_getMetod(int kodissl) throws org.apache.thrift.TException
    {
      getMetod_args args = new getMetod_args();
      args.setKodissl(kodissl);
      sendBase("getMetod", args);
    }

    public List<Metod> recv_getMetod() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      getMetod_result result = new getMetod_result();
      receiveBase(result, "getMetod");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMetod failed: unknown result");
    }

    public List<PokazMet> getPokazMet(String cNnz1, int cotd) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_getPokazMet(cNnz1, cotd);
      return recv_getPokazMet();
    }

    public void send_getPokazMet(String cNnz1, int cotd) throws org.apache.thrift.TException
    {
      getPokazMet_args args = new getPokazMet_args();
      args.setCNnz1(cNnz1);
      args.setCotd(cotd);
      sendBase("getPokazMet", args);
    }

    public List<PokazMet> recv_getPokazMet() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      getPokazMet_result result = new getPokazMet_result();
      receiveBase(result, "getPokazMet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPokazMet failed: unknown result");
    }

    public List<Pokaz> getPokaz(int kodissl, String kodsyst) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_getPokaz(kodissl, kodsyst);
      return recv_getPokaz();
    }

    public void send_getPokaz(int kodissl, String kodsyst) throws org.apache.thrift.TException
    {
      getPokaz_args args = new getPokaz_args();
      args.setKodissl(kodissl);
      args.setKodsyst(kodsyst);
      sendBase("getPokaz", args);
    }

    public List<Pokaz> recv_getPokaz() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      getPokaz_result result = new getPokaz_result();
      receiveBase(result, "getPokaz");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPokaz failed: unknown result");
    }

    public int AddPisl(Pisl npisl) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_AddPisl(npisl);
      return recv_AddPisl();
    }

    public void send_AddPisl(Pisl npisl) throws org.apache.thrift.TException
    {
      AddPisl_args args = new AddPisl_args();
      args.setNpisl(npisl);
      sendBase("AddPisl", args);
    }

    public int recv_AddPisl() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      AddPisl_result result = new AddPisl_result();
      receiveBase(result, "AddPisl");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddPisl failed: unknown result");
    }

    public int AddPrezd(PrezD di) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_AddPrezd(di);
      return recv_AddPrezd();
    }

    public void send_AddPrezd(PrezD di) throws org.apache.thrift.TException
    {
      AddPrezd_args args = new AddPrezd_args();
      args.setDi(di);
      sendBase("AddPrezd", args);
    }

    public int recv_AddPrezd() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      AddPrezd_result result = new AddPrezd_result();
      receiveBase(result, "AddPrezd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddPrezd failed: unknown result");
    }

    public int AddPrezl(PrezL li) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_AddPrezl(li);
      return recv_AddPrezl();
    }

    public void send_AddPrezl(PrezL li) throws org.apache.thrift.TException
    {
      AddPrezl_args args = new AddPrezl_args();
      args.setLi(li);
      sendBase("AddPrezl", args);
    }

    public int recv_AddPrezl() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      AddPrezl_result result = new AddPrezl_result();
      receiveBase(result, "AddPrezl");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddPrezl failed: unknown result");
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getPoliclinic() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_getPoliclinic();
      return recv_getPoliclinic();
    }

    public void send_getPoliclinic() throws org.apache.thrift.TException
    {
      getPoliclinic_args args = new getPoliclinic_args();
      sendBase("getPoliclinic", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> recv_getPoliclinic() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      getPoliclinic_result result = new getPoliclinic_result();
      receiveBase(result, "getPoliclinic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPoliclinic failed: unknown result");
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getStacionarTypes() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_getStacionarTypes();
      return recv_getStacionarTypes();
    }

    public void send_getStacionarTypes() throws org.apache.thrift.TException
    {
      getStacionarTypes_args args = new getStacionarTypes_args();
      sendBase("getStacionarTypes", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> recv_getStacionarTypes() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      getStacionarTypes_result result = new getStacionarTypes_result();
      receiveBase(result, "getStacionarTypes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStacionarTypes failed: unknown result");
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getLpu() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_getLpu();
      return recv_getLpu();
    }

    public void send_getLpu() throws org.apache.thrift.TException
    {
      getLpu_args args = new getLpu_args();
      sendBase("getLpu", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> recv_getLpu() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      getLpu_result result = new getLpu_result();
      receiveBase(result, "getLpu");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLpu failed: unknown result");
    }

  }
  public static class AsyncClient extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getVidIssled(org.apache.thrift.async.AsyncMethodCallback<getVidIssled_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVidIssled_call method_call = new getVidIssled_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVidIssled_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getVidIssled_call(org.apache.thrift.async.AsyncMethodCallback<getVidIssled_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVidIssled", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVidIssled_args args = new getVidIssled_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVidIssled();
      }
    }

    public void getLabs(int clpu, org.apache.thrift.async.AsyncMethodCallback<getLabs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLabs_call method_call = new getLabs_call(clpu, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLabs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int clpu;
      public getLabs_call(int clpu, org.apache.thrift.async.AsyncMethodCallback<getLabs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clpu = clpu;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLabs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLabs_args args = new getLabs_args();
        args.setClpu(clpu);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLabs();
      }
    }

    public void getOrgAndSys(int cotd, org.apache.thrift.async.AsyncMethodCallback<getOrgAndSys_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrgAndSys_call method_call = new getOrgAndSys_call(cotd, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrgAndSys_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cotd;
      public getOrgAndSys_call(int cotd, org.apache.thrift.async.AsyncMethodCallback<getOrgAndSys_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cotd = cotd;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrgAndSys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrgAndSys_args args = new getOrgAndSys_args();
        args.setCotd(cotd);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrgAndSys();
      }
    }

    public void getMetod(int kodissl, org.apache.thrift.async.AsyncMethodCallback<getMetod_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMetod_call method_call = new getMetod_call(kodissl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMetod_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int kodissl;
      public getMetod_call(int kodissl, org.apache.thrift.async.AsyncMethodCallback<getMetod_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.kodissl = kodissl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMetod", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMetod_args args = new getMetod_args();
        args.setKodissl(kodissl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Metod> getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMetod();
      }
    }

    public void getPokazMet(String cNnz1, int cotd, org.apache.thrift.async.AsyncMethodCallback<getPokazMet_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPokazMet_call method_call = new getPokazMet_call(cNnz1, cotd, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPokazMet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cNnz1;
      private int cotd;
      public getPokazMet_call(String cNnz1, int cotd, org.apache.thrift.async.AsyncMethodCallback<getPokazMet_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cNnz1 = cNnz1;
        this.cotd = cotd;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPokazMet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPokazMet_args args = new getPokazMet_args();
        args.setCNnz1(cNnz1);
        args.setCotd(cotd);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<PokazMet> getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPokazMet();
      }
    }

    public void getPokaz(int kodissl, String kodsyst, org.apache.thrift.async.AsyncMethodCallback<getPokaz_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPokaz_call method_call = new getPokaz_call(kodissl, kodsyst, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPokaz_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int kodissl;
      private String kodsyst;
      public getPokaz_call(int kodissl, String kodsyst, org.apache.thrift.async.AsyncMethodCallback<getPokaz_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.kodissl = kodissl;
        this.kodsyst = kodsyst;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPokaz", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPokaz_args args = new getPokaz_args();
        args.setKodissl(kodissl);
        args.setKodsyst(kodsyst);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Pokaz> getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPokaz();
      }
    }

    public void AddPisl(Pisl npisl, org.apache.thrift.async.AsyncMethodCallback<AddPisl_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddPisl_call method_call = new AddPisl_call(npisl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddPisl_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Pisl npisl;
      public AddPisl_call(Pisl npisl, org.apache.thrift.async.AsyncMethodCallback<AddPisl_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npisl = npisl;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddPisl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddPisl_args args = new AddPisl_args();
        args.setNpisl(npisl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddPisl();
      }
    }

    public void AddPrezd(PrezD di, org.apache.thrift.async.AsyncMethodCallback<AddPrezd_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddPrezd_call method_call = new AddPrezd_call(di, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddPrezd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PrezD di;
      public AddPrezd_call(PrezD di, org.apache.thrift.async.AsyncMethodCallback<AddPrezd_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.di = di;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddPrezd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddPrezd_args args = new AddPrezd_args();
        args.setDi(di);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddPrezd();
      }
    }

    public void AddPrezl(PrezL li, org.apache.thrift.async.AsyncMethodCallback<AddPrezl_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddPrezl_call method_call = new AddPrezl_call(li, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddPrezl_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PrezL li;
      public AddPrezl_call(PrezL li, org.apache.thrift.async.AsyncMethodCallback<AddPrezl_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.li = li;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddPrezl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddPrezl_args args = new AddPrezl_args();
        args.setLi(li);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddPrezl();
      }
    }

    public void getPoliclinic(org.apache.thrift.async.AsyncMethodCallback<getPoliclinic_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPoliclinic_call method_call = new getPoliclinic_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPoliclinic_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getPoliclinic_call(org.apache.thrift.async.AsyncMethodCallback<getPoliclinic_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPoliclinic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPoliclinic_args args = new getPoliclinic_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPoliclinic();
      }
    }

    public void getStacionarTypes(org.apache.thrift.async.AsyncMethodCallback<getStacionarTypes_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStacionarTypes_call method_call = new getStacionarTypes_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStacionarTypes_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getStacionarTypes_call(org.apache.thrift.async.AsyncMethodCallback<getStacionarTypes_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStacionarTypes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStacionarTypes_args args = new getStacionarTypes_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStacionarTypes();
      }
    }

    public void getLpu(org.apache.thrift.async.AsyncMethodCallback<getLpu_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLpu_call method_call = new getLpu_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLpu_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getLpu_call(org.apache.thrift.async.AsyncMethodCallback<getLpu_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLpu", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLpu_args args = new getLpu_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLpu();
      }
    }

  }

  public static class Processor<I extends Iface> extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getVidIssled", new getVidIssled());
      processMap.put("getLabs", new getLabs());
      processMap.put("getOrgAndSys", new getOrgAndSys());
      processMap.put("getMetod", new getMetod());
      processMap.put("getPokazMet", new getPokazMet());
      processMap.put("getPokaz", new getPokaz());
      processMap.put("AddPisl", new AddPisl());
      processMap.put("AddPrezd", new AddPrezd());
      processMap.put("AddPrezl", new AddPrezl());
      processMap.put("getPoliclinic", new getPoliclinic());
      processMap.put("getStacionarTypes", new getStacionarTypes());
      processMap.put("getLpu", new getLpu());
      return processMap;
    }

    private static class getVidIssled<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVidIssled_args> {
      public getVidIssled() {
        super("getVidIssled");
      }

      protected getVidIssled_args getEmptyArgsInstance() {
        return new getVidIssled_args();
      }

      protected getVidIssled_result getResult(I iface, getVidIssled_args args) throws org.apache.thrift.TException {
        getVidIssled_result result = new getVidIssled_result();
        try {
          result.success = iface.getVidIssled();
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

    private static class getLabs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLabs_args> {
      public getLabs() {
        super("getLabs");
      }

      protected getLabs_args getEmptyArgsInstance() {
        return new getLabs_args();
      }

      protected getLabs_result getResult(I iface, getLabs_args args) throws org.apache.thrift.TException {
        getLabs_result result = new getLabs_result();
        try {
          result.success = iface.getLabs(args.clpu);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

    private static class getOrgAndSys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrgAndSys_args> {
      public getOrgAndSys() {
        super("getOrgAndSys");
      }

      protected getOrgAndSys_args getEmptyArgsInstance() {
        return new getOrgAndSys_args();
      }

      protected getOrgAndSys_result getResult(I iface, getOrgAndSys_args args) throws org.apache.thrift.TException {
        getOrgAndSys_result result = new getOrgAndSys_result();
        try {
          result.success = iface.getOrgAndSys(args.cotd);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

    private static class getMetod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMetod_args> {
      public getMetod() {
        super("getMetod");
      }

      protected getMetod_args getEmptyArgsInstance() {
        return new getMetod_args();
      }

      protected getMetod_result getResult(I iface, getMetod_args args) throws org.apache.thrift.TException {
        getMetod_result result = new getMetod_result();
        try {
          result.success = iface.getMetod(args.kodissl);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

    private static class getPokazMet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPokazMet_args> {
      public getPokazMet() {
        super("getPokazMet");
      }

      protected getPokazMet_args getEmptyArgsInstance() {
        return new getPokazMet_args();
      }

      protected getPokazMet_result getResult(I iface, getPokazMet_args args) throws org.apache.thrift.TException {
        getPokazMet_result result = new getPokazMet_result();
        try {
          result.success = iface.getPokazMet(args.cNnz1, args.cotd);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

    private static class getPokaz<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPokaz_args> {
      public getPokaz() {
        super("getPokaz");
      }

      protected getPokaz_args getEmptyArgsInstance() {
        return new getPokaz_args();
      }

      protected getPokaz_result getResult(I iface, getPokaz_args args) throws org.apache.thrift.TException {
        getPokaz_result result = new getPokaz_result();
        try {
          result.success = iface.getPokaz(args.kodissl, args.kodsyst);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

    private static class AddPisl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddPisl_args> {
      public AddPisl() {
        super("AddPisl");
      }

      protected AddPisl_args getEmptyArgsInstance() {
        return new AddPisl_args();
      }

      protected AddPisl_result getResult(I iface, AddPisl_args args) throws org.apache.thrift.TException {
        AddPisl_result result = new AddPisl_result();
        try {
          result.success = iface.AddPisl(args.npisl);
          result.setSuccessIsSet(true);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

    private static class AddPrezd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddPrezd_args> {
      public AddPrezd() {
        super("AddPrezd");
      }

      protected AddPrezd_args getEmptyArgsInstance() {
        return new AddPrezd_args();
      }

      protected AddPrezd_result getResult(I iface, AddPrezd_args args) throws org.apache.thrift.TException {
        AddPrezd_result result = new AddPrezd_result();
        try {
          result.success = iface.AddPrezd(args.di);
          result.setSuccessIsSet(true);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

    private static class AddPrezl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddPrezl_args> {
      public AddPrezl() {
        super("AddPrezl");
      }

      protected AddPrezl_args getEmptyArgsInstance() {
        return new AddPrezl_args();
      }

      protected AddPrezl_result getResult(I iface, AddPrezl_args args) throws org.apache.thrift.TException {
        AddPrezl_result result = new AddPrezl_result();
        try {
          result.success = iface.AddPrezl(args.li);
          result.setSuccessIsSet(true);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

    private static class getPoliclinic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPoliclinic_args> {
      public getPoliclinic() {
        super("getPoliclinic");
      }

      protected getPoliclinic_args getEmptyArgsInstance() {
        return new getPoliclinic_args();
      }

      protected getPoliclinic_result getResult(I iface, getPoliclinic_args args) throws org.apache.thrift.TException {
        getPoliclinic_result result = new getPoliclinic_result();
        try {
          result.success = iface.getPoliclinic();
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

    private static class getStacionarTypes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStacionarTypes_args> {
      public getStacionarTypes() {
        super("getStacionarTypes");
      }

      protected getStacionarTypes_args getEmptyArgsInstance() {
        return new getStacionarTypes_args();
      }

      protected getStacionarTypes_result getResult(I iface, getStacionarTypes_args args) throws org.apache.thrift.TException {
        getStacionarTypes_result result = new getStacionarTypes_result();
        try {
          result.success = iface.getStacionarTypes();
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

    private static class getLpu<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLpu_args> {
      public getLpu() {
        super("getLpu");
      }

      protected getLpu_args getEmptyArgsInstance() {
        return new getLpu_args();
      }

      protected getLpu_result getResult(I iface, getLpu_args args) throws org.apache.thrift.TException {
        getLpu_result result = new getLpu_result();
        try {
          result.success = iface.getLpu();
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

  }

  public static class getVidIssled_args implements org.apache.thrift.TBase<getVidIssled_args, getVidIssled_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVidIssled_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVidIssled_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVidIssled_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVidIssled_args.class, metaDataMap);
    }

    public getVidIssled_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVidIssled_args(getVidIssled_args other) {
    }

    public getVidIssled_args deepCopy() {
      return new getVidIssled_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVidIssled_args)
        return this.equals((getVidIssled_args)that);
      return false;
    }

    public boolean equals(getVidIssled_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getVidIssled_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getVidIssled_args typedOther = (getVidIssled_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVidIssled_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVidIssled_argsStandardSchemeFactory implements SchemeFactory {
      public getVidIssled_argsStandardScheme getScheme() {
        return new getVidIssled_argsStandardScheme();
      }
    }

    private static class getVidIssled_argsStandardScheme extends StandardScheme<getVidIssled_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVidIssled_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVidIssled_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVidIssled_argsTupleSchemeFactory implements SchemeFactory {
      public getVidIssled_argsTupleScheme getScheme() {
        return new getVidIssled_argsTupleScheme();
      }
    }

    private static class getVidIssled_argsTupleScheme extends TupleScheme<getVidIssled_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVidIssled_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVidIssled_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getVidIssled_result implements org.apache.thrift.TBase<getVidIssled_result, getVidIssled_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVidIssled_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVidIssled_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVidIssled_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier.class))));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVidIssled_result.class, metaDataMap);
    }

    public getVidIssled_result() {
    }

    public getVidIssled_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.success = success;
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVidIssled_result(getVidIssled_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public getVidIssled_result deepCopy() {
      return new getVidIssled_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccess() {
      return this.success;
    }

    public getVidIssled_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getVidIssled_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVidIssled_result)
        return this.equals((getVidIssled_result)that);
      return false;
    }

    public boolean equals(getVidIssled_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getVidIssled_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getVidIssled_result typedOther = (getVidIssled_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVidIssled_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVidIssled_resultStandardSchemeFactory implements SchemeFactory {
      public getVidIssled_resultStandardScheme getScheme() {
        return new getVidIssled_resultStandardScheme();
      }
    }

    private static class getVidIssled_resultStandardScheme extends StandardScheme<getVidIssled_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVidIssled_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem2; // required
                    _elem2 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVidIssled_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          if (struct.isSetSuccess()) {
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
              for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter3 : struct.success)
              {
                _iter3.write(oprot);
              }
              oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
          }
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVidIssled_resultTupleSchemeFactory implements SchemeFactory {
      public getVidIssled_resultTupleScheme getScheme() {
        return new getVidIssled_resultTupleScheme();
      }
    }

    private static class getVidIssled_resultTupleScheme extends TupleScheme<getVidIssled_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVidIssled_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVidIssled_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem7; // required
              _elem7 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

  public static class getLabs_args implements org.apache.thrift.TBase<getLabs_args, getLabs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLabs_args");

    private static final org.apache.thrift.protocol.TField CLPU_FIELD_DESC = new org.apache.thrift.protocol.TField("clpu", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLabs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLabs_argsTupleSchemeFactory());
    }

    public int clpu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLPU((short)1, "clpu");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLPU
            return CLPU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CLPU_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLPU, new org.apache.thrift.meta_data.FieldMetaData("clpu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLabs_args.class, metaDataMap);
    }

    public getLabs_args() {
    }

    public getLabs_args(
      int clpu)
    {
      this();
      this.clpu = clpu;
      setClpuIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLabs_args(getLabs_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.clpu = other.clpu;
    }

    public getLabs_args deepCopy() {
      return new getLabs_args(this);
    }

    @Override
    public void clear() {
      setClpuIsSet(false);
      this.clpu = 0;
    }

    public int getClpu() {
      return this.clpu;
    }

    public getLabs_args setClpu(int clpu) {
      this.clpu = clpu;
      setClpuIsSet(true);
      return this;
    }

    public void unsetClpu() {
      __isset_bit_vector.clear(__CLPU_ISSET_ID);
    }

    /** Returns true if field clpu is set (has been assigned a value) and false otherwise */
    public boolean isSetClpu() {
      return __isset_bit_vector.get(__CLPU_ISSET_ID);
    }

    public void setClpuIsSet(boolean value) {
      __isset_bit_vector.set(__CLPU_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLPU:
        if (value == null) {
          unsetClpu();
        } else {
          setClpu((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLPU:
        return Integer.valueOf(getClpu());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLPU:
        return isSetClpu();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLabs_args)
        return this.equals((getLabs_args)that);
      return false;
    }

    public boolean equals(getLabs_args that) {
      if (that == null)
        return false;

      boolean this_present_clpu = true;
      boolean that_present_clpu = true;
      if (this_present_clpu || that_present_clpu) {
        if (!(this_present_clpu && that_present_clpu))
          return false;
        if (this.clpu != that.clpu)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLabs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLabs_args typedOther = (getLabs_args)other;

      lastComparison = Boolean.valueOf(isSetClpu()).compareTo(typedOther.isSetClpu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClpu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clpu, typedOther.clpu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLabs_args(");
      boolean first = true;

      sb.append("clpu:");
      sb.append(this.clpu);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLabs_argsStandardSchemeFactory implements SchemeFactory {
      public getLabs_argsStandardScheme getScheme() {
        return new getLabs_argsStandardScheme();
      }
    }

    private static class getLabs_argsStandardScheme extends StandardScheme<getLabs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLabs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLPU
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.clpu = iprot.readI32();
                struct.setClpuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLabs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CLPU_FIELD_DESC);
        oprot.writeI32(struct.clpu);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLabs_argsTupleSchemeFactory implements SchemeFactory {
      public getLabs_argsTupleScheme getScheme() {
        return new getLabs_argsTupleScheme();
      }
    }

    private static class getLabs_argsTupleScheme extends TupleScheme<getLabs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLabs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClpu()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClpu()) {
          oprot.writeI32(struct.clpu);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLabs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clpu = iprot.readI32();
          struct.setClpuIsSet(true);
        }
      }
    }

  }

  public static class getLabs_result implements org.apache.thrift.TBase<getLabs_result, getLabs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLabs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLabs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLabs_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier.class))));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLabs_result.class, metaDataMap);
    }

    public getLabs_result() {
    }

    public getLabs_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.success = success;
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLabs_result(getLabs_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public getLabs_result deepCopy() {
      return new getLabs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccess() {
      return this.success;
    }

    public getLabs_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getLabs_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLabs_result)
        return this.equals((getLabs_result)that);
      return false;
    }

    public boolean equals(getLabs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLabs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLabs_result typedOther = (getLabs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLabs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLabs_resultStandardSchemeFactory implements SchemeFactory {
      public getLabs_resultStandardScheme getScheme() {
        return new getLabs_resultStandardScheme();
      }
    }

    private static class getLabs_resultStandardScheme extends StandardScheme<getLabs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLabs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem10; // required
                    _elem10 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLabs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          if (struct.isSetSuccess()) {
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
              for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter11 : struct.success)
              {
                _iter11.write(oprot);
              }
              oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
          }
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLabs_resultTupleSchemeFactory implements SchemeFactory {
      public getLabs_resultTupleScheme getScheme() {
        return new getLabs_resultTupleScheme();
      }
    }

    private static class getLabs_resultTupleScheme extends TupleScheme<getLabs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLabs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLabs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem15; // required
              _elem15 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

  public static class getOrgAndSys_args implements org.apache.thrift.TBase<getOrgAndSys_args, getOrgAndSys_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgAndSys_args");

    private static final org.apache.thrift.protocol.TField COTD_FIELD_DESC = new org.apache.thrift.protocol.TField("cotd", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgAndSys_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgAndSys_argsTupleSchemeFactory());
    }

    public int cotd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COTD((short)1, "cotd");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COTD
            return COTD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COTD_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COTD, new org.apache.thrift.meta_data.FieldMetaData("cotd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgAndSys_args.class, metaDataMap);
    }

    public getOrgAndSys_args() {
    }

    public getOrgAndSys_args(
      int cotd)
    {
      this();
      this.cotd = cotd;
      setCotdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgAndSys_args(getOrgAndSys_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.cotd = other.cotd;
    }

    public getOrgAndSys_args deepCopy() {
      return new getOrgAndSys_args(this);
    }

    @Override
    public void clear() {
      setCotdIsSet(false);
      this.cotd = 0;
    }

    public int getCotd() {
      return this.cotd;
    }

    public getOrgAndSys_args setCotd(int cotd) {
      this.cotd = cotd;
      setCotdIsSet(true);
      return this;
    }

    public void unsetCotd() {
      __isset_bit_vector.clear(__COTD_ISSET_ID);
    }

    /** Returns true if field cotd is set (has been assigned a value) and false otherwise */
    public boolean isSetCotd() {
      return __isset_bit_vector.get(__COTD_ISSET_ID);
    }

    public void setCotdIsSet(boolean value) {
      __isset_bit_vector.set(__COTD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COTD:
        if (value == null) {
          unsetCotd();
        } else {
          setCotd((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COTD:
        return Integer.valueOf(getCotd());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COTD:
        return isSetCotd();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgAndSys_args)
        return this.equals((getOrgAndSys_args)that);
      return false;
    }

    public boolean equals(getOrgAndSys_args that) {
      if (that == null)
        return false;

      boolean this_present_cotd = true;
      boolean that_present_cotd = true;
      if (this_present_cotd || that_present_cotd) {
        if (!(this_present_cotd && that_present_cotd))
          return false;
        if (this.cotd != that.cotd)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOrgAndSys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOrgAndSys_args typedOther = (getOrgAndSys_args)other;

      lastComparison = Boolean.valueOf(isSetCotd()).compareTo(typedOther.isSetCotd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCotd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cotd, typedOther.cotd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgAndSys_args(");
      boolean first = true;

      sb.append("cotd:");
      sb.append(this.cotd);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgAndSys_argsStandardSchemeFactory implements SchemeFactory {
      public getOrgAndSys_argsStandardScheme getScheme() {
        return new getOrgAndSys_argsStandardScheme();
      }
    }

    private static class getOrgAndSys_argsStandardScheme extends StandardScheme<getOrgAndSys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgAndSys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COTD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cotd = iprot.readI32();
                struct.setCotdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgAndSys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COTD_FIELD_DESC);
        oprot.writeI32(struct.cotd);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgAndSys_argsTupleSchemeFactory implements SchemeFactory {
      public getOrgAndSys_argsTupleScheme getScheme() {
        return new getOrgAndSys_argsTupleScheme();
      }
    }

    private static class getOrgAndSys_argsTupleScheme extends TupleScheme<getOrgAndSys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgAndSys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCotd()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCotd()) {
          oprot.writeI32(struct.cotd);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgAndSys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cotd = iprot.readI32();
          struct.setCotdIsSet(true);
        }
      }
    }

  }

  public static class getOrgAndSys_result implements org.apache.thrift.TBase<getOrgAndSys_result, getOrgAndSys_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrgAndSys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrgAndSys_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrgAndSys_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier.class))));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrgAndSys_result.class, metaDataMap);
    }

    public getOrgAndSys_result() {
    }

    public getOrgAndSys_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.success = success;
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrgAndSys_result(getOrgAndSys_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public getOrgAndSys_result deepCopy() {
      return new getOrgAndSys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> getSuccess() {
      return this.success;
    }

    public getOrgAndSys_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getOrgAndSys_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrgAndSys_result)
        return this.equals((getOrgAndSys_result)that);
      return false;
    }

    public boolean equals(getOrgAndSys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getOrgAndSys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getOrgAndSys_result typedOther = (getOrgAndSys_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrgAndSys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrgAndSys_resultStandardSchemeFactory implements SchemeFactory {
      public getOrgAndSys_resultStandardScheme getScheme() {
        return new getOrgAndSys_resultStandardScheme();
      }
    }

    private static class getOrgAndSys_resultStandardScheme extends StandardScheme<getOrgAndSys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrgAndSys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier _elem18; // required
                    _elem18 = new ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrgAndSys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          if (struct.isSetSuccess()) {
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
              for (ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier _iter19 : struct.success)
              {
                _iter19.write(oprot);
              }
              oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
          }
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrgAndSys_resultTupleSchemeFactory implements SchemeFactory {
      public getOrgAndSys_resultTupleScheme getScheme() {
        return new getOrgAndSys_resultTupleScheme();
      }
    }

    private static class getOrgAndSys_resultTupleScheme extends TupleScheme<getOrgAndSys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrgAndSys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrgAndSys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier _elem23; // required
              _elem23 = new ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

  public static class getMetod_args implements org.apache.thrift.TBase<getMetod_args, getMetod_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMetod_args");

    private static final org.apache.thrift.protocol.TField KODISSL_FIELD_DESC = new org.apache.thrift.protocol.TField("kodissl", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMetod_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMetod_argsTupleSchemeFactory());
    }

    public int kodissl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KODISSL((short)1, "kodissl");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KODISSL
            return KODISSL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KODISSL_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KODISSL, new org.apache.thrift.meta_data.FieldMetaData("kodissl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMetod_args.class, metaDataMap);
    }

    public getMetod_args() {
    }

    public getMetod_args(
      int kodissl)
    {
      this();
      this.kodissl = kodissl;
      setKodisslIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMetod_args(getMetod_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.kodissl = other.kodissl;
    }

    public getMetod_args deepCopy() {
      return new getMetod_args(this);
    }

    @Override
    public void clear() {
      setKodisslIsSet(false);
      this.kodissl = 0;
    }

    public int getKodissl() {
      return this.kodissl;
    }

    public getMetod_args setKodissl(int kodissl) {
      this.kodissl = kodissl;
      setKodisslIsSet(true);
      return this;
    }

    public void unsetKodissl() {
      __isset_bit_vector.clear(__KODISSL_ISSET_ID);
    }

    /** Returns true if field kodissl is set (has been assigned a value) and false otherwise */
    public boolean isSetKodissl() {
      return __isset_bit_vector.get(__KODISSL_ISSET_ID);
    }

    public void setKodisslIsSet(boolean value) {
      __isset_bit_vector.set(__KODISSL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KODISSL:
        if (value == null) {
          unsetKodissl();
        } else {
          setKodissl((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KODISSL:
        return Integer.valueOf(getKodissl());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KODISSL:
        return isSetKodissl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMetod_args)
        return this.equals((getMetod_args)that);
      return false;
    }

    public boolean equals(getMetod_args that) {
      if (that == null)
        return false;

      boolean this_present_kodissl = true;
      boolean that_present_kodissl = true;
      if (this_present_kodissl || that_present_kodissl) {
        if (!(this_present_kodissl && that_present_kodissl))
          return false;
        if (this.kodissl != that.kodissl)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMetod_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMetod_args typedOther = (getMetod_args)other;

      lastComparison = Boolean.valueOf(isSetKodissl()).compareTo(typedOther.isSetKodissl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKodissl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kodissl, typedOther.kodissl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMetod_args(");
      boolean first = true;

      sb.append("kodissl:");
      sb.append(this.kodissl);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMetod_argsStandardSchemeFactory implements SchemeFactory {
      public getMetod_argsStandardScheme getScheme() {
        return new getMetod_argsStandardScheme();
      }
    }

    private static class getMetod_argsStandardScheme extends StandardScheme<getMetod_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMetod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KODISSL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.kodissl = iprot.readI32();
                struct.setKodisslIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMetod_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(KODISSL_FIELD_DESC);
        oprot.writeI32(struct.kodissl);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMetod_argsTupleSchemeFactory implements SchemeFactory {
      public getMetod_argsTupleScheme getScheme() {
        return new getMetod_argsTupleScheme();
      }
    }

    private static class getMetod_argsTupleScheme extends TupleScheme<getMetod_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMetod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKodissl()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKodissl()) {
          oprot.writeI32(struct.kodissl);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMetod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.kodissl = iprot.readI32();
          struct.setKodisslIsSet(true);
        }
      }
    }

  }

  public static class getMetod_result implements org.apache.thrift.TBase<getMetod_result, getMetod_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMetod_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMetod_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMetod_resultTupleSchemeFactory());
    }

    public List<Metod> success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Metod.class))));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMetod_result.class, metaDataMap);
    }

    public getMetod_result() {
    }

    public getMetod_result(
      List<Metod> success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.success = success;
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMetod_result(getMetod_result other) {
      if (other.isSetSuccess()) {
        List<Metod> __this__success = new ArrayList<Metod>();
        for (Metod other_element : other.success) {
          __this__success.add(new Metod(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public getMetod_result deepCopy() {
      return new getMetod_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Metod> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Metod elem) {
      if (this.success == null) {
        this.success = new ArrayList<Metod>();
      }
      this.success.add(elem);
    }

    public List<Metod> getSuccess() {
      return this.success;
    }

    public getMetod_result setSuccess(List<Metod> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getMetod_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Metod>)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMetod_result)
        return this.equals((getMetod_result)that);
      return false;
    }

    public boolean equals(getMetod_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMetod_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMetod_result typedOther = (getMetod_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMetod_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMetod_resultStandardSchemeFactory implements SchemeFactory {
      public getMetod_resultStandardScheme getScheme() {
        return new getMetod_resultStandardScheme();
      }
    }

    private static class getMetod_resultStandardScheme extends StandardScheme<getMetod_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMetod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<Metod>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    Metod _elem26; // required
                    _elem26 = new Metod();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMetod_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          if (struct.isSetSuccess()) {
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
              for (Metod _iter27 : struct.success)
              {
                _iter27.write(oprot);
              }
              oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
          }
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMetod_resultTupleSchemeFactory implements SchemeFactory {
      public getMetod_resultTupleScheme getScheme() {
        return new getMetod_resultTupleScheme();
      }
    }

    private static class getMetod_resultTupleScheme extends TupleScheme<getMetod_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMetod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Metod _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMetod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Metod>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              Metod _elem31; // required
              _elem31 = new Metod();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

  public static class getPokazMet_args implements org.apache.thrift.TBase<getPokazMet_args, getPokazMet_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPokazMet_args");

    private static final org.apache.thrift.protocol.TField C_NNZ1_FIELD_DESC = new org.apache.thrift.protocol.TField("cNnz1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COTD_FIELD_DESC = new org.apache.thrift.protocol.TField("cotd", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPokazMet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPokazMet_argsTupleSchemeFactory());
    }

    public String cNnz1; // required
    public int cotd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      C_NNZ1((short)1, "cNnz1"),
      COTD((short)2, "cotd");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // C_NNZ1
            return C_NNZ1;
          case 2: // COTD
            return COTD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COTD_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.C_NNZ1, new org.apache.thrift.meta_data.FieldMetaData("cNnz1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COTD, new org.apache.thrift.meta_data.FieldMetaData("cotd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPokazMet_args.class, metaDataMap);
    }

    public getPokazMet_args() {
    }

    public getPokazMet_args(
      String cNnz1,
      int cotd)
    {
      this();
      this.cNnz1 = cNnz1;
      this.cotd = cotd;
      setCotdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPokazMet_args(getPokazMet_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetCNnz1()) {
        this.cNnz1 = other.cNnz1;
      }
      this.cotd = other.cotd;
    }

    public getPokazMet_args deepCopy() {
      return new getPokazMet_args(this);
    }

    @Override
    public void clear() {
      this.cNnz1 = null;
      setCotdIsSet(false);
      this.cotd = 0;
    }

    public String getCNnz1() {
      return this.cNnz1;
    }

    public getPokazMet_args setCNnz1(String cNnz1) {
      this.cNnz1 = cNnz1;
      return this;
    }

    public void unsetCNnz1() {
      this.cNnz1 = null;
    }

    /** Returns true if field cNnz1 is set (has been assigned a value) and false otherwise */
    public boolean isSetCNnz1() {
      return this.cNnz1 != null;
    }

    public void setCNnz1IsSet(boolean value) {
      if (!value) {
        this.cNnz1 = null;
      }
    }

    public int getCotd() {
      return this.cotd;
    }

    public getPokazMet_args setCotd(int cotd) {
      this.cotd = cotd;
      setCotdIsSet(true);
      return this;
    }

    public void unsetCotd() {
      __isset_bit_vector.clear(__COTD_ISSET_ID);
    }

    /** Returns true if field cotd is set (has been assigned a value) and false otherwise */
    public boolean isSetCotd() {
      return __isset_bit_vector.get(__COTD_ISSET_ID);
    }

    public void setCotdIsSet(boolean value) {
      __isset_bit_vector.set(__COTD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case C_NNZ1:
        if (value == null) {
          unsetCNnz1();
        } else {
          setCNnz1((String)value);
        }
        break;

      case COTD:
        if (value == null) {
          unsetCotd();
        } else {
          setCotd((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case C_NNZ1:
        return getCNnz1();

      case COTD:
        return Integer.valueOf(getCotd());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case C_NNZ1:
        return isSetCNnz1();
      case COTD:
        return isSetCotd();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPokazMet_args)
        return this.equals((getPokazMet_args)that);
      return false;
    }

    public boolean equals(getPokazMet_args that) {
      if (that == null)
        return false;

      boolean this_present_cNnz1 = true && this.isSetCNnz1();
      boolean that_present_cNnz1 = true && that.isSetCNnz1();
      if (this_present_cNnz1 || that_present_cNnz1) {
        if (!(this_present_cNnz1 && that_present_cNnz1))
          return false;
        if (!this.cNnz1.equals(that.cNnz1))
          return false;
      }

      boolean this_present_cotd = true;
      boolean that_present_cotd = true;
      if (this_present_cotd || that_present_cotd) {
        if (!(this_present_cotd && that_present_cotd))
          return false;
        if (this.cotd != that.cotd)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPokazMet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPokazMet_args typedOther = (getPokazMet_args)other;

      lastComparison = Boolean.valueOf(isSetCNnz1()).compareTo(typedOther.isSetCNnz1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCNnz1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cNnz1, typedOther.cNnz1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCotd()).compareTo(typedOther.isSetCotd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCotd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cotd, typedOther.cotd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPokazMet_args(");
      boolean first = true;

      sb.append("cNnz1:");
      if (this.cNnz1 == null) {
        sb.append("null");
      } else {
        sb.append(this.cNnz1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cotd:");
      sb.append(this.cotd);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPokazMet_argsStandardSchemeFactory implements SchemeFactory {
      public getPokazMet_argsStandardScheme getScheme() {
        return new getPokazMet_argsStandardScheme();
      }
    }

    private static class getPokazMet_argsStandardScheme extends StandardScheme<getPokazMet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPokazMet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // C_NNZ1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cNnz1 = iprot.readString();
                struct.setCNnz1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COTD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cotd = iprot.readI32();
                struct.setCotdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPokazMet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cNnz1 != null) {
          oprot.writeFieldBegin(C_NNZ1_FIELD_DESC);
          oprot.writeString(struct.cNnz1);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COTD_FIELD_DESC);
        oprot.writeI32(struct.cotd);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPokazMet_argsTupleSchemeFactory implements SchemeFactory {
      public getPokazMet_argsTupleScheme getScheme() {
        return new getPokazMet_argsTupleScheme();
      }
    }

    private static class getPokazMet_argsTupleScheme extends TupleScheme<getPokazMet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPokazMet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCNnz1()) {
          optionals.set(0);
        }
        if (struct.isSetCotd()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCNnz1()) {
          oprot.writeString(struct.cNnz1);
        }
        if (struct.isSetCotd()) {
          oprot.writeI32(struct.cotd);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPokazMet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cNnz1 = iprot.readString();
          struct.setCNnz1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.cotd = iprot.readI32();
          struct.setCotdIsSet(true);
        }
      }
    }

  }

  public static class getPokazMet_result implements org.apache.thrift.TBase<getPokazMet_result, getPokazMet_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPokazMet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPokazMet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPokazMet_resultTupleSchemeFactory());
    }

    public List<PokazMet> success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PokazMet.class))));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPokazMet_result.class, metaDataMap);
    }

    public getPokazMet_result() {
    }

    public getPokazMet_result(
      List<PokazMet> success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.success = success;
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPokazMet_result(getPokazMet_result other) {
      if (other.isSetSuccess()) {
        List<PokazMet> __this__success = new ArrayList<PokazMet>();
        for (PokazMet other_element : other.success) {
          __this__success.add(new PokazMet(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public getPokazMet_result deepCopy() {
      return new getPokazMet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PokazMet> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PokazMet elem) {
      if (this.success == null) {
        this.success = new ArrayList<PokazMet>();
      }
      this.success.add(elem);
    }

    public List<PokazMet> getSuccess() {
      return this.success;
    }

    public getPokazMet_result setSuccess(List<PokazMet> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getPokazMet_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<PokazMet>)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPokazMet_result)
        return this.equals((getPokazMet_result)that);
      return false;
    }

    public boolean equals(getPokazMet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPokazMet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPokazMet_result typedOther = (getPokazMet_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPokazMet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPokazMet_resultStandardSchemeFactory implements SchemeFactory {
      public getPokazMet_resultStandardScheme getScheme() {
        return new getPokazMet_resultStandardScheme();
      }
    }

    private static class getPokazMet_resultStandardScheme extends StandardScheme<getPokazMet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPokazMet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<PokazMet>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    PokazMet _elem34; // required
                    _elem34 = new PokazMet();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPokazMet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          if (struct.isSetSuccess()) {
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
              for (PokazMet _iter35 : struct.success)
              {
                _iter35.write(oprot);
              }
              oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
          }
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPokazMet_resultTupleSchemeFactory implements SchemeFactory {
      public getPokazMet_resultTupleScheme getScheme() {
        return new getPokazMet_resultTupleScheme();
      }
    }

    private static class getPokazMet_resultTupleScheme extends TupleScheme<getPokazMet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPokazMet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PokazMet _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPokazMet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<PokazMet>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              PokazMet _elem39; // required
              _elem39 = new PokazMet();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

  public static class getPokaz_args implements org.apache.thrift.TBase<getPokaz_args, getPokaz_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPokaz_args");

    private static final org.apache.thrift.protocol.TField KODISSL_FIELD_DESC = new org.apache.thrift.protocol.TField("kodissl", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField KODSYST_FIELD_DESC = new org.apache.thrift.protocol.TField("kodsyst", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPokaz_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPokaz_argsTupleSchemeFactory());
    }

    public int kodissl; // required
    public String kodsyst; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KODISSL((short)1, "kodissl"),
      KODSYST((short)2, "kodsyst");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KODISSL
            return KODISSL;
          case 2: // KODSYST
            return KODSYST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KODISSL_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KODISSL, new org.apache.thrift.meta_data.FieldMetaData("kodissl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KODSYST, new org.apache.thrift.meta_data.FieldMetaData("kodsyst", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPokaz_args.class, metaDataMap);
    }

    public getPokaz_args() {
    }

    public getPokaz_args(
      int kodissl,
      String kodsyst)
    {
      this();
      this.kodissl = kodissl;
      setKodisslIsSet(true);
      this.kodsyst = kodsyst;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPokaz_args(getPokaz_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.kodissl = other.kodissl;
      if (other.isSetKodsyst()) {
        this.kodsyst = other.kodsyst;
      }
    }

    public getPokaz_args deepCopy() {
      return new getPokaz_args(this);
    }

    @Override
    public void clear() {
      setKodisslIsSet(false);
      this.kodissl = 0;
      this.kodsyst = null;
    }

    public int getKodissl() {
      return this.kodissl;
    }

    public getPokaz_args setKodissl(int kodissl) {
      this.kodissl = kodissl;
      setKodisslIsSet(true);
      return this;
    }

    public void unsetKodissl() {
      __isset_bit_vector.clear(__KODISSL_ISSET_ID);
    }

    /** Returns true if field kodissl is set (has been assigned a value) and false otherwise */
    public boolean isSetKodissl() {
      return __isset_bit_vector.get(__KODISSL_ISSET_ID);
    }

    public void setKodisslIsSet(boolean value) {
      __isset_bit_vector.set(__KODISSL_ISSET_ID, value);
    }

    public String getKodsyst() {
      return this.kodsyst;
    }

    public getPokaz_args setKodsyst(String kodsyst) {
      this.kodsyst = kodsyst;
      return this;
    }

    public void unsetKodsyst() {
      this.kodsyst = null;
    }

    /** Returns true if field kodsyst is set (has been assigned a value) and false otherwise */
    public boolean isSetKodsyst() {
      return this.kodsyst != null;
    }

    public void setKodsystIsSet(boolean value) {
      if (!value) {
        this.kodsyst = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KODISSL:
        if (value == null) {
          unsetKodissl();
        } else {
          setKodissl((Integer)value);
        }
        break;

      case KODSYST:
        if (value == null) {
          unsetKodsyst();
        } else {
          setKodsyst((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KODISSL:
        return Integer.valueOf(getKodissl());

      case KODSYST:
        return getKodsyst();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KODISSL:
        return isSetKodissl();
      case KODSYST:
        return isSetKodsyst();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPokaz_args)
        return this.equals((getPokaz_args)that);
      return false;
    }

    public boolean equals(getPokaz_args that) {
      if (that == null)
        return false;

      boolean this_present_kodissl = true;
      boolean that_present_kodissl = true;
      if (this_present_kodissl || that_present_kodissl) {
        if (!(this_present_kodissl && that_present_kodissl))
          return false;
        if (this.kodissl != that.kodissl)
          return false;
      }

      boolean this_present_kodsyst = true && this.isSetKodsyst();
      boolean that_present_kodsyst = true && that.isSetKodsyst();
      if (this_present_kodsyst || that_present_kodsyst) {
        if (!(this_present_kodsyst && that_present_kodsyst))
          return false;
        if (!this.kodsyst.equals(that.kodsyst))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPokaz_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPokaz_args typedOther = (getPokaz_args)other;

      lastComparison = Boolean.valueOf(isSetKodissl()).compareTo(typedOther.isSetKodissl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKodissl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kodissl, typedOther.kodissl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKodsyst()).compareTo(typedOther.isSetKodsyst());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKodsyst()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kodsyst, typedOther.kodsyst);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPokaz_args(");
      boolean first = true;

      sb.append("kodissl:");
      sb.append(this.kodissl);
      first = false;
      if (!first) sb.append(", ");
      sb.append("kodsyst:");
      if (this.kodsyst == null) {
        sb.append("null");
      } else {
        sb.append(this.kodsyst);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPokaz_argsStandardSchemeFactory implements SchemeFactory {
      public getPokaz_argsStandardScheme getScheme() {
        return new getPokaz_argsStandardScheme();
      }
    }

    private static class getPokaz_argsStandardScheme extends StandardScheme<getPokaz_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPokaz_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KODISSL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.kodissl = iprot.readI32();
                struct.setKodisslIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KODSYST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.kodsyst = iprot.readString();
                struct.setKodsystIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPokaz_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(KODISSL_FIELD_DESC);
        oprot.writeI32(struct.kodissl);
        oprot.writeFieldEnd();
        if (struct.kodsyst != null) {
          oprot.writeFieldBegin(KODSYST_FIELD_DESC);
          oprot.writeString(struct.kodsyst);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPokaz_argsTupleSchemeFactory implements SchemeFactory {
      public getPokaz_argsTupleScheme getScheme() {
        return new getPokaz_argsTupleScheme();
      }
    }

    private static class getPokaz_argsTupleScheme extends TupleScheme<getPokaz_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPokaz_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKodissl()) {
          optionals.set(0);
        }
        if (struct.isSetKodsyst()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetKodissl()) {
          oprot.writeI32(struct.kodissl);
        }
        if (struct.isSetKodsyst()) {
          oprot.writeString(struct.kodsyst);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPokaz_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.kodissl = iprot.readI32();
          struct.setKodisslIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kodsyst = iprot.readString();
          struct.setKodsystIsSet(true);
        }
      }
    }

  }

  public static class getPokaz_result implements org.apache.thrift.TBase<getPokaz_result, getPokaz_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPokaz_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPokaz_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPokaz_resultTupleSchemeFactory());
    }

    public List<Pokaz> success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Pokaz.class))));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPokaz_result.class, metaDataMap);
    }

    public getPokaz_result() {
    }

    public getPokaz_result(
      List<Pokaz> success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.success = success;
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPokaz_result(getPokaz_result other) {
      if (other.isSetSuccess()) {
        List<Pokaz> __this__success = new ArrayList<Pokaz>();
        for (Pokaz other_element : other.success) {
          __this__success.add(new Pokaz(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public getPokaz_result deepCopy() {
      return new getPokaz_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Pokaz> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Pokaz elem) {
      if (this.success == null) {
        this.success = new ArrayList<Pokaz>();
      }
      this.success.add(elem);
    }

    public List<Pokaz> getSuccess() {
      return this.success;
    }

    public getPokaz_result setSuccess(List<Pokaz> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getPokaz_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Pokaz>)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPokaz_result)
        return this.equals((getPokaz_result)that);
      return false;
    }

    public boolean equals(getPokaz_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPokaz_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPokaz_result typedOther = (getPokaz_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPokaz_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPokaz_resultStandardSchemeFactory implements SchemeFactory {
      public getPokaz_resultStandardScheme getScheme() {
        return new getPokaz_resultStandardScheme();
      }
    }

    private static class getPokaz_resultStandardScheme extends StandardScheme<getPokaz_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPokaz_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<Pokaz>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    Pokaz _elem42; // required
                    _elem42 = new Pokaz();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPokaz_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          if (struct.isSetSuccess()) {
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
              for (Pokaz _iter43 : struct.success)
              {
                _iter43.write(oprot);
              }
              oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
          }
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPokaz_resultTupleSchemeFactory implements SchemeFactory {
      public getPokaz_resultTupleScheme getScheme() {
        return new getPokaz_resultTupleScheme();
      }
    }

    private static class getPokaz_resultTupleScheme extends TupleScheme<getPokaz_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPokaz_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Pokaz _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPokaz_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Pokaz>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              Pokaz _elem47; // required
              _elem47 = new Pokaz();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

  public static class AddPisl_args implements org.apache.thrift.TBase<AddPisl_args, AddPisl_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddPisl_args");

    private static final org.apache.thrift.protocol.TField NPISL_FIELD_DESC = new org.apache.thrift.protocol.TField("npisl", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddPisl_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddPisl_argsTupleSchemeFactory());
    }

    public Pisl npisl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPISL((short)1, "npisl");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPISL
            return NPISL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPISL, new org.apache.thrift.meta_data.FieldMetaData("npisl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Pisl.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddPisl_args.class, metaDataMap);
    }

    public AddPisl_args() {
    }

    public AddPisl_args(
      Pisl npisl)
    {
      this();
      this.npisl = npisl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddPisl_args(AddPisl_args other) {
      if (other.isSetNpisl()) {
        this.npisl = new Pisl(other.npisl);
      }
    }

    public AddPisl_args deepCopy() {
      return new AddPisl_args(this);
    }

    @Override
    public void clear() {
      this.npisl = null;
    }

    public Pisl getNpisl() {
      return this.npisl;
    }

    public AddPisl_args setNpisl(Pisl npisl) {
      this.npisl = npisl;
      return this;
    }

    public void unsetNpisl() {
      this.npisl = null;
    }

    /** Returns true if field npisl is set (has been assigned a value) and false otherwise */
    public boolean isSetNpisl() {
      return this.npisl != null;
    }

    public void setNpislIsSet(boolean value) {
      if (!value) {
        this.npisl = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPISL:
        if (value == null) {
          unsetNpisl();
        } else {
          setNpisl((Pisl)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPISL:
        return getNpisl();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPISL:
        return isSetNpisl();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddPisl_args)
        return this.equals((AddPisl_args)that);
      return false;
    }

    public boolean equals(AddPisl_args that) {
      if (that == null)
        return false;

      boolean this_present_npisl = true && this.isSetNpisl();
      boolean that_present_npisl = true && that.isSetNpisl();
      if (this_present_npisl || that_present_npisl) {
        if (!(this_present_npisl && that_present_npisl))
          return false;
        if (!this.npisl.equals(that.npisl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddPisl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddPisl_args typedOther = (AddPisl_args)other;

      lastComparison = Boolean.valueOf(isSetNpisl()).compareTo(typedOther.isSetNpisl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpisl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npisl, typedOther.npisl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddPisl_args(");
      boolean first = true;

      sb.append("npisl:");
      if (this.npisl == null) {
        sb.append("null");
      } else {
        sb.append(this.npisl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddPisl_argsStandardSchemeFactory implements SchemeFactory {
      public AddPisl_argsStandardScheme getScheme() {
        return new AddPisl_argsStandardScheme();
      }
    }

    private static class AddPisl_argsStandardScheme extends StandardScheme<AddPisl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddPisl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPISL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.npisl = new Pisl();
                struct.npisl.read(iprot);
                struct.setNpislIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddPisl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.npisl != null) {
          oprot.writeFieldBegin(NPISL_FIELD_DESC);
          struct.npisl.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddPisl_argsTupleSchemeFactory implements SchemeFactory {
      public AddPisl_argsTupleScheme getScheme() {
        return new AddPisl_argsTupleScheme();
      }
    }

    private static class AddPisl_argsTupleScheme extends TupleScheme<AddPisl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddPisl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpisl()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNpisl()) {
          struct.npisl.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddPisl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.npisl = new Pisl();
          struct.npisl.read(iprot);
          struct.setNpislIsSet(true);
        }
      }
    }

  }

  public static class AddPisl_result implements org.apache.thrift.TBase<AddPisl_result, AddPisl_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddPisl_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddPisl_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddPisl_resultTupleSchemeFactory());
    }

    public int success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddPisl_result.class, metaDataMap);
    }

    public AddPisl_result() {
    }

    public AddPisl_result(
      int success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddPisl_result(AddPisl_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public AddPisl_result deepCopy() {
      return new AddPisl_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.kse = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public AddPisl_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public AddPisl_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddPisl_result)
        return this.equals((AddPisl_result)that);
      return false;
    }

    public boolean equals(AddPisl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddPisl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddPisl_result typedOther = (AddPisl_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddPisl_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddPisl_resultStandardSchemeFactory implements SchemeFactory {
      public AddPisl_resultStandardScheme getScheme() {
        return new AddPisl_resultStandardScheme();
      }
    }

    private static class AddPisl_resultStandardScheme extends StandardScheme<AddPisl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddPisl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddPisl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddPisl_resultTupleSchemeFactory implements SchemeFactory {
      public AddPisl_resultTupleScheme getScheme() {
        return new AddPisl_resultTupleScheme();
      }
    }

    private static class AddPisl_resultTupleScheme extends TupleScheme<AddPisl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddPisl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddPisl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

  public static class AddPrezd_args implements org.apache.thrift.TBase<AddPrezd_args, AddPrezd_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddPrezd_args");

    private static final org.apache.thrift.protocol.TField DI_FIELD_DESC = new org.apache.thrift.protocol.TField("di", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddPrezd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddPrezd_argsTupleSchemeFactory());
    }

    public PrezD di; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DI((short)1, "di");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DI
            return DI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DI, new org.apache.thrift.meta_data.FieldMetaData("di", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrezD.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddPrezd_args.class, metaDataMap);
    }

    public AddPrezd_args() {
    }

    public AddPrezd_args(
      PrezD di)
    {
      this();
      this.di = di;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddPrezd_args(AddPrezd_args other) {
      if (other.isSetDi()) {
        this.di = new PrezD(other.di);
      }
    }

    public AddPrezd_args deepCopy() {
      return new AddPrezd_args(this);
    }

    @Override
    public void clear() {
      this.di = null;
    }

    public PrezD getDi() {
      return this.di;
    }

    public AddPrezd_args setDi(PrezD di) {
      this.di = di;
      return this;
    }

    public void unsetDi() {
      this.di = null;
    }

    /** Returns true if field di is set (has been assigned a value) and false otherwise */
    public boolean isSetDi() {
      return this.di != null;
    }

    public void setDiIsSet(boolean value) {
      if (!value) {
        this.di = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DI:
        if (value == null) {
          unsetDi();
        } else {
          setDi((PrezD)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DI:
        return getDi();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DI:
        return isSetDi();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddPrezd_args)
        return this.equals((AddPrezd_args)that);
      return false;
    }

    public boolean equals(AddPrezd_args that) {
      if (that == null)
        return false;

      boolean this_present_di = true && this.isSetDi();
      boolean that_present_di = true && that.isSetDi();
      if (this_present_di || that_present_di) {
        if (!(this_present_di && that_present_di))
          return false;
        if (!this.di.equals(that.di))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddPrezd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddPrezd_args typedOther = (AddPrezd_args)other;

      lastComparison = Boolean.valueOf(isSetDi()).compareTo(typedOther.isSetDi());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDi()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.di, typedOther.di);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddPrezd_args(");
      boolean first = true;

      sb.append("di:");
      if (this.di == null) {
        sb.append("null");
      } else {
        sb.append(this.di);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddPrezd_argsStandardSchemeFactory implements SchemeFactory {
      public AddPrezd_argsStandardScheme getScheme() {
        return new AddPrezd_argsStandardScheme();
      }
    }

    private static class AddPrezd_argsStandardScheme extends StandardScheme<AddPrezd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddPrezd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.di = new PrezD();
                struct.di.read(iprot);
                struct.setDiIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddPrezd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.di != null) {
          oprot.writeFieldBegin(DI_FIELD_DESC);
          struct.di.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddPrezd_argsTupleSchemeFactory implements SchemeFactory {
      public AddPrezd_argsTupleScheme getScheme() {
        return new AddPrezd_argsTupleScheme();
      }
    }

    private static class AddPrezd_argsTupleScheme extends TupleScheme<AddPrezd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddPrezd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDi()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDi()) {
          struct.di.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddPrezd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.di = new PrezD();
          struct.di.read(iprot);
          struct.setDiIsSet(true);
        }
      }
    }

  }

  public static class AddPrezd_result implements org.apache.thrift.TBase<AddPrezd_result, AddPrezd_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddPrezd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddPrezd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddPrezd_resultTupleSchemeFactory());
    }

    public int success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddPrezd_result.class, metaDataMap);
    }

    public AddPrezd_result() {
    }

    public AddPrezd_result(
      int success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddPrezd_result(AddPrezd_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public AddPrezd_result deepCopy() {
      return new AddPrezd_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.kse = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public AddPrezd_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public AddPrezd_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddPrezd_result)
        return this.equals((AddPrezd_result)that);
      return false;
    }

    public boolean equals(AddPrezd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddPrezd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddPrezd_result typedOther = (AddPrezd_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddPrezd_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddPrezd_resultStandardSchemeFactory implements SchemeFactory {
      public AddPrezd_resultStandardScheme getScheme() {
        return new AddPrezd_resultStandardScheme();
      }
    }

    private static class AddPrezd_resultStandardScheme extends StandardScheme<AddPrezd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddPrezd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddPrezd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddPrezd_resultTupleSchemeFactory implements SchemeFactory {
      public AddPrezd_resultTupleScheme getScheme() {
        return new AddPrezd_resultTupleScheme();
      }
    }

    private static class AddPrezd_resultTupleScheme extends TupleScheme<AddPrezd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddPrezd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddPrezd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

  public static class AddPrezl_args implements org.apache.thrift.TBase<AddPrezl_args, AddPrezl_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddPrezl_args");

    private static final org.apache.thrift.protocol.TField LI_FIELD_DESC = new org.apache.thrift.protocol.TField("li", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddPrezl_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddPrezl_argsTupleSchemeFactory());
    }

    public PrezL li; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LI((short)1, "li");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LI
            return LI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LI, new org.apache.thrift.meta_data.FieldMetaData("li", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrezL.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddPrezl_args.class, metaDataMap);
    }

    public AddPrezl_args() {
    }

    public AddPrezl_args(
      PrezL li)
    {
      this();
      this.li = li;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddPrezl_args(AddPrezl_args other) {
      if (other.isSetLi()) {
        this.li = new PrezL(other.li);
      }
    }

    public AddPrezl_args deepCopy() {
      return new AddPrezl_args(this);
    }

    @Override
    public void clear() {
      this.li = null;
    }

    public PrezL getLi() {
      return this.li;
    }

    public AddPrezl_args setLi(PrezL li) {
      this.li = li;
      return this;
    }

    public void unsetLi() {
      this.li = null;
    }

    /** Returns true if field li is set (has been assigned a value) and false otherwise */
    public boolean isSetLi() {
      return this.li != null;
    }

    public void setLiIsSet(boolean value) {
      if (!value) {
        this.li = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LI:
        if (value == null) {
          unsetLi();
        } else {
          setLi((PrezL)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LI:
        return getLi();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LI:
        return isSetLi();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddPrezl_args)
        return this.equals((AddPrezl_args)that);
      return false;
    }

    public boolean equals(AddPrezl_args that) {
      if (that == null)
        return false;

      boolean this_present_li = true && this.isSetLi();
      boolean that_present_li = true && that.isSetLi();
      if (this_present_li || that_present_li) {
        if (!(this_present_li && that_present_li))
          return false;
        if (!this.li.equals(that.li))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddPrezl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddPrezl_args typedOther = (AddPrezl_args)other;

      lastComparison = Boolean.valueOf(isSetLi()).compareTo(typedOther.isSetLi());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLi()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.li, typedOther.li);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddPrezl_args(");
      boolean first = true;

      sb.append("li:");
      if (this.li == null) {
        sb.append("null");
      } else {
        sb.append(this.li);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddPrezl_argsStandardSchemeFactory implements SchemeFactory {
      public AddPrezl_argsStandardScheme getScheme() {
        return new AddPrezl_argsStandardScheme();
      }
    }

    private static class AddPrezl_argsStandardScheme extends StandardScheme<AddPrezl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddPrezl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.li = new PrezL();
                struct.li.read(iprot);
                struct.setLiIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddPrezl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.li != null) {
          oprot.writeFieldBegin(LI_FIELD_DESC);
          struct.li.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddPrezl_argsTupleSchemeFactory implements SchemeFactory {
      public AddPrezl_argsTupleScheme getScheme() {
        return new AddPrezl_argsTupleScheme();
      }
    }

    private static class AddPrezl_argsTupleScheme extends TupleScheme<AddPrezl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddPrezl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLi()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLi()) {
          struct.li.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddPrezl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.li = new PrezL();
          struct.li.read(iprot);
          struct.setLiIsSet(true);
        }
      }
    }

  }

  public static class AddPrezl_result implements org.apache.thrift.TBase<AddPrezl_result, AddPrezl_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddPrezl_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddPrezl_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddPrezl_resultTupleSchemeFactory());
    }

    public int success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddPrezl_result.class, metaDataMap);
    }

    public AddPrezl_result() {
    }

    public AddPrezl_result(
      int success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddPrezl_result(AddPrezl_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public AddPrezl_result deepCopy() {
      return new AddPrezl_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.kse = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public AddPrezl_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public AddPrezl_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddPrezl_result)
        return this.equals((AddPrezl_result)that);
      return false;
    }

    public boolean equals(AddPrezl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddPrezl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddPrezl_result typedOther = (AddPrezl_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddPrezl_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddPrezl_resultStandardSchemeFactory implements SchemeFactory {
      public AddPrezl_resultStandardScheme getScheme() {
        return new AddPrezl_resultStandardScheme();
      }
    }

    private static class AddPrezl_resultStandardScheme extends StandardScheme<AddPrezl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddPrezl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddPrezl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddPrezl_resultTupleSchemeFactory implements SchemeFactory {
      public AddPrezl_resultTupleScheme getScheme() {
        return new AddPrezl_resultTupleScheme();
      }
    }

    private static class AddPrezl_resultTupleScheme extends TupleScheme<AddPrezl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddPrezl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddPrezl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

  public static class getPoliclinic_args implements org.apache.thrift.TBase<getPoliclinic_args, getPoliclinic_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPoliclinic_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPoliclinic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPoliclinic_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPoliclinic_args.class, metaDataMap);
    }

    public getPoliclinic_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPoliclinic_args(getPoliclinic_args other) {
    }

    public getPoliclinic_args deepCopy() {
      return new getPoliclinic_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPoliclinic_args)
        return this.equals((getPoliclinic_args)that);
      return false;
    }

    public boolean equals(getPoliclinic_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPoliclinic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPoliclinic_args typedOther = (getPoliclinic_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPoliclinic_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPoliclinic_argsStandardSchemeFactory implements SchemeFactory {
      public getPoliclinic_argsStandardScheme getScheme() {
        return new getPoliclinic_argsStandardScheme();
      }
    }

    private static class getPoliclinic_argsStandardScheme extends StandardScheme<getPoliclinic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPoliclinic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPoliclinic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPoliclinic_argsTupleSchemeFactory implements SchemeFactory {
      public getPoliclinic_argsTupleScheme getScheme() {
        return new getPoliclinic_argsTupleScheme();
      }
    }

    private static class getPoliclinic_argsTupleScheme extends TupleScheme<getPoliclinic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPoliclinic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPoliclinic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getPoliclinic_result implements org.apache.thrift.TBase<getPoliclinic_result, getPoliclinic_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPoliclinic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPoliclinic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPoliclinic_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier.class))));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPoliclinic_result.class, metaDataMap);
    }

    public getPoliclinic_result() {
    }

    public getPoliclinic_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.success = success;
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPoliclinic_result(getPoliclinic_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public getPoliclinic_result deepCopy() {
      return new getPoliclinic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccess() {
      return this.success;
    }

    public getPoliclinic_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getPoliclinic_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPoliclinic_result)
        return this.equals((getPoliclinic_result)that);
      return false;
    }

    public boolean equals(getPoliclinic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPoliclinic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPoliclinic_result typedOther = (getPoliclinic_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPoliclinic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPoliclinic_resultStandardSchemeFactory implements SchemeFactory {
      public getPoliclinic_resultStandardScheme getScheme() {
        return new getPoliclinic_resultStandardScheme();
      }
    }

    private static class getPoliclinic_resultStandardScheme extends StandardScheme<getPoliclinic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPoliclinic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem50; // required
                    _elem50 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
                    _elem50.read(iprot);
                    struct.success.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPoliclinic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          if (struct.isSetSuccess()) {
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
              for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter51 : struct.success)
              {
                _iter51.write(oprot);
              }
              oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
          }
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPoliclinic_resultTupleSchemeFactory implements SchemeFactory {
      public getPoliclinic_resultTupleScheme getScheme() {
        return new getPoliclinic_resultTupleScheme();
      }
    }

    private static class getPoliclinic_resultTupleScheme extends TupleScheme<getPoliclinic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPoliclinic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPoliclinic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem55; // required
              _elem55 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
              _elem55.read(iprot);
              struct.success.add(_elem55);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

  public static class getStacionarTypes_args implements org.apache.thrift.TBase<getStacionarTypes_args, getStacionarTypes_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStacionarTypes_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStacionarTypes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStacionarTypes_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStacionarTypes_args.class, metaDataMap);
    }

    public getStacionarTypes_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStacionarTypes_args(getStacionarTypes_args other) {
    }

    public getStacionarTypes_args deepCopy() {
      return new getStacionarTypes_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStacionarTypes_args)
        return this.equals((getStacionarTypes_args)that);
      return false;
    }

    public boolean equals(getStacionarTypes_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStacionarTypes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStacionarTypes_args typedOther = (getStacionarTypes_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStacionarTypes_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStacionarTypes_argsStandardSchemeFactory implements SchemeFactory {
      public getStacionarTypes_argsStandardScheme getScheme() {
        return new getStacionarTypes_argsStandardScheme();
      }
    }

    private static class getStacionarTypes_argsStandardScheme extends StandardScheme<getStacionarTypes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStacionarTypes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStacionarTypes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStacionarTypes_argsTupleSchemeFactory implements SchemeFactory {
      public getStacionarTypes_argsTupleScheme getScheme() {
        return new getStacionarTypes_argsTupleScheme();
      }
    }

    private static class getStacionarTypes_argsTupleScheme extends TupleScheme<getStacionarTypes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStacionarTypes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStacionarTypes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getStacionarTypes_result implements org.apache.thrift.TBase<getStacionarTypes_result, getStacionarTypes_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStacionarTypes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStacionarTypes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStacionarTypes_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier.class))));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStacionarTypes_result.class, metaDataMap);
    }

    public getStacionarTypes_result() {
    }

    public getStacionarTypes_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.success = success;
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStacionarTypes_result(getStacionarTypes_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public getStacionarTypes_result deepCopy() {
      return new getStacionarTypes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccess() {
      return this.success;
    }

    public getStacionarTypes_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getStacionarTypes_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStacionarTypes_result)
        return this.equals((getStacionarTypes_result)that);
      return false;
    }

    public boolean equals(getStacionarTypes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStacionarTypes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStacionarTypes_result typedOther = (getStacionarTypes_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStacionarTypes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStacionarTypes_resultStandardSchemeFactory implements SchemeFactory {
      public getStacionarTypes_resultStandardScheme getScheme() {
        return new getStacionarTypes_resultStandardScheme();
      }
    }

    private static class getStacionarTypes_resultStandardScheme extends StandardScheme<getStacionarTypes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStacionarTypes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem58; // required
                    _elem58 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
                    _elem58.read(iprot);
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStacionarTypes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          if (struct.isSetSuccess()) {
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
              for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter59 : struct.success)
              {
                _iter59.write(oprot);
              }
              oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
          }
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStacionarTypes_resultTupleSchemeFactory implements SchemeFactory {
      public getStacionarTypes_resultTupleScheme getScheme() {
        return new getStacionarTypes_resultTupleScheme();
      }
    }

    private static class getStacionarTypes_resultTupleScheme extends TupleScheme<getStacionarTypes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStacionarTypes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStacionarTypes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem63; // required
              _elem63 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
              _elem63.read(iprot);
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

  public static class getLpu_args implements org.apache.thrift.TBase<getLpu_args, getLpu_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLpu_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLpu_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLpu_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLpu_args.class, metaDataMap);
    }

    public getLpu_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLpu_args(getLpu_args other) {
    }

    public getLpu_args deepCopy() {
      return new getLpu_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLpu_args)
        return this.equals((getLpu_args)that);
      return false;
    }

    public boolean equals(getLpu_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLpu_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLpu_args typedOther = (getLpu_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLpu_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLpu_argsStandardSchemeFactory implements SchemeFactory {
      public getLpu_argsStandardScheme getScheme() {
        return new getLpu_argsStandardScheme();
      }
    }

    private static class getLpu_argsStandardScheme extends StandardScheme<getLpu_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLpu_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLpu_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLpu_argsTupleSchemeFactory implements SchemeFactory {
      public getLpu_argsTupleScheme getScheme() {
        return new getLpu_argsTupleScheme();
      }
    }

    private static class getLpu_argsTupleScheme extends TupleScheme<getLpu_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLpu_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLpu_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getLpu_result implements org.apache.thrift.TBase<getLpu_result, getLpu_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLpu_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLpu_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLpu_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier.class))));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLpu_result.class, metaDataMap);
    }

    public getLpu_result() {
    }

    public getLpu_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.success = success;
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLpu_result(getLpu_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public getLpu_result deepCopy() {
      return new getLpu_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccess() {
      return this.success;
    }

    public getLpu_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getLpu_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLpu_result)
        return this.equals((getLpu_result)that);
      return false;
    }

    public boolean equals(getLpu_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLpu_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLpu_result typedOther = (getLpu_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLpu_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLpu_resultStandardSchemeFactory implements SchemeFactory {
      public getLpu_resultStandardScheme getScheme() {
        return new getLpu_resultStandardScheme();
      }
    }

    private static class getLpu_resultStandardScheme extends StandardScheme<getLpu_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLpu_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem66; // required
                    _elem66 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
                    _elem66.read(iprot);
                    struct.success.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLpu_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          if (struct.isSetSuccess()) {
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
              for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter67 : struct.success)
              {
                _iter67.write(oprot);
              }
              oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
          }
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLpu_resultTupleSchemeFactory implements SchemeFactory {
      public getLpu_resultTupleScheme getScheme() {
        return new getLpu_resultTupleScheme();
      }
    }

    private static class getLpu_resultTupleScheme extends TupleScheme<getLpu_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLpu_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLpu_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem71; // required
              _elem71 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
              _elem71.read(iprot);
              struct.success.add(_elem71);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

}
