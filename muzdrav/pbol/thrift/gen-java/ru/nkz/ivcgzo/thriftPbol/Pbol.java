/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftPbol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Pbol implements org.apache.thrift.TBase<Pbol, Pbol._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Pbol");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ID_OBR_FIELD_DESC = new org.apache.thrift.protocol.TField("id_obr", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ID_GOSP_FIELD_DESC = new org.apache.thrift.protocol.TField("id_gosp", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField BOL_L_FIELD_DESC = new org.apache.thrift.protocol.TField("bol_l", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField S_BL_FIELD_DESC = new org.apache.thrift.protocol.TField("s_bl", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField PO_BL_FIELD_DESC = new org.apache.thrift.protocol.TField("po_bl", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField POL_FIELD_DESC = new org.apache.thrift.protocol.TField("pol", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField VOZR_FIELD_DESC = new org.apache.thrift.protocol.TField("vozr", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField NOMBL_FIELD_DESC = new org.apache.thrift.protocol.TField("nombl", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField COD_SP_FIELD_DESC = new org.apache.thrift.protocol.TField("cod_sp", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CDOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cdol", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("pcod", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField DATAZ_FIELD_DESC = new org.apache.thrift.protocol.TField("dataz", org.apache.thrift.protocol.TType.I64, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PbolStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PbolTupleSchemeFactory());
  }

  public int id; // optional
  public int id_obr; // optional
  public int id_gosp; // optional
  public int npasp; // optional
  public int bol_l; // optional
  public long s_bl; // optional
  public long po_bl; // optional
  public int pol; // optional
  public int vozr; // optional
  public String nombl; // optional
  public int cod_sp; // optional
  public String cdol; // optional
  public int pcod; // optional
  public long dataz; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ID_OBR((short)2, "id_obr"),
    ID_GOSP((short)3, "id_gosp"),
    NPASP((short)4, "npasp"),
    BOL_L((short)5, "bol_l"),
    S_BL((short)6, "s_bl"),
    PO_BL((short)7, "po_bl"),
    POL((short)8, "pol"),
    VOZR((short)9, "vozr"),
    NOMBL((short)10, "nombl"),
    COD_SP((short)11, "cod_sp"),
    CDOL((short)12, "cdol"),
    PCOD((short)13, "pcod"),
    DATAZ((short)14, "dataz");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ID_OBR
          return ID_OBR;
        case 3: // ID_GOSP
          return ID_GOSP;
        case 4: // NPASP
          return NPASP;
        case 5: // BOL_L
          return BOL_L;
        case 6: // S_BL
          return S_BL;
        case 7: // PO_BL
          return PO_BL;
        case 8: // POL
          return POL;
        case 9: // VOZR
          return VOZR;
        case 10: // NOMBL
          return NOMBL;
        case 11: // COD_SP
          return COD_SP;
        case 12: // CDOL
          return CDOL;
        case 13: // PCOD
          return PCOD;
        case 14: // DATAZ
          return DATAZ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ID_OBR_ISSET_ID = 1;
  private static final int __ID_GOSP_ISSET_ID = 2;
  private static final int __NPASP_ISSET_ID = 3;
  private static final int __BOL_L_ISSET_ID = 4;
  private static final int __S_BL_ISSET_ID = 5;
  private static final int __PO_BL_ISSET_ID = 6;
  private static final int __POL_ISSET_ID = 7;
  private static final int __VOZR_ISSET_ID = 8;
  private static final int __COD_SP_ISSET_ID = 9;
  private static final int __PCOD_ISSET_ID = 10;
  private static final int __DATAZ_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ID,_Fields.ID_OBR,_Fields.ID_GOSP,_Fields.NPASP,_Fields.BOL_L,_Fields.S_BL,_Fields.PO_BL,_Fields.POL,_Fields.VOZR,_Fields.NOMBL,_Fields.COD_SP,_Fields.CDOL,_Fields.PCOD,_Fields.DATAZ};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID_OBR, new org.apache.thrift.meta_data.FieldMetaData("id_obr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID_GOSP, new org.apache.thrift.meta_data.FieldMetaData("id_gosp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOL_L, new org.apache.thrift.meta_data.FieldMetaData("bol_l", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S_BL, new org.apache.thrift.meta_data.FieldMetaData("s_bl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PO_BL, new org.apache.thrift.meta_data.FieldMetaData("po_bl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POL, new org.apache.thrift.meta_data.FieldMetaData("pol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VOZR, new org.apache.thrift.meta_data.FieldMetaData("vozr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOMBL, new org.apache.thrift.meta_data.FieldMetaData("nombl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COD_SP, new org.apache.thrift.meta_data.FieldMetaData("cod_sp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CDOL, new org.apache.thrift.meta_data.FieldMetaData("cdol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PCOD, new org.apache.thrift.meta_data.FieldMetaData("pcod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATAZ, new org.apache.thrift.meta_data.FieldMetaData("dataz", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Pbol.class, metaDataMap);
  }

  public Pbol() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Pbol(Pbol other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.id_obr = other.id_obr;
    this.id_gosp = other.id_gosp;
    this.npasp = other.npasp;
    this.bol_l = other.bol_l;
    this.s_bl = other.s_bl;
    this.po_bl = other.po_bl;
    this.pol = other.pol;
    this.vozr = other.vozr;
    if (other.isSetNombl()) {
      this.nombl = other.nombl;
    }
    this.cod_sp = other.cod_sp;
    if (other.isSetCdol()) {
      this.cdol = other.cdol;
    }
    this.pcod = other.pcod;
    this.dataz = other.dataz;
  }

  public Pbol deepCopy() {
    return new Pbol(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setId_obrIsSet(false);
    this.id_obr = 0;
    setId_gospIsSet(false);
    this.id_gosp = 0;
    setNpaspIsSet(false);
    this.npasp = 0;
    setBol_lIsSet(false);
    this.bol_l = 0;
    setS_blIsSet(false);
    this.s_bl = 0;
    setPo_blIsSet(false);
    this.po_bl = 0;
    setPolIsSet(false);
    this.pol = 0;
    setVozrIsSet(false);
    this.vozr = 0;
    this.nombl = null;
    setCod_spIsSet(false);
    this.cod_sp = 0;
    this.cdol = null;
    setPcodIsSet(false);
    this.pcod = 0;
    setDatazIsSet(false);
    this.dataz = 0;
  }

  public int getId() {
    return this.id;
  }

  public Pbol setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getId_obr() {
    return this.id_obr;
  }

  public Pbol setId_obr(int id_obr) {
    this.id_obr = id_obr;
    setId_obrIsSet(true);
    return this;
  }

  public void unsetId_obr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_OBR_ISSET_ID);
  }

  /** Returns true if field id_obr is set (has been assigned a value) and false otherwise */
  public boolean isSetId_obr() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_OBR_ISSET_ID);
  }

  public void setId_obrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_OBR_ISSET_ID, value);
  }

  public int getId_gosp() {
    return this.id_gosp;
  }

  public Pbol setId_gosp(int id_gosp) {
    this.id_gosp = id_gosp;
    setId_gospIsSet(true);
    return this;
  }

  public void unsetId_gosp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_GOSP_ISSET_ID);
  }

  /** Returns true if field id_gosp is set (has been assigned a value) and false otherwise */
  public boolean isSetId_gosp() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_GOSP_ISSET_ID);
  }

  public void setId_gospIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_GOSP_ISSET_ID, value);
  }

  public int getNpasp() {
    return this.npasp;
  }

  public Pbol setNpasp(int npasp) {
    this.npasp = npasp;
    setNpaspIsSet(true);
    return this;
  }

  public void unsetNpasp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NPASP_ISSET_ID);
  }

  /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
  public boolean isSetNpasp() {
    return EncodingUtils.testBit(__isset_bitfield, __NPASP_ISSET_ID);
  }

  public void setNpaspIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NPASP_ISSET_ID, value);
  }

  public int getBol_l() {
    return this.bol_l;
  }

  public Pbol setBol_l(int bol_l) {
    this.bol_l = bol_l;
    setBol_lIsSet(true);
    return this;
  }

  public void unsetBol_l() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOL_L_ISSET_ID);
  }

  /** Returns true if field bol_l is set (has been assigned a value) and false otherwise */
  public boolean isSetBol_l() {
    return EncodingUtils.testBit(__isset_bitfield, __BOL_L_ISSET_ID);
  }

  public void setBol_lIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOL_L_ISSET_ID, value);
  }

  public long getS_bl() {
    return this.s_bl;
  }

  public Pbol setS_bl(long s_bl) {
    this.s_bl = s_bl;
    setS_blIsSet(true);
    return this;
  }

  public void unsetS_bl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __S_BL_ISSET_ID);
  }

  /** Returns true if field s_bl is set (has been assigned a value) and false otherwise */
  public boolean isSetS_bl() {
    return EncodingUtils.testBit(__isset_bitfield, __S_BL_ISSET_ID);
  }

  public void setS_blIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __S_BL_ISSET_ID, value);
  }

  public long getPo_bl() {
    return this.po_bl;
  }

  public Pbol setPo_bl(long po_bl) {
    this.po_bl = po_bl;
    setPo_blIsSet(true);
    return this;
  }

  public void unsetPo_bl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PO_BL_ISSET_ID);
  }

  /** Returns true if field po_bl is set (has been assigned a value) and false otherwise */
  public boolean isSetPo_bl() {
    return EncodingUtils.testBit(__isset_bitfield, __PO_BL_ISSET_ID);
  }

  public void setPo_blIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PO_BL_ISSET_ID, value);
  }

  public int getPol() {
    return this.pol;
  }

  public Pbol setPol(int pol) {
    this.pol = pol;
    setPolIsSet(true);
    return this;
  }

  public void unsetPol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POL_ISSET_ID);
  }

  /** Returns true if field pol is set (has been assigned a value) and false otherwise */
  public boolean isSetPol() {
    return EncodingUtils.testBit(__isset_bitfield, __POL_ISSET_ID);
  }

  public void setPolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POL_ISSET_ID, value);
  }

  public int getVozr() {
    return this.vozr;
  }

  public Pbol setVozr(int vozr) {
    this.vozr = vozr;
    setVozrIsSet(true);
    return this;
  }

  public void unsetVozr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOZR_ISSET_ID);
  }

  /** Returns true if field vozr is set (has been assigned a value) and false otherwise */
  public boolean isSetVozr() {
    return EncodingUtils.testBit(__isset_bitfield, __VOZR_ISSET_ID);
  }

  public void setVozrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOZR_ISSET_ID, value);
  }

  public String getNombl() {
    return this.nombl;
  }

  public Pbol setNombl(String nombl) {
    this.nombl = nombl;
    return this;
  }

  public void unsetNombl() {
    this.nombl = null;
  }

  /** Returns true if field nombl is set (has been assigned a value) and false otherwise */
  public boolean isSetNombl() {
    return this.nombl != null;
  }

  public void setNomblIsSet(boolean value) {
    if (!value) {
      this.nombl = null;
    }
  }

  public int getCod_sp() {
    return this.cod_sp;
  }

  public Pbol setCod_sp(int cod_sp) {
    this.cod_sp = cod_sp;
    setCod_spIsSet(true);
    return this;
  }

  public void unsetCod_sp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COD_SP_ISSET_ID);
  }

  /** Returns true if field cod_sp is set (has been assigned a value) and false otherwise */
  public boolean isSetCod_sp() {
    return EncodingUtils.testBit(__isset_bitfield, __COD_SP_ISSET_ID);
  }

  public void setCod_spIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COD_SP_ISSET_ID, value);
  }

  public String getCdol() {
    return this.cdol;
  }

  public Pbol setCdol(String cdol) {
    this.cdol = cdol;
    return this;
  }

  public void unsetCdol() {
    this.cdol = null;
  }

  /** Returns true if field cdol is set (has been assigned a value) and false otherwise */
  public boolean isSetCdol() {
    return this.cdol != null;
  }

  public void setCdolIsSet(boolean value) {
    if (!value) {
      this.cdol = null;
    }
  }

  public int getPcod() {
    return this.pcod;
  }

  public Pbol setPcod(int pcod) {
    this.pcod = pcod;
    setPcodIsSet(true);
    return this;
  }

  public void unsetPcod() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PCOD_ISSET_ID);
  }

  /** Returns true if field pcod is set (has been assigned a value) and false otherwise */
  public boolean isSetPcod() {
    return EncodingUtils.testBit(__isset_bitfield, __PCOD_ISSET_ID);
  }

  public void setPcodIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PCOD_ISSET_ID, value);
  }

  public long getDataz() {
    return this.dataz;
  }

  public Pbol setDataz(long dataz) {
    this.dataz = dataz;
    setDatazIsSet(true);
    return this;
  }

  public void unsetDataz() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAZ_ISSET_ID);
  }

  /** Returns true if field dataz is set (has been assigned a value) and false otherwise */
  public boolean isSetDataz() {
    return EncodingUtils.testBit(__isset_bitfield, __DATAZ_ISSET_ID);
  }

  public void setDatazIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAZ_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ID_OBR:
      if (value == null) {
        unsetId_obr();
      } else {
        setId_obr((Integer)value);
      }
      break;

    case ID_GOSP:
      if (value == null) {
        unsetId_gosp();
      } else {
        setId_gosp((Integer)value);
      }
      break;

    case NPASP:
      if (value == null) {
        unsetNpasp();
      } else {
        setNpasp((Integer)value);
      }
      break;

    case BOL_L:
      if (value == null) {
        unsetBol_l();
      } else {
        setBol_l((Integer)value);
      }
      break;

    case S_BL:
      if (value == null) {
        unsetS_bl();
      } else {
        setS_bl((Long)value);
      }
      break;

    case PO_BL:
      if (value == null) {
        unsetPo_bl();
      } else {
        setPo_bl((Long)value);
      }
      break;

    case POL:
      if (value == null) {
        unsetPol();
      } else {
        setPol((Integer)value);
      }
      break;

    case VOZR:
      if (value == null) {
        unsetVozr();
      } else {
        setVozr((Integer)value);
      }
      break;

    case NOMBL:
      if (value == null) {
        unsetNombl();
      } else {
        setNombl((String)value);
      }
      break;

    case COD_SP:
      if (value == null) {
        unsetCod_sp();
      } else {
        setCod_sp((Integer)value);
      }
      break;

    case CDOL:
      if (value == null) {
        unsetCdol();
      } else {
        setCdol((String)value);
      }
      break;

    case PCOD:
      if (value == null) {
        unsetPcod();
      } else {
        setPcod((Integer)value);
      }
      break;

    case DATAZ:
      if (value == null) {
        unsetDataz();
      } else {
        setDataz((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case ID_OBR:
      return Integer.valueOf(getId_obr());

    case ID_GOSP:
      return Integer.valueOf(getId_gosp());

    case NPASP:
      return Integer.valueOf(getNpasp());

    case BOL_L:
      return Integer.valueOf(getBol_l());

    case S_BL:
      return Long.valueOf(getS_bl());

    case PO_BL:
      return Long.valueOf(getPo_bl());

    case POL:
      return Integer.valueOf(getPol());

    case VOZR:
      return Integer.valueOf(getVozr());

    case NOMBL:
      return getNombl();

    case COD_SP:
      return Integer.valueOf(getCod_sp());

    case CDOL:
      return getCdol();

    case PCOD:
      return Integer.valueOf(getPcod());

    case DATAZ:
      return Long.valueOf(getDataz());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ID_OBR:
      return isSetId_obr();
    case ID_GOSP:
      return isSetId_gosp();
    case NPASP:
      return isSetNpasp();
    case BOL_L:
      return isSetBol_l();
    case S_BL:
      return isSetS_bl();
    case PO_BL:
      return isSetPo_bl();
    case POL:
      return isSetPol();
    case VOZR:
      return isSetVozr();
    case NOMBL:
      return isSetNombl();
    case COD_SP:
      return isSetCod_sp();
    case CDOL:
      return isSetCdol();
    case PCOD:
      return isSetPcod();
    case DATAZ:
      return isSetDataz();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Pbol)
      return this.equals((Pbol)that);
    return false;
  }

  public boolean equals(Pbol that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_id_obr = true && this.isSetId_obr();
    boolean that_present_id_obr = true && that.isSetId_obr();
    if (this_present_id_obr || that_present_id_obr) {
      if (!(this_present_id_obr && that_present_id_obr))
        return false;
      if (this.id_obr != that.id_obr)
        return false;
    }

    boolean this_present_id_gosp = true && this.isSetId_gosp();
    boolean that_present_id_gosp = true && that.isSetId_gosp();
    if (this_present_id_gosp || that_present_id_gosp) {
      if (!(this_present_id_gosp && that_present_id_gosp))
        return false;
      if (this.id_gosp != that.id_gosp)
        return false;
    }

    boolean this_present_npasp = true && this.isSetNpasp();
    boolean that_present_npasp = true && that.isSetNpasp();
    if (this_present_npasp || that_present_npasp) {
      if (!(this_present_npasp && that_present_npasp))
        return false;
      if (this.npasp != that.npasp)
        return false;
    }

    boolean this_present_bol_l = true && this.isSetBol_l();
    boolean that_present_bol_l = true && that.isSetBol_l();
    if (this_present_bol_l || that_present_bol_l) {
      if (!(this_present_bol_l && that_present_bol_l))
        return false;
      if (this.bol_l != that.bol_l)
        return false;
    }

    boolean this_present_s_bl = true && this.isSetS_bl();
    boolean that_present_s_bl = true && that.isSetS_bl();
    if (this_present_s_bl || that_present_s_bl) {
      if (!(this_present_s_bl && that_present_s_bl))
        return false;
      if (this.s_bl != that.s_bl)
        return false;
    }

    boolean this_present_po_bl = true && this.isSetPo_bl();
    boolean that_present_po_bl = true && that.isSetPo_bl();
    if (this_present_po_bl || that_present_po_bl) {
      if (!(this_present_po_bl && that_present_po_bl))
        return false;
      if (this.po_bl != that.po_bl)
        return false;
    }

    boolean this_present_pol = true && this.isSetPol();
    boolean that_present_pol = true && that.isSetPol();
    if (this_present_pol || that_present_pol) {
      if (!(this_present_pol && that_present_pol))
        return false;
      if (this.pol != that.pol)
        return false;
    }

    boolean this_present_vozr = true && this.isSetVozr();
    boolean that_present_vozr = true && that.isSetVozr();
    if (this_present_vozr || that_present_vozr) {
      if (!(this_present_vozr && that_present_vozr))
        return false;
      if (this.vozr != that.vozr)
        return false;
    }

    boolean this_present_nombl = true && this.isSetNombl();
    boolean that_present_nombl = true && that.isSetNombl();
    if (this_present_nombl || that_present_nombl) {
      if (!(this_present_nombl && that_present_nombl))
        return false;
      if (!this.nombl.equals(that.nombl))
        return false;
    }

    boolean this_present_cod_sp = true && this.isSetCod_sp();
    boolean that_present_cod_sp = true && that.isSetCod_sp();
    if (this_present_cod_sp || that_present_cod_sp) {
      if (!(this_present_cod_sp && that_present_cod_sp))
        return false;
      if (this.cod_sp != that.cod_sp)
        return false;
    }

    boolean this_present_cdol = true && this.isSetCdol();
    boolean that_present_cdol = true && that.isSetCdol();
    if (this_present_cdol || that_present_cdol) {
      if (!(this_present_cdol && that_present_cdol))
        return false;
      if (!this.cdol.equals(that.cdol))
        return false;
    }

    boolean this_present_pcod = true && this.isSetPcod();
    boolean that_present_pcod = true && that.isSetPcod();
    if (this_present_pcod || that_present_pcod) {
      if (!(this_present_pcod && that_present_pcod))
        return false;
      if (this.pcod != that.pcod)
        return false;
    }

    boolean this_present_dataz = true && this.isSetDataz();
    boolean that_present_dataz = true && that.isSetDataz();
    if (this_present_dataz || that_present_dataz) {
      if (!(this_present_dataz && that_present_dataz))
        return false;
      if (this.dataz != that.dataz)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Pbol other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Pbol typedOther = (Pbol)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId_obr()).compareTo(typedOther.isSetId_obr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId_obr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_obr, typedOther.id_obr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId_gosp()).compareTo(typedOther.isSetId_gosp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId_gosp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_gosp, typedOther.id_gosp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNpasp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBol_l()).compareTo(typedOther.isSetBol_l());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBol_l()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bol_l, typedOther.bol_l);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS_bl()).compareTo(typedOther.isSetS_bl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS_bl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s_bl, typedOther.s_bl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPo_bl()).compareTo(typedOther.isSetPo_bl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPo_bl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.po_bl, typedOther.po_bl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPol()).compareTo(typedOther.isSetPol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pol, typedOther.pol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVozr()).compareTo(typedOther.isSetVozr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVozr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vozr, typedOther.vozr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNombl()).compareTo(typedOther.isSetNombl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNombl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nombl, typedOther.nombl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCod_sp()).compareTo(typedOther.isSetCod_sp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCod_sp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cod_sp, typedOther.cod_sp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCdol()).compareTo(typedOther.isSetCdol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCdol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdol, typedOther.cdol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPcod()).compareTo(typedOther.isSetPcod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPcod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcod, typedOther.pcod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataz()).compareTo(typedOther.isSetDataz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataz, typedOther.dataz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Pbol(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetId_obr()) {
      if (!first) sb.append(", ");
      sb.append("id_obr:");
      sb.append(this.id_obr);
      first = false;
    }
    if (isSetId_gosp()) {
      if (!first) sb.append(", ");
      sb.append("id_gosp:");
      sb.append(this.id_gosp);
      first = false;
    }
    if (isSetNpasp()) {
      if (!first) sb.append(", ");
      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
    }
    if (isSetBol_l()) {
      if (!first) sb.append(", ");
      sb.append("bol_l:");
      sb.append(this.bol_l);
      first = false;
    }
    if (isSetS_bl()) {
      if (!first) sb.append(", ");
      sb.append("s_bl:");
      sb.append(this.s_bl);
      first = false;
    }
    if (isSetPo_bl()) {
      if (!first) sb.append(", ");
      sb.append("po_bl:");
      sb.append(this.po_bl);
      first = false;
    }
    if (isSetPol()) {
      if (!first) sb.append(", ");
      sb.append("pol:");
      sb.append(this.pol);
      first = false;
    }
    if (isSetVozr()) {
      if (!first) sb.append(", ");
      sb.append("vozr:");
      sb.append(this.vozr);
      first = false;
    }
    if (isSetNombl()) {
      if (!first) sb.append(", ");
      sb.append("nombl:");
      if (this.nombl == null) {
        sb.append("null");
      } else {
        sb.append(this.nombl);
      }
      first = false;
    }
    if (isSetCod_sp()) {
      if (!first) sb.append(", ");
      sb.append("cod_sp:");
      sb.append(this.cod_sp);
      first = false;
    }
    if (isSetCdol()) {
      if (!first) sb.append(", ");
      sb.append("cdol:");
      if (this.cdol == null) {
        sb.append("null");
      } else {
        sb.append(this.cdol);
      }
      first = false;
    }
    if (isSetPcod()) {
      if (!first) sb.append(", ");
      sb.append("pcod:");
      sb.append(this.pcod);
      first = false;
    }
    if (isSetDataz()) {
      if (!first) sb.append(", ");
      sb.append("dataz:");
      sb.append(this.dataz);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PbolStandardSchemeFactory implements SchemeFactory {
    public PbolStandardScheme getScheme() {
      return new PbolStandardScheme();
    }
  }

  private static class PbolStandardScheme extends StandardScheme<Pbol> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Pbol struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID_OBR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id_obr = iprot.readI32();
              struct.setId_obrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID_GOSP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id_gosp = iprot.readI32();
              struct.setId_gospIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NPASP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.npasp = iprot.readI32();
              struct.setNpaspIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BOL_L
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bol_l = iprot.readI32();
              struct.setBol_lIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // S_BL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.s_bl = iprot.readI64();
              struct.setS_blIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PO_BL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.po_bl = iprot.readI64();
              struct.setPo_blIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pol = iprot.readI32();
              struct.setPolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VOZR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vozr = iprot.readI32();
              struct.setVozrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NOMBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nombl = iprot.readString();
              struct.setNomblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COD_SP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cod_sp = iprot.readI32();
              struct.setCod_spIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CDOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cdol = iprot.readString();
              struct.setCdolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PCOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pcod = iprot.readI32();
              struct.setPcodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DATAZ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataz = iprot.readI64();
              struct.setDatazIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Pbol struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetId_obr()) {
        oprot.writeFieldBegin(ID_OBR_FIELD_DESC);
        oprot.writeI32(struct.id_obr);
        oprot.writeFieldEnd();
      }
      if (struct.isSetId_gosp()) {
        oprot.writeFieldBegin(ID_GOSP_FIELD_DESC);
        oprot.writeI32(struct.id_gosp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNpasp()) {
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBol_l()) {
        oprot.writeFieldBegin(BOL_L_FIELD_DESC);
        oprot.writeI32(struct.bol_l);
        oprot.writeFieldEnd();
      }
      if (struct.isSetS_bl()) {
        oprot.writeFieldBegin(S_BL_FIELD_DESC);
        oprot.writeI64(struct.s_bl);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPo_bl()) {
        oprot.writeFieldBegin(PO_BL_FIELD_DESC);
        oprot.writeI64(struct.po_bl);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPol()) {
        oprot.writeFieldBegin(POL_FIELD_DESC);
        oprot.writeI32(struct.pol);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVozr()) {
        oprot.writeFieldBegin(VOZR_FIELD_DESC);
        oprot.writeI32(struct.vozr);
        oprot.writeFieldEnd();
      }
      if (struct.nombl != null) {
        if (struct.isSetNombl()) {
          oprot.writeFieldBegin(NOMBL_FIELD_DESC);
          oprot.writeString(struct.nombl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCod_sp()) {
        oprot.writeFieldBegin(COD_SP_FIELD_DESC);
        oprot.writeI32(struct.cod_sp);
        oprot.writeFieldEnd();
      }
      if (struct.cdol != null) {
        if (struct.isSetCdol()) {
          oprot.writeFieldBegin(CDOL_FIELD_DESC);
          oprot.writeString(struct.cdol);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPcod()) {
        oprot.writeFieldBegin(PCOD_FIELD_DESC);
        oprot.writeI32(struct.pcod);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDataz()) {
        oprot.writeFieldBegin(DATAZ_FIELD_DESC);
        oprot.writeI64(struct.dataz);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PbolTupleSchemeFactory implements SchemeFactory {
    public PbolTupleScheme getScheme() {
      return new PbolTupleScheme();
    }
  }

  private static class PbolTupleScheme extends TupleScheme<Pbol> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Pbol struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetId_obr()) {
        optionals.set(1);
      }
      if (struct.isSetId_gosp()) {
        optionals.set(2);
      }
      if (struct.isSetNpasp()) {
        optionals.set(3);
      }
      if (struct.isSetBol_l()) {
        optionals.set(4);
      }
      if (struct.isSetS_bl()) {
        optionals.set(5);
      }
      if (struct.isSetPo_bl()) {
        optionals.set(6);
      }
      if (struct.isSetPol()) {
        optionals.set(7);
      }
      if (struct.isSetVozr()) {
        optionals.set(8);
      }
      if (struct.isSetNombl()) {
        optionals.set(9);
      }
      if (struct.isSetCod_sp()) {
        optionals.set(10);
      }
      if (struct.isSetCdol()) {
        optionals.set(11);
      }
      if (struct.isSetPcod()) {
        optionals.set(12);
      }
      if (struct.isSetDataz()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetId_obr()) {
        oprot.writeI32(struct.id_obr);
      }
      if (struct.isSetId_gosp()) {
        oprot.writeI32(struct.id_gosp);
      }
      if (struct.isSetNpasp()) {
        oprot.writeI32(struct.npasp);
      }
      if (struct.isSetBol_l()) {
        oprot.writeI32(struct.bol_l);
      }
      if (struct.isSetS_bl()) {
        oprot.writeI64(struct.s_bl);
      }
      if (struct.isSetPo_bl()) {
        oprot.writeI64(struct.po_bl);
      }
      if (struct.isSetPol()) {
        oprot.writeI32(struct.pol);
      }
      if (struct.isSetVozr()) {
        oprot.writeI32(struct.vozr);
      }
      if (struct.isSetNombl()) {
        oprot.writeString(struct.nombl);
      }
      if (struct.isSetCod_sp()) {
        oprot.writeI32(struct.cod_sp);
      }
      if (struct.isSetCdol()) {
        oprot.writeString(struct.cdol);
      }
      if (struct.isSetPcod()) {
        oprot.writeI32(struct.pcod);
      }
      if (struct.isSetDataz()) {
        oprot.writeI64(struct.dataz);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Pbol struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id_obr = iprot.readI32();
        struct.setId_obrIsSet(true);
      }
      if (incoming.get(2)) {
        struct.id_gosp = iprot.readI32();
        struct.setId_gospIsSet(true);
      }
      if (incoming.get(3)) {
        struct.npasp = iprot.readI32();
        struct.setNpaspIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bol_l = iprot.readI32();
        struct.setBol_lIsSet(true);
      }
      if (incoming.get(5)) {
        struct.s_bl = iprot.readI64();
        struct.setS_blIsSet(true);
      }
      if (incoming.get(6)) {
        struct.po_bl = iprot.readI64();
        struct.setPo_blIsSet(true);
      }
      if (incoming.get(7)) {
        struct.pol = iprot.readI32();
        struct.setPolIsSet(true);
      }
      if (incoming.get(8)) {
        struct.vozr = iprot.readI32();
        struct.setVozrIsSet(true);
      }
      if (incoming.get(9)) {
        struct.nombl = iprot.readString();
        struct.setNomblIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cod_sp = iprot.readI32();
        struct.setCod_spIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cdol = iprot.readString();
        struct.setCdolIsSet(true);
      }
      if (incoming.get(12)) {
        struct.pcod = iprot.readI32();
        struct.setPcodIsSet(true);
      }
      if (incoming.get(13)) {
        struct.dataz = iprot.readI64();
        struct.setDatazIsSet(true);
      }
    }
  }

}

