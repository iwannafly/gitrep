/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftPbol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftPbol {

  public interface Iface extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Iface {

    public List<Pbol> getPbol(int npasp) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

    public int AddPbol(Pbol pbol) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

    public void UpdatePbol(Pbol pbol) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

    public void DeletePbol(int id) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer .AsyncIface {

    public void getPbol(int npasp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPbol_call> resultHandler) throws org.apache.thrift.TException;

    public void AddPbol(Pbol pbol, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddPbol_call> resultHandler) throws org.apache.thrift.TException;

    public void UpdatePbol(Pbol pbol, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.UpdatePbol_call> resultHandler) throws org.apache.thrift.TException;

    public void DeletePbol(int id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.DeletePbol_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<Pbol> getPbol(int npasp) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_getPbol(npasp);
      return recv_getPbol();
    }

    public void send_getPbol(int npasp) throws org.apache.thrift.TException
    {
      getPbol_args args = new getPbol_args();
      args.setNpasp(npasp);
      sendBase("getPbol", args);
    }

    public List<Pbol> recv_getPbol() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      getPbol_result result = new getPbol_result();
      receiveBase(result, "getPbol");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPbol failed: unknown result");
    }

    public int AddPbol(Pbol pbol) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_AddPbol(pbol);
      return recv_AddPbol();
    }

    public void send_AddPbol(Pbol pbol) throws org.apache.thrift.TException
    {
      AddPbol_args args = new AddPbol_args();
      args.setPbol(pbol);
      sendBase("AddPbol", args);
    }

    public int recv_AddPbol() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      AddPbol_result result = new AddPbol_result();
      receiveBase(result, "AddPbol");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddPbol failed: unknown result");
    }

    public void UpdatePbol(Pbol pbol) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_UpdatePbol(pbol);
      recv_UpdatePbol();
    }

    public void send_UpdatePbol(Pbol pbol) throws org.apache.thrift.TException
    {
      UpdatePbol_args args = new UpdatePbol_args();
      args.setPbol(pbol);
      sendBase("UpdatePbol", args);
    }

    public void recv_UpdatePbol() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      UpdatePbol_result result = new UpdatePbol_result();
      receiveBase(result, "UpdatePbol");
      if (result.kse != null) {
        throw result.kse;
      }
      return;
    }

    public void DeletePbol(int id) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      send_DeletePbol(id);
      recv_DeletePbol();
    }

    public void send_DeletePbol(int id) throws org.apache.thrift.TException
    {
      DeletePbol_args args = new DeletePbol_args();
      args.setId(id);
      sendBase("DeletePbol", args);
    }

    public void recv_DeletePbol() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException
    {
      DeletePbol_result result = new DeletePbol_result();
      receiveBase(result, "DeletePbol");
      if (result.kse != null) {
        throw result.kse;
      }
      return;
    }

  }
  public static class AsyncClient extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getPbol(int npasp, org.apache.thrift.async.AsyncMethodCallback<getPbol_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPbol_call method_call = new getPbol_call(npasp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPbol_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      public getPbol_call(int npasp, org.apache.thrift.async.AsyncMethodCallback<getPbol_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPbol", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPbol_args args = new getPbol_args();
        args.setNpasp(npasp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Pbol> getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPbol();
      }
    }

    public void AddPbol(Pbol pbol, org.apache.thrift.async.AsyncMethodCallback<AddPbol_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddPbol_call method_call = new AddPbol_call(pbol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddPbol_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Pbol pbol;
      public AddPbol_call(Pbol pbol, org.apache.thrift.async.AsyncMethodCallback<AddPbol_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pbol = pbol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddPbol", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddPbol_args args = new AddPbol_args();
        args.setPbol(pbol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddPbol();
      }
    }

    public void UpdatePbol(Pbol pbol, org.apache.thrift.async.AsyncMethodCallback<UpdatePbol_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdatePbol_call method_call = new UpdatePbol_call(pbol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdatePbol_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Pbol pbol;
      public UpdatePbol_call(Pbol pbol, org.apache.thrift.async.AsyncMethodCallback<UpdatePbol_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pbol = pbol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdatePbol", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdatePbol_args args = new UpdatePbol_args();
        args.setPbol(pbol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdatePbol();
      }
    }

    public void DeletePbol(int id, org.apache.thrift.async.AsyncMethodCallback<DeletePbol_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeletePbol_call method_call = new DeletePbol_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeletePbol_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public DeletePbol_call(int id, org.apache.thrift.async.AsyncMethodCallback<DeletePbol_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeletePbol", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeletePbol_args args = new DeletePbol_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeletePbol();
      }
    }

  }

  public static class Processor<I extends Iface> extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getPbol", new getPbol());
      processMap.put("AddPbol", new AddPbol());
      processMap.put("UpdatePbol", new UpdatePbol());
      processMap.put("DeletePbol", new DeletePbol());
      return processMap;
    }

    public static class getPbol<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPbol_args> {
      public getPbol() {
        super("getPbol");
      }

      public getPbol_args getEmptyArgsInstance() {
        return new getPbol_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPbol_result getResult(I iface, getPbol_args args) throws org.apache.thrift.TException {
        getPbol_result result = new getPbol_result();
        try {
          result.success = iface.getPbol(args.npasp);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

    public static class AddPbol<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddPbol_args> {
      public AddPbol() {
        super("AddPbol");
      }

      public AddPbol_args getEmptyArgsInstance() {
        return new AddPbol_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AddPbol_result getResult(I iface, AddPbol_args args) throws org.apache.thrift.TException {
        AddPbol_result result = new AddPbol_result();
        try {
          result.success = iface.AddPbol(args.pbol);
          result.setSuccessIsSet(true);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

    public static class UpdatePbol<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdatePbol_args> {
      public UpdatePbol() {
        super("UpdatePbol");
      }

      public UpdatePbol_args getEmptyArgsInstance() {
        return new UpdatePbol_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdatePbol_result getResult(I iface, UpdatePbol_args args) throws org.apache.thrift.TException {
        UpdatePbol_result result = new UpdatePbol_result();
        try {
          iface.UpdatePbol(args.pbol);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

    public static class DeletePbol<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeletePbol_args> {
      public DeletePbol() {
        super("DeletePbol");
      }

      public DeletePbol_args getEmptyArgsInstance() {
        return new DeletePbol_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeletePbol_result getResult(I iface, DeletePbol_args args) throws org.apache.thrift.TException {
        DeletePbol_result result = new DeletePbol_result();
        try {
          iface.DeletePbol(args.id);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        }
        return result;
      }
    }

  }

  public static class getPbol_args implements org.apache.thrift.TBase<getPbol_args, getPbol_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPbol_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPbol_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPbol_argsTupleSchemeFactory());
    }

    public int npasp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPbol_args.class, metaDataMap);
    }

    public getPbol_args() {
    }

    public getPbol_args(
      int npasp)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPbol_args(getPbol_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.npasp = other.npasp;
    }

    public getPbol_args deepCopy() {
      return new getPbol_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public getPbol_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return EncodingUtils.testBit(__isset_bitfield, __NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NPASP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPbol_args)
        return this.equals((getPbol_args)that);
      return false;
    }

    public boolean equals(getPbol_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPbol_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPbol_args typedOther = (getPbol_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPbol_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPbol_argsStandardSchemeFactory implements SchemeFactory {
      public getPbol_argsStandardScheme getScheme() {
        return new getPbol_argsStandardScheme();
      }
    }

    private static class getPbol_argsStandardScheme extends StandardScheme<getPbol_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPbol_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPbol_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPbol_argsTupleSchemeFactory implements SchemeFactory {
      public getPbol_argsTupleScheme getScheme() {
        return new getPbol_argsTupleScheme();
      }
    }

    private static class getPbol_argsTupleScheme extends TupleScheme<getPbol_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPbol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPbol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
      }
    }

  }

  public static class getPbol_result implements org.apache.thrift.TBase<getPbol_result, getPbol_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPbol_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPbol_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPbol_resultTupleSchemeFactory());
    }

    public List<Pbol> success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Pbol.class))));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPbol_result.class, metaDataMap);
    }

    public getPbol_result() {
    }

    public getPbol_result(
      List<Pbol> success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.success = success;
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPbol_result(getPbol_result other) {
      if (other.isSetSuccess()) {
        List<Pbol> __this__success = new ArrayList<Pbol>();
        for (Pbol other_element : other.success) {
          __this__success.add(new Pbol(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public getPbol_result deepCopy() {
      return new getPbol_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Pbol> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Pbol elem) {
      if (this.success == null) {
        this.success = new ArrayList<Pbol>();
      }
      this.success.add(elem);
    }

    public List<Pbol> getSuccess() {
      return this.success;
    }

    public getPbol_result setSuccess(List<Pbol> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getPbol_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Pbol>)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPbol_result)
        return this.equals((getPbol_result)that);
      return false;
    }

    public boolean equals(getPbol_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPbol_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPbol_result typedOther = (getPbol_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPbol_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPbol_resultStandardSchemeFactory implements SchemeFactory {
      public getPbol_resultStandardScheme getScheme() {
        return new getPbol_resultStandardScheme();
      }
    }

    private static class getPbol_resultStandardScheme extends StandardScheme<getPbol_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPbol_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<Pbol>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    Pbol _elem2; // required
                    _elem2 = new Pbol();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPbol_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Pbol _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPbol_resultTupleSchemeFactory implements SchemeFactory {
      public getPbol_resultTupleScheme getScheme() {
        return new getPbol_resultTupleScheme();
      }
    }

    private static class getPbol_resultTupleScheme extends TupleScheme<getPbol_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPbol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Pbol _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPbol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Pbol>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              Pbol _elem7; // required
              _elem7 = new Pbol();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

  public static class AddPbol_args implements org.apache.thrift.TBase<AddPbol_args, AddPbol_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddPbol_args");

    private static final org.apache.thrift.protocol.TField PBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("pbol", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddPbol_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddPbol_argsTupleSchemeFactory());
    }

    public Pbol pbol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PBOL((short)1, "pbol");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PBOL
            return PBOL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PBOL, new org.apache.thrift.meta_data.FieldMetaData("pbol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Pbol.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddPbol_args.class, metaDataMap);
    }

    public AddPbol_args() {
    }

    public AddPbol_args(
      Pbol pbol)
    {
      this();
      this.pbol = pbol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddPbol_args(AddPbol_args other) {
      if (other.isSetPbol()) {
        this.pbol = new Pbol(other.pbol);
      }
    }

    public AddPbol_args deepCopy() {
      return new AddPbol_args(this);
    }

    @Override
    public void clear() {
      this.pbol = null;
    }

    public Pbol getPbol() {
      return this.pbol;
    }

    public AddPbol_args setPbol(Pbol pbol) {
      this.pbol = pbol;
      return this;
    }

    public void unsetPbol() {
      this.pbol = null;
    }

    /** Returns true if field pbol is set (has been assigned a value) and false otherwise */
    public boolean isSetPbol() {
      return this.pbol != null;
    }

    public void setPbolIsSet(boolean value) {
      if (!value) {
        this.pbol = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PBOL:
        if (value == null) {
          unsetPbol();
        } else {
          setPbol((Pbol)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PBOL:
        return getPbol();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PBOL:
        return isSetPbol();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddPbol_args)
        return this.equals((AddPbol_args)that);
      return false;
    }

    public boolean equals(AddPbol_args that) {
      if (that == null)
        return false;

      boolean this_present_pbol = true && this.isSetPbol();
      boolean that_present_pbol = true && that.isSetPbol();
      if (this_present_pbol || that_present_pbol) {
        if (!(this_present_pbol && that_present_pbol))
          return false;
        if (!this.pbol.equals(that.pbol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddPbol_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddPbol_args typedOther = (AddPbol_args)other;

      lastComparison = Boolean.valueOf(isSetPbol()).compareTo(typedOther.isSetPbol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPbol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pbol, typedOther.pbol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddPbol_args(");
      boolean first = true;

      sb.append("pbol:");
      if (this.pbol == null) {
        sb.append("null");
      } else {
        sb.append(this.pbol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pbol != null) {
        pbol.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddPbol_argsStandardSchemeFactory implements SchemeFactory {
      public AddPbol_argsStandardScheme getScheme() {
        return new AddPbol_argsStandardScheme();
      }
    }

    private static class AddPbol_argsStandardScheme extends StandardScheme<AddPbol_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddPbol_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PBOL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pbol = new Pbol();
                struct.pbol.read(iprot);
                struct.setPbolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddPbol_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pbol != null) {
          oprot.writeFieldBegin(PBOL_FIELD_DESC);
          struct.pbol.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddPbol_argsTupleSchemeFactory implements SchemeFactory {
      public AddPbol_argsTupleScheme getScheme() {
        return new AddPbol_argsTupleScheme();
      }
    }

    private static class AddPbol_argsTupleScheme extends TupleScheme<AddPbol_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddPbol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPbol()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPbol()) {
          struct.pbol.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddPbol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pbol = new Pbol();
          struct.pbol.read(iprot);
          struct.setPbolIsSet(true);
        }
      }
    }

  }

  public static class AddPbol_result implements org.apache.thrift.TBase<AddPbol_result, AddPbol_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddPbol_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddPbol_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddPbol_resultTupleSchemeFactory());
    }

    public int success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddPbol_result.class, metaDataMap);
    }

    public AddPbol_result() {
    }

    public AddPbol_result(
      int success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddPbol_result(AddPbol_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public AddPbol_result deepCopy() {
      return new AddPbol_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.kse = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public AddPbol_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public AddPbol_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddPbol_result)
        return this.equals((AddPbol_result)that);
      return false;
    }

    public boolean equals(AddPbol_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddPbol_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddPbol_result typedOther = (AddPbol_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddPbol_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddPbol_resultStandardSchemeFactory implements SchemeFactory {
      public AddPbol_resultStandardScheme getScheme() {
        return new AddPbol_resultStandardScheme();
      }
    }

    private static class AddPbol_resultStandardScheme extends StandardScheme<AddPbol_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddPbol_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddPbol_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddPbol_resultTupleSchemeFactory implements SchemeFactory {
      public AddPbol_resultTupleScheme getScheme() {
        return new AddPbol_resultTupleScheme();
      }
    }

    private static class AddPbol_resultTupleScheme extends TupleScheme<AddPbol_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddPbol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddPbol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

  public static class UpdatePbol_args implements org.apache.thrift.TBase<UpdatePbol_args, UpdatePbol_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdatePbol_args");

    private static final org.apache.thrift.protocol.TField PBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("pbol", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdatePbol_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdatePbol_argsTupleSchemeFactory());
    }

    public Pbol pbol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PBOL((short)1, "pbol");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PBOL
            return PBOL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PBOL, new org.apache.thrift.meta_data.FieldMetaData("pbol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Pbol.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdatePbol_args.class, metaDataMap);
    }

    public UpdatePbol_args() {
    }

    public UpdatePbol_args(
      Pbol pbol)
    {
      this();
      this.pbol = pbol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdatePbol_args(UpdatePbol_args other) {
      if (other.isSetPbol()) {
        this.pbol = new Pbol(other.pbol);
      }
    }

    public UpdatePbol_args deepCopy() {
      return new UpdatePbol_args(this);
    }

    @Override
    public void clear() {
      this.pbol = null;
    }

    public Pbol getPbol() {
      return this.pbol;
    }

    public UpdatePbol_args setPbol(Pbol pbol) {
      this.pbol = pbol;
      return this;
    }

    public void unsetPbol() {
      this.pbol = null;
    }

    /** Returns true if field pbol is set (has been assigned a value) and false otherwise */
    public boolean isSetPbol() {
      return this.pbol != null;
    }

    public void setPbolIsSet(boolean value) {
      if (!value) {
        this.pbol = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PBOL:
        if (value == null) {
          unsetPbol();
        } else {
          setPbol((Pbol)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PBOL:
        return getPbol();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PBOL:
        return isSetPbol();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdatePbol_args)
        return this.equals((UpdatePbol_args)that);
      return false;
    }

    public boolean equals(UpdatePbol_args that) {
      if (that == null)
        return false;

      boolean this_present_pbol = true && this.isSetPbol();
      boolean that_present_pbol = true && that.isSetPbol();
      if (this_present_pbol || that_present_pbol) {
        if (!(this_present_pbol && that_present_pbol))
          return false;
        if (!this.pbol.equals(that.pbol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdatePbol_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdatePbol_args typedOther = (UpdatePbol_args)other;

      lastComparison = Boolean.valueOf(isSetPbol()).compareTo(typedOther.isSetPbol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPbol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pbol, typedOther.pbol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdatePbol_args(");
      boolean first = true;

      sb.append("pbol:");
      if (this.pbol == null) {
        sb.append("null");
      } else {
        sb.append(this.pbol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pbol != null) {
        pbol.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdatePbol_argsStandardSchemeFactory implements SchemeFactory {
      public UpdatePbol_argsStandardScheme getScheme() {
        return new UpdatePbol_argsStandardScheme();
      }
    }

    private static class UpdatePbol_argsStandardScheme extends StandardScheme<UpdatePbol_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdatePbol_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PBOL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pbol = new Pbol();
                struct.pbol.read(iprot);
                struct.setPbolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdatePbol_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pbol != null) {
          oprot.writeFieldBegin(PBOL_FIELD_DESC);
          struct.pbol.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdatePbol_argsTupleSchemeFactory implements SchemeFactory {
      public UpdatePbol_argsTupleScheme getScheme() {
        return new UpdatePbol_argsTupleScheme();
      }
    }

    private static class UpdatePbol_argsTupleScheme extends TupleScheme<UpdatePbol_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdatePbol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPbol()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPbol()) {
          struct.pbol.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdatePbol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pbol = new Pbol();
          struct.pbol.read(iprot);
          struct.setPbolIsSet(true);
        }
      }
    }

  }

  public static class UpdatePbol_result implements org.apache.thrift.TBase<UpdatePbol_result, UpdatePbol_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdatePbol_result");

    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdatePbol_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdatePbol_resultTupleSchemeFactory());
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdatePbol_result.class, metaDataMap);
    }

    public UpdatePbol_result() {
    }

    public UpdatePbol_result(
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdatePbol_result(UpdatePbol_result other) {
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public UpdatePbol_result deepCopy() {
      return new UpdatePbol_result(this);
    }

    @Override
    public void clear() {
      this.kse = null;
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public UpdatePbol_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdatePbol_result)
        return this.equals((UpdatePbol_result)that);
      return false;
    }

    public boolean equals(UpdatePbol_result that) {
      if (that == null)
        return false;

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdatePbol_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdatePbol_result typedOther = (UpdatePbol_result)other;

      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdatePbol_result(");
      boolean first = true;

      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdatePbol_resultStandardSchemeFactory implements SchemeFactory {
      public UpdatePbol_resultStandardScheme getScheme() {
        return new UpdatePbol_resultStandardScheme();
      }
    }

    private static class UpdatePbol_resultStandardScheme extends StandardScheme<UpdatePbol_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdatePbol_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdatePbol_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdatePbol_resultTupleSchemeFactory implements SchemeFactory {
      public UpdatePbol_resultTupleScheme getScheme() {
        return new UpdatePbol_resultTupleScheme();
      }
    }

    private static class UpdatePbol_resultTupleScheme extends TupleScheme<UpdatePbol_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdatePbol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKse()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdatePbol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

  public static class DeletePbol_args implements org.apache.thrift.TBase<DeletePbol_args, DeletePbol_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeletePbol_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeletePbol_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeletePbol_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeletePbol_args.class, metaDataMap);
    }

    public DeletePbol_args() {
    }

    public DeletePbol_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeletePbol_args(DeletePbol_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public DeletePbol_args deepCopy() {
      return new DeletePbol_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public DeletePbol_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeletePbol_args)
        return this.equals((DeletePbol_args)that);
      return false;
    }

    public boolean equals(DeletePbol_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DeletePbol_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DeletePbol_args typedOther = (DeletePbol_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeletePbol_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeletePbol_argsStandardSchemeFactory implements SchemeFactory {
      public DeletePbol_argsStandardScheme getScheme() {
        return new DeletePbol_argsStandardScheme();
      }
    }

    private static class DeletePbol_argsStandardScheme extends StandardScheme<DeletePbol_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeletePbol_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeletePbol_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeletePbol_argsTupleSchemeFactory implements SchemeFactory {
      public DeletePbol_argsTupleScheme getScheme() {
        return new DeletePbol_argsTupleScheme();
      }
    }

    private static class DeletePbol_argsTupleScheme extends TupleScheme<DeletePbol_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeletePbol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeletePbol_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class DeletePbol_result implements org.apache.thrift.TBase<DeletePbol_result, DeletePbol_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeletePbol_result");

    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeletePbol_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeletePbol_resultTupleSchemeFactory());
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KSE((short)1, "kse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KSE
            return KSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeletePbol_result.class, metaDataMap);
    }

    public DeletePbol_result() {
    }

    public DeletePbol_result(
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse)
    {
      this();
      this.kse = kse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeletePbol_result(DeletePbol_result other) {
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
    }

    public DeletePbol_result deepCopy() {
      return new DeletePbol_result(this);
    }

    @Override
    public void clear() {
      this.kse = null;
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public DeletePbol_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KSE:
        return getKse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KSE:
        return isSetKse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeletePbol_result)
        return this.equals((DeletePbol_result)that);
      return false;
    }

    public boolean equals(DeletePbol_result that) {
      if (that == null)
        return false;

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DeletePbol_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DeletePbol_result typedOther = (DeletePbol_result)other;

      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeletePbol_result(");
      boolean first = true;

      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeletePbol_resultStandardSchemeFactory implements SchemeFactory {
      public DeletePbol_resultStandardScheme getScheme() {
        return new DeletePbol_resultStandardScheme();
      }
    }

    private static class DeletePbol_resultStandardScheme extends StandardScheme<DeletePbol_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeletePbol_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeletePbol_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeletePbol_resultTupleSchemeFactory implements SchemeFactory {
      public DeletePbol_resultTupleScheme getScheme() {
        return new DeletePbol_resultTupleScheme();
      }
    }

    private static class DeletePbol_resultTupleScheme extends TupleScheme<DeletePbol_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeletePbol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKse()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeletePbol_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
      }
    }

  }

}
