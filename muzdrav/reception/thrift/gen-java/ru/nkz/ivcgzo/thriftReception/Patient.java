/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftReception;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Patient implements org.apache.thrift.TBase<Patient, Patient._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Patient");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SURNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("surname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MIDDLENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("middlename", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ID_PVIZIT_FIELD_DESC = new org.apache.thrift.protocol.TField("idPvizit", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField BIRTHDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("birthdate", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField OMS_SER_FIELD_DESC = new org.apache.thrift.protocol.TField("omsSer", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OMS_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("omsNum", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PatientStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PatientTupleSchemeFactory());
  }

  public int id; // required
  public String surname; // required
  public String name; // required
  public String middlename; // required
  public int idPvizit; // required
  public long birthdate; // optional
  public String omsSer; // optional
  public String omsNum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    SURNAME((short)2, "surname"),
    NAME((short)3, "name"),
    MIDDLENAME((short)4, "middlename"),
    ID_PVIZIT((short)5, "idPvizit"),
    BIRTHDATE((short)6, "birthdate"),
    OMS_SER((short)7, "omsSer"),
    OMS_NUM((short)8, "omsNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // SURNAME
          return SURNAME;
        case 3: // NAME
          return NAME;
        case 4: // MIDDLENAME
          return MIDDLENAME;
        case 5: // ID_PVIZIT
          return ID_PVIZIT;
        case 6: // BIRTHDATE
          return BIRTHDATE;
        case 7: // OMS_SER
          return OMS_SER;
        case 8: // OMS_NUM
          return OMS_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __IDPVIZIT_ISSET_ID = 1;
  private static final int __BIRTHDATE_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  private _Fields optionals[] = {_Fields.BIRTHDATE,_Fields.OMS_SER,_Fields.OMS_NUM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SURNAME, new org.apache.thrift.meta_data.FieldMetaData("surname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIDDLENAME, new org.apache.thrift.meta_data.FieldMetaData("middlename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_PVIZIT, new org.apache.thrift.meta_data.FieldMetaData("idPvizit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIRTHDATE, new org.apache.thrift.meta_data.FieldMetaData("birthdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OMS_SER, new org.apache.thrift.meta_data.FieldMetaData("omsSer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OMS_NUM, new org.apache.thrift.meta_data.FieldMetaData("omsNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Patient.class, metaDataMap);
  }

  public Patient() {
  }

  public Patient(
    int id,
    String surname,
    String name,
    String middlename,
    int idPvizit)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.surname = surname;
    this.name = name;
    this.middlename = middlename;
    this.idPvizit = idPvizit;
    setIdPvizitIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Patient(Patient other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetSurname()) {
      this.surname = other.surname;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMiddlename()) {
      this.middlename = other.middlename;
    }
    this.idPvizit = other.idPvizit;
    this.birthdate = other.birthdate;
    if (other.isSetOmsSer()) {
      this.omsSer = other.omsSer;
    }
    if (other.isSetOmsNum()) {
      this.omsNum = other.omsNum;
    }
  }

  public Patient deepCopy() {
    return new Patient(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.surname = null;
    this.name = null;
    this.middlename = null;
    setIdPvizitIsSet(false);
    this.idPvizit = 0;
    setBirthdateIsSet(false);
    this.birthdate = 0;
    this.omsSer = null;
    this.omsNum = null;
  }

  public int getId() {
    return this.id;
  }

  public Patient setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getSurname() {
    return this.surname;
  }

  public Patient setSurname(String surname) {
    this.surname = surname;
    return this;
  }

  public void unsetSurname() {
    this.surname = null;
  }

  /** Returns true if field surname is set (has been assigned a value) and false otherwise */
  public boolean isSetSurname() {
    return this.surname != null;
  }

  public void setSurnameIsSet(boolean value) {
    if (!value) {
      this.surname = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public Patient setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getMiddlename() {
    return this.middlename;
  }

  public Patient setMiddlename(String middlename) {
    this.middlename = middlename;
    return this;
  }

  public void unsetMiddlename() {
    this.middlename = null;
  }

  /** Returns true if field middlename is set (has been assigned a value) and false otherwise */
  public boolean isSetMiddlename() {
    return this.middlename != null;
  }

  public void setMiddlenameIsSet(boolean value) {
    if (!value) {
      this.middlename = null;
    }
  }

  public int getIdPvizit() {
    return this.idPvizit;
  }

  public Patient setIdPvizit(int idPvizit) {
    this.idPvizit = idPvizit;
    setIdPvizitIsSet(true);
    return this;
  }

  public void unsetIdPvizit() {
    __isset_bit_vector.clear(__IDPVIZIT_ISSET_ID);
  }

  /** Returns true if field idPvizit is set (has been assigned a value) and false otherwise */
  public boolean isSetIdPvizit() {
    return __isset_bit_vector.get(__IDPVIZIT_ISSET_ID);
  }

  public void setIdPvizitIsSet(boolean value) {
    __isset_bit_vector.set(__IDPVIZIT_ISSET_ID, value);
  }

  public long getBirthdate() {
    return this.birthdate;
  }

  public Patient setBirthdate(long birthdate) {
    this.birthdate = birthdate;
    setBirthdateIsSet(true);
    return this;
  }

  public void unsetBirthdate() {
    __isset_bit_vector.clear(__BIRTHDATE_ISSET_ID);
  }

  /** Returns true if field birthdate is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthdate() {
    return __isset_bit_vector.get(__BIRTHDATE_ISSET_ID);
  }

  public void setBirthdateIsSet(boolean value) {
    __isset_bit_vector.set(__BIRTHDATE_ISSET_ID, value);
  }

  public String getOmsSer() {
    return this.omsSer;
  }

  public Patient setOmsSer(String omsSer) {
    this.omsSer = omsSer;
    return this;
  }

  public void unsetOmsSer() {
    this.omsSer = null;
  }

  /** Returns true if field omsSer is set (has been assigned a value) and false otherwise */
  public boolean isSetOmsSer() {
    return this.omsSer != null;
  }

  public void setOmsSerIsSet(boolean value) {
    if (!value) {
      this.omsSer = null;
    }
  }

  public String getOmsNum() {
    return this.omsNum;
  }

  public Patient setOmsNum(String omsNum) {
    this.omsNum = omsNum;
    return this;
  }

  public void unsetOmsNum() {
    this.omsNum = null;
  }

  /** Returns true if field omsNum is set (has been assigned a value) and false otherwise */
  public boolean isSetOmsNum() {
    return this.omsNum != null;
  }

  public void setOmsNumIsSet(boolean value) {
    if (!value) {
      this.omsNum = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case SURNAME:
      if (value == null) {
        unsetSurname();
      } else {
        setSurname((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MIDDLENAME:
      if (value == null) {
        unsetMiddlename();
      } else {
        setMiddlename((String)value);
      }
      break;

    case ID_PVIZIT:
      if (value == null) {
        unsetIdPvizit();
      } else {
        setIdPvizit((Integer)value);
      }
      break;

    case BIRTHDATE:
      if (value == null) {
        unsetBirthdate();
      } else {
        setBirthdate((Long)value);
      }
      break;

    case OMS_SER:
      if (value == null) {
        unsetOmsSer();
      } else {
        setOmsSer((String)value);
      }
      break;

    case OMS_NUM:
      if (value == null) {
        unsetOmsNum();
      } else {
        setOmsNum((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case SURNAME:
      return getSurname();

    case NAME:
      return getName();

    case MIDDLENAME:
      return getMiddlename();

    case ID_PVIZIT:
      return Integer.valueOf(getIdPvizit());

    case BIRTHDATE:
      return Long.valueOf(getBirthdate());

    case OMS_SER:
      return getOmsSer();

    case OMS_NUM:
      return getOmsNum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SURNAME:
      return isSetSurname();
    case NAME:
      return isSetName();
    case MIDDLENAME:
      return isSetMiddlename();
    case ID_PVIZIT:
      return isSetIdPvizit();
    case BIRTHDATE:
      return isSetBirthdate();
    case OMS_SER:
      return isSetOmsSer();
    case OMS_NUM:
      return isSetOmsNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Patient)
      return this.equals((Patient)that);
    return false;
  }

  public boolean equals(Patient that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_surname = true && this.isSetSurname();
    boolean that_present_surname = true && that.isSetSurname();
    if (this_present_surname || that_present_surname) {
      if (!(this_present_surname && that_present_surname))
        return false;
      if (!this.surname.equals(that.surname))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_middlename = true && this.isSetMiddlename();
    boolean that_present_middlename = true && that.isSetMiddlename();
    if (this_present_middlename || that_present_middlename) {
      if (!(this_present_middlename && that_present_middlename))
        return false;
      if (!this.middlename.equals(that.middlename))
        return false;
    }

    boolean this_present_idPvizit = true;
    boolean that_present_idPvizit = true;
    if (this_present_idPvizit || that_present_idPvizit) {
      if (!(this_present_idPvizit && that_present_idPvizit))
        return false;
      if (this.idPvizit != that.idPvizit)
        return false;
    }

    boolean this_present_birthdate = true && this.isSetBirthdate();
    boolean that_present_birthdate = true && that.isSetBirthdate();
    if (this_present_birthdate || that_present_birthdate) {
      if (!(this_present_birthdate && that_present_birthdate))
        return false;
      if (this.birthdate != that.birthdate)
        return false;
    }

    boolean this_present_omsSer = true && this.isSetOmsSer();
    boolean that_present_omsSer = true && that.isSetOmsSer();
    if (this_present_omsSer || that_present_omsSer) {
      if (!(this_present_omsSer && that_present_omsSer))
        return false;
      if (!this.omsSer.equals(that.omsSer))
        return false;
    }

    boolean this_present_omsNum = true && this.isSetOmsNum();
    boolean that_present_omsNum = true && that.isSetOmsNum();
    if (this_present_omsNum || that_present_omsNum) {
      if (!(this_present_omsNum && that_present_omsNum))
        return false;
      if (!this.omsNum.equals(that.omsNum))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Patient other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Patient typedOther = (Patient)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurname()).compareTo(typedOther.isSetSurname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surname, typedOther.surname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMiddlename()).compareTo(typedOther.isSetMiddlename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMiddlename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.middlename, typedOther.middlename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdPvizit()).compareTo(typedOther.isSetIdPvizit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdPvizit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idPvizit, typedOther.idPvizit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthdate()).compareTo(typedOther.isSetBirthdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthdate, typedOther.birthdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOmsSer()).compareTo(typedOther.isSetOmsSer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOmsSer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.omsSer, typedOther.omsSer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOmsNum()).compareTo(typedOther.isSetOmsNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOmsNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.omsNum, typedOther.omsNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Patient(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("surname:");
    if (this.surname == null) {
      sb.append("null");
    } else {
      sb.append(this.surname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("middlename:");
    if (this.middlename == null) {
      sb.append("null");
    } else {
      sb.append(this.middlename);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idPvizit:");
    sb.append(this.idPvizit);
    first = false;
    if (isSetBirthdate()) {
      if (!first) sb.append(", ");
      sb.append("birthdate:");
      sb.append(this.birthdate);
      first = false;
    }
    if (isSetOmsSer()) {
      if (!first) sb.append(", ");
      sb.append("omsSer:");
      if (this.omsSer == null) {
        sb.append("null");
      } else {
        sb.append(this.omsSer);
      }
      first = false;
    }
    if (isSetOmsNum()) {
      if (!first) sb.append(", ");
      sb.append("omsNum:");
      if (this.omsNum == null) {
        sb.append("null");
      } else {
        sb.append(this.omsNum);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PatientStandardSchemeFactory implements SchemeFactory {
    public PatientStandardScheme getScheme() {
      return new PatientStandardScheme();
    }
  }

  private static class PatientStandardScheme extends StandardScheme<Patient> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Patient struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SURNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.surname = iprot.readString();
              struct.setSurnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIDDLENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.middlename = iprot.readString();
              struct.setMiddlenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ID_PVIZIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idPvizit = iprot.readI32();
              struct.setIdPvizitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BIRTHDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.birthdate = iprot.readI64();
              struct.setBirthdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OMS_SER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.omsSer = iprot.readString();
              struct.setOmsSerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OMS_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.omsNum = iprot.readString();
              struct.setOmsNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Patient struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.surname != null) {
        oprot.writeFieldBegin(SURNAME_FIELD_DESC);
        oprot.writeString(struct.surname);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.middlename != null) {
        oprot.writeFieldBegin(MIDDLENAME_FIELD_DESC);
        oprot.writeString(struct.middlename);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_PVIZIT_FIELD_DESC);
      oprot.writeI32(struct.idPvizit);
      oprot.writeFieldEnd();
      if (struct.isSetBirthdate()) {
        oprot.writeFieldBegin(BIRTHDATE_FIELD_DESC);
        oprot.writeI64(struct.birthdate);
        oprot.writeFieldEnd();
      }
      if (struct.omsSer != null) {
        if (struct.isSetOmsSer()) {
          oprot.writeFieldBegin(OMS_SER_FIELD_DESC);
          oprot.writeString(struct.omsSer);
          oprot.writeFieldEnd();
        }
      }
      if (struct.omsNum != null) {
        if (struct.isSetOmsNum()) {
          oprot.writeFieldBegin(OMS_NUM_FIELD_DESC);
          oprot.writeString(struct.omsNum);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PatientTupleSchemeFactory implements SchemeFactory {
    public PatientTupleScheme getScheme() {
      return new PatientTupleScheme();
    }
  }

  private static class PatientTupleScheme extends TupleScheme<Patient> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Patient struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetSurname()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetMiddlename()) {
        optionals.set(3);
      }
      if (struct.isSetIdPvizit()) {
        optionals.set(4);
      }
      if (struct.isSetBirthdate()) {
        optionals.set(5);
      }
      if (struct.isSetOmsSer()) {
        optionals.set(6);
      }
      if (struct.isSetOmsNum()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetSurname()) {
        oprot.writeString(struct.surname);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetMiddlename()) {
        oprot.writeString(struct.middlename);
      }
      if (struct.isSetIdPvizit()) {
        oprot.writeI32(struct.idPvizit);
      }
      if (struct.isSetBirthdate()) {
        oprot.writeI64(struct.birthdate);
      }
      if (struct.isSetOmsSer()) {
        oprot.writeString(struct.omsSer);
      }
      if (struct.isSetOmsNum()) {
        oprot.writeString(struct.omsNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Patient struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.surname = iprot.readString();
        struct.setSurnameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.middlename = iprot.readString();
        struct.setMiddlenameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.idPvizit = iprot.readI32();
        struct.setIdPvizitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.birthdate = iprot.readI64();
        struct.setBirthdateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.omsSer = iprot.readString();
        struct.setOmsSerIsSet(true);
      }
      if (incoming.get(7)) {
        struct.omsNum = iprot.readString();
        struct.setOmsNumIsSet(true);
      }
    }
  }

}

