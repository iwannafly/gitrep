/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftReception;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Talon implements org.apache.thrift.TBase<Talon, Talon._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Talon");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NTALON_FIELD_DESC = new org.apache.thrift.protocol.TField("ntalon", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VIDP_FIELD_DESC = new org.apache.thrift.protocol.TField("vidp", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TIMEP_FIELD_DESC = new org.apache.thrift.protocol.TField("timep", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DATAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datap", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DATAZ_FIELD_DESC = new org.apache.thrift.protocol.TField("dataz", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField PRV_FIELD_DESC = new org.apache.thrift.protocol.TField("prv", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField DOCTOR_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("doctorSpec", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DOCTOR_FIO_FIELD_DESC = new org.apache.thrift.protocol.TField("doctorFio", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TalonStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TalonTupleSchemeFactory());
  }

  public int id; // required
  public int ntalon; // required
  public int vidp; // required
  public long timep; // optional
  public long datap; // optional
  public int npasp; // optional
  public long dataz; // optional
  public int prv; // optional
  public String doctorSpec; // optional
  public String doctorFio; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NTALON((short)2, "ntalon"),
    VIDP((short)3, "vidp"),
    TIMEP((short)4, "timep"),
    DATAP((short)5, "datap"),
    NPASP((short)6, "npasp"),
    DATAZ((short)7, "dataz"),
    PRV((short)8, "prv"),
    DOCTOR_SPEC((short)9, "doctorSpec"),
    DOCTOR_FIO((short)10, "doctorFio");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NTALON
          return NTALON;
        case 3: // VIDP
          return VIDP;
        case 4: // TIMEP
          return TIMEP;
        case 5: // DATAP
          return DATAP;
        case 6: // NPASP
          return NPASP;
        case 7: // DATAZ
          return DATAZ;
        case 8: // PRV
          return PRV;
        case 9: // DOCTOR_SPEC
          return DOCTOR_SPEC;
        case 10: // DOCTOR_FIO
          return DOCTOR_FIO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __NTALON_ISSET_ID = 1;
  private static final int __VIDP_ISSET_ID = 2;
  private static final int __TIMEP_ISSET_ID = 3;
  private static final int __DATAP_ISSET_ID = 4;
  private static final int __NPASP_ISSET_ID = 5;
  private static final int __DATAZ_ISSET_ID = 6;
  private static final int __PRV_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);
  private _Fields optionals[] = {_Fields.TIMEP,_Fields.DATAP,_Fields.NPASP,_Fields.DATAZ,_Fields.PRV,_Fields.DOCTOR_SPEC,_Fields.DOCTOR_FIO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NTALON, new org.apache.thrift.meta_data.FieldMetaData("ntalon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIDP, new org.apache.thrift.meta_data.FieldMetaData("vidp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMEP, new org.apache.thrift.meta_data.FieldMetaData("timep", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATAP, new org.apache.thrift.meta_data.FieldMetaData("datap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATAZ, new org.apache.thrift.meta_data.FieldMetaData("dataz", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRV, new org.apache.thrift.meta_data.FieldMetaData("prv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOCTOR_SPEC, new org.apache.thrift.meta_data.FieldMetaData("doctorSpec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCTOR_FIO, new org.apache.thrift.meta_data.FieldMetaData("doctorFio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Talon.class, metaDataMap);
  }

  public Talon() {
  }

  public Talon(
    int id,
    int ntalon,
    int vidp)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.ntalon = ntalon;
    setNtalonIsSet(true);
    this.vidp = vidp;
    setVidpIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Talon(Talon other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    this.ntalon = other.ntalon;
    this.vidp = other.vidp;
    this.timep = other.timep;
    this.datap = other.datap;
    this.npasp = other.npasp;
    this.dataz = other.dataz;
    this.prv = other.prv;
    if (other.isSetDoctorSpec()) {
      this.doctorSpec = other.doctorSpec;
    }
    if (other.isSetDoctorFio()) {
      this.doctorFio = other.doctorFio;
    }
  }

  public Talon deepCopy() {
    return new Talon(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setNtalonIsSet(false);
    this.ntalon = 0;
    setVidpIsSet(false);
    this.vidp = 0;
    setTimepIsSet(false);
    this.timep = 0;
    setDatapIsSet(false);
    this.datap = 0;
    setNpaspIsSet(false);
    this.npasp = 0;
    setDatazIsSet(false);
    this.dataz = 0;
    setPrvIsSet(false);
    this.prv = 0;
    this.doctorSpec = null;
    this.doctorFio = null;
  }

  public int getId() {
    return this.id;
  }

  public Talon setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public int getNtalon() {
    return this.ntalon;
  }

  public Talon setNtalon(int ntalon) {
    this.ntalon = ntalon;
    setNtalonIsSet(true);
    return this;
  }

  public void unsetNtalon() {
    __isset_bit_vector.clear(__NTALON_ISSET_ID);
  }

  /** Returns true if field ntalon is set (has been assigned a value) and false otherwise */
  public boolean isSetNtalon() {
    return __isset_bit_vector.get(__NTALON_ISSET_ID);
  }

  public void setNtalonIsSet(boolean value) {
    __isset_bit_vector.set(__NTALON_ISSET_ID, value);
  }

  public int getVidp() {
    return this.vidp;
  }

  public Talon setVidp(int vidp) {
    this.vidp = vidp;
    setVidpIsSet(true);
    return this;
  }

  public void unsetVidp() {
    __isset_bit_vector.clear(__VIDP_ISSET_ID);
  }

  /** Returns true if field vidp is set (has been assigned a value) and false otherwise */
  public boolean isSetVidp() {
    return __isset_bit_vector.get(__VIDP_ISSET_ID);
  }

  public void setVidpIsSet(boolean value) {
    __isset_bit_vector.set(__VIDP_ISSET_ID, value);
  }

  public long getTimep() {
    return this.timep;
  }

  public Talon setTimep(long timep) {
    this.timep = timep;
    setTimepIsSet(true);
    return this;
  }

  public void unsetTimep() {
    __isset_bit_vector.clear(__TIMEP_ISSET_ID);
  }

  /** Returns true if field timep is set (has been assigned a value) and false otherwise */
  public boolean isSetTimep() {
    return __isset_bit_vector.get(__TIMEP_ISSET_ID);
  }

  public void setTimepIsSet(boolean value) {
    __isset_bit_vector.set(__TIMEP_ISSET_ID, value);
  }

  public long getDatap() {
    return this.datap;
  }

  public Talon setDatap(long datap) {
    this.datap = datap;
    setDatapIsSet(true);
    return this;
  }

  public void unsetDatap() {
    __isset_bit_vector.clear(__DATAP_ISSET_ID);
  }

  /** Returns true if field datap is set (has been assigned a value) and false otherwise */
  public boolean isSetDatap() {
    return __isset_bit_vector.get(__DATAP_ISSET_ID);
  }

  public void setDatapIsSet(boolean value) {
    __isset_bit_vector.set(__DATAP_ISSET_ID, value);
  }

  public int getNpasp() {
    return this.npasp;
  }

  public Talon setNpasp(int npasp) {
    this.npasp = npasp;
    setNpaspIsSet(true);
    return this;
  }

  public void unsetNpasp() {
    __isset_bit_vector.clear(__NPASP_ISSET_ID);
  }

  /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
  public boolean isSetNpasp() {
    return __isset_bit_vector.get(__NPASP_ISSET_ID);
  }

  public void setNpaspIsSet(boolean value) {
    __isset_bit_vector.set(__NPASP_ISSET_ID, value);
  }

  public long getDataz() {
    return this.dataz;
  }

  public Talon setDataz(long dataz) {
    this.dataz = dataz;
    setDatazIsSet(true);
    return this;
  }

  public void unsetDataz() {
    __isset_bit_vector.clear(__DATAZ_ISSET_ID);
  }

  /** Returns true if field dataz is set (has been assigned a value) and false otherwise */
  public boolean isSetDataz() {
    return __isset_bit_vector.get(__DATAZ_ISSET_ID);
  }

  public void setDatazIsSet(boolean value) {
    __isset_bit_vector.set(__DATAZ_ISSET_ID, value);
  }

  public int getPrv() {
    return this.prv;
  }

  public Talon setPrv(int prv) {
    this.prv = prv;
    setPrvIsSet(true);
    return this;
  }

  public void unsetPrv() {
    __isset_bit_vector.clear(__PRV_ISSET_ID);
  }

  /** Returns true if field prv is set (has been assigned a value) and false otherwise */
  public boolean isSetPrv() {
    return __isset_bit_vector.get(__PRV_ISSET_ID);
  }

  public void setPrvIsSet(boolean value) {
    __isset_bit_vector.set(__PRV_ISSET_ID, value);
  }

  public String getDoctorSpec() {
    return this.doctorSpec;
  }

  public Talon setDoctorSpec(String doctorSpec) {
    this.doctorSpec = doctorSpec;
    return this;
  }

  public void unsetDoctorSpec() {
    this.doctorSpec = null;
  }

  /** Returns true if field doctorSpec is set (has been assigned a value) and false otherwise */
  public boolean isSetDoctorSpec() {
    return this.doctorSpec != null;
  }

  public void setDoctorSpecIsSet(boolean value) {
    if (!value) {
      this.doctorSpec = null;
    }
  }

  public String getDoctorFio() {
    return this.doctorFio;
  }

  public Talon setDoctorFio(String doctorFio) {
    this.doctorFio = doctorFio;
    return this;
  }

  public void unsetDoctorFio() {
    this.doctorFio = null;
  }

  /** Returns true if field doctorFio is set (has been assigned a value) and false otherwise */
  public boolean isSetDoctorFio() {
    return this.doctorFio != null;
  }

  public void setDoctorFioIsSet(boolean value) {
    if (!value) {
      this.doctorFio = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NTALON:
      if (value == null) {
        unsetNtalon();
      } else {
        setNtalon((Integer)value);
      }
      break;

    case VIDP:
      if (value == null) {
        unsetVidp();
      } else {
        setVidp((Integer)value);
      }
      break;

    case TIMEP:
      if (value == null) {
        unsetTimep();
      } else {
        setTimep((Long)value);
      }
      break;

    case DATAP:
      if (value == null) {
        unsetDatap();
      } else {
        setDatap((Long)value);
      }
      break;

    case NPASP:
      if (value == null) {
        unsetNpasp();
      } else {
        setNpasp((Integer)value);
      }
      break;

    case DATAZ:
      if (value == null) {
        unsetDataz();
      } else {
        setDataz((Long)value);
      }
      break;

    case PRV:
      if (value == null) {
        unsetPrv();
      } else {
        setPrv((Integer)value);
      }
      break;

    case DOCTOR_SPEC:
      if (value == null) {
        unsetDoctorSpec();
      } else {
        setDoctorSpec((String)value);
      }
      break;

    case DOCTOR_FIO:
      if (value == null) {
        unsetDoctorFio();
      } else {
        setDoctorFio((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NTALON:
      return Integer.valueOf(getNtalon());

    case VIDP:
      return Integer.valueOf(getVidp());

    case TIMEP:
      return Long.valueOf(getTimep());

    case DATAP:
      return Long.valueOf(getDatap());

    case NPASP:
      return Integer.valueOf(getNpasp());

    case DATAZ:
      return Long.valueOf(getDataz());

    case PRV:
      return Integer.valueOf(getPrv());

    case DOCTOR_SPEC:
      return getDoctorSpec();

    case DOCTOR_FIO:
      return getDoctorFio();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NTALON:
      return isSetNtalon();
    case VIDP:
      return isSetVidp();
    case TIMEP:
      return isSetTimep();
    case DATAP:
      return isSetDatap();
    case NPASP:
      return isSetNpasp();
    case DATAZ:
      return isSetDataz();
    case PRV:
      return isSetPrv();
    case DOCTOR_SPEC:
      return isSetDoctorSpec();
    case DOCTOR_FIO:
      return isSetDoctorFio();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Talon)
      return this.equals((Talon)that);
    return false;
  }

  public boolean equals(Talon that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_ntalon = true;
    boolean that_present_ntalon = true;
    if (this_present_ntalon || that_present_ntalon) {
      if (!(this_present_ntalon && that_present_ntalon))
        return false;
      if (this.ntalon != that.ntalon)
        return false;
    }

    boolean this_present_vidp = true;
    boolean that_present_vidp = true;
    if (this_present_vidp || that_present_vidp) {
      if (!(this_present_vidp && that_present_vidp))
        return false;
      if (this.vidp != that.vidp)
        return false;
    }

    boolean this_present_timep = true && this.isSetTimep();
    boolean that_present_timep = true && that.isSetTimep();
    if (this_present_timep || that_present_timep) {
      if (!(this_present_timep && that_present_timep))
        return false;
      if (this.timep != that.timep)
        return false;
    }

    boolean this_present_datap = true && this.isSetDatap();
    boolean that_present_datap = true && that.isSetDatap();
    if (this_present_datap || that_present_datap) {
      if (!(this_present_datap && that_present_datap))
        return false;
      if (this.datap != that.datap)
        return false;
    }

    boolean this_present_npasp = true && this.isSetNpasp();
    boolean that_present_npasp = true && that.isSetNpasp();
    if (this_present_npasp || that_present_npasp) {
      if (!(this_present_npasp && that_present_npasp))
        return false;
      if (this.npasp != that.npasp)
        return false;
    }

    boolean this_present_dataz = true && this.isSetDataz();
    boolean that_present_dataz = true && that.isSetDataz();
    if (this_present_dataz || that_present_dataz) {
      if (!(this_present_dataz && that_present_dataz))
        return false;
      if (this.dataz != that.dataz)
        return false;
    }

    boolean this_present_prv = true && this.isSetPrv();
    boolean that_present_prv = true && that.isSetPrv();
    if (this_present_prv || that_present_prv) {
      if (!(this_present_prv && that_present_prv))
        return false;
      if (this.prv != that.prv)
        return false;
    }

    boolean this_present_doctorSpec = true && this.isSetDoctorSpec();
    boolean that_present_doctorSpec = true && that.isSetDoctorSpec();
    if (this_present_doctorSpec || that_present_doctorSpec) {
      if (!(this_present_doctorSpec && that_present_doctorSpec))
        return false;
      if (!this.doctorSpec.equals(that.doctorSpec))
        return false;
    }

    boolean this_present_doctorFio = true && this.isSetDoctorFio();
    boolean that_present_doctorFio = true && that.isSetDoctorFio();
    if (this_present_doctorFio || that_present_doctorFio) {
      if (!(this_present_doctorFio && that_present_doctorFio))
        return false;
      if (!this.doctorFio.equals(that.doctorFio))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Talon other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Talon typedOther = (Talon)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNtalon()).compareTo(typedOther.isSetNtalon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNtalon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ntalon, typedOther.ntalon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVidp()).compareTo(typedOther.isSetVidp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVidp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vidp, typedOther.vidp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimep()).compareTo(typedOther.isSetTimep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timep, typedOther.timep);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatap()).compareTo(typedOther.isSetDatap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datap, typedOther.datap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNpasp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataz()).compareTo(typedOther.isSetDataz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataz, typedOther.dataz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrv()).compareTo(typedOther.isSetPrv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prv, typedOther.prv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoctorSpec()).compareTo(typedOther.isSetDoctorSpec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoctorSpec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctorSpec, typedOther.doctorSpec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoctorFio()).compareTo(typedOther.isSetDoctorFio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoctorFio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctorFio, typedOther.doctorFio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Talon(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ntalon:");
    sb.append(this.ntalon);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vidp:");
    sb.append(this.vidp);
    first = false;
    if (isSetTimep()) {
      if (!first) sb.append(", ");
      sb.append("timep:");
      sb.append(this.timep);
      first = false;
    }
    if (isSetDatap()) {
      if (!first) sb.append(", ");
      sb.append("datap:");
      sb.append(this.datap);
      first = false;
    }
    if (isSetNpasp()) {
      if (!first) sb.append(", ");
      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
    }
    if (isSetDataz()) {
      if (!first) sb.append(", ");
      sb.append("dataz:");
      sb.append(this.dataz);
      first = false;
    }
    if (isSetPrv()) {
      if (!first) sb.append(", ");
      sb.append("prv:");
      sb.append(this.prv);
      first = false;
    }
    if (isSetDoctorSpec()) {
      if (!first) sb.append(", ");
      sb.append("doctorSpec:");
      if (this.doctorSpec == null) {
        sb.append("null");
      } else {
        sb.append(this.doctorSpec);
      }
      first = false;
    }
    if (isSetDoctorFio()) {
      if (!first) sb.append(", ");
      sb.append("doctorFio:");
      if (this.doctorFio == null) {
        sb.append("null");
      } else {
        sb.append(this.doctorFio);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TalonStandardSchemeFactory implements SchemeFactory {
    public TalonStandardScheme getScheme() {
      return new TalonStandardScheme();
    }
  }

  private static class TalonStandardScheme extends StandardScheme<Talon> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Talon struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NTALON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ntalon = iprot.readI32();
              struct.setNtalonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VIDP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vidp = iprot.readI32();
              struct.setVidpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIMEP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timep = iprot.readI64();
              struct.setTimepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATAP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datap = iprot.readI64();
              struct.setDatapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NPASP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.npasp = iprot.readI32();
              struct.setNpaspIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATAZ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataz = iprot.readI64();
              struct.setDatazIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.prv = iprot.readI32();
              struct.setPrvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DOCTOR_SPEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.doctorSpec = iprot.readString();
              struct.setDoctorSpecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DOCTOR_FIO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.doctorFio = iprot.readString();
              struct.setDoctorFioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Talon struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NTALON_FIELD_DESC);
      oprot.writeI32(struct.ntalon);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIDP_FIELD_DESC);
      oprot.writeI32(struct.vidp);
      oprot.writeFieldEnd();
      if (struct.isSetTimep()) {
        oprot.writeFieldBegin(TIMEP_FIELD_DESC);
        oprot.writeI64(struct.timep);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDatap()) {
        oprot.writeFieldBegin(DATAP_FIELD_DESC);
        oprot.writeI64(struct.datap);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNpasp()) {
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDataz()) {
        oprot.writeFieldBegin(DATAZ_FIELD_DESC);
        oprot.writeI64(struct.dataz);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrv()) {
        oprot.writeFieldBegin(PRV_FIELD_DESC);
        oprot.writeI32(struct.prv);
        oprot.writeFieldEnd();
      }
      if (struct.doctorSpec != null) {
        if (struct.isSetDoctorSpec()) {
          oprot.writeFieldBegin(DOCTOR_SPEC_FIELD_DESC);
          oprot.writeString(struct.doctorSpec);
          oprot.writeFieldEnd();
        }
      }
      if (struct.doctorFio != null) {
        if (struct.isSetDoctorFio()) {
          oprot.writeFieldBegin(DOCTOR_FIO_FIELD_DESC);
          oprot.writeString(struct.doctorFio);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TalonTupleSchemeFactory implements SchemeFactory {
    public TalonTupleScheme getScheme() {
      return new TalonTupleScheme();
    }
  }

  private static class TalonTupleScheme extends TupleScheme<Talon> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Talon struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetNtalon()) {
        optionals.set(1);
      }
      if (struct.isSetVidp()) {
        optionals.set(2);
      }
      if (struct.isSetTimep()) {
        optionals.set(3);
      }
      if (struct.isSetDatap()) {
        optionals.set(4);
      }
      if (struct.isSetNpasp()) {
        optionals.set(5);
      }
      if (struct.isSetDataz()) {
        optionals.set(6);
      }
      if (struct.isSetPrv()) {
        optionals.set(7);
      }
      if (struct.isSetDoctorSpec()) {
        optionals.set(8);
      }
      if (struct.isSetDoctorFio()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetNtalon()) {
        oprot.writeI32(struct.ntalon);
      }
      if (struct.isSetVidp()) {
        oprot.writeI32(struct.vidp);
      }
      if (struct.isSetTimep()) {
        oprot.writeI64(struct.timep);
      }
      if (struct.isSetDatap()) {
        oprot.writeI64(struct.datap);
      }
      if (struct.isSetNpasp()) {
        oprot.writeI32(struct.npasp);
      }
      if (struct.isSetDataz()) {
        oprot.writeI64(struct.dataz);
      }
      if (struct.isSetPrv()) {
        oprot.writeI32(struct.prv);
      }
      if (struct.isSetDoctorSpec()) {
        oprot.writeString(struct.doctorSpec);
      }
      if (struct.isSetDoctorFio()) {
        oprot.writeString(struct.doctorFio);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Talon struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ntalon = iprot.readI32();
        struct.setNtalonIsSet(true);
      }
      if (incoming.get(2)) {
        struct.vidp = iprot.readI32();
        struct.setVidpIsSet(true);
      }
      if (incoming.get(3)) {
        struct.timep = iprot.readI64();
        struct.setTimepIsSet(true);
      }
      if (incoming.get(4)) {
        struct.datap = iprot.readI64();
        struct.setDatapIsSet(true);
      }
      if (incoming.get(5)) {
        struct.npasp = iprot.readI32();
        struct.setNpaspIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dataz = iprot.readI64();
        struct.setDatazIsSet(true);
      }
      if (incoming.get(7)) {
        struct.prv = iprot.readI32();
        struct.setPrvIsSet(true);
      }
      if (incoming.get(8)) {
        struct.doctorSpec = iprot.readString();
        struct.setDoctorSpecIsSet(true);
      }
      if (incoming.get(9)) {
        struct.doctorFio = iprot.readString();
        struct.setDoctorFioIsSet(true);
      }
    }
  }

}

