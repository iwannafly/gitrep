/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftReception;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftReception {

  public interface Iface extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Iface {

    /**
     * Выбор пациента по полису ОМС
     * 
     * @param omsSer
     * @param omsNum
     */
    public Patient getPatient(String omsSer, String omsNum) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, PatientNotFoundException, org.apache.thrift.TException;

    /**
     * Возвращает список всех поликлиник, для которых сгенерированны талоны
     */
    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getPoliclinic() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, PoliclinicNotFoundException, org.apache.thrift.TException;

    /**
     * Возвращает список всех специальностей в выбранной поликлинике, для которых
     * сгенерированны талоны
     * 
     * @param cpol
     */
    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> getSpec(int cpol) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, SpecNotFoundException, org.apache.thrift.TException;

    /**
     * Возвращает список всех врачей выбранной поликлиники и специальности,
     * для которых сгенерированны талоны
     * 
     * @param cpol
     * @param cdol
     */
    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getVrach(int cpol, String cdol) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, VrachNotFoundException, org.apache.thrift.TException;

    /**
     * Возвращает список всех видов приёма
     */
    public List<Vidp> getVidp() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, VidpNotFoundException, org.apache.thrift.TException;

    /**
     * Возвращает список всех талонов для выбранного врача
     * 
     * @param cpol
     * @param cdol
     * @param pcod
     */
    public List<Talon> getTalon(int cpol, String cdol, int pcod) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, TalonNotFoundException, org.apache.thrift.TException;

    /**
     * Возвращает список всех талонов, занятых данным пациентом
     * 
     * @param cpol
     * @param cdol
     * @param doctorId
     * @param patientId
     */
    public List<Talon> getReservedTalons(int cpol, String cdol, int doctorId, int patientId) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, TalonNotFoundException, org.apache.thrift.TException;

    public void reserveTalon(Patient pat, Talon talon) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, ReserveTalonOperationFailedException, org.apache.thrift.TException;

    public void releaseTalon(Talon talon) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, ReleaseTalonOperationFailedException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer .AsyncIface {

    public void getPatient(String omsSer, String omsNum, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPatient_call> resultHandler) throws org.apache.thrift.TException;

    public void getPoliclinic(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPoliclinic_call> resultHandler) throws org.apache.thrift.TException;

    public void getSpec(int cpol, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSpec_call> resultHandler) throws org.apache.thrift.TException;

    public void getVrach(int cpol, String cdol, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getVrach_call> resultHandler) throws org.apache.thrift.TException;

    public void getVidp(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getVidp_call> resultHandler) throws org.apache.thrift.TException;

    public void getTalon(int cpol, String cdol, int pcod, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getTalon_call> resultHandler) throws org.apache.thrift.TException;

    public void getReservedTalons(int cpol, String cdol, int doctorId, int patientId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getReservedTalons_call> resultHandler) throws org.apache.thrift.TException;

    public void reserveTalon(Patient pat, Talon talon, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.reserveTalon_call> resultHandler) throws org.apache.thrift.TException;

    public void releaseTalon(Talon talon, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.releaseTalon_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Patient getPatient(String omsSer, String omsNum) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, PatientNotFoundException, org.apache.thrift.TException
    {
      send_getPatient(omsSer, omsNum);
      return recv_getPatient();
    }

    public void send_getPatient(String omsSer, String omsNum) throws org.apache.thrift.TException
    {
      getPatient_args args = new getPatient_args();
      args.setOmsSer(omsSer);
      args.setOmsNum(omsNum);
      sendBase("getPatient", args);
    }

    public Patient recv_getPatient() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, PatientNotFoundException, org.apache.thrift.TException
    {
      getPatient_result result = new getPatient_result();
      receiveBase(result, "getPatient");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      if (result.pnfe != null) {
        throw result.pnfe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatient failed: unknown result");
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getPoliclinic() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, PoliclinicNotFoundException, org.apache.thrift.TException
    {
      send_getPoliclinic();
      return recv_getPoliclinic();
    }

    public void send_getPoliclinic() throws org.apache.thrift.TException
    {
      getPoliclinic_args args = new getPoliclinic_args();
      sendBase("getPoliclinic", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> recv_getPoliclinic() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, PoliclinicNotFoundException, org.apache.thrift.TException
    {
      getPoliclinic_result result = new getPoliclinic_result();
      receiveBase(result, "getPoliclinic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      if (result.pnfe != null) {
        throw result.pnfe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPoliclinic failed: unknown result");
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> getSpec(int cpol) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, SpecNotFoundException, org.apache.thrift.TException
    {
      send_getSpec(cpol);
      return recv_getSpec();
    }

    public void send_getSpec(int cpol) throws org.apache.thrift.TException
    {
      getSpec_args args = new getSpec_args();
      args.setCpol(cpol);
      sendBase("getSpec", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> recv_getSpec() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, SpecNotFoundException, org.apache.thrift.TException
    {
      getSpec_result result = new getSpec_result();
      receiveBase(result, "getSpec");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      if (result.snfe != null) {
        throw result.snfe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSpec failed: unknown result");
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getVrach(int cpol, String cdol) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, VrachNotFoundException, org.apache.thrift.TException
    {
      send_getVrach(cpol, cdol);
      return recv_getVrach();
    }

    public void send_getVrach(int cpol, String cdol) throws org.apache.thrift.TException
    {
      getVrach_args args = new getVrach_args();
      args.setCpol(cpol);
      args.setCdol(cdol);
      sendBase("getVrach", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> recv_getVrach() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, VrachNotFoundException, org.apache.thrift.TException
    {
      getVrach_result result = new getVrach_result();
      receiveBase(result, "getVrach");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      if (result.vnfe != null) {
        throw result.vnfe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVrach failed: unknown result");
    }

    public List<Vidp> getVidp() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, VidpNotFoundException, org.apache.thrift.TException
    {
      send_getVidp();
      return recv_getVidp();
    }

    public void send_getVidp() throws org.apache.thrift.TException
    {
      getVidp_args args = new getVidp_args();
      sendBase("getVidp", args);
    }

    public List<Vidp> recv_getVidp() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, VidpNotFoundException, org.apache.thrift.TException
    {
      getVidp_result result = new getVidp_result();
      receiveBase(result, "getVidp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      if (result.vnfe != null) {
        throw result.vnfe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVidp failed: unknown result");
    }

    public List<Talon> getTalon(int cpol, String cdol, int pcod) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, TalonNotFoundException, org.apache.thrift.TException
    {
      send_getTalon(cpol, cdol, pcod);
      return recv_getTalon();
    }

    public void send_getTalon(int cpol, String cdol, int pcod) throws org.apache.thrift.TException
    {
      getTalon_args args = new getTalon_args();
      args.setCpol(cpol);
      args.setCdol(cdol);
      args.setPcod(pcod);
      sendBase("getTalon", args);
    }

    public List<Talon> recv_getTalon() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, TalonNotFoundException, org.apache.thrift.TException
    {
      getTalon_result result = new getTalon_result();
      receiveBase(result, "getTalon");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      if (result.tnfe != null) {
        throw result.tnfe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTalon failed: unknown result");
    }

    public List<Talon> getReservedTalons(int cpol, String cdol, int doctorId, int patientId) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, TalonNotFoundException, org.apache.thrift.TException
    {
      send_getReservedTalons(cpol, cdol, doctorId, patientId);
      return recv_getReservedTalons();
    }

    public void send_getReservedTalons(int cpol, String cdol, int doctorId, int patientId) throws org.apache.thrift.TException
    {
      getReservedTalons_args args = new getReservedTalons_args();
      args.setCpol(cpol);
      args.setCdol(cdol);
      args.setDoctorId(doctorId);
      args.setPatientId(patientId);
      sendBase("getReservedTalons", args);
    }

    public List<Talon> recv_getReservedTalons() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, TalonNotFoundException, org.apache.thrift.TException
    {
      getReservedTalons_result result = new getReservedTalons_result();
      receiveBase(result, "getReservedTalons");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.kse != null) {
        throw result.kse;
      }
      if (result.tnfe != null) {
        throw result.tnfe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReservedTalons failed: unknown result");
    }

    public void reserveTalon(Patient pat, Talon talon) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, ReserveTalonOperationFailedException, org.apache.thrift.TException
    {
      send_reserveTalon(pat, talon);
      recv_reserveTalon();
    }

    public void send_reserveTalon(Patient pat, Talon talon) throws org.apache.thrift.TException
    {
      reserveTalon_args args = new reserveTalon_args();
      args.setPat(pat);
      args.setTalon(talon);
      sendBase("reserveTalon", args);
    }

    public void recv_reserveTalon() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, ReserveTalonOperationFailedException, org.apache.thrift.TException
    {
      reserveTalon_result result = new reserveTalon_result();
      receiveBase(result, "reserveTalon");
      if (result.kse != null) {
        throw result.kse;
      }
      if (result.rtofe != null) {
        throw result.rtofe;
      }
      return;
    }

    public void releaseTalon(Talon talon) throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, ReleaseTalonOperationFailedException, org.apache.thrift.TException
    {
      send_releaseTalon(talon);
      recv_releaseTalon();
    }

    public void send_releaseTalon(Talon talon) throws org.apache.thrift.TException
    {
      releaseTalon_args args = new releaseTalon_args();
      args.setTalon(talon);
      sendBase("releaseTalon", args);
    }

    public void recv_releaseTalon() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, ReleaseTalonOperationFailedException, org.apache.thrift.TException
    {
      releaseTalon_result result = new releaseTalon_result();
      receiveBase(result, "releaseTalon");
      if (result.kse != null) {
        throw result.kse;
      }
      if (result.rtofe != null) {
        throw result.rtofe;
      }
      return;
    }

  }
  public static class AsyncClient extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getPatient(String omsSer, String omsNum, org.apache.thrift.async.AsyncMethodCallback<getPatient_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatient_call method_call = new getPatient_call(omsSer, omsNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatient_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String omsSer;
      private String omsNum;
      public getPatient_call(String omsSer, String omsNum, org.apache.thrift.async.AsyncMethodCallback<getPatient_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.omsSer = omsSer;
        this.omsNum = omsNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatient", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatient_args args = new getPatient_args();
        args.setOmsSer(omsSer);
        args.setOmsNum(omsNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Patient getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, PatientNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatient();
      }
    }

    public void getPoliclinic(org.apache.thrift.async.AsyncMethodCallback<getPoliclinic_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPoliclinic_call method_call = new getPoliclinic_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPoliclinic_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getPoliclinic_call(org.apache.thrift.async.AsyncMethodCallback<getPoliclinic_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPoliclinic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPoliclinic_args args = new getPoliclinic_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, PoliclinicNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPoliclinic();
      }
    }

    public void getSpec(int cpol, org.apache.thrift.async.AsyncMethodCallback<getSpec_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSpec_call method_call = new getSpec_call(cpol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSpec_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cpol;
      public getSpec_call(int cpol, org.apache.thrift.async.AsyncMethodCallback<getSpec_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cpol = cpol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSpec", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSpec_args args = new getSpec_args();
        args.setCpol(cpol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, SpecNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSpec();
      }
    }

    public void getVrach(int cpol, String cdol, org.apache.thrift.async.AsyncMethodCallback<getVrach_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVrach_call method_call = new getVrach_call(cpol, cdol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVrach_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cpol;
      private String cdol;
      public getVrach_call(int cpol, String cdol, org.apache.thrift.async.AsyncMethodCallback<getVrach_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cpol = cpol;
        this.cdol = cdol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVrach", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVrach_args args = new getVrach_args();
        args.setCpol(cpol);
        args.setCdol(cdol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, VrachNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVrach();
      }
    }

    public void getVidp(org.apache.thrift.async.AsyncMethodCallback<getVidp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVidp_call method_call = new getVidp_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVidp_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getVidp_call(org.apache.thrift.async.AsyncMethodCallback<getVidp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVidp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVidp_args args = new getVidp_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Vidp> getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, VidpNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVidp();
      }
    }

    public void getTalon(int cpol, String cdol, int pcod, org.apache.thrift.async.AsyncMethodCallback<getTalon_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTalon_call method_call = new getTalon_call(cpol, cdol, pcod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTalon_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cpol;
      private String cdol;
      private int pcod;
      public getTalon_call(int cpol, String cdol, int pcod, org.apache.thrift.async.AsyncMethodCallback<getTalon_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cpol = cpol;
        this.cdol = cdol;
        this.pcod = pcod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTalon", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTalon_args args = new getTalon_args();
        args.setCpol(cpol);
        args.setCdol(cdol);
        args.setPcod(pcod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Talon> getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, TalonNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTalon();
      }
    }

    public void getReservedTalons(int cpol, String cdol, int doctorId, int patientId, org.apache.thrift.async.AsyncMethodCallback<getReservedTalons_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReservedTalons_call method_call = new getReservedTalons_call(cpol, cdol, doctorId, patientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReservedTalons_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cpol;
      private String cdol;
      private int doctorId;
      private int patientId;
      public getReservedTalons_call(int cpol, String cdol, int doctorId, int patientId, org.apache.thrift.async.AsyncMethodCallback<getReservedTalons_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cpol = cpol;
        this.cdol = cdol;
        this.doctorId = doctorId;
        this.patientId = patientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReservedTalons", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReservedTalons_args args = new getReservedTalons_args();
        args.setCpol(cpol);
        args.setCdol(cdol);
        args.setDoctorId(doctorId);
        args.setPatientId(patientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Talon> getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, TalonNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReservedTalons();
      }
    }

    public void reserveTalon(Patient pat, Talon talon, org.apache.thrift.async.AsyncMethodCallback<reserveTalon_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reserveTalon_call method_call = new reserveTalon_call(pat, talon, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reserveTalon_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Patient pat;
      private Talon talon;
      public reserveTalon_call(Patient pat, Talon talon, org.apache.thrift.async.AsyncMethodCallback<reserveTalon_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pat = pat;
        this.talon = talon;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reserveTalon", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reserveTalon_args args = new reserveTalon_args();
        args.setPat(pat);
        args.setTalon(talon);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, ReserveTalonOperationFailedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_reserveTalon();
      }
    }

    public void releaseTalon(Talon talon, org.apache.thrift.async.AsyncMethodCallback<releaseTalon_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      releaseTalon_call method_call = new releaseTalon_call(talon, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class releaseTalon_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Talon talon;
      public releaseTalon_call(Talon talon, org.apache.thrift.async.AsyncMethodCallback<releaseTalon_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.talon = talon;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("releaseTalon", org.apache.thrift.protocol.TMessageType.CALL, 0));
        releaseTalon_args args = new releaseTalon_args();
        args.setTalon(talon);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException, ReleaseTalonOperationFailedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_releaseTalon();
      }
    }

  }

  public static class Processor<I extends Iface> extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getPatient", new getPatient());
      processMap.put("getPoliclinic", new getPoliclinic());
      processMap.put("getSpec", new getSpec());
      processMap.put("getVrach", new getVrach());
      processMap.put("getVidp", new getVidp());
      processMap.put("getTalon", new getTalon());
      processMap.put("getReservedTalons", new getReservedTalons());
      processMap.put("reserveTalon", new reserveTalon());
      processMap.put("releaseTalon", new releaseTalon());
      return processMap;
    }

    private static class getPatient<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatient_args> {
      public getPatient() {
        super("getPatient");
      }

      protected getPatient_args getEmptyArgsInstance() {
        return new getPatient_args();
      }

      protected getPatient_result getResult(I iface, getPatient_args args) throws org.apache.thrift.TException {
        getPatient_result result = new getPatient_result();
        try {
          result.success = iface.getPatient(args.omsSer, args.omsNum);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        } catch (PatientNotFoundException pnfe) {
          result.pnfe = pnfe;
        }
        return result;
      }
    }

    private static class getPoliclinic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPoliclinic_args> {
      public getPoliclinic() {
        super("getPoliclinic");
      }

      protected getPoliclinic_args getEmptyArgsInstance() {
        return new getPoliclinic_args();
      }

      protected getPoliclinic_result getResult(I iface, getPoliclinic_args args) throws org.apache.thrift.TException {
        getPoliclinic_result result = new getPoliclinic_result();
        try {
          result.success = iface.getPoliclinic();
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        } catch (PoliclinicNotFoundException pnfe) {
          result.pnfe = pnfe;
        }
        return result;
      }
    }

    private static class getSpec<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSpec_args> {
      public getSpec() {
        super("getSpec");
      }

      protected getSpec_args getEmptyArgsInstance() {
        return new getSpec_args();
      }

      protected getSpec_result getResult(I iface, getSpec_args args) throws org.apache.thrift.TException {
        getSpec_result result = new getSpec_result();
        try {
          result.success = iface.getSpec(args.cpol);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        } catch (SpecNotFoundException snfe) {
          result.snfe = snfe;
        }
        return result;
      }
    }

    private static class getVrach<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVrach_args> {
      public getVrach() {
        super("getVrach");
      }

      protected getVrach_args getEmptyArgsInstance() {
        return new getVrach_args();
      }

      protected getVrach_result getResult(I iface, getVrach_args args) throws org.apache.thrift.TException {
        getVrach_result result = new getVrach_result();
        try {
          result.success = iface.getVrach(args.cpol, args.cdol);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        } catch (VrachNotFoundException vnfe) {
          result.vnfe = vnfe;
        }
        return result;
      }
    }

    private static class getVidp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVidp_args> {
      public getVidp() {
        super("getVidp");
      }

      protected getVidp_args getEmptyArgsInstance() {
        return new getVidp_args();
      }

      protected getVidp_result getResult(I iface, getVidp_args args) throws org.apache.thrift.TException {
        getVidp_result result = new getVidp_result();
        try {
          result.success = iface.getVidp();
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        } catch (VidpNotFoundException vnfe) {
          result.vnfe = vnfe;
        }
        return result;
      }
    }

    private static class getTalon<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTalon_args> {
      public getTalon() {
        super("getTalon");
      }

      protected getTalon_args getEmptyArgsInstance() {
        return new getTalon_args();
      }

      protected getTalon_result getResult(I iface, getTalon_args args) throws org.apache.thrift.TException {
        getTalon_result result = new getTalon_result();
        try {
          result.success = iface.getTalon(args.cpol, args.cdol, args.pcod);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        } catch (TalonNotFoundException tnfe) {
          result.tnfe = tnfe;
        }
        return result;
      }
    }

    private static class getReservedTalons<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReservedTalons_args> {
      public getReservedTalons() {
        super("getReservedTalons");
      }

      protected getReservedTalons_args getEmptyArgsInstance() {
        return new getReservedTalons_args();
      }

      protected getReservedTalons_result getResult(I iface, getReservedTalons_args args) throws org.apache.thrift.TException {
        getReservedTalons_result result = new getReservedTalons_result();
        try {
          result.success = iface.getReservedTalons(args.cpol, args.cdol, args.doctorId, args.patientId);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        } catch (TalonNotFoundException tnfe) {
          result.tnfe = tnfe;
        }
        return result;
      }
    }

    private static class reserveTalon<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reserveTalon_args> {
      public reserveTalon() {
        super("reserveTalon");
      }

      protected reserveTalon_args getEmptyArgsInstance() {
        return new reserveTalon_args();
      }

      protected reserveTalon_result getResult(I iface, reserveTalon_args args) throws org.apache.thrift.TException {
        reserveTalon_result result = new reserveTalon_result();
        try {
          iface.reserveTalon(args.pat, args.talon);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        } catch (ReserveTalonOperationFailedException rtofe) {
          result.rtofe = rtofe;
        }
        return result;
      }
    }

    private static class releaseTalon<I extends Iface> extends org.apache.thrift.ProcessFunction<I, releaseTalon_args> {
      public releaseTalon() {
        super("releaseTalon");
      }

      protected releaseTalon_args getEmptyArgsInstance() {
        return new releaseTalon_args();
      }

      protected releaseTalon_result getResult(I iface, releaseTalon_args args) throws org.apache.thrift.TException {
        releaseTalon_result result = new releaseTalon_result();
        try {
          iface.releaseTalon(args.talon);
        } catch (ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
          result.kse = kse;
        } catch (ReleaseTalonOperationFailedException rtofe) {
          result.rtofe = rtofe;
        }
        return result;
      }
    }

  }

  public static class getPatient_args implements org.apache.thrift.TBase<getPatient_args, getPatient_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatient_args");

    private static final org.apache.thrift.protocol.TField OMS_SER_FIELD_DESC = new org.apache.thrift.protocol.TField("omsSer", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OMS_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("omsNum", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatient_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatient_argsTupleSchemeFactory());
    }

    public String omsSer; // required
    public String omsNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OMS_SER((short)1, "omsSer"),
      OMS_NUM((short)2, "omsNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OMS_SER
            return OMS_SER;
          case 2: // OMS_NUM
            return OMS_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OMS_SER, new org.apache.thrift.meta_data.FieldMetaData("omsSer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OMS_NUM, new org.apache.thrift.meta_data.FieldMetaData("omsNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatient_args.class, metaDataMap);
    }

    public getPatient_args() {
    }

    public getPatient_args(
      String omsSer,
      String omsNum)
    {
      this();
      this.omsSer = omsSer;
      this.omsNum = omsNum;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatient_args(getPatient_args other) {
      if (other.isSetOmsSer()) {
        this.omsSer = other.omsSer;
      }
      if (other.isSetOmsNum()) {
        this.omsNum = other.omsNum;
      }
    }

    public getPatient_args deepCopy() {
      return new getPatient_args(this);
    }

    @Override
    public void clear() {
      this.omsSer = null;
      this.omsNum = null;
    }

    public String getOmsSer() {
      return this.omsSer;
    }

    public getPatient_args setOmsSer(String omsSer) {
      this.omsSer = omsSer;
      return this;
    }

    public void unsetOmsSer() {
      this.omsSer = null;
    }

    /** Returns true if field omsSer is set (has been assigned a value) and false otherwise */
    public boolean isSetOmsSer() {
      return this.omsSer != null;
    }

    public void setOmsSerIsSet(boolean value) {
      if (!value) {
        this.omsSer = null;
      }
    }

    public String getOmsNum() {
      return this.omsNum;
    }

    public getPatient_args setOmsNum(String omsNum) {
      this.omsNum = omsNum;
      return this;
    }

    public void unsetOmsNum() {
      this.omsNum = null;
    }

    /** Returns true if field omsNum is set (has been assigned a value) and false otherwise */
    public boolean isSetOmsNum() {
      return this.omsNum != null;
    }

    public void setOmsNumIsSet(boolean value) {
      if (!value) {
        this.omsNum = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OMS_SER:
        if (value == null) {
          unsetOmsSer();
        } else {
          setOmsSer((String)value);
        }
        break;

      case OMS_NUM:
        if (value == null) {
          unsetOmsNum();
        } else {
          setOmsNum((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OMS_SER:
        return getOmsSer();

      case OMS_NUM:
        return getOmsNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OMS_SER:
        return isSetOmsSer();
      case OMS_NUM:
        return isSetOmsNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatient_args)
        return this.equals((getPatient_args)that);
      return false;
    }

    public boolean equals(getPatient_args that) {
      if (that == null)
        return false;

      boolean this_present_omsSer = true && this.isSetOmsSer();
      boolean that_present_omsSer = true && that.isSetOmsSer();
      if (this_present_omsSer || that_present_omsSer) {
        if (!(this_present_omsSer && that_present_omsSer))
          return false;
        if (!this.omsSer.equals(that.omsSer))
          return false;
      }

      boolean this_present_omsNum = true && this.isSetOmsNum();
      boolean that_present_omsNum = true && that.isSetOmsNum();
      if (this_present_omsNum || that_present_omsNum) {
        if (!(this_present_omsNum && that_present_omsNum))
          return false;
        if (!this.omsNum.equals(that.omsNum))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatient_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatient_args typedOther = (getPatient_args)other;

      lastComparison = Boolean.valueOf(isSetOmsSer()).compareTo(typedOther.isSetOmsSer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOmsSer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.omsSer, typedOther.omsSer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOmsNum()).compareTo(typedOther.isSetOmsNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOmsNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.omsNum, typedOther.omsNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatient_args(");
      boolean first = true;

      sb.append("omsSer:");
      if (this.omsSer == null) {
        sb.append("null");
      } else {
        sb.append(this.omsSer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("omsNum:");
      if (this.omsNum == null) {
        sb.append("null");
      } else {
        sb.append(this.omsNum);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatient_argsStandardSchemeFactory implements SchemeFactory {
      public getPatient_argsStandardScheme getScheme() {
        return new getPatient_argsStandardScheme();
      }
    }

    private static class getPatient_argsStandardScheme extends StandardScheme<getPatient_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OMS_SER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.omsSer = iprot.readString();
                struct.setOmsSerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OMS_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.omsNum = iprot.readString();
                struct.setOmsNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatient_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.omsSer != null) {
          oprot.writeFieldBegin(OMS_SER_FIELD_DESC);
          oprot.writeString(struct.omsSer);
          oprot.writeFieldEnd();
        }
        if (struct.omsNum != null) {
          oprot.writeFieldBegin(OMS_NUM_FIELD_DESC);
          oprot.writeString(struct.omsNum);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatient_argsTupleSchemeFactory implements SchemeFactory {
      public getPatient_argsTupleScheme getScheme() {
        return new getPatient_argsTupleScheme();
      }
    }

    private static class getPatient_argsTupleScheme extends TupleScheme<getPatient_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOmsSer()) {
          optionals.set(0);
        }
        if (struct.isSetOmsNum()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOmsSer()) {
          oprot.writeString(struct.omsSer);
        }
        if (struct.isSetOmsNum()) {
          oprot.writeString(struct.omsNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.omsSer = iprot.readString();
          struct.setOmsSerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.omsNum = iprot.readString();
          struct.setOmsNumIsSet(true);
        }
      }
    }

  }

  public static class getPatient_result implements org.apache.thrift.TBase<getPatient_result, getPatient_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatient_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PNFE_FIELD_DESC = new org.apache.thrift.protocol.TField("pnfe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatient_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatient_resultTupleSchemeFactory());
    }

    public Patient success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required
    public PatientNotFoundException pnfe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse"),
      PNFE((short)2, "pnfe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          case 2: // PNFE
            return PNFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Patient.class)));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PNFE, new org.apache.thrift.meta_data.FieldMetaData("pnfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatient_result.class, metaDataMap);
    }

    public getPatient_result() {
    }

    public getPatient_result(
      Patient success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse,
      PatientNotFoundException pnfe)
    {
      this();
      this.success = success;
      this.kse = kse;
      this.pnfe = pnfe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatient_result(getPatient_result other) {
      if (other.isSetSuccess()) {
        this.success = new Patient(other.success);
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
      if (other.isSetPnfe()) {
        this.pnfe = new PatientNotFoundException(other.pnfe);
      }
    }

    public getPatient_result deepCopy() {
      return new getPatient_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
      this.pnfe = null;
    }

    public Patient getSuccess() {
      return this.success;
    }

    public getPatient_result setSuccess(Patient success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getPatient_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public PatientNotFoundException getPnfe() {
      return this.pnfe;
    }

    public getPatient_result setPnfe(PatientNotFoundException pnfe) {
      this.pnfe = pnfe;
      return this;
    }

    public void unsetPnfe() {
      this.pnfe = null;
    }

    /** Returns true if field pnfe is set (has been assigned a value) and false otherwise */
    public boolean isSetPnfe() {
      return this.pnfe != null;
    }

    public void setPnfeIsSet(boolean value) {
      if (!value) {
        this.pnfe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Patient)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      case PNFE:
        if (value == null) {
          unsetPnfe();
        } else {
          setPnfe((PatientNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      case PNFE:
        return getPnfe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      case PNFE:
        return isSetPnfe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatient_result)
        return this.equals((getPatient_result)that);
      return false;
    }

    public boolean equals(getPatient_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      boolean this_present_pnfe = true && this.isSetPnfe();
      boolean that_present_pnfe = true && that.isSetPnfe();
      if (this_present_pnfe || that_present_pnfe) {
        if (!(this_present_pnfe && that_present_pnfe))
          return false;
        if (!this.pnfe.equals(that.pnfe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatient_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatient_result typedOther = (getPatient_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPnfe()).compareTo(typedOther.isSetPnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPnfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pnfe, typedOther.pnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatient_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pnfe:");
      if (this.pnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.pnfe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatient_resultStandardSchemeFactory implements SchemeFactory {
      public getPatient_resultStandardScheme getScheme() {
        return new getPatient_resultStandardScheme();
      }
    }

    private static class getPatient_resultStandardScheme extends StandardScheme<getPatient_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Patient();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PNFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pnfe = new PatientNotFoundException();
                struct.pnfe.read(iprot);
                struct.setPnfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatient_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          if (struct.isSetSuccess()) {
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            struct.success.write(oprot);
            oprot.writeFieldEnd();
          }
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pnfe != null) {
          oprot.writeFieldBegin(PNFE_FIELD_DESC);
          struct.pnfe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatient_resultTupleSchemeFactory implements SchemeFactory {
      public getPatient_resultTupleScheme getScheme() {
        return new getPatient_resultTupleScheme();
      }
    }

    private static class getPatient_resultTupleScheme extends TupleScheme<getPatient_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        if (struct.isSetPnfe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
        if (struct.isSetPnfe()) {
          struct.pnfe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new Patient();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pnfe = new PatientNotFoundException();
          struct.pnfe.read(iprot);
          struct.setPnfeIsSet(true);
        }
      }
    }

  }

  public static class getPoliclinic_args implements org.apache.thrift.TBase<getPoliclinic_args, getPoliclinic_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPoliclinic_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPoliclinic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPoliclinic_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPoliclinic_args.class, metaDataMap);
    }

    public getPoliclinic_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPoliclinic_args(getPoliclinic_args other) {
    }

    public getPoliclinic_args deepCopy() {
      return new getPoliclinic_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPoliclinic_args)
        return this.equals((getPoliclinic_args)that);
      return false;
    }

    public boolean equals(getPoliclinic_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPoliclinic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPoliclinic_args typedOther = (getPoliclinic_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPoliclinic_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPoliclinic_argsStandardSchemeFactory implements SchemeFactory {
      public getPoliclinic_argsStandardScheme getScheme() {
        return new getPoliclinic_argsStandardScheme();
      }
    }

    private static class getPoliclinic_argsStandardScheme extends StandardScheme<getPoliclinic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPoliclinic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPoliclinic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPoliclinic_argsTupleSchemeFactory implements SchemeFactory {
      public getPoliclinic_argsTupleScheme getScheme() {
        return new getPoliclinic_argsTupleScheme();
      }
    }

    private static class getPoliclinic_argsTupleScheme extends TupleScheme<getPoliclinic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPoliclinic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPoliclinic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getPoliclinic_result implements org.apache.thrift.TBase<getPoliclinic_result, getPoliclinic_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPoliclinic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PNFE_FIELD_DESC = new org.apache.thrift.protocol.TField("pnfe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPoliclinic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPoliclinic_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required
    public PoliclinicNotFoundException pnfe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse"),
      PNFE((short)2, "pnfe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          case 2: // PNFE
            return PNFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier.class))));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PNFE, new org.apache.thrift.meta_data.FieldMetaData("pnfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPoliclinic_result.class, metaDataMap);
    }

    public getPoliclinic_result() {
    }

    public getPoliclinic_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse,
      PoliclinicNotFoundException pnfe)
    {
      this();
      this.success = success;
      this.kse = kse;
      this.pnfe = pnfe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPoliclinic_result(getPoliclinic_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
      if (other.isSetPnfe()) {
        this.pnfe = new PoliclinicNotFoundException(other.pnfe);
      }
    }

    public getPoliclinic_result deepCopy() {
      return new getPoliclinic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
      this.pnfe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccess() {
      return this.success;
    }

    public getPoliclinic_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getPoliclinic_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public PoliclinicNotFoundException getPnfe() {
      return this.pnfe;
    }

    public getPoliclinic_result setPnfe(PoliclinicNotFoundException pnfe) {
      this.pnfe = pnfe;
      return this;
    }

    public void unsetPnfe() {
      this.pnfe = null;
    }

    /** Returns true if field pnfe is set (has been assigned a value) and false otherwise */
    public boolean isSetPnfe() {
      return this.pnfe != null;
    }

    public void setPnfeIsSet(boolean value) {
      if (!value) {
        this.pnfe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      case PNFE:
        if (value == null) {
          unsetPnfe();
        } else {
          setPnfe((PoliclinicNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      case PNFE:
        return getPnfe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      case PNFE:
        return isSetPnfe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPoliclinic_result)
        return this.equals((getPoliclinic_result)that);
      return false;
    }

    public boolean equals(getPoliclinic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      boolean this_present_pnfe = true && this.isSetPnfe();
      boolean that_present_pnfe = true && that.isSetPnfe();
      if (this_present_pnfe || that_present_pnfe) {
        if (!(this_present_pnfe && that_present_pnfe))
          return false;
        if (!this.pnfe.equals(that.pnfe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPoliclinic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPoliclinic_result typedOther = (getPoliclinic_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPnfe()).compareTo(typedOther.isSetPnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPnfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pnfe, typedOther.pnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPoliclinic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pnfe:");
      if (this.pnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.pnfe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPoliclinic_resultStandardSchemeFactory implements SchemeFactory {
      public getPoliclinic_resultStandardScheme getScheme() {
        return new getPoliclinic_resultStandardScheme();
      }
    }

    private static class getPoliclinic_resultStandardScheme extends StandardScheme<getPoliclinic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPoliclinic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem2; // required
                    _elem2 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PNFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pnfe = new PoliclinicNotFoundException();
                struct.pnfe.read(iprot);
                struct.setPnfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPoliclinic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          if (struct.isSetSuccess()) {
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
              for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter3 : struct.success)
              {
                _iter3.write(oprot);
              }
              oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
          }
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pnfe != null) {
          oprot.writeFieldBegin(PNFE_FIELD_DESC);
          struct.pnfe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPoliclinic_resultTupleSchemeFactory implements SchemeFactory {
      public getPoliclinic_resultTupleScheme getScheme() {
        return new getPoliclinic_resultTupleScheme();
      }
    }

    private static class getPoliclinic_resultTupleScheme extends TupleScheme<getPoliclinic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPoliclinic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        if (struct.isSetPnfe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
        if (struct.isSetPnfe()) {
          struct.pnfe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPoliclinic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem7; // required
              _elem7 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pnfe = new PoliclinicNotFoundException();
          struct.pnfe.read(iprot);
          struct.setPnfeIsSet(true);
        }
      }
    }

  }

  public static class getSpec_args implements org.apache.thrift.TBase<getSpec_args, getSpec_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSpec_args");

    private static final org.apache.thrift.protocol.TField CPOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cpol", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSpec_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSpec_argsTupleSchemeFactory());
    }

    public int cpol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CPOL((short)1, "cpol");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CPOL
            return CPOL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CPOL_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CPOL, new org.apache.thrift.meta_data.FieldMetaData("cpol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpec_args.class, metaDataMap);
    }

    public getSpec_args() {
    }

    public getSpec_args(
      int cpol)
    {
      this();
      this.cpol = cpol;
      setCpolIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSpec_args(getSpec_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.cpol = other.cpol;
    }

    public getSpec_args deepCopy() {
      return new getSpec_args(this);
    }

    @Override
    public void clear() {
      setCpolIsSet(false);
      this.cpol = 0;
    }

    public int getCpol() {
      return this.cpol;
    }

    public getSpec_args setCpol(int cpol) {
      this.cpol = cpol;
      setCpolIsSet(true);
      return this;
    }

    public void unsetCpol() {
      __isset_bit_vector.clear(__CPOL_ISSET_ID);
    }

    /** Returns true if field cpol is set (has been assigned a value) and false otherwise */
    public boolean isSetCpol() {
      return __isset_bit_vector.get(__CPOL_ISSET_ID);
    }

    public void setCpolIsSet(boolean value) {
      __isset_bit_vector.set(__CPOL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CPOL:
        if (value == null) {
          unsetCpol();
        } else {
          setCpol((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CPOL:
        return Integer.valueOf(getCpol());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CPOL:
        return isSetCpol();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSpec_args)
        return this.equals((getSpec_args)that);
      return false;
    }

    public boolean equals(getSpec_args that) {
      if (that == null)
        return false;

      boolean this_present_cpol = true;
      boolean that_present_cpol = true;
      if (this_present_cpol || that_present_cpol) {
        if (!(this_present_cpol && that_present_cpol))
          return false;
        if (this.cpol != that.cpol)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSpec_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSpec_args typedOther = (getSpec_args)other;

      lastComparison = Boolean.valueOf(isSetCpol()).compareTo(typedOther.isSetCpol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCpol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpol, typedOther.cpol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSpec_args(");
      boolean first = true;

      sb.append("cpol:");
      sb.append(this.cpol);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSpec_argsStandardSchemeFactory implements SchemeFactory {
      public getSpec_argsStandardScheme getScheme() {
        return new getSpec_argsStandardScheme();
      }
    }

    private static class getSpec_argsStandardScheme extends StandardScheme<getSpec_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSpec_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CPOL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cpol = iprot.readI32();
                struct.setCpolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSpec_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CPOL_FIELD_DESC);
        oprot.writeI32(struct.cpol);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSpec_argsTupleSchemeFactory implements SchemeFactory {
      public getSpec_argsTupleScheme getScheme() {
        return new getSpec_argsTupleScheme();
      }
    }

    private static class getSpec_argsTupleScheme extends TupleScheme<getSpec_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSpec_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCpol()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCpol()) {
          oprot.writeI32(struct.cpol);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSpec_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cpol = iprot.readI32();
          struct.setCpolIsSet(true);
        }
      }
    }

  }

  public static class getSpec_result implements org.apache.thrift.TBase<getSpec_result, getSpec_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSpec_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SNFE_FIELD_DESC = new org.apache.thrift.protocol.TField("snfe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSpec_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSpec_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required
    public SpecNotFoundException snfe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse"),
      SNFE((short)2, "snfe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          case 2: // SNFE
            return SNFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier.class))));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SNFE, new org.apache.thrift.meta_data.FieldMetaData("snfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpec_result.class, metaDataMap);
    }

    public getSpec_result() {
    }

    public getSpec_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse,
      SpecNotFoundException snfe)
    {
      this();
      this.success = success;
      this.kse = kse;
      this.snfe = snfe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSpec_result(getSpec_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
      if (other.isSetSnfe()) {
        this.snfe = new SpecNotFoundException(other.snfe);
      }
    }

    public getSpec_result deepCopy() {
      return new getSpec_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
      this.snfe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> getSuccess() {
      return this.success;
    }

    public getSpec_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getSpec_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public SpecNotFoundException getSnfe() {
      return this.snfe;
    }

    public getSpec_result setSnfe(SpecNotFoundException snfe) {
      this.snfe = snfe;
      return this;
    }

    public void unsetSnfe() {
      this.snfe = null;
    }

    /** Returns true if field snfe is set (has been assigned a value) and false otherwise */
    public boolean isSetSnfe() {
      return this.snfe != null;
    }

    public void setSnfeIsSet(boolean value) {
      if (!value) {
        this.snfe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      case SNFE:
        if (value == null) {
          unsetSnfe();
        } else {
          setSnfe((SpecNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      case SNFE:
        return getSnfe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      case SNFE:
        return isSetSnfe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSpec_result)
        return this.equals((getSpec_result)that);
      return false;
    }

    public boolean equals(getSpec_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      boolean this_present_snfe = true && this.isSetSnfe();
      boolean that_present_snfe = true && that.isSetSnfe();
      if (this_present_snfe || that_present_snfe) {
        if (!(this_present_snfe && that_present_snfe))
          return false;
        if (!this.snfe.equals(that.snfe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSpec_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSpec_result typedOther = (getSpec_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSnfe()).compareTo(typedOther.isSetSnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snfe, typedOther.snfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSpec_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("snfe:");
      if (this.snfe == null) {
        sb.append("null");
      } else {
        sb.append(this.snfe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSpec_resultStandardSchemeFactory implements SchemeFactory {
      public getSpec_resultStandardScheme getScheme() {
        return new getSpec_resultStandardScheme();
      }
    }

    private static class getSpec_resultStandardScheme extends StandardScheme<getSpec_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSpec_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier _elem10; // required
                    _elem10 = new ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SNFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.snfe = new SpecNotFoundException();
                struct.snfe.read(iprot);
                struct.setSnfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSpec_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          if (struct.isSetSuccess()) {
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
              for (ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier _iter11 : struct.success)
              {
                _iter11.write(oprot);
              }
              oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
          }
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.snfe != null) {
          oprot.writeFieldBegin(SNFE_FIELD_DESC);
          struct.snfe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSpec_resultTupleSchemeFactory implements SchemeFactory {
      public getSpec_resultTupleScheme getScheme() {
        return new getSpec_resultTupleScheme();
      }
    }

    private static class getSpec_resultTupleScheme extends TupleScheme<getSpec_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSpec_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        if (struct.isSetSnfe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
        if (struct.isSetSnfe()) {
          struct.snfe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSpec_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier _elem15; // required
              _elem15 = new ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
        if (incoming.get(2)) {
          struct.snfe = new SpecNotFoundException();
          struct.snfe.read(iprot);
          struct.setSnfeIsSet(true);
        }
      }
    }

  }

  public static class getVrach_args implements org.apache.thrift.TBase<getVrach_args, getVrach_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVrach_args");

    private static final org.apache.thrift.protocol.TField CPOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cpol", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CDOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cdol", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVrach_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVrach_argsTupleSchemeFactory());
    }

    public int cpol; // required
    public String cdol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CPOL((short)1, "cpol"),
      CDOL((short)2, "cdol");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CPOL
            return CPOL;
          case 2: // CDOL
            return CDOL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CPOL_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CPOL, new org.apache.thrift.meta_data.FieldMetaData("cpol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CDOL, new org.apache.thrift.meta_data.FieldMetaData("cdol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVrach_args.class, metaDataMap);
    }

    public getVrach_args() {
    }

    public getVrach_args(
      int cpol,
      String cdol)
    {
      this();
      this.cpol = cpol;
      setCpolIsSet(true);
      this.cdol = cdol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVrach_args(getVrach_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.cpol = other.cpol;
      if (other.isSetCdol()) {
        this.cdol = other.cdol;
      }
    }

    public getVrach_args deepCopy() {
      return new getVrach_args(this);
    }

    @Override
    public void clear() {
      setCpolIsSet(false);
      this.cpol = 0;
      this.cdol = null;
    }

    public int getCpol() {
      return this.cpol;
    }

    public getVrach_args setCpol(int cpol) {
      this.cpol = cpol;
      setCpolIsSet(true);
      return this;
    }

    public void unsetCpol() {
      __isset_bit_vector.clear(__CPOL_ISSET_ID);
    }

    /** Returns true if field cpol is set (has been assigned a value) and false otherwise */
    public boolean isSetCpol() {
      return __isset_bit_vector.get(__CPOL_ISSET_ID);
    }

    public void setCpolIsSet(boolean value) {
      __isset_bit_vector.set(__CPOL_ISSET_ID, value);
    }

    public String getCdol() {
      return this.cdol;
    }

    public getVrach_args setCdol(String cdol) {
      this.cdol = cdol;
      return this;
    }

    public void unsetCdol() {
      this.cdol = null;
    }

    /** Returns true if field cdol is set (has been assigned a value) and false otherwise */
    public boolean isSetCdol() {
      return this.cdol != null;
    }

    public void setCdolIsSet(boolean value) {
      if (!value) {
        this.cdol = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CPOL:
        if (value == null) {
          unsetCpol();
        } else {
          setCpol((Integer)value);
        }
        break;

      case CDOL:
        if (value == null) {
          unsetCdol();
        } else {
          setCdol((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CPOL:
        return Integer.valueOf(getCpol());

      case CDOL:
        return getCdol();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CPOL:
        return isSetCpol();
      case CDOL:
        return isSetCdol();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVrach_args)
        return this.equals((getVrach_args)that);
      return false;
    }

    public boolean equals(getVrach_args that) {
      if (that == null)
        return false;

      boolean this_present_cpol = true;
      boolean that_present_cpol = true;
      if (this_present_cpol || that_present_cpol) {
        if (!(this_present_cpol && that_present_cpol))
          return false;
        if (this.cpol != that.cpol)
          return false;
      }

      boolean this_present_cdol = true && this.isSetCdol();
      boolean that_present_cdol = true && that.isSetCdol();
      if (this_present_cdol || that_present_cdol) {
        if (!(this_present_cdol && that_present_cdol))
          return false;
        if (!this.cdol.equals(that.cdol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getVrach_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getVrach_args typedOther = (getVrach_args)other;

      lastComparison = Boolean.valueOf(isSetCpol()).compareTo(typedOther.isSetCpol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCpol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpol, typedOther.cpol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCdol()).compareTo(typedOther.isSetCdol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCdol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdol, typedOther.cdol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVrach_args(");
      boolean first = true;

      sb.append("cpol:");
      sb.append(this.cpol);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cdol:");
      if (this.cdol == null) {
        sb.append("null");
      } else {
        sb.append(this.cdol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVrach_argsStandardSchemeFactory implements SchemeFactory {
      public getVrach_argsStandardScheme getScheme() {
        return new getVrach_argsStandardScheme();
      }
    }

    private static class getVrach_argsStandardScheme extends StandardScheme<getVrach_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVrach_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CPOL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cpol = iprot.readI32();
                struct.setCpolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CDOL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cdol = iprot.readString();
                struct.setCdolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVrach_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CPOL_FIELD_DESC);
        oprot.writeI32(struct.cpol);
        oprot.writeFieldEnd();
        if (struct.cdol != null) {
          oprot.writeFieldBegin(CDOL_FIELD_DESC);
          oprot.writeString(struct.cdol);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVrach_argsTupleSchemeFactory implements SchemeFactory {
      public getVrach_argsTupleScheme getScheme() {
        return new getVrach_argsTupleScheme();
      }
    }

    private static class getVrach_argsTupleScheme extends TupleScheme<getVrach_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCpol()) {
          optionals.set(0);
        }
        if (struct.isSetCdol()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCpol()) {
          oprot.writeI32(struct.cpol);
        }
        if (struct.isSetCdol()) {
          oprot.writeString(struct.cdol);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cpol = iprot.readI32();
          struct.setCpolIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cdol = iprot.readString();
          struct.setCdolIsSet(true);
        }
      }
    }

  }

  public static class getVrach_result implements org.apache.thrift.TBase<getVrach_result, getVrach_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVrach_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VNFE_FIELD_DESC = new org.apache.thrift.protocol.TField("vnfe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVrach_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVrach_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required
    public VrachNotFoundException vnfe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse"),
      VNFE((short)2, "vnfe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          case 2: // VNFE
            return VNFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier.class))));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.VNFE, new org.apache.thrift.meta_data.FieldMetaData("vnfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVrach_result.class, metaDataMap);
    }

    public getVrach_result() {
    }

    public getVrach_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse,
      VrachNotFoundException vnfe)
    {
      this();
      this.success = success;
      this.kse = kse;
      this.vnfe = vnfe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVrach_result(getVrach_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
      if (other.isSetVnfe()) {
        this.vnfe = new VrachNotFoundException(other.vnfe);
      }
    }

    public getVrach_result deepCopy() {
      return new getVrach_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
      this.vnfe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccess() {
      return this.success;
    }

    public getVrach_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getVrach_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public VrachNotFoundException getVnfe() {
      return this.vnfe;
    }

    public getVrach_result setVnfe(VrachNotFoundException vnfe) {
      this.vnfe = vnfe;
      return this;
    }

    public void unsetVnfe() {
      this.vnfe = null;
    }

    /** Returns true if field vnfe is set (has been assigned a value) and false otherwise */
    public boolean isSetVnfe() {
      return this.vnfe != null;
    }

    public void setVnfeIsSet(boolean value) {
      if (!value) {
        this.vnfe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      case VNFE:
        if (value == null) {
          unsetVnfe();
        } else {
          setVnfe((VrachNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      case VNFE:
        return getVnfe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      case VNFE:
        return isSetVnfe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVrach_result)
        return this.equals((getVrach_result)that);
      return false;
    }

    public boolean equals(getVrach_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      boolean this_present_vnfe = true && this.isSetVnfe();
      boolean that_present_vnfe = true && that.isSetVnfe();
      if (this_present_vnfe || that_present_vnfe) {
        if (!(this_present_vnfe && that_present_vnfe))
          return false;
        if (!this.vnfe.equals(that.vnfe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getVrach_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getVrach_result typedOther = (getVrach_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVnfe()).compareTo(typedOther.isSetVnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVnfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vnfe, typedOther.vnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVrach_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vnfe:");
      if (this.vnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.vnfe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVrach_resultStandardSchemeFactory implements SchemeFactory {
      public getVrach_resultStandardScheme getScheme() {
        return new getVrach_resultStandardScheme();
      }
    }

    private static class getVrach_resultStandardScheme extends StandardScheme<getVrach_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVrach_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem18; // required
                    _elem18 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VNFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vnfe = new VrachNotFoundException();
                struct.vnfe.read(iprot);
                struct.setVnfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVrach_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          if (struct.isSetSuccess()) {
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
              for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter19 : struct.success)
              {
                _iter19.write(oprot);
              }
              oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
          }
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.vnfe != null) {
          oprot.writeFieldBegin(VNFE_FIELD_DESC);
          struct.vnfe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVrach_resultTupleSchemeFactory implements SchemeFactory {
      public getVrach_resultTupleScheme getScheme() {
        return new getVrach_resultTupleScheme();
      }
    }

    private static class getVrach_resultTupleScheme extends TupleScheme<getVrach_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        if (struct.isSetVnfe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
        if (struct.isSetVnfe()) {
          struct.vnfe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem23; // required
              _elem23 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
        if (incoming.get(2)) {
          struct.vnfe = new VrachNotFoundException();
          struct.vnfe.read(iprot);
          struct.setVnfeIsSet(true);
        }
      }
    }

  }

  public static class getVidp_args implements org.apache.thrift.TBase<getVidp_args, getVidp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVidp_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVidp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVidp_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVidp_args.class, metaDataMap);
    }

    public getVidp_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVidp_args(getVidp_args other) {
    }

    public getVidp_args deepCopy() {
      return new getVidp_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVidp_args)
        return this.equals((getVidp_args)that);
      return false;
    }

    public boolean equals(getVidp_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getVidp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getVidp_args typedOther = (getVidp_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVidp_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVidp_argsStandardSchemeFactory implements SchemeFactory {
      public getVidp_argsStandardScheme getScheme() {
        return new getVidp_argsStandardScheme();
      }
    }

    private static class getVidp_argsStandardScheme extends StandardScheme<getVidp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVidp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVidp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVidp_argsTupleSchemeFactory implements SchemeFactory {
      public getVidp_argsTupleScheme getScheme() {
        return new getVidp_argsTupleScheme();
      }
    }

    private static class getVidp_argsTupleScheme extends TupleScheme<getVidp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVidp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVidp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getVidp_result implements org.apache.thrift.TBase<getVidp_result, getVidp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVidp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VNFE_FIELD_DESC = new org.apache.thrift.protocol.TField("vnfe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVidp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVidp_resultTupleSchemeFactory());
    }

    public List<Vidp> success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required
    public VidpNotFoundException vnfe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse"),
      VNFE((short)2, "vnfe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          case 2: // VNFE
            return VNFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vidp.class))));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.VNFE, new org.apache.thrift.meta_data.FieldMetaData("vnfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVidp_result.class, metaDataMap);
    }

    public getVidp_result() {
    }

    public getVidp_result(
      List<Vidp> success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse,
      VidpNotFoundException vnfe)
    {
      this();
      this.success = success;
      this.kse = kse;
      this.vnfe = vnfe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVidp_result(getVidp_result other) {
      if (other.isSetSuccess()) {
        List<Vidp> __this__success = new ArrayList<Vidp>();
        for (Vidp other_element : other.success) {
          __this__success.add(new Vidp(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
      if (other.isSetVnfe()) {
        this.vnfe = new VidpNotFoundException(other.vnfe);
      }
    }

    public getVidp_result deepCopy() {
      return new getVidp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
      this.vnfe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vidp> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vidp elem) {
      if (this.success == null) {
        this.success = new ArrayList<Vidp>();
      }
      this.success.add(elem);
    }

    public List<Vidp> getSuccess() {
      return this.success;
    }

    public getVidp_result setSuccess(List<Vidp> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getVidp_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public VidpNotFoundException getVnfe() {
      return this.vnfe;
    }

    public getVidp_result setVnfe(VidpNotFoundException vnfe) {
      this.vnfe = vnfe;
      return this;
    }

    public void unsetVnfe() {
      this.vnfe = null;
    }

    /** Returns true if field vnfe is set (has been assigned a value) and false otherwise */
    public boolean isSetVnfe() {
      return this.vnfe != null;
    }

    public void setVnfeIsSet(boolean value) {
      if (!value) {
        this.vnfe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Vidp>)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      case VNFE:
        if (value == null) {
          unsetVnfe();
        } else {
          setVnfe((VidpNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      case VNFE:
        return getVnfe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      case VNFE:
        return isSetVnfe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVidp_result)
        return this.equals((getVidp_result)that);
      return false;
    }

    public boolean equals(getVidp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      boolean this_present_vnfe = true && this.isSetVnfe();
      boolean that_present_vnfe = true && that.isSetVnfe();
      if (this_present_vnfe || that_present_vnfe) {
        if (!(this_present_vnfe && that_present_vnfe))
          return false;
        if (!this.vnfe.equals(that.vnfe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getVidp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getVidp_result typedOther = (getVidp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVnfe()).compareTo(typedOther.isSetVnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVnfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vnfe, typedOther.vnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVidp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vnfe:");
      if (this.vnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.vnfe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVidp_resultStandardSchemeFactory implements SchemeFactory {
      public getVidp_resultStandardScheme getScheme() {
        return new getVidp_resultStandardScheme();
      }
    }

    private static class getVidp_resultStandardScheme extends StandardScheme<getVidp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVidp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<Vidp>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    Vidp _elem26; // required
                    _elem26 = new Vidp();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VNFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vnfe = new VidpNotFoundException();
                struct.vnfe.read(iprot);
                struct.setVnfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVidp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          if (struct.isSetSuccess()) {
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
              for (Vidp _iter27 : struct.success)
              {
                _iter27.write(oprot);
              }
              oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
          }
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.vnfe != null) {
          oprot.writeFieldBegin(VNFE_FIELD_DESC);
          struct.vnfe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVidp_resultTupleSchemeFactory implements SchemeFactory {
      public getVidp_resultTupleScheme getScheme() {
        return new getVidp_resultTupleScheme();
      }
    }

    private static class getVidp_resultTupleScheme extends TupleScheme<getVidp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVidp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        if (struct.isSetVnfe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vidp _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
        if (struct.isSetVnfe()) {
          struct.vnfe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVidp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Vidp>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              Vidp _elem31; // required
              _elem31 = new Vidp();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
        if (incoming.get(2)) {
          struct.vnfe = new VidpNotFoundException();
          struct.vnfe.read(iprot);
          struct.setVnfeIsSet(true);
        }
      }
    }

  }

  public static class getTalon_args implements org.apache.thrift.TBase<getTalon_args, getTalon_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalon_args");

    private static final org.apache.thrift.protocol.TField CPOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cpol", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CDOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cdol", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("pcod", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTalon_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTalon_argsTupleSchemeFactory());
    }

    public int cpol; // required
    public String cdol; // required
    public int pcod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CPOL((short)1, "cpol"),
      CDOL((short)2, "cdol"),
      PCOD((short)3, "pcod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CPOL
            return CPOL;
          case 2: // CDOL
            return CDOL;
          case 3: // PCOD
            return PCOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CPOL_ISSET_ID = 0;
    private static final int __PCOD_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CPOL, new org.apache.thrift.meta_data.FieldMetaData("cpol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CDOL, new org.apache.thrift.meta_data.FieldMetaData("cdol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PCOD, new org.apache.thrift.meta_data.FieldMetaData("pcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalon_args.class, metaDataMap);
    }

    public getTalon_args() {
    }

    public getTalon_args(
      int cpol,
      String cdol,
      int pcod)
    {
      this();
      this.cpol = cpol;
      setCpolIsSet(true);
      this.cdol = cdol;
      this.pcod = pcod;
      setPcodIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTalon_args(getTalon_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.cpol = other.cpol;
      if (other.isSetCdol()) {
        this.cdol = other.cdol;
      }
      this.pcod = other.pcod;
    }

    public getTalon_args deepCopy() {
      return new getTalon_args(this);
    }

    @Override
    public void clear() {
      setCpolIsSet(false);
      this.cpol = 0;
      this.cdol = null;
      setPcodIsSet(false);
      this.pcod = 0;
    }

    public int getCpol() {
      return this.cpol;
    }

    public getTalon_args setCpol(int cpol) {
      this.cpol = cpol;
      setCpolIsSet(true);
      return this;
    }

    public void unsetCpol() {
      __isset_bit_vector.clear(__CPOL_ISSET_ID);
    }

    /** Returns true if field cpol is set (has been assigned a value) and false otherwise */
    public boolean isSetCpol() {
      return __isset_bit_vector.get(__CPOL_ISSET_ID);
    }

    public void setCpolIsSet(boolean value) {
      __isset_bit_vector.set(__CPOL_ISSET_ID, value);
    }

    public String getCdol() {
      return this.cdol;
    }

    public getTalon_args setCdol(String cdol) {
      this.cdol = cdol;
      return this;
    }

    public void unsetCdol() {
      this.cdol = null;
    }

    /** Returns true if field cdol is set (has been assigned a value) and false otherwise */
    public boolean isSetCdol() {
      return this.cdol != null;
    }

    public void setCdolIsSet(boolean value) {
      if (!value) {
        this.cdol = null;
      }
    }

    public int getPcod() {
      return this.pcod;
    }

    public getTalon_args setPcod(int pcod) {
      this.pcod = pcod;
      setPcodIsSet(true);
      return this;
    }

    public void unsetPcod() {
      __isset_bit_vector.clear(__PCOD_ISSET_ID);
    }

    /** Returns true if field pcod is set (has been assigned a value) and false otherwise */
    public boolean isSetPcod() {
      return __isset_bit_vector.get(__PCOD_ISSET_ID);
    }

    public void setPcodIsSet(boolean value) {
      __isset_bit_vector.set(__PCOD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CPOL:
        if (value == null) {
          unsetCpol();
        } else {
          setCpol((Integer)value);
        }
        break;

      case CDOL:
        if (value == null) {
          unsetCdol();
        } else {
          setCdol((String)value);
        }
        break;

      case PCOD:
        if (value == null) {
          unsetPcod();
        } else {
          setPcod((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CPOL:
        return Integer.valueOf(getCpol());

      case CDOL:
        return getCdol();

      case PCOD:
        return Integer.valueOf(getPcod());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CPOL:
        return isSetCpol();
      case CDOL:
        return isSetCdol();
      case PCOD:
        return isSetPcod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTalon_args)
        return this.equals((getTalon_args)that);
      return false;
    }

    public boolean equals(getTalon_args that) {
      if (that == null)
        return false;

      boolean this_present_cpol = true;
      boolean that_present_cpol = true;
      if (this_present_cpol || that_present_cpol) {
        if (!(this_present_cpol && that_present_cpol))
          return false;
        if (this.cpol != that.cpol)
          return false;
      }

      boolean this_present_cdol = true && this.isSetCdol();
      boolean that_present_cdol = true && that.isSetCdol();
      if (this_present_cdol || that_present_cdol) {
        if (!(this_present_cdol && that_present_cdol))
          return false;
        if (!this.cdol.equals(that.cdol))
          return false;
      }

      boolean this_present_pcod = true;
      boolean that_present_pcod = true;
      if (this_present_pcod || that_present_pcod) {
        if (!(this_present_pcod && that_present_pcod))
          return false;
        if (this.pcod != that.pcod)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTalon_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTalon_args typedOther = (getTalon_args)other;

      lastComparison = Boolean.valueOf(isSetCpol()).compareTo(typedOther.isSetCpol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCpol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpol, typedOther.cpol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCdol()).compareTo(typedOther.isSetCdol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCdol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdol, typedOther.cdol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPcod()).compareTo(typedOther.isSetPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcod, typedOther.pcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTalon_args(");
      boolean first = true;

      sb.append("cpol:");
      sb.append(this.cpol);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cdol:");
      if (this.cdol == null) {
        sb.append("null");
      } else {
        sb.append(this.cdol);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pcod:");
      sb.append(this.pcod);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTalon_argsStandardSchemeFactory implements SchemeFactory {
      public getTalon_argsStandardScheme getScheme() {
        return new getTalon_argsStandardScheme();
      }
    }

    private static class getTalon_argsStandardScheme extends StandardScheme<getTalon_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTalon_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CPOL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cpol = iprot.readI32();
                struct.setCpolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CDOL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cdol = iprot.readString();
                struct.setCdolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pcod = iprot.readI32();
                struct.setPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTalon_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CPOL_FIELD_DESC);
        oprot.writeI32(struct.cpol);
        oprot.writeFieldEnd();
        if (struct.cdol != null) {
          oprot.writeFieldBegin(CDOL_FIELD_DESC);
          oprot.writeString(struct.cdol);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PCOD_FIELD_DESC);
        oprot.writeI32(struct.pcod);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTalon_argsTupleSchemeFactory implements SchemeFactory {
      public getTalon_argsTupleScheme getScheme() {
        return new getTalon_argsTupleScheme();
      }
    }

    private static class getTalon_argsTupleScheme extends TupleScheme<getTalon_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTalon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCpol()) {
          optionals.set(0);
        }
        if (struct.isSetCdol()) {
          optionals.set(1);
        }
        if (struct.isSetPcod()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCpol()) {
          oprot.writeI32(struct.cpol);
        }
        if (struct.isSetCdol()) {
          oprot.writeString(struct.cdol);
        }
        if (struct.isSetPcod()) {
          oprot.writeI32(struct.pcod);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTalon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cpol = iprot.readI32();
          struct.setCpolIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cdol = iprot.readString();
          struct.setCdolIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pcod = iprot.readI32();
          struct.setPcodIsSet(true);
        }
      }
    }

  }

  public static class getTalon_result implements org.apache.thrift.TBase<getTalon_result, getTalon_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTalon_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TNFE_FIELD_DESC = new org.apache.thrift.protocol.TField("tnfe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTalon_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTalon_resultTupleSchemeFactory());
    }

    public List<Talon> success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required
    public TalonNotFoundException tnfe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse"),
      TNFE((short)2, "tnfe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          case 2: // TNFE
            return TNFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Talon.class))));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TNFE, new org.apache.thrift.meta_data.FieldMetaData("tnfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTalon_result.class, metaDataMap);
    }

    public getTalon_result() {
    }

    public getTalon_result(
      List<Talon> success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse,
      TalonNotFoundException tnfe)
    {
      this();
      this.success = success;
      this.kse = kse;
      this.tnfe = tnfe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTalon_result(getTalon_result other) {
      if (other.isSetSuccess()) {
        List<Talon> __this__success = new ArrayList<Talon>();
        for (Talon other_element : other.success) {
          __this__success.add(new Talon(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
      if (other.isSetTnfe()) {
        this.tnfe = new TalonNotFoundException(other.tnfe);
      }
    }

    public getTalon_result deepCopy() {
      return new getTalon_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
      this.tnfe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Talon> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Talon elem) {
      if (this.success == null) {
        this.success = new ArrayList<Talon>();
      }
      this.success.add(elem);
    }

    public List<Talon> getSuccess() {
      return this.success;
    }

    public getTalon_result setSuccess(List<Talon> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getTalon_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public TalonNotFoundException getTnfe() {
      return this.tnfe;
    }

    public getTalon_result setTnfe(TalonNotFoundException tnfe) {
      this.tnfe = tnfe;
      return this;
    }

    public void unsetTnfe() {
      this.tnfe = null;
    }

    /** Returns true if field tnfe is set (has been assigned a value) and false otherwise */
    public boolean isSetTnfe() {
      return this.tnfe != null;
    }

    public void setTnfeIsSet(boolean value) {
      if (!value) {
        this.tnfe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Talon>)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      case TNFE:
        if (value == null) {
          unsetTnfe();
        } else {
          setTnfe((TalonNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      case TNFE:
        return getTnfe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      case TNFE:
        return isSetTnfe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTalon_result)
        return this.equals((getTalon_result)that);
      return false;
    }

    public boolean equals(getTalon_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      boolean this_present_tnfe = true && this.isSetTnfe();
      boolean that_present_tnfe = true && that.isSetTnfe();
      if (this_present_tnfe || that_present_tnfe) {
        if (!(this_present_tnfe && that_present_tnfe))
          return false;
        if (!this.tnfe.equals(that.tnfe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getTalon_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getTalon_result typedOther = (getTalon_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTnfe()).compareTo(typedOther.isSetTnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTnfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tnfe, typedOther.tnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTalon_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tnfe:");
      if (this.tnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.tnfe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTalon_resultStandardSchemeFactory implements SchemeFactory {
      public getTalon_resultStandardScheme getScheme() {
        return new getTalon_resultStandardScheme();
      }
    }

    private static class getTalon_resultStandardScheme extends StandardScheme<getTalon_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTalon_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<Talon>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    Talon _elem34; // required
                    _elem34 = new Talon();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TNFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tnfe = new TalonNotFoundException();
                struct.tnfe.read(iprot);
                struct.setTnfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTalon_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          if (struct.isSetSuccess()) {
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
              for (Talon _iter35 : struct.success)
              {
                _iter35.write(oprot);
              }
              oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
          }
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tnfe != null) {
          oprot.writeFieldBegin(TNFE_FIELD_DESC);
          struct.tnfe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTalon_resultTupleSchemeFactory implements SchemeFactory {
      public getTalon_resultTupleScheme getScheme() {
        return new getTalon_resultTupleScheme();
      }
    }

    private static class getTalon_resultTupleScheme extends TupleScheme<getTalon_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTalon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        if (struct.isSetTnfe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Talon _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
        if (struct.isSetTnfe()) {
          struct.tnfe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTalon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Talon>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              Talon _elem39; // required
              _elem39 = new Talon();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tnfe = new TalonNotFoundException();
          struct.tnfe.read(iprot);
          struct.setTnfeIsSet(true);
        }
      }
    }

  }

  public static class getReservedTalons_args implements org.apache.thrift.TBase<getReservedTalons_args, getReservedTalons_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReservedTalons_args");

    private static final org.apache.thrift.protocol.TField CPOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cpol", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CDOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cdol", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DOCTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("doctorId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patientId", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReservedTalons_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReservedTalons_argsTupleSchemeFactory());
    }

    public int cpol; // required
    public String cdol; // required
    public int doctorId; // required
    public int patientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CPOL((short)1, "cpol"),
      CDOL((short)2, "cdol"),
      DOCTOR_ID((short)3, "doctorId"),
      PATIENT_ID((short)4, "patientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CPOL
            return CPOL;
          case 2: // CDOL
            return CDOL;
          case 3: // DOCTOR_ID
            return DOCTOR_ID;
          case 4: // PATIENT_ID
            return PATIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CPOL_ISSET_ID = 0;
    private static final int __DOCTORID_ISSET_ID = 1;
    private static final int __PATIENTID_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CPOL, new org.apache.thrift.meta_data.FieldMetaData("cpol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CDOL, new org.apache.thrift.meta_data.FieldMetaData("cdol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOCTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("doctorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReservedTalons_args.class, metaDataMap);
    }

    public getReservedTalons_args() {
    }

    public getReservedTalons_args(
      int cpol,
      String cdol,
      int doctorId,
      int patientId)
    {
      this();
      this.cpol = cpol;
      setCpolIsSet(true);
      this.cdol = cdol;
      this.doctorId = doctorId;
      setDoctorIdIsSet(true);
      this.patientId = patientId;
      setPatientIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReservedTalons_args(getReservedTalons_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.cpol = other.cpol;
      if (other.isSetCdol()) {
        this.cdol = other.cdol;
      }
      this.doctorId = other.doctorId;
      this.patientId = other.patientId;
    }

    public getReservedTalons_args deepCopy() {
      return new getReservedTalons_args(this);
    }

    @Override
    public void clear() {
      setCpolIsSet(false);
      this.cpol = 0;
      this.cdol = null;
      setDoctorIdIsSet(false);
      this.doctorId = 0;
      setPatientIdIsSet(false);
      this.patientId = 0;
    }

    public int getCpol() {
      return this.cpol;
    }

    public getReservedTalons_args setCpol(int cpol) {
      this.cpol = cpol;
      setCpolIsSet(true);
      return this;
    }

    public void unsetCpol() {
      __isset_bit_vector.clear(__CPOL_ISSET_ID);
    }

    /** Returns true if field cpol is set (has been assigned a value) and false otherwise */
    public boolean isSetCpol() {
      return __isset_bit_vector.get(__CPOL_ISSET_ID);
    }

    public void setCpolIsSet(boolean value) {
      __isset_bit_vector.set(__CPOL_ISSET_ID, value);
    }

    public String getCdol() {
      return this.cdol;
    }

    public getReservedTalons_args setCdol(String cdol) {
      this.cdol = cdol;
      return this;
    }

    public void unsetCdol() {
      this.cdol = null;
    }

    /** Returns true if field cdol is set (has been assigned a value) and false otherwise */
    public boolean isSetCdol() {
      return this.cdol != null;
    }

    public void setCdolIsSet(boolean value) {
      if (!value) {
        this.cdol = null;
      }
    }

    public int getDoctorId() {
      return this.doctorId;
    }

    public getReservedTalons_args setDoctorId(int doctorId) {
      this.doctorId = doctorId;
      setDoctorIdIsSet(true);
      return this;
    }

    public void unsetDoctorId() {
      __isset_bit_vector.clear(__DOCTORID_ISSET_ID);
    }

    /** Returns true if field doctorId is set (has been assigned a value) and false otherwise */
    public boolean isSetDoctorId() {
      return __isset_bit_vector.get(__DOCTORID_ISSET_ID);
    }

    public void setDoctorIdIsSet(boolean value) {
      __isset_bit_vector.set(__DOCTORID_ISSET_ID, value);
    }

    public int getPatientId() {
      return this.patientId;
    }

    public getReservedTalons_args setPatientId(int patientId) {
      this.patientId = patientId;
      setPatientIdIsSet(true);
      return this;
    }

    public void unsetPatientId() {
      __isset_bit_vector.clear(__PATIENTID_ISSET_ID);
    }

    /** Returns true if field patientId is set (has been assigned a value) and false otherwise */
    public boolean isSetPatientId() {
      return __isset_bit_vector.get(__PATIENTID_ISSET_ID);
    }

    public void setPatientIdIsSet(boolean value) {
      __isset_bit_vector.set(__PATIENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CPOL:
        if (value == null) {
          unsetCpol();
        } else {
          setCpol((Integer)value);
        }
        break;

      case CDOL:
        if (value == null) {
          unsetCdol();
        } else {
          setCdol((String)value);
        }
        break;

      case DOCTOR_ID:
        if (value == null) {
          unsetDoctorId();
        } else {
          setDoctorId((Integer)value);
        }
        break;

      case PATIENT_ID:
        if (value == null) {
          unsetPatientId();
        } else {
          setPatientId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CPOL:
        return Integer.valueOf(getCpol());

      case CDOL:
        return getCdol();

      case DOCTOR_ID:
        return Integer.valueOf(getDoctorId());

      case PATIENT_ID:
        return Integer.valueOf(getPatientId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CPOL:
        return isSetCpol();
      case CDOL:
        return isSetCdol();
      case DOCTOR_ID:
        return isSetDoctorId();
      case PATIENT_ID:
        return isSetPatientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReservedTalons_args)
        return this.equals((getReservedTalons_args)that);
      return false;
    }

    public boolean equals(getReservedTalons_args that) {
      if (that == null)
        return false;

      boolean this_present_cpol = true;
      boolean that_present_cpol = true;
      if (this_present_cpol || that_present_cpol) {
        if (!(this_present_cpol && that_present_cpol))
          return false;
        if (this.cpol != that.cpol)
          return false;
      }

      boolean this_present_cdol = true && this.isSetCdol();
      boolean that_present_cdol = true && that.isSetCdol();
      if (this_present_cdol || that_present_cdol) {
        if (!(this_present_cdol && that_present_cdol))
          return false;
        if (!this.cdol.equals(that.cdol))
          return false;
      }

      boolean this_present_doctorId = true;
      boolean that_present_doctorId = true;
      if (this_present_doctorId || that_present_doctorId) {
        if (!(this_present_doctorId && that_present_doctorId))
          return false;
        if (this.doctorId != that.doctorId)
          return false;
      }

      boolean this_present_patientId = true;
      boolean that_present_patientId = true;
      if (this_present_patientId || that_present_patientId) {
        if (!(this_present_patientId && that_present_patientId))
          return false;
        if (this.patientId != that.patientId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getReservedTalons_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getReservedTalons_args typedOther = (getReservedTalons_args)other;

      lastComparison = Boolean.valueOf(isSetCpol()).compareTo(typedOther.isSetCpol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCpol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpol, typedOther.cpol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCdol()).compareTo(typedOther.isSetCdol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCdol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdol, typedOther.cdol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDoctorId()).compareTo(typedOther.isSetDoctorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDoctorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctorId, typedOther.doctorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPatientId()).compareTo(typedOther.isSetPatientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPatientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientId, typedOther.patientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReservedTalons_args(");
      boolean first = true;

      sb.append("cpol:");
      sb.append(this.cpol);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cdol:");
      if (this.cdol == null) {
        sb.append("null");
      } else {
        sb.append(this.cdol);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("doctorId:");
      sb.append(this.doctorId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("patientId:");
      sb.append(this.patientId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReservedTalons_argsStandardSchemeFactory implements SchemeFactory {
      public getReservedTalons_argsStandardScheme getScheme() {
        return new getReservedTalons_argsStandardScheme();
      }
    }

    private static class getReservedTalons_argsStandardScheme extends StandardScheme<getReservedTalons_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReservedTalons_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CPOL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cpol = iprot.readI32();
                struct.setCpolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CDOL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cdol = iprot.readString();
                struct.setCdolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DOCTOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.doctorId = iprot.readI32();
                struct.setDoctorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PATIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.patientId = iprot.readI32();
                struct.setPatientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReservedTalons_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CPOL_FIELD_DESC);
        oprot.writeI32(struct.cpol);
        oprot.writeFieldEnd();
        if (struct.cdol != null) {
          oprot.writeFieldBegin(CDOL_FIELD_DESC);
          oprot.writeString(struct.cdol);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DOCTOR_ID_FIELD_DESC);
        oprot.writeI32(struct.doctorId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
        oprot.writeI32(struct.patientId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReservedTalons_argsTupleSchemeFactory implements SchemeFactory {
      public getReservedTalons_argsTupleScheme getScheme() {
        return new getReservedTalons_argsTupleScheme();
      }
    }

    private static class getReservedTalons_argsTupleScheme extends TupleScheme<getReservedTalons_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReservedTalons_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCpol()) {
          optionals.set(0);
        }
        if (struct.isSetCdol()) {
          optionals.set(1);
        }
        if (struct.isSetDoctorId()) {
          optionals.set(2);
        }
        if (struct.isSetPatientId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCpol()) {
          oprot.writeI32(struct.cpol);
        }
        if (struct.isSetCdol()) {
          oprot.writeString(struct.cdol);
        }
        if (struct.isSetDoctorId()) {
          oprot.writeI32(struct.doctorId);
        }
        if (struct.isSetPatientId()) {
          oprot.writeI32(struct.patientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReservedTalons_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cpol = iprot.readI32();
          struct.setCpolIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cdol = iprot.readString();
          struct.setCdolIsSet(true);
        }
        if (incoming.get(2)) {
          struct.doctorId = iprot.readI32();
          struct.setDoctorIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.patientId = iprot.readI32();
          struct.setPatientIdIsSet(true);
        }
      }
    }

  }

  public static class getReservedTalons_result implements org.apache.thrift.TBase<getReservedTalons_result, getReservedTalons_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReservedTalons_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TNFE_FIELD_DESC = new org.apache.thrift.protocol.TField("tnfe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReservedTalons_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReservedTalons_resultTupleSchemeFactory());
    }

    public List<Talon> success; // required
    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required
    public TalonNotFoundException tnfe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      KSE((short)1, "kse"),
      TNFE((short)2, "tnfe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // KSE
            return KSE;
          case 2: // TNFE
            return TNFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Talon.class))));
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TNFE, new org.apache.thrift.meta_data.FieldMetaData("tnfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReservedTalons_result.class, metaDataMap);
    }

    public getReservedTalons_result() {
    }

    public getReservedTalons_result(
      List<Talon> success,
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse,
      TalonNotFoundException tnfe)
    {
      this();
      this.success = success;
      this.kse = kse;
      this.tnfe = tnfe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReservedTalons_result(getReservedTalons_result other) {
      if (other.isSetSuccess()) {
        List<Talon> __this__success = new ArrayList<Talon>();
        for (Talon other_element : other.success) {
          __this__success.add(new Talon(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
      if (other.isSetTnfe()) {
        this.tnfe = new TalonNotFoundException(other.tnfe);
      }
    }

    public getReservedTalons_result deepCopy() {
      return new getReservedTalons_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.kse = null;
      this.tnfe = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Talon> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Talon elem) {
      if (this.success == null) {
        this.success = new ArrayList<Talon>();
      }
      this.success.add(elem);
    }

    public List<Talon> getSuccess() {
      return this.success;
    }

    public getReservedTalons_result setSuccess(List<Talon> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public getReservedTalons_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public TalonNotFoundException getTnfe() {
      return this.tnfe;
    }

    public getReservedTalons_result setTnfe(TalonNotFoundException tnfe) {
      this.tnfe = tnfe;
      return this;
    }

    public void unsetTnfe() {
      this.tnfe = null;
    }

    /** Returns true if field tnfe is set (has been assigned a value) and false otherwise */
    public boolean isSetTnfe() {
      return this.tnfe != null;
    }

    public void setTnfeIsSet(boolean value) {
      if (!value) {
        this.tnfe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Talon>)value);
        }
        break;

      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      case TNFE:
        if (value == null) {
          unsetTnfe();
        } else {
          setTnfe((TalonNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case KSE:
        return getKse();

      case TNFE:
        return getTnfe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case KSE:
        return isSetKse();
      case TNFE:
        return isSetTnfe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReservedTalons_result)
        return this.equals((getReservedTalons_result)that);
      return false;
    }

    public boolean equals(getReservedTalons_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      boolean this_present_tnfe = true && this.isSetTnfe();
      boolean that_present_tnfe = true && that.isSetTnfe();
      if (this_present_tnfe || that_present_tnfe) {
        if (!(this_present_tnfe && that_present_tnfe))
          return false;
        if (!this.tnfe.equals(that.tnfe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getReservedTalons_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getReservedTalons_result typedOther = (getReservedTalons_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTnfe()).compareTo(typedOther.isSetTnfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTnfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tnfe, typedOther.tnfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReservedTalons_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tnfe:");
      if (this.tnfe == null) {
        sb.append("null");
      } else {
        sb.append(this.tnfe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReservedTalons_resultStandardSchemeFactory implements SchemeFactory {
      public getReservedTalons_resultStandardScheme getScheme() {
        return new getReservedTalons_resultStandardScheme();
      }
    }

    private static class getReservedTalons_resultStandardScheme extends StandardScheme<getReservedTalons_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReservedTalons_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<Talon>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    Talon _elem42; // required
                    _elem42 = new Talon();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TNFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tnfe = new TalonNotFoundException();
                struct.tnfe.read(iprot);
                struct.setTnfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReservedTalons_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          if (struct.isSetSuccess()) {
            oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
              for (Talon _iter43 : struct.success)
              {
                _iter43.write(oprot);
              }
              oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
          }
        }
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tnfe != null) {
          oprot.writeFieldBegin(TNFE_FIELD_DESC);
          struct.tnfe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReservedTalons_resultTupleSchemeFactory implements SchemeFactory {
      public getReservedTalons_resultTupleScheme getScheme() {
        return new getReservedTalons_resultTupleScheme();
      }
    }

    private static class getReservedTalons_resultTupleScheme extends TupleScheme<getReservedTalons_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReservedTalons_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetKse()) {
          optionals.set(1);
        }
        if (struct.isSetTnfe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Talon _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
        if (struct.isSetTnfe()) {
          struct.tnfe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReservedTalons_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Talon>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              Talon _elem47; // required
              _elem47 = new Talon();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tnfe = new TalonNotFoundException();
          struct.tnfe.read(iprot);
          struct.setTnfeIsSet(true);
        }
      }
    }

  }

  public static class reserveTalon_args implements org.apache.thrift.TBase<reserveTalon_args, reserveTalon_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reserveTalon_args");

    private static final org.apache.thrift.protocol.TField PAT_FIELD_DESC = new org.apache.thrift.protocol.TField("pat", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TALON_FIELD_DESC = new org.apache.thrift.protocol.TField("talon", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reserveTalon_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reserveTalon_argsTupleSchemeFactory());
    }

    public Patient pat; // required
    public Talon talon; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAT((short)1, "pat"),
      TALON((short)2, "talon");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAT
            return PAT;
          case 2: // TALON
            return TALON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAT, new org.apache.thrift.meta_data.FieldMetaData("pat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Patient.class)));
      tmpMap.put(_Fields.TALON, new org.apache.thrift.meta_data.FieldMetaData("talon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Talon.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reserveTalon_args.class, metaDataMap);
    }

    public reserveTalon_args() {
    }

    public reserveTalon_args(
      Patient pat,
      Talon talon)
    {
      this();
      this.pat = pat;
      this.talon = talon;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reserveTalon_args(reserveTalon_args other) {
      if (other.isSetPat()) {
        this.pat = new Patient(other.pat);
      }
      if (other.isSetTalon()) {
        this.talon = new Talon(other.talon);
      }
    }

    public reserveTalon_args deepCopy() {
      return new reserveTalon_args(this);
    }

    @Override
    public void clear() {
      this.pat = null;
      this.talon = null;
    }

    public Patient getPat() {
      return this.pat;
    }

    public reserveTalon_args setPat(Patient pat) {
      this.pat = pat;
      return this;
    }

    public void unsetPat() {
      this.pat = null;
    }

    /** Returns true if field pat is set (has been assigned a value) and false otherwise */
    public boolean isSetPat() {
      return this.pat != null;
    }

    public void setPatIsSet(boolean value) {
      if (!value) {
        this.pat = null;
      }
    }

    public Talon getTalon() {
      return this.talon;
    }

    public reserveTalon_args setTalon(Talon talon) {
      this.talon = talon;
      return this;
    }

    public void unsetTalon() {
      this.talon = null;
    }

    /** Returns true if field talon is set (has been assigned a value) and false otherwise */
    public boolean isSetTalon() {
      return this.talon != null;
    }

    public void setTalonIsSet(boolean value) {
      if (!value) {
        this.talon = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAT:
        if (value == null) {
          unsetPat();
        } else {
          setPat((Patient)value);
        }
        break;

      case TALON:
        if (value == null) {
          unsetTalon();
        } else {
          setTalon((Talon)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAT:
        return getPat();

      case TALON:
        return getTalon();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAT:
        return isSetPat();
      case TALON:
        return isSetTalon();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reserveTalon_args)
        return this.equals((reserveTalon_args)that);
      return false;
    }

    public boolean equals(reserveTalon_args that) {
      if (that == null)
        return false;

      boolean this_present_pat = true && this.isSetPat();
      boolean that_present_pat = true && that.isSetPat();
      if (this_present_pat || that_present_pat) {
        if (!(this_present_pat && that_present_pat))
          return false;
        if (!this.pat.equals(that.pat))
          return false;
      }

      boolean this_present_talon = true && this.isSetTalon();
      boolean that_present_talon = true && that.isSetTalon();
      if (this_present_talon || that_present_talon) {
        if (!(this_present_talon && that_present_talon))
          return false;
        if (!this.talon.equals(that.talon))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(reserveTalon_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      reserveTalon_args typedOther = (reserveTalon_args)other;

      lastComparison = Boolean.valueOf(isSetPat()).compareTo(typedOther.isSetPat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pat, typedOther.pat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTalon()).compareTo(typedOther.isSetTalon());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTalon()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.talon, typedOther.talon);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reserveTalon_args(");
      boolean first = true;

      sb.append("pat:");
      if (this.pat == null) {
        sb.append("null");
      } else {
        sb.append(this.pat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("talon:");
      if (this.talon == null) {
        sb.append("null");
      } else {
        sb.append(this.talon);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reserveTalon_argsStandardSchemeFactory implements SchemeFactory {
      public reserveTalon_argsStandardScheme getScheme() {
        return new reserveTalon_argsStandardScheme();
      }
    }

    private static class reserveTalon_argsStandardScheme extends StandardScheme<reserveTalon_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reserveTalon_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pat = new Patient();
                struct.pat.read(iprot);
                struct.setPatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TALON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.talon = new Talon();
                struct.talon.read(iprot);
                struct.setTalonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reserveTalon_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pat != null) {
          oprot.writeFieldBegin(PAT_FIELD_DESC);
          struct.pat.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.talon != null) {
          oprot.writeFieldBegin(TALON_FIELD_DESC);
          struct.talon.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reserveTalon_argsTupleSchemeFactory implements SchemeFactory {
      public reserveTalon_argsTupleScheme getScheme() {
        return new reserveTalon_argsTupleScheme();
      }
    }

    private static class reserveTalon_argsTupleScheme extends TupleScheme<reserveTalon_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reserveTalon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPat()) {
          optionals.set(0);
        }
        if (struct.isSetTalon()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPat()) {
          struct.pat.write(oprot);
        }
        if (struct.isSetTalon()) {
          struct.talon.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reserveTalon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pat = new Patient();
          struct.pat.read(iprot);
          struct.setPatIsSet(true);
        }
        if (incoming.get(1)) {
          struct.talon = new Talon();
          struct.talon.read(iprot);
          struct.setTalonIsSet(true);
        }
      }
    }

  }

  public static class reserveTalon_result implements org.apache.thrift.TBase<reserveTalon_result, reserveTalon_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reserveTalon_result");

    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RTOFE_FIELD_DESC = new org.apache.thrift.protocol.TField("rtofe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reserveTalon_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reserveTalon_resultTupleSchemeFactory());
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required
    public ReserveTalonOperationFailedException rtofe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KSE((short)1, "kse"),
      RTOFE((short)2, "rtofe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KSE
            return KSE;
          case 2: // RTOFE
            return RTOFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RTOFE, new org.apache.thrift.meta_data.FieldMetaData("rtofe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reserveTalon_result.class, metaDataMap);
    }

    public reserveTalon_result() {
    }

    public reserveTalon_result(
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse,
      ReserveTalonOperationFailedException rtofe)
    {
      this();
      this.kse = kse;
      this.rtofe = rtofe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reserveTalon_result(reserveTalon_result other) {
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
      if (other.isSetRtofe()) {
        this.rtofe = new ReserveTalonOperationFailedException(other.rtofe);
      }
    }

    public reserveTalon_result deepCopy() {
      return new reserveTalon_result(this);
    }

    @Override
    public void clear() {
      this.kse = null;
      this.rtofe = null;
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public reserveTalon_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public ReserveTalonOperationFailedException getRtofe() {
      return this.rtofe;
    }

    public reserveTalon_result setRtofe(ReserveTalonOperationFailedException rtofe) {
      this.rtofe = rtofe;
      return this;
    }

    public void unsetRtofe() {
      this.rtofe = null;
    }

    /** Returns true if field rtofe is set (has been assigned a value) and false otherwise */
    public boolean isSetRtofe() {
      return this.rtofe != null;
    }

    public void setRtofeIsSet(boolean value) {
      if (!value) {
        this.rtofe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      case RTOFE:
        if (value == null) {
          unsetRtofe();
        } else {
          setRtofe((ReserveTalonOperationFailedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KSE:
        return getKse();

      case RTOFE:
        return getRtofe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KSE:
        return isSetKse();
      case RTOFE:
        return isSetRtofe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reserveTalon_result)
        return this.equals((reserveTalon_result)that);
      return false;
    }

    public boolean equals(reserveTalon_result that) {
      if (that == null)
        return false;

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      boolean this_present_rtofe = true && this.isSetRtofe();
      boolean that_present_rtofe = true && that.isSetRtofe();
      if (this_present_rtofe || that_present_rtofe) {
        if (!(this_present_rtofe && that_present_rtofe))
          return false;
        if (!this.rtofe.equals(that.rtofe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(reserveTalon_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      reserveTalon_result typedOther = (reserveTalon_result)other;

      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRtofe()).compareTo(typedOther.isSetRtofe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRtofe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtofe, typedOther.rtofe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reserveTalon_result(");
      boolean first = true;

      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rtofe:");
      if (this.rtofe == null) {
        sb.append("null");
      } else {
        sb.append(this.rtofe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reserveTalon_resultStandardSchemeFactory implements SchemeFactory {
      public reserveTalon_resultStandardScheme getScheme() {
        return new reserveTalon_resultStandardScheme();
      }
    }

    private static class reserveTalon_resultStandardScheme extends StandardScheme<reserveTalon_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reserveTalon_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RTOFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rtofe = new ReserveTalonOperationFailedException();
                struct.rtofe.read(iprot);
                struct.setRtofeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reserveTalon_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rtofe != null) {
          oprot.writeFieldBegin(RTOFE_FIELD_DESC);
          struct.rtofe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reserveTalon_resultTupleSchemeFactory implements SchemeFactory {
      public reserveTalon_resultTupleScheme getScheme() {
        return new reserveTalon_resultTupleScheme();
      }
    }

    private static class reserveTalon_resultTupleScheme extends TupleScheme<reserveTalon_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reserveTalon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKse()) {
          optionals.set(0);
        }
        if (struct.isSetRtofe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
        if (struct.isSetRtofe()) {
          struct.rtofe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reserveTalon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rtofe = new ReserveTalonOperationFailedException();
          struct.rtofe.read(iprot);
          struct.setRtofeIsSet(true);
        }
      }
    }

  }

  public static class releaseTalon_args implements org.apache.thrift.TBase<releaseTalon_args, releaseTalon_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("releaseTalon_args");

    private static final org.apache.thrift.protocol.TField TALON_FIELD_DESC = new org.apache.thrift.protocol.TField("talon", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new releaseTalon_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new releaseTalon_argsTupleSchemeFactory());
    }

    public Talon talon; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TALON((short)1, "talon");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TALON
            return TALON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TALON, new org.apache.thrift.meta_data.FieldMetaData("talon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Talon.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(releaseTalon_args.class, metaDataMap);
    }

    public releaseTalon_args() {
    }

    public releaseTalon_args(
      Talon talon)
    {
      this();
      this.talon = talon;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public releaseTalon_args(releaseTalon_args other) {
      if (other.isSetTalon()) {
        this.talon = new Talon(other.talon);
      }
    }

    public releaseTalon_args deepCopy() {
      return new releaseTalon_args(this);
    }

    @Override
    public void clear() {
      this.talon = null;
    }

    public Talon getTalon() {
      return this.talon;
    }

    public releaseTalon_args setTalon(Talon talon) {
      this.talon = talon;
      return this;
    }

    public void unsetTalon() {
      this.talon = null;
    }

    /** Returns true if field talon is set (has been assigned a value) and false otherwise */
    public boolean isSetTalon() {
      return this.talon != null;
    }

    public void setTalonIsSet(boolean value) {
      if (!value) {
        this.talon = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TALON:
        if (value == null) {
          unsetTalon();
        } else {
          setTalon((Talon)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TALON:
        return getTalon();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TALON:
        return isSetTalon();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseTalon_args)
        return this.equals((releaseTalon_args)that);
      return false;
    }

    public boolean equals(releaseTalon_args that) {
      if (that == null)
        return false;

      boolean this_present_talon = true && this.isSetTalon();
      boolean that_present_talon = true && that.isSetTalon();
      if (this_present_talon || that_present_talon) {
        if (!(this_present_talon && that_present_talon))
          return false;
        if (!this.talon.equals(that.talon))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(releaseTalon_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      releaseTalon_args typedOther = (releaseTalon_args)other;

      lastComparison = Boolean.valueOf(isSetTalon()).compareTo(typedOther.isSetTalon());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTalon()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.talon, typedOther.talon);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("releaseTalon_args(");
      boolean first = true;

      sb.append("talon:");
      if (this.talon == null) {
        sb.append("null");
      } else {
        sb.append(this.talon);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class releaseTalon_argsStandardSchemeFactory implements SchemeFactory {
      public releaseTalon_argsStandardScheme getScheme() {
        return new releaseTalon_argsStandardScheme();
      }
    }

    private static class releaseTalon_argsStandardScheme extends StandardScheme<releaseTalon_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, releaseTalon_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TALON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.talon = new Talon();
                struct.talon.read(iprot);
                struct.setTalonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, releaseTalon_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.talon != null) {
          oprot.writeFieldBegin(TALON_FIELD_DESC);
          struct.talon.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class releaseTalon_argsTupleSchemeFactory implements SchemeFactory {
      public releaseTalon_argsTupleScheme getScheme() {
        return new releaseTalon_argsTupleScheme();
      }
    }

    private static class releaseTalon_argsTupleScheme extends TupleScheme<releaseTalon_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, releaseTalon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTalon()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTalon()) {
          struct.talon.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, releaseTalon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.talon = new Talon();
          struct.talon.read(iprot);
          struct.setTalonIsSet(true);
        }
      }
    }

  }

  public static class releaseTalon_result implements org.apache.thrift.TBase<releaseTalon_result, releaseTalon_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("releaseTalon_result");

    private static final org.apache.thrift.protocol.TField KSE_FIELD_DESC = new org.apache.thrift.protocol.TField("kse", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RTOFE_FIELD_DESC = new org.apache.thrift.protocol.TField("rtofe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new releaseTalon_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new releaseTalon_resultTupleSchemeFactory());
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse; // required
    public ReleaseTalonOperationFailedException rtofe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KSE((short)1, "kse"),
      RTOFE((short)2, "rtofe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KSE
            return KSE;
          case 2: // RTOFE
            return RTOFE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KSE, new org.apache.thrift.meta_data.FieldMetaData("kse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RTOFE, new org.apache.thrift.meta_data.FieldMetaData("rtofe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(releaseTalon_result.class, metaDataMap);
    }

    public releaseTalon_result() {
    }

    public releaseTalon_result(
      ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse,
      ReleaseTalonOperationFailedException rtofe)
    {
      this();
      this.kse = kse;
      this.rtofe = rtofe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public releaseTalon_result(releaseTalon_result other) {
      if (other.isSetKse()) {
        this.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException(other.kse);
      }
      if (other.isSetRtofe()) {
        this.rtofe = new ReleaseTalonOperationFailedException(other.rtofe);
      }
    }

    public releaseTalon_result deepCopy() {
      return new releaseTalon_result(this);
    }

    @Override
    public void clear() {
      this.kse = null;
      this.rtofe = null;
    }

    public ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException getKse() {
      return this.kse;
    }

    public releaseTalon_result setKse(ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException kse) {
      this.kse = kse;
      return this;
    }

    public void unsetKse() {
      this.kse = null;
    }

    /** Returns true if field kse is set (has been assigned a value) and false otherwise */
    public boolean isSetKse() {
      return this.kse != null;
    }

    public void setKseIsSet(boolean value) {
      if (!value) {
        this.kse = null;
      }
    }

    public ReleaseTalonOperationFailedException getRtofe() {
      return this.rtofe;
    }

    public releaseTalon_result setRtofe(ReleaseTalonOperationFailedException rtofe) {
      this.rtofe = rtofe;
      return this;
    }

    public void unsetRtofe() {
      this.rtofe = null;
    }

    /** Returns true if field rtofe is set (has been assigned a value) and false otherwise */
    public boolean isSetRtofe() {
      return this.rtofe != null;
    }

    public void setRtofeIsSet(boolean value) {
      if (!value) {
        this.rtofe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KSE:
        if (value == null) {
          unsetKse();
        } else {
          setKse((ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException)value);
        }
        break;

      case RTOFE:
        if (value == null) {
          unsetRtofe();
        } else {
          setRtofe((ReleaseTalonOperationFailedException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KSE:
        return getKse();

      case RTOFE:
        return getRtofe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KSE:
        return isSetKse();
      case RTOFE:
        return isSetRtofe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseTalon_result)
        return this.equals((releaseTalon_result)that);
      return false;
    }

    public boolean equals(releaseTalon_result that) {
      if (that == null)
        return false;

      boolean this_present_kse = true && this.isSetKse();
      boolean that_present_kse = true && that.isSetKse();
      if (this_present_kse || that_present_kse) {
        if (!(this_present_kse && that_present_kse))
          return false;
        if (!this.kse.equals(that.kse))
          return false;
      }

      boolean this_present_rtofe = true && this.isSetRtofe();
      boolean that_present_rtofe = true && that.isSetRtofe();
      if (this_present_rtofe || that_present_rtofe) {
        if (!(this_present_rtofe && that_present_rtofe))
          return false;
        if (!this.rtofe.equals(that.rtofe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(releaseTalon_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      releaseTalon_result typedOther = (releaseTalon_result)other;

      lastComparison = Boolean.valueOf(isSetKse()).compareTo(typedOther.isSetKse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kse, typedOther.kse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRtofe()).compareTo(typedOther.isSetRtofe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRtofe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtofe, typedOther.rtofe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("releaseTalon_result(");
      boolean first = true;

      sb.append("kse:");
      if (this.kse == null) {
        sb.append("null");
      } else {
        sb.append(this.kse);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rtofe:");
      if (this.rtofe == null) {
        sb.append("null");
      } else {
        sb.append(this.rtofe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class releaseTalon_resultStandardSchemeFactory implements SchemeFactory {
      public releaseTalon_resultStandardScheme getScheme() {
        return new releaseTalon_resultStandardScheme();
      }
    }

    private static class releaseTalon_resultStandardScheme extends StandardScheme<releaseTalon_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, releaseTalon_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
                struct.kse.read(iprot);
                struct.setKseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RTOFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rtofe = new ReleaseTalonOperationFailedException();
                struct.rtofe.read(iprot);
                struct.setRtofeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, releaseTalon_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.kse != null) {
          oprot.writeFieldBegin(KSE_FIELD_DESC);
          struct.kse.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rtofe != null) {
          oprot.writeFieldBegin(RTOFE_FIELD_DESC);
          struct.rtofe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class releaseTalon_resultTupleSchemeFactory implements SchemeFactory {
      public releaseTalon_resultTupleScheme getScheme() {
        return new releaseTalon_resultTupleScheme();
      }
    }

    private static class releaseTalon_resultTupleScheme extends TupleScheme<releaseTalon_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, releaseTalon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKse()) {
          optionals.set(0);
        }
        if (struct.isSetRtofe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetKse()) {
          struct.kse.write(oprot);
        }
        if (struct.isSetRtofe()) {
          struct.rtofe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, releaseTalon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.kse = new ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServerException();
          struct.kse.read(iprot);
          struct.setKseIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rtofe = new ReleaseTalonOperationFailedException();
          struct.rtofe.read(iprot);
          struct.setRtofeIsSet(true);
        }
      }
    }

  }

}
