/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftRegPatient;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Address implements org.apache.thrift.TBase<Address, Address._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Address");

  private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STREET_FIELD_DESC = new org.apache.thrift.protocol.TField("street", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HOUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("house", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FLAT_FIELD_DESC = new org.apache.thrift.protocol.TField("flat", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AddressStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AddressTupleSchemeFactory());
  }

  public String region; // required
  public String city; // required
  public String street; // required
  public String house; // required
  public String flat; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REGION((short)1, "region"),
    CITY((short)2, "city"),
    STREET((short)3, "street"),
    HOUSE((short)4, "house"),
    FLAT((short)5, "flat");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REGION
          return REGION;
        case 2: // CITY
          return CITY;
        case 3: // STREET
          return STREET;
        case 4: // HOUSE
          return HOUSE;
        case 5: // FLAT
          return FLAT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STREET, new org.apache.thrift.meta_data.FieldMetaData("street", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE, new org.apache.thrift.meta_data.FieldMetaData("house", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAT, new org.apache.thrift.meta_data.FieldMetaData("flat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Address.class, metaDataMap);
  }

  public Address() {
  }

  public Address(
    String region,
    String city,
    String street,
    String house,
    String flat)
  {
    this();
    this.region = region;
    this.city = city;
    this.street = street;
    this.house = house;
    this.flat = flat;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Address(Address other) {
    if (other.isSetRegion()) {
      this.region = other.region;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetStreet()) {
      this.street = other.street;
    }
    if (other.isSetHouse()) {
      this.house = other.house;
    }
    if (other.isSetFlat()) {
      this.flat = other.flat;
    }
  }

  public Address deepCopy() {
    return new Address(this);
  }

  @Override
  public void clear() {
    this.region = null;
    this.city = null;
    this.street = null;
    this.house = null;
    this.flat = null;
  }

  public String getRegion() {
    return this.region;
  }

  public Address setRegion(String region) {
    this.region = region;
    return this;
  }

  public void unsetRegion() {
    this.region = null;
  }

  /** Returns true if field region is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion() {
    return this.region != null;
  }

  public void setRegionIsSet(boolean value) {
    if (!value) {
      this.region = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public Address setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getStreet() {
    return this.street;
  }

  public Address setStreet(String street) {
    this.street = street;
    return this;
  }

  public void unsetStreet() {
    this.street = null;
  }

  /** Returns true if field street is set (has been assigned a value) and false otherwise */
  public boolean isSetStreet() {
    return this.street != null;
  }

  public void setStreetIsSet(boolean value) {
    if (!value) {
      this.street = null;
    }
  }

  public String getHouse() {
    return this.house;
  }

  public Address setHouse(String house) {
    this.house = house;
    return this;
  }

  public void unsetHouse() {
    this.house = null;
  }

  /** Returns true if field house is set (has been assigned a value) and false otherwise */
  public boolean isSetHouse() {
    return this.house != null;
  }

  public void setHouseIsSet(boolean value) {
    if (!value) {
      this.house = null;
    }
  }

  public String getFlat() {
    return this.flat;
  }

  public Address setFlat(String flat) {
    this.flat = flat;
    return this;
  }

  public void unsetFlat() {
    this.flat = null;
  }

  /** Returns true if field flat is set (has been assigned a value) and false otherwise */
  public boolean isSetFlat() {
    return this.flat != null;
  }

  public void setFlatIsSet(boolean value) {
    if (!value) {
      this.flat = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REGION:
      if (value == null) {
        unsetRegion();
      } else {
        setRegion((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case STREET:
      if (value == null) {
        unsetStreet();
      } else {
        setStreet((String)value);
      }
      break;

    case HOUSE:
      if (value == null) {
        unsetHouse();
      } else {
        setHouse((String)value);
      }
      break;

    case FLAT:
      if (value == null) {
        unsetFlat();
      } else {
        setFlat((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REGION:
      return getRegion();

    case CITY:
      return getCity();

    case STREET:
      return getStreet();

    case HOUSE:
      return getHouse();

    case FLAT:
      return getFlat();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REGION:
      return isSetRegion();
    case CITY:
      return isSetCity();
    case STREET:
      return isSetStreet();
    case HOUSE:
      return isSetHouse();
    case FLAT:
      return isSetFlat();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Address)
      return this.equals((Address)that);
    return false;
  }

  public boolean equals(Address that) {
    if (that == null)
      return false;

    boolean this_present_region = true && this.isSetRegion();
    boolean that_present_region = true && that.isSetRegion();
    if (this_present_region || that_present_region) {
      if (!(this_present_region && that_present_region))
        return false;
      if (!this.region.equals(that.region))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_street = true && this.isSetStreet();
    boolean that_present_street = true && that.isSetStreet();
    if (this_present_street || that_present_street) {
      if (!(this_present_street && that_present_street))
        return false;
      if (!this.street.equals(that.street))
        return false;
    }

    boolean this_present_house = true && this.isSetHouse();
    boolean that_present_house = true && that.isSetHouse();
    if (this_present_house || that_present_house) {
      if (!(this_present_house && that_present_house))
        return false;
      if (!this.house.equals(that.house))
        return false;
    }

    boolean this_present_flat = true && this.isSetFlat();
    boolean that_present_flat = true && that.isSetFlat();
    if (this_present_flat || that_present_flat) {
      if (!(this_present_flat && that_present_flat))
        return false;
      if (!this.flat.equals(that.flat))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Address other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Address typedOther = (Address)other;

    lastComparison = Boolean.valueOf(isSetRegion()).compareTo(typedOther.isSetRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, typedOther.region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(typedOther.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, typedOther.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStreet()).compareTo(typedOther.isSetStreet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.street, typedOther.street);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouse()).compareTo(typedOther.isSetHouse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.house, typedOther.house);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlat()).compareTo(typedOther.isSetFlat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flat, typedOther.flat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Address(");
    boolean first = true;

    sb.append("region:");
    if (this.region == null) {
      sb.append("null");
    } else {
      sb.append(this.region);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("street:");
    if (this.street == null) {
      sb.append("null");
    } else {
      sb.append(this.street);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("house:");
    if (this.house == null) {
      sb.append("null");
    } else {
      sb.append(this.house);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flat:");
    if (this.flat == null) {
      sb.append("null");
    } else {
      sb.append(this.flat);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AddressStandardSchemeFactory implements SchemeFactory {
    public AddressStandardScheme getScheme() {
      return new AddressStandardScheme();
    }
  }

  private static class AddressStandardScheme extends StandardScheme<Address> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Address struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.region = iprot.readString();
              struct.setRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STREET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.street = iprot.readString();
              struct.setStreetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOUSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.house = iprot.readString();
              struct.setHouseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FLAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flat = iprot.readString();
              struct.setFlatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Address struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.region != null) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeString(struct.region);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      if (struct.street != null) {
        oprot.writeFieldBegin(STREET_FIELD_DESC);
        oprot.writeString(struct.street);
        oprot.writeFieldEnd();
      }
      if (struct.house != null) {
        oprot.writeFieldBegin(HOUSE_FIELD_DESC);
        oprot.writeString(struct.house);
        oprot.writeFieldEnd();
      }
      if (struct.flat != null) {
        oprot.writeFieldBegin(FLAT_FIELD_DESC);
        oprot.writeString(struct.flat);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AddressTupleSchemeFactory implements SchemeFactory {
    public AddressTupleScheme getScheme() {
      return new AddressTupleScheme();
    }
  }

  private static class AddressTupleScheme extends TupleScheme<Address> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Address struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRegion()) {
        optionals.set(0);
      }
      if (struct.isSetCity()) {
        optionals.set(1);
      }
      if (struct.isSetStreet()) {
        optionals.set(2);
      }
      if (struct.isSetHouse()) {
        optionals.set(3);
      }
      if (struct.isSetFlat()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetRegion()) {
        oprot.writeString(struct.region);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetStreet()) {
        oprot.writeString(struct.street);
      }
      if (struct.isSetHouse()) {
        oprot.writeString(struct.house);
      }
      if (struct.isSetFlat()) {
        oprot.writeString(struct.flat);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Address struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.region = iprot.readString();
        struct.setRegionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.street = iprot.readString();
        struct.setStreetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.house = iprot.readString();
        struct.setHouseIsSet(true);
      }
      if (incoming.get(4)) {
        struct.flat = iprot.readString();
        struct.setFlatIsSet(true);
      }
    }
  }

}

