/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftRegPatient;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PatientAllGosp implements org.apache.thrift.TBase<PatientAllGosp, PatientAllGosp._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PatientAllGosp");

  private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NGOSP_FIELD_DESC = new org.apache.thrift.protocol.TField("ngosp", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NIST_FIELD_DESC = new org.apache.thrift.protocol.TField("nist", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DATAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datap", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField COTD_FIELD_DESC = new org.apache.thrift.protocol.TField("cotd", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DIAG_P_FIELD_DESC = new org.apache.thrift.protocol.TField("diag_p", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField NAMED_P_FIELD_DESC = new org.apache.thrift.protocol.TField("named_p", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PatientAllGospStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PatientAllGospTupleSchemeFactory());
  }

  public int npasp; // required
  public int ngosp; // required
  public int id; // required
  public int nist; // required
  public long datap; // required
  public int cotd; // required
  public String diag_p; // required
  public String named_p; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NPASP((short)1, "npasp"),
    NGOSP((short)2, "ngosp"),
    ID((short)3, "id"),
    NIST((short)4, "nist"),
    DATAP((short)5, "datap"),
    COTD((short)6, "cotd"),
    DIAG_P((short)7, "diag_p"),
    NAMED_P((short)8, "named_p");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NPASP
          return NPASP;
        case 2: // NGOSP
          return NGOSP;
        case 3: // ID
          return ID;
        case 4: // NIST
          return NIST;
        case 5: // DATAP
          return DATAP;
        case 6: // COTD
          return COTD;
        case 7: // DIAG_P
          return DIAG_P;
        case 8: // NAMED_P
          return NAMED_P;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NPASP_ISSET_ID = 0;
  private static final int __NGOSP_ISSET_ID = 1;
  private static final int __ID_ISSET_ID = 2;
  private static final int __NIST_ISSET_ID = 3;
  private static final int __DATAP_ISSET_ID = 4;
  private static final int __COTD_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NGOSP, new org.apache.thrift.meta_data.FieldMetaData("ngosp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NIST, new org.apache.thrift.meta_data.FieldMetaData("nist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATAP, new org.apache.thrift.meta_data.FieldMetaData("datap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COTD, new org.apache.thrift.meta_data.FieldMetaData("cotd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIAG_P, new org.apache.thrift.meta_data.FieldMetaData("diag_p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAMED_P, new org.apache.thrift.meta_data.FieldMetaData("named_p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PatientAllGosp.class, metaDataMap);
  }

  public PatientAllGosp() {
  }

  public PatientAllGosp(
    int npasp,
    int ngosp,
    int id,
    int nist,
    long datap,
    int cotd,
    String diag_p,
    String named_p)
  {
    this();
    this.npasp = npasp;
    setNpaspIsSet(true);
    this.ngosp = ngosp;
    setNgospIsSet(true);
    this.id = id;
    setIdIsSet(true);
    this.nist = nist;
    setNistIsSet(true);
    this.datap = datap;
    setDatapIsSet(true);
    this.cotd = cotd;
    setCotdIsSet(true);
    this.diag_p = diag_p;
    this.named_p = named_p;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PatientAllGosp(PatientAllGosp other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.npasp = other.npasp;
    this.ngosp = other.ngosp;
    this.id = other.id;
    this.nist = other.nist;
    this.datap = other.datap;
    this.cotd = other.cotd;
    if (other.isSetDiag_p()) {
      this.diag_p = other.diag_p;
    }
    if (other.isSetNamed_p()) {
      this.named_p = other.named_p;
    }
  }

  public PatientAllGosp deepCopy() {
    return new PatientAllGosp(this);
  }

  @Override
  public void clear() {
    setNpaspIsSet(false);
    this.npasp = 0;
    setNgospIsSet(false);
    this.ngosp = 0;
    setIdIsSet(false);
    this.id = 0;
    setNistIsSet(false);
    this.nist = 0;
    setDatapIsSet(false);
    this.datap = 0;
    setCotdIsSet(false);
    this.cotd = 0;
    this.diag_p = null;
    this.named_p = null;
  }

  public int getNpasp() {
    return this.npasp;
  }

  public PatientAllGosp setNpasp(int npasp) {
    this.npasp = npasp;
    setNpaspIsSet(true);
    return this;
  }

  public void unsetNpasp() {
    __isset_bit_vector.clear(__NPASP_ISSET_ID);
  }

  /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
  public boolean isSetNpasp() {
    return __isset_bit_vector.get(__NPASP_ISSET_ID);
  }

  public void setNpaspIsSet(boolean value) {
    __isset_bit_vector.set(__NPASP_ISSET_ID, value);
  }

  public int getNgosp() {
    return this.ngosp;
  }

  public PatientAllGosp setNgosp(int ngosp) {
    this.ngosp = ngosp;
    setNgospIsSet(true);
    return this;
  }

  public void unsetNgosp() {
    __isset_bit_vector.clear(__NGOSP_ISSET_ID);
  }

  /** Returns true if field ngosp is set (has been assigned a value) and false otherwise */
  public boolean isSetNgosp() {
    return __isset_bit_vector.get(__NGOSP_ISSET_ID);
  }

  public void setNgospIsSet(boolean value) {
    __isset_bit_vector.set(__NGOSP_ISSET_ID, value);
  }

  public int getId() {
    return this.id;
  }

  public PatientAllGosp setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public int getNist() {
    return this.nist;
  }

  public PatientAllGosp setNist(int nist) {
    this.nist = nist;
    setNistIsSet(true);
    return this;
  }

  public void unsetNist() {
    __isset_bit_vector.clear(__NIST_ISSET_ID);
  }

  /** Returns true if field nist is set (has been assigned a value) and false otherwise */
  public boolean isSetNist() {
    return __isset_bit_vector.get(__NIST_ISSET_ID);
  }

  public void setNistIsSet(boolean value) {
    __isset_bit_vector.set(__NIST_ISSET_ID, value);
  }

  public long getDatap() {
    return this.datap;
  }

  public PatientAllGosp setDatap(long datap) {
    this.datap = datap;
    setDatapIsSet(true);
    return this;
  }

  public void unsetDatap() {
    __isset_bit_vector.clear(__DATAP_ISSET_ID);
  }

  /** Returns true if field datap is set (has been assigned a value) and false otherwise */
  public boolean isSetDatap() {
    return __isset_bit_vector.get(__DATAP_ISSET_ID);
  }

  public void setDatapIsSet(boolean value) {
    __isset_bit_vector.set(__DATAP_ISSET_ID, value);
  }

  public int getCotd() {
    return this.cotd;
  }

  public PatientAllGosp setCotd(int cotd) {
    this.cotd = cotd;
    setCotdIsSet(true);
    return this;
  }

  public void unsetCotd() {
    __isset_bit_vector.clear(__COTD_ISSET_ID);
  }

  /** Returns true if field cotd is set (has been assigned a value) and false otherwise */
  public boolean isSetCotd() {
    return __isset_bit_vector.get(__COTD_ISSET_ID);
  }

  public void setCotdIsSet(boolean value) {
    __isset_bit_vector.set(__COTD_ISSET_ID, value);
  }

  public String getDiag_p() {
    return this.diag_p;
  }

  public PatientAllGosp setDiag_p(String diag_p) {
    this.diag_p = diag_p;
    return this;
  }

  public void unsetDiag_p() {
    this.diag_p = null;
  }

  /** Returns true if field diag_p is set (has been assigned a value) and false otherwise */
  public boolean isSetDiag_p() {
    return this.diag_p != null;
  }

  public void setDiag_pIsSet(boolean value) {
    if (!value) {
      this.diag_p = null;
    }
  }

  public String getNamed_p() {
    return this.named_p;
  }

  public PatientAllGosp setNamed_p(String named_p) {
    this.named_p = named_p;
    return this;
  }

  public void unsetNamed_p() {
    this.named_p = null;
  }

  /** Returns true if field named_p is set (has been assigned a value) and false otherwise */
  public boolean isSetNamed_p() {
    return this.named_p != null;
  }

  public void setNamed_pIsSet(boolean value) {
    if (!value) {
      this.named_p = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NPASP:
      if (value == null) {
        unsetNpasp();
      } else {
        setNpasp((Integer)value);
      }
      break;

    case NGOSP:
      if (value == null) {
        unsetNgosp();
      } else {
        setNgosp((Integer)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NIST:
      if (value == null) {
        unsetNist();
      } else {
        setNist((Integer)value);
      }
      break;

    case DATAP:
      if (value == null) {
        unsetDatap();
      } else {
        setDatap((Long)value);
      }
      break;

    case COTD:
      if (value == null) {
        unsetCotd();
      } else {
        setCotd((Integer)value);
      }
      break;

    case DIAG_P:
      if (value == null) {
        unsetDiag_p();
      } else {
        setDiag_p((String)value);
      }
      break;

    case NAMED_P:
      if (value == null) {
        unsetNamed_p();
      } else {
        setNamed_p((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NPASP:
      return Integer.valueOf(getNpasp());

    case NGOSP:
      return Integer.valueOf(getNgosp());

    case ID:
      return Integer.valueOf(getId());

    case NIST:
      return Integer.valueOf(getNist());

    case DATAP:
      return Long.valueOf(getDatap());

    case COTD:
      return Integer.valueOf(getCotd());

    case DIAG_P:
      return getDiag_p();

    case NAMED_P:
      return getNamed_p();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NPASP:
      return isSetNpasp();
    case NGOSP:
      return isSetNgosp();
    case ID:
      return isSetId();
    case NIST:
      return isSetNist();
    case DATAP:
      return isSetDatap();
    case COTD:
      return isSetCotd();
    case DIAG_P:
      return isSetDiag_p();
    case NAMED_P:
      return isSetNamed_p();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PatientAllGosp)
      return this.equals((PatientAllGosp)that);
    return false;
  }

  public boolean equals(PatientAllGosp that) {
    if (that == null)
      return false;

    boolean this_present_npasp = true;
    boolean that_present_npasp = true;
    if (this_present_npasp || that_present_npasp) {
      if (!(this_present_npasp && that_present_npasp))
        return false;
      if (this.npasp != that.npasp)
        return false;
    }

    boolean this_present_ngosp = true;
    boolean that_present_ngosp = true;
    if (this_present_ngosp || that_present_ngosp) {
      if (!(this_present_ngosp && that_present_ngosp))
        return false;
      if (this.ngosp != that.ngosp)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_nist = true;
    boolean that_present_nist = true;
    if (this_present_nist || that_present_nist) {
      if (!(this_present_nist && that_present_nist))
        return false;
      if (this.nist != that.nist)
        return false;
    }

    boolean this_present_datap = true;
    boolean that_present_datap = true;
    if (this_present_datap || that_present_datap) {
      if (!(this_present_datap && that_present_datap))
        return false;
      if (this.datap != that.datap)
        return false;
    }

    boolean this_present_cotd = true;
    boolean that_present_cotd = true;
    if (this_present_cotd || that_present_cotd) {
      if (!(this_present_cotd && that_present_cotd))
        return false;
      if (this.cotd != that.cotd)
        return false;
    }

    boolean this_present_diag_p = true && this.isSetDiag_p();
    boolean that_present_diag_p = true && that.isSetDiag_p();
    if (this_present_diag_p || that_present_diag_p) {
      if (!(this_present_diag_p && that_present_diag_p))
        return false;
      if (!this.diag_p.equals(that.diag_p))
        return false;
    }

    boolean this_present_named_p = true && this.isSetNamed_p();
    boolean that_present_named_p = true && that.isSetNamed_p();
    if (this_present_named_p || that_present_named_p) {
      if (!(this_present_named_p && that_present_named_p))
        return false;
      if (!this.named_p.equals(that.named_p))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PatientAllGosp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PatientAllGosp typedOther = (PatientAllGosp)other;

    lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNpasp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNgosp()).compareTo(typedOther.isSetNgosp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNgosp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ngosp, typedOther.ngosp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNist()).compareTo(typedOther.isSetNist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nist, typedOther.nist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatap()).compareTo(typedOther.isSetDatap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datap, typedOther.datap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCotd()).compareTo(typedOther.isSetCotd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCotd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cotd, typedOther.cotd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiag_p()).compareTo(typedOther.isSetDiag_p());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiag_p()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diag_p, typedOther.diag_p);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNamed_p()).compareTo(typedOther.isSetNamed_p());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNamed_p()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.named_p, typedOther.named_p);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PatientAllGosp(");
    boolean first = true;

    sb.append("npasp:");
    sb.append(this.npasp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ngosp:");
    sb.append(this.ngosp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nist:");
    sb.append(this.nist);
    first = false;
    if (!first) sb.append(", ");
    sb.append("datap:");
    sb.append(this.datap);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cotd:");
    sb.append(this.cotd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("diag_p:");
    if (this.diag_p == null) {
      sb.append("null");
    } else {
      sb.append(this.diag_p);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("named_p:");
    if (this.named_p == null) {
      sb.append("null");
    } else {
      sb.append(this.named_p);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PatientAllGospStandardSchemeFactory implements SchemeFactory {
    public PatientAllGospStandardScheme getScheme() {
      return new PatientAllGospStandardScheme();
    }
  }

  private static class PatientAllGospStandardScheme extends StandardScheme<PatientAllGosp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PatientAllGosp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NPASP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.npasp = iprot.readI32();
              struct.setNpaspIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NGOSP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ngosp = iprot.readI32();
              struct.setNgospIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NIST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nist = iprot.readI32();
              struct.setNistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATAP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datap = iprot.readI64();
              struct.setDatapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COTD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cotd = iprot.readI32();
              struct.setCotdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DIAG_P
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.diag_p = iprot.readString();
              struct.setDiag_pIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NAMED_P
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.named_p = iprot.readString();
              struct.setNamed_pIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PatientAllGosp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NPASP_FIELD_DESC);
      oprot.writeI32(struct.npasp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NGOSP_FIELD_DESC);
      oprot.writeI32(struct.ngosp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NIST_FIELD_DESC);
      oprot.writeI32(struct.nist);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATAP_FIELD_DESC);
      oprot.writeI64(struct.datap);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COTD_FIELD_DESC);
      oprot.writeI32(struct.cotd);
      oprot.writeFieldEnd();
      if (struct.diag_p != null) {
        oprot.writeFieldBegin(DIAG_P_FIELD_DESC);
        oprot.writeString(struct.diag_p);
        oprot.writeFieldEnd();
      }
      if (struct.named_p != null) {
        oprot.writeFieldBegin(NAMED_P_FIELD_DESC);
        oprot.writeString(struct.named_p);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PatientAllGospTupleSchemeFactory implements SchemeFactory {
    public PatientAllGospTupleScheme getScheme() {
      return new PatientAllGospTupleScheme();
    }
  }

  private static class PatientAllGospTupleScheme extends TupleScheme<PatientAllGosp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PatientAllGosp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNpasp()) {
        optionals.set(0);
      }
      if (struct.isSetNgosp()) {
        optionals.set(1);
      }
      if (struct.isSetId()) {
        optionals.set(2);
      }
      if (struct.isSetNist()) {
        optionals.set(3);
      }
      if (struct.isSetDatap()) {
        optionals.set(4);
      }
      if (struct.isSetCotd()) {
        optionals.set(5);
      }
      if (struct.isSetDiag_p()) {
        optionals.set(6);
      }
      if (struct.isSetNamed_p()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetNpasp()) {
        oprot.writeI32(struct.npasp);
      }
      if (struct.isSetNgosp()) {
        oprot.writeI32(struct.ngosp);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetNist()) {
        oprot.writeI32(struct.nist);
      }
      if (struct.isSetDatap()) {
        oprot.writeI64(struct.datap);
      }
      if (struct.isSetCotd()) {
        oprot.writeI32(struct.cotd);
      }
      if (struct.isSetDiag_p()) {
        oprot.writeString(struct.diag_p);
      }
      if (struct.isSetNamed_p()) {
        oprot.writeString(struct.named_p);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PatientAllGosp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.npasp = iprot.readI32();
        struct.setNpaspIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ngosp = iprot.readI32();
        struct.setNgospIsSet(true);
      }
      if (incoming.get(2)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nist = iprot.readI32();
        struct.setNistIsSet(true);
      }
      if (incoming.get(4)) {
        struct.datap = iprot.readI64();
        struct.setDatapIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cotd = iprot.readI32();
        struct.setCotdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.diag_p = iprot.readString();
        struct.setDiag_pIsSet(true);
      }
      if (incoming.get(7)) {
        struct.named_p = iprot.readString();
        struct.setNamed_pIsSet(true);
      }
    }
  }

}

