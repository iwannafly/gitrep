/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftRegPatient;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PatientBrief implements org.apache.thrift.TBase<PatientBrief, PatientBrief._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PatientBrief");

  private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FAM_FIELD_DESC = new org.apache.thrift.protocol.TField("fam", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IM_FIELD_DESC = new org.apache.thrift.protocol.TField("im", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OT_FIELD_DESC = new org.apache.thrift.protocol.TField("ot", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("datar", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SPOLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("spolis", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NPOLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("npolis", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ADP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("adpAddress", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField ADM_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("admAddress", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PatientBriefStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PatientBriefTupleSchemeFactory());
  }

  public int npasp; // required
  public String fam; // required
  public String im; // required
  public String ot; // required
  public long datar; // required
  public String spolis; // required
  public String npolis; // required
  public Address adpAddress; // required
  public Address admAddress; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NPASP((short)1, "npasp"),
    FAM((short)2, "fam"),
    IM((short)3, "im"),
    OT((short)4, "ot"),
    DATAR((short)5, "datar"),
    SPOLIS((short)6, "spolis"),
    NPOLIS((short)7, "npolis"),
    ADP_ADDRESS((short)8, "adpAddress"),
    ADM_ADDRESS((short)9, "admAddress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NPASP
          return NPASP;
        case 2: // FAM
          return FAM;
        case 3: // IM
          return IM;
        case 4: // OT
          return OT;
        case 5: // DATAR
          return DATAR;
        case 6: // SPOLIS
          return SPOLIS;
        case 7: // NPOLIS
          return NPOLIS;
        case 8: // ADP_ADDRESS
          return ADP_ADDRESS;
        case 9: // ADM_ADDRESS
          return ADM_ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NPASP_ISSET_ID = 0;
  private static final int __DATAR_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAM, new org.apache.thrift.meta_data.FieldMetaData("fam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IM, new org.apache.thrift.meta_data.FieldMetaData("im", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OT, new org.apache.thrift.meta_data.FieldMetaData("ot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATAR, new org.apache.thrift.meta_data.FieldMetaData("datar", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPOLIS, new org.apache.thrift.meta_data.FieldMetaData("spolis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NPOLIS, new org.apache.thrift.meta_data.FieldMetaData("npolis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("adpAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Address.class)));
    tmpMap.put(_Fields.ADM_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("admAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Address.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PatientBrief.class, metaDataMap);
  }

  public PatientBrief() {
  }

  public PatientBrief(
    int npasp,
    String fam,
    String im,
    String ot,
    long datar,
    String spolis,
    String npolis,
    Address adpAddress,
    Address admAddress)
  {
    this();
    this.npasp = npasp;
    setNpaspIsSet(true);
    this.fam = fam;
    this.im = im;
    this.ot = ot;
    this.datar = datar;
    setDatarIsSet(true);
    this.spolis = spolis;
    this.npolis = npolis;
    this.adpAddress = adpAddress;
    this.admAddress = admAddress;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PatientBrief(PatientBrief other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.npasp = other.npasp;
    if (other.isSetFam()) {
      this.fam = other.fam;
    }
    if (other.isSetIm()) {
      this.im = other.im;
    }
    if (other.isSetOt()) {
      this.ot = other.ot;
    }
    this.datar = other.datar;
    if (other.isSetSpolis()) {
      this.spolis = other.spolis;
    }
    if (other.isSetNpolis()) {
      this.npolis = other.npolis;
    }
    if (other.isSetAdpAddress()) {
      this.adpAddress = new Address(other.adpAddress);
    }
    if (other.isSetAdmAddress()) {
      this.admAddress = new Address(other.admAddress);
    }
  }

  public PatientBrief deepCopy() {
    return new PatientBrief(this);
  }

  @Override
  public void clear() {
    setNpaspIsSet(false);
    this.npasp = 0;
    this.fam = null;
    this.im = null;
    this.ot = null;
    setDatarIsSet(false);
    this.datar = 0;
    this.spolis = null;
    this.npolis = null;
    this.adpAddress = null;
    this.admAddress = null;
  }

  public int getNpasp() {
    return this.npasp;
  }

  public PatientBrief setNpasp(int npasp) {
    this.npasp = npasp;
    setNpaspIsSet(true);
    return this;
  }

  public void unsetNpasp() {
    __isset_bit_vector.clear(__NPASP_ISSET_ID);
  }

  /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
  public boolean isSetNpasp() {
    return __isset_bit_vector.get(__NPASP_ISSET_ID);
  }

  public void setNpaspIsSet(boolean value) {
    __isset_bit_vector.set(__NPASP_ISSET_ID, value);
  }

  public String getFam() {
    return this.fam;
  }

  public PatientBrief setFam(String fam) {
    this.fam = fam;
    return this;
  }

  public void unsetFam() {
    this.fam = null;
  }

  /** Returns true if field fam is set (has been assigned a value) and false otherwise */
  public boolean isSetFam() {
    return this.fam != null;
  }

  public void setFamIsSet(boolean value) {
    if (!value) {
      this.fam = null;
    }
  }

  public String getIm() {
    return this.im;
  }

  public PatientBrief setIm(String im) {
    this.im = im;
    return this;
  }

  public void unsetIm() {
    this.im = null;
  }

  /** Returns true if field im is set (has been assigned a value) and false otherwise */
  public boolean isSetIm() {
    return this.im != null;
  }

  public void setImIsSet(boolean value) {
    if (!value) {
      this.im = null;
    }
  }

  public String getOt() {
    return this.ot;
  }

  public PatientBrief setOt(String ot) {
    this.ot = ot;
    return this;
  }

  public void unsetOt() {
    this.ot = null;
  }

  /** Returns true if field ot is set (has been assigned a value) and false otherwise */
  public boolean isSetOt() {
    return this.ot != null;
  }

  public void setOtIsSet(boolean value) {
    if (!value) {
      this.ot = null;
    }
  }

  public long getDatar() {
    return this.datar;
  }

  public PatientBrief setDatar(long datar) {
    this.datar = datar;
    setDatarIsSet(true);
    return this;
  }

  public void unsetDatar() {
    __isset_bit_vector.clear(__DATAR_ISSET_ID);
  }

  /** Returns true if field datar is set (has been assigned a value) and false otherwise */
  public boolean isSetDatar() {
    return __isset_bit_vector.get(__DATAR_ISSET_ID);
  }

  public void setDatarIsSet(boolean value) {
    __isset_bit_vector.set(__DATAR_ISSET_ID, value);
  }

  public String getSpolis() {
    return this.spolis;
  }

  public PatientBrief setSpolis(String spolis) {
    this.spolis = spolis;
    return this;
  }

  public void unsetSpolis() {
    this.spolis = null;
  }

  /** Returns true if field spolis is set (has been assigned a value) and false otherwise */
  public boolean isSetSpolis() {
    return this.spolis != null;
  }

  public void setSpolisIsSet(boolean value) {
    if (!value) {
      this.spolis = null;
    }
  }

  public String getNpolis() {
    return this.npolis;
  }

  public PatientBrief setNpolis(String npolis) {
    this.npolis = npolis;
    return this;
  }

  public void unsetNpolis() {
    this.npolis = null;
  }

  /** Returns true if field npolis is set (has been assigned a value) and false otherwise */
  public boolean isSetNpolis() {
    return this.npolis != null;
  }

  public void setNpolisIsSet(boolean value) {
    if (!value) {
      this.npolis = null;
    }
  }

  public Address getAdpAddress() {
    return this.adpAddress;
  }

  public PatientBrief setAdpAddress(Address adpAddress) {
    this.adpAddress = adpAddress;
    return this;
  }

  public void unsetAdpAddress() {
    this.adpAddress = null;
  }

  /** Returns true if field adpAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetAdpAddress() {
    return this.adpAddress != null;
  }

  public void setAdpAddressIsSet(boolean value) {
    if (!value) {
      this.adpAddress = null;
    }
  }

  public Address getAdmAddress() {
    return this.admAddress;
  }

  public PatientBrief setAdmAddress(Address admAddress) {
    this.admAddress = admAddress;
    return this;
  }

  public void unsetAdmAddress() {
    this.admAddress = null;
  }

  /** Returns true if field admAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetAdmAddress() {
    return this.admAddress != null;
  }

  public void setAdmAddressIsSet(boolean value) {
    if (!value) {
      this.admAddress = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NPASP:
      if (value == null) {
        unsetNpasp();
      } else {
        setNpasp((Integer)value);
      }
      break;

    case FAM:
      if (value == null) {
        unsetFam();
      } else {
        setFam((String)value);
      }
      break;

    case IM:
      if (value == null) {
        unsetIm();
      } else {
        setIm((String)value);
      }
      break;

    case OT:
      if (value == null) {
        unsetOt();
      } else {
        setOt((String)value);
      }
      break;

    case DATAR:
      if (value == null) {
        unsetDatar();
      } else {
        setDatar((Long)value);
      }
      break;

    case SPOLIS:
      if (value == null) {
        unsetSpolis();
      } else {
        setSpolis((String)value);
      }
      break;

    case NPOLIS:
      if (value == null) {
        unsetNpolis();
      } else {
        setNpolis((String)value);
      }
      break;

    case ADP_ADDRESS:
      if (value == null) {
        unsetAdpAddress();
      } else {
        setAdpAddress((Address)value);
      }
      break;

    case ADM_ADDRESS:
      if (value == null) {
        unsetAdmAddress();
      } else {
        setAdmAddress((Address)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NPASP:
      return Integer.valueOf(getNpasp());

    case FAM:
      return getFam();

    case IM:
      return getIm();

    case OT:
      return getOt();

    case DATAR:
      return Long.valueOf(getDatar());

    case SPOLIS:
      return getSpolis();

    case NPOLIS:
      return getNpolis();

    case ADP_ADDRESS:
      return getAdpAddress();

    case ADM_ADDRESS:
      return getAdmAddress();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NPASP:
      return isSetNpasp();
    case FAM:
      return isSetFam();
    case IM:
      return isSetIm();
    case OT:
      return isSetOt();
    case DATAR:
      return isSetDatar();
    case SPOLIS:
      return isSetSpolis();
    case NPOLIS:
      return isSetNpolis();
    case ADP_ADDRESS:
      return isSetAdpAddress();
    case ADM_ADDRESS:
      return isSetAdmAddress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PatientBrief)
      return this.equals((PatientBrief)that);
    return false;
  }

  public boolean equals(PatientBrief that) {
    if (that == null)
      return false;

    boolean this_present_npasp = true;
    boolean that_present_npasp = true;
    if (this_present_npasp || that_present_npasp) {
      if (!(this_present_npasp && that_present_npasp))
        return false;
      if (this.npasp != that.npasp)
        return false;
    }

    boolean this_present_fam = true && this.isSetFam();
    boolean that_present_fam = true && that.isSetFam();
    if (this_present_fam || that_present_fam) {
      if (!(this_present_fam && that_present_fam))
        return false;
      if (!this.fam.equals(that.fam))
        return false;
    }

    boolean this_present_im = true && this.isSetIm();
    boolean that_present_im = true && that.isSetIm();
    if (this_present_im || that_present_im) {
      if (!(this_present_im && that_present_im))
        return false;
      if (!this.im.equals(that.im))
        return false;
    }

    boolean this_present_ot = true && this.isSetOt();
    boolean that_present_ot = true && that.isSetOt();
    if (this_present_ot || that_present_ot) {
      if (!(this_present_ot && that_present_ot))
        return false;
      if (!this.ot.equals(that.ot))
        return false;
    }

    boolean this_present_datar = true;
    boolean that_present_datar = true;
    if (this_present_datar || that_present_datar) {
      if (!(this_present_datar && that_present_datar))
        return false;
      if (this.datar != that.datar)
        return false;
    }

    boolean this_present_spolis = true && this.isSetSpolis();
    boolean that_present_spolis = true && that.isSetSpolis();
    if (this_present_spolis || that_present_spolis) {
      if (!(this_present_spolis && that_present_spolis))
        return false;
      if (!this.spolis.equals(that.spolis))
        return false;
    }

    boolean this_present_npolis = true && this.isSetNpolis();
    boolean that_present_npolis = true && that.isSetNpolis();
    if (this_present_npolis || that_present_npolis) {
      if (!(this_present_npolis && that_present_npolis))
        return false;
      if (!this.npolis.equals(that.npolis))
        return false;
    }

    boolean this_present_adpAddress = true && this.isSetAdpAddress();
    boolean that_present_adpAddress = true && that.isSetAdpAddress();
    if (this_present_adpAddress || that_present_adpAddress) {
      if (!(this_present_adpAddress && that_present_adpAddress))
        return false;
      if (!this.adpAddress.equals(that.adpAddress))
        return false;
    }

    boolean this_present_admAddress = true && this.isSetAdmAddress();
    boolean that_present_admAddress = true && that.isSetAdmAddress();
    if (this_present_admAddress || that_present_admAddress) {
      if (!(this_present_admAddress && that_present_admAddress))
        return false;
      if (!this.admAddress.equals(that.admAddress))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PatientBrief other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PatientBrief typedOther = (PatientBrief)other;

    lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNpasp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFam()).compareTo(typedOther.isSetFam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fam, typedOther.fam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIm()).compareTo(typedOther.isSetIm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.im, typedOther.im);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOt()).compareTo(typedOther.isSetOt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ot, typedOther.ot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatar()).compareTo(typedOther.isSetDatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datar, typedOther.datar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpolis()).compareTo(typedOther.isSetSpolis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpolis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spolis, typedOther.spolis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNpolis()).compareTo(typedOther.isSetNpolis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNpolis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npolis, typedOther.npolis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdpAddress()).compareTo(typedOther.isSetAdpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adpAddress, typedOther.adpAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdmAddress()).compareTo(typedOther.isSetAdmAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdmAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.admAddress, typedOther.admAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PatientBrief(");
    boolean first = true;

    sb.append("npasp:");
    sb.append(this.npasp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fam:");
    if (this.fam == null) {
      sb.append("null");
    } else {
      sb.append(this.fam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("im:");
    if (this.im == null) {
      sb.append("null");
    } else {
      sb.append(this.im);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ot:");
    if (this.ot == null) {
      sb.append("null");
    } else {
      sb.append(this.ot);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datar:");
    sb.append(this.datar);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spolis:");
    if (this.spolis == null) {
      sb.append("null");
    } else {
      sb.append(this.spolis);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("npolis:");
    if (this.npolis == null) {
      sb.append("null");
    } else {
      sb.append(this.npolis);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adpAddress:");
    if (this.adpAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.adpAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("admAddress:");
    if (this.admAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.admAddress);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PatientBriefStandardSchemeFactory implements SchemeFactory {
    public PatientBriefStandardScheme getScheme() {
      return new PatientBriefStandardScheme();
    }
  }

  private static class PatientBriefStandardScheme extends StandardScheme<PatientBrief> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PatientBrief struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NPASP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.npasp = iprot.readI32();
              struct.setNpaspIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fam = iprot.readString();
              struct.setFamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.im = iprot.readString();
              struct.setImIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ot = iprot.readString();
              struct.setOtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datar = iprot.readI64();
              struct.setDatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SPOLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spolis = iprot.readString();
              struct.setSpolisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NPOLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.npolis = iprot.readString();
              struct.setNpolisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ADP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.adpAddress = new Address();
              struct.adpAddress.read(iprot);
              struct.setAdpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ADM_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.admAddress = new Address();
              struct.admAddress.read(iprot);
              struct.setAdmAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PatientBrief struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NPASP_FIELD_DESC);
      oprot.writeI32(struct.npasp);
      oprot.writeFieldEnd();
      if (struct.fam != null) {
        oprot.writeFieldBegin(FAM_FIELD_DESC);
        oprot.writeString(struct.fam);
        oprot.writeFieldEnd();
      }
      if (struct.im != null) {
        oprot.writeFieldBegin(IM_FIELD_DESC);
        oprot.writeString(struct.im);
        oprot.writeFieldEnd();
      }
      if (struct.ot != null) {
        oprot.writeFieldBegin(OT_FIELD_DESC);
        oprot.writeString(struct.ot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATAR_FIELD_DESC);
      oprot.writeI64(struct.datar);
      oprot.writeFieldEnd();
      if (struct.spolis != null) {
        oprot.writeFieldBegin(SPOLIS_FIELD_DESC);
        oprot.writeString(struct.spolis);
        oprot.writeFieldEnd();
      }
      if (struct.npolis != null) {
        oprot.writeFieldBegin(NPOLIS_FIELD_DESC);
        oprot.writeString(struct.npolis);
        oprot.writeFieldEnd();
      }
      if (struct.adpAddress != null) {
        oprot.writeFieldBegin(ADP_ADDRESS_FIELD_DESC);
        struct.adpAddress.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.admAddress != null) {
        oprot.writeFieldBegin(ADM_ADDRESS_FIELD_DESC);
        struct.admAddress.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PatientBriefTupleSchemeFactory implements SchemeFactory {
    public PatientBriefTupleScheme getScheme() {
      return new PatientBriefTupleScheme();
    }
  }

  private static class PatientBriefTupleScheme extends TupleScheme<PatientBrief> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PatientBrief struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNpasp()) {
        optionals.set(0);
      }
      if (struct.isSetFam()) {
        optionals.set(1);
      }
      if (struct.isSetIm()) {
        optionals.set(2);
      }
      if (struct.isSetOt()) {
        optionals.set(3);
      }
      if (struct.isSetDatar()) {
        optionals.set(4);
      }
      if (struct.isSetSpolis()) {
        optionals.set(5);
      }
      if (struct.isSetNpolis()) {
        optionals.set(6);
      }
      if (struct.isSetAdpAddress()) {
        optionals.set(7);
      }
      if (struct.isSetAdmAddress()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetNpasp()) {
        oprot.writeI32(struct.npasp);
      }
      if (struct.isSetFam()) {
        oprot.writeString(struct.fam);
      }
      if (struct.isSetIm()) {
        oprot.writeString(struct.im);
      }
      if (struct.isSetOt()) {
        oprot.writeString(struct.ot);
      }
      if (struct.isSetDatar()) {
        oprot.writeI64(struct.datar);
      }
      if (struct.isSetSpolis()) {
        oprot.writeString(struct.spolis);
      }
      if (struct.isSetNpolis()) {
        oprot.writeString(struct.npolis);
      }
      if (struct.isSetAdpAddress()) {
        struct.adpAddress.write(oprot);
      }
      if (struct.isSetAdmAddress()) {
        struct.admAddress.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PatientBrief struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.npasp = iprot.readI32();
        struct.setNpaspIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fam = iprot.readString();
        struct.setFamIsSet(true);
      }
      if (incoming.get(2)) {
        struct.im = iprot.readString();
        struct.setImIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ot = iprot.readString();
        struct.setOtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.datar = iprot.readI64();
        struct.setDatarIsSet(true);
      }
      if (incoming.get(5)) {
        struct.spolis = iprot.readString();
        struct.setSpolisIsSet(true);
      }
      if (incoming.get(6)) {
        struct.npolis = iprot.readString();
        struct.setNpolisIsSet(true);
      }
      if (incoming.get(7)) {
        struct.adpAddress = new Address();
        struct.adpAddress.read(iprot);
        struct.setAdpAddressIsSet(true);
      }
      if (incoming.get(8)) {
        struct.admAddress = new Address();
        struct.admAddress.read(iprot);
        struct.setAdmAddressIsSet(true);
      }
    }
  }

}

