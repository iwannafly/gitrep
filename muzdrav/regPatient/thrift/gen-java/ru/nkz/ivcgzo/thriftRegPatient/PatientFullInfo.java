/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftRegPatient;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PatientFullInfo implements org.apache.thrift.TBase<PatientFullInfo, PatientFullInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PatientFullInfo");

  private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FAM_FIELD_DESC = new org.apache.thrift.protocol.TField("fam", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IM_FIELD_DESC = new org.apache.thrift.protocol.TField("im", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OT_FIELD_DESC = new org.apache.thrift.protocol.TField("ot", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("datar", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField POL_FIELD_DESC = new org.apache.thrift.protocol.TField("pol", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField JITEL_FIELD_DESC = new org.apache.thrift.protocol.TField("jitel", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SGRP_FIELD_DESC = new org.apache.thrift.protocol.TField("sgrp", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ADP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("adpAddress", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField ADM_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("admAddress", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField POLIS_OMS_FIELD_DESC = new org.apache.thrift.protocol.TField("Polis_oms", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField POLIS_DMS_FIELD_DESC = new org.apache.thrift.protocol.TField("Polis_dms", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField MRAB_FIELD_DESC = new org.apache.thrift.protocol.TField("mrab", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField NAMEMR_FIELD_DESC = new org.apache.thrift.protocol.TField("namemr", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField NCEX_FIELD_DESC = new org.apache.thrift.protocol.TField("ncex", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField CPOL_PR_FIELD_DESC = new org.apache.thrift.protocol.TField("cpol_pr", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField TERP_FIELD_DESC = new org.apache.thrift.protocol.TField("terp", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField TDOC_FIELD_DESC = new org.apache.thrift.protocol.TField("tdoc", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField DOCSER_FIELD_DESC = new org.apache.thrift.protocol.TField("docser", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField DOCNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("docnum", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField DATADOC_FIELD_DESC = new org.apache.thrift.protocol.TField("datadoc", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField ODOC_FIELD_DESC = new org.apache.thrift.protocol.TField("odoc", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField SNILS_FIELD_DESC = new org.apache.thrift.protocol.TField("snils", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField DATAZ_FIELD_DESC = new org.apache.thrift.protocol.TField("dataz", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField PROF_FIELD_DESC = new org.apache.thrift.protocol.TField("prof", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField TEL_FIELD_DESC = new org.apache.thrift.protocol.TField("tel", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField DSV_FIELD_DESC = new org.apache.thrift.protocol.TField("dsv", org.apache.thrift.protocol.TType.I64, (short)27);
  private static final org.apache.thrift.protocol.TField PRIZN_FIELD_DESC = new org.apache.thrift.protocol.TField("prizn", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField TER_LIV_FIELD_DESC = new org.apache.thrift.protocol.TField("ter_liv", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField REGION_LIV_FIELD_DESC = new org.apache.thrift.protocol.TField("region_liv", org.apache.thrift.protocol.TType.I32, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PatientFullInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PatientFullInfoTupleSchemeFactory());
  }

  public int npasp; // required
  public String fam; // required
  public String im; // required
  public String ot; // required
  public long datar; // required
  public int pol; // required
  public int jitel; // required
  public int sgrp; // required
  public Address adpAddress; // required
  public Address admAddress; // required
  public Polis Polis_oms; // required
  public Polis Polis_dms; // required
  public String mrab; // required
  public String namemr; // required
  public int ncex; // required
  public int cpol_pr; // required
  public int terp; // required
  public int tdoc; // required
  public String docser; // required
  public String docnum; // required
  public long datadoc; // required
  public String odoc; // required
  public String snils; // required
  public long dataz; // required
  public String prof; // required
  public String tel; // required
  public long dsv; // required
  public int prizn; // required
  public int ter_liv; // required
  public int region_liv; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NPASP((short)1, "npasp"),
    FAM((short)2, "fam"),
    IM((short)3, "im"),
    OT((short)4, "ot"),
    DATAR((short)5, "datar"),
    POL((short)6, "pol"),
    JITEL((short)7, "jitel"),
    SGRP((short)8, "sgrp"),
    ADP_ADDRESS((short)9, "adpAddress"),
    ADM_ADDRESS((short)10, "admAddress"),
    POLIS_OMS((short)11, "Polis_oms"),
    POLIS_DMS((short)12, "Polis_dms"),
    MRAB((short)13, "mrab"),
    NAMEMR((short)14, "namemr"),
    NCEX((short)15, "ncex"),
    CPOL_PR((short)16, "cpol_pr"),
    TERP((short)17, "terp"),
    TDOC((short)18, "tdoc"),
    DOCSER((short)19, "docser"),
    DOCNUM((short)20, "docnum"),
    DATADOC((short)21, "datadoc"),
    ODOC((short)22, "odoc"),
    SNILS((short)23, "snils"),
    DATAZ((short)24, "dataz"),
    PROF((short)25, "prof"),
    TEL((short)26, "tel"),
    DSV((short)27, "dsv"),
    PRIZN((short)28, "prizn"),
    TER_LIV((short)29, "ter_liv"),
    REGION_LIV((short)30, "region_liv");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NPASP
          return NPASP;
        case 2: // FAM
          return FAM;
        case 3: // IM
          return IM;
        case 4: // OT
          return OT;
        case 5: // DATAR
          return DATAR;
        case 6: // POL
          return POL;
        case 7: // JITEL
          return JITEL;
        case 8: // SGRP
          return SGRP;
        case 9: // ADP_ADDRESS
          return ADP_ADDRESS;
        case 10: // ADM_ADDRESS
          return ADM_ADDRESS;
        case 11: // POLIS_OMS
          return POLIS_OMS;
        case 12: // POLIS_DMS
          return POLIS_DMS;
        case 13: // MRAB
          return MRAB;
        case 14: // NAMEMR
          return NAMEMR;
        case 15: // NCEX
          return NCEX;
        case 16: // CPOL_PR
          return CPOL_PR;
        case 17: // TERP
          return TERP;
        case 18: // TDOC
          return TDOC;
        case 19: // DOCSER
          return DOCSER;
        case 20: // DOCNUM
          return DOCNUM;
        case 21: // DATADOC
          return DATADOC;
        case 22: // ODOC
          return ODOC;
        case 23: // SNILS
          return SNILS;
        case 24: // DATAZ
          return DATAZ;
        case 25: // PROF
          return PROF;
        case 26: // TEL
          return TEL;
        case 27: // DSV
          return DSV;
        case 28: // PRIZN
          return PRIZN;
        case 29: // TER_LIV
          return TER_LIV;
        case 30: // REGION_LIV
          return REGION_LIV;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NPASP_ISSET_ID = 0;
  private static final int __DATAR_ISSET_ID = 1;
  private static final int __POL_ISSET_ID = 2;
  private static final int __JITEL_ISSET_ID = 3;
  private static final int __SGRP_ISSET_ID = 4;
  private static final int __NCEX_ISSET_ID = 5;
  private static final int __CPOL_PR_ISSET_ID = 6;
  private static final int __TERP_ISSET_ID = 7;
  private static final int __TDOC_ISSET_ID = 8;
  private static final int __DATADOC_ISSET_ID = 9;
  private static final int __DATAZ_ISSET_ID = 10;
  private static final int __DSV_ISSET_ID = 11;
  private static final int __PRIZN_ISSET_ID = 12;
  private static final int __TER_LIV_ISSET_ID = 13;
  private static final int __REGION_LIV_ISSET_ID = 14;
  private BitSet __isset_bit_vector = new BitSet(15);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAM, new org.apache.thrift.meta_data.FieldMetaData("fam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IM, new org.apache.thrift.meta_data.FieldMetaData("im", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OT, new org.apache.thrift.meta_data.FieldMetaData("ot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATAR, new org.apache.thrift.meta_data.FieldMetaData("datar", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POL, new org.apache.thrift.meta_data.FieldMetaData("pol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JITEL, new org.apache.thrift.meta_data.FieldMetaData("jitel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SGRP, new org.apache.thrift.meta_data.FieldMetaData("sgrp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("adpAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Address.class)));
    tmpMap.put(_Fields.ADM_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("admAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Address.class)));
    tmpMap.put(_Fields.POLIS_OMS, new org.apache.thrift.meta_data.FieldMetaData("Polis_oms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Polis.class)));
    tmpMap.put(_Fields.POLIS_DMS, new org.apache.thrift.meta_data.FieldMetaData("Polis_dms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Polis.class)));
    tmpMap.put(_Fields.MRAB, new org.apache.thrift.meta_data.FieldMetaData("mrab", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAMEMR, new org.apache.thrift.meta_data.FieldMetaData("namemr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NCEX, new org.apache.thrift.meta_data.FieldMetaData("ncex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CPOL_PR, new org.apache.thrift.meta_data.FieldMetaData("cpol_pr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TERP, new org.apache.thrift.meta_data.FieldMetaData("terp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TDOC, new org.apache.thrift.meta_data.FieldMetaData("tdoc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOCSER, new org.apache.thrift.meta_data.FieldMetaData("docser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCNUM, new org.apache.thrift.meta_data.FieldMetaData("docnum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATADOC, new org.apache.thrift.meta_data.FieldMetaData("datadoc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ODOC, new org.apache.thrift.meta_data.FieldMetaData("odoc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SNILS, new org.apache.thrift.meta_data.FieldMetaData("snils", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATAZ, new org.apache.thrift.meta_data.FieldMetaData("dataz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROF, new org.apache.thrift.meta_data.FieldMetaData("prof", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEL, new org.apache.thrift.meta_data.FieldMetaData("tel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DSV, new org.apache.thrift.meta_data.FieldMetaData("dsv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRIZN, new org.apache.thrift.meta_data.FieldMetaData("prizn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TER_LIV, new org.apache.thrift.meta_data.FieldMetaData("ter_liv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGION_LIV, new org.apache.thrift.meta_data.FieldMetaData("region_liv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PatientFullInfo.class, metaDataMap);
  }

  public PatientFullInfo() {
  }

  public PatientFullInfo(
    int npasp,
    String fam,
    String im,
    String ot,
    long datar,
    int pol,
    int jitel,
    int sgrp,
    Address adpAddress,
    Address admAddress,
    Polis Polis_oms,
    Polis Polis_dms,
    String mrab,
    String namemr,
    int ncex,
    int cpol_pr,
    int terp,
    int tdoc,
    String docser,
    String docnum,
    long datadoc,
    String odoc,
    String snils,
    long dataz,
    String prof,
    String tel,
    long dsv,
    int prizn,
    int ter_liv,
    int region_liv)
  {
    this();
    this.npasp = npasp;
    setNpaspIsSet(true);
    this.fam = fam;
    this.im = im;
    this.ot = ot;
    this.datar = datar;
    setDatarIsSet(true);
    this.pol = pol;
    setPolIsSet(true);
    this.jitel = jitel;
    setJitelIsSet(true);
    this.sgrp = sgrp;
    setSgrpIsSet(true);
    this.adpAddress = adpAddress;
    this.admAddress = admAddress;
    this.Polis_oms = Polis_oms;
    this.Polis_dms = Polis_dms;
    this.mrab = mrab;
    this.namemr = namemr;
    this.ncex = ncex;
    setNcexIsSet(true);
    this.cpol_pr = cpol_pr;
    setCpol_prIsSet(true);
    this.terp = terp;
    setTerpIsSet(true);
    this.tdoc = tdoc;
    setTdocIsSet(true);
    this.docser = docser;
    this.docnum = docnum;
    this.datadoc = datadoc;
    setDatadocIsSet(true);
    this.odoc = odoc;
    this.snils = snils;
    this.dataz = dataz;
    setDatazIsSet(true);
    this.prof = prof;
    this.tel = tel;
    this.dsv = dsv;
    setDsvIsSet(true);
    this.prizn = prizn;
    setPriznIsSet(true);
    this.ter_liv = ter_liv;
    setTer_livIsSet(true);
    this.region_liv = region_liv;
    setRegion_livIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PatientFullInfo(PatientFullInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.npasp = other.npasp;
    if (other.isSetFam()) {
      this.fam = other.fam;
    }
    if (other.isSetIm()) {
      this.im = other.im;
    }
    if (other.isSetOt()) {
      this.ot = other.ot;
    }
    this.datar = other.datar;
    this.pol = other.pol;
    this.jitel = other.jitel;
    this.sgrp = other.sgrp;
    if (other.isSetAdpAddress()) {
      this.adpAddress = new Address(other.adpAddress);
    }
    if (other.isSetAdmAddress()) {
      this.admAddress = new Address(other.admAddress);
    }
    if (other.isSetPolis_oms()) {
      this.Polis_oms = new Polis(other.Polis_oms);
    }
    if (other.isSetPolis_dms()) {
      this.Polis_dms = new Polis(other.Polis_dms);
    }
    if (other.isSetMrab()) {
      this.mrab = other.mrab;
    }
    if (other.isSetNamemr()) {
      this.namemr = other.namemr;
    }
    this.ncex = other.ncex;
    this.cpol_pr = other.cpol_pr;
    this.terp = other.terp;
    this.tdoc = other.tdoc;
    if (other.isSetDocser()) {
      this.docser = other.docser;
    }
    if (other.isSetDocnum()) {
      this.docnum = other.docnum;
    }
    this.datadoc = other.datadoc;
    if (other.isSetOdoc()) {
      this.odoc = other.odoc;
    }
    if (other.isSetSnils()) {
      this.snils = other.snils;
    }
    this.dataz = other.dataz;
    if (other.isSetProf()) {
      this.prof = other.prof;
    }
    if (other.isSetTel()) {
      this.tel = other.tel;
    }
    this.dsv = other.dsv;
    this.prizn = other.prizn;
    this.ter_liv = other.ter_liv;
    this.region_liv = other.region_liv;
  }

  public PatientFullInfo deepCopy() {
    return new PatientFullInfo(this);
  }

  @Override
  public void clear() {
    setNpaspIsSet(false);
    this.npasp = 0;
    this.fam = null;
    this.im = null;
    this.ot = null;
    setDatarIsSet(false);
    this.datar = 0;
    setPolIsSet(false);
    this.pol = 0;
    setJitelIsSet(false);
    this.jitel = 0;
    setSgrpIsSet(false);
    this.sgrp = 0;
    this.adpAddress = null;
    this.admAddress = null;
    this.Polis_oms = null;
    this.Polis_dms = null;
    this.mrab = null;
    this.namemr = null;
    setNcexIsSet(false);
    this.ncex = 0;
    setCpol_prIsSet(false);
    this.cpol_pr = 0;
    setTerpIsSet(false);
    this.terp = 0;
    setTdocIsSet(false);
    this.tdoc = 0;
    this.docser = null;
    this.docnum = null;
    setDatadocIsSet(false);
    this.datadoc = 0;
    this.odoc = null;
    this.snils = null;
    setDatazIsSet(false);
    this.dataz = 0;
    this.prof = null;
    this.tel = null;
    setDsvIsSet(false);
    this.dsv = 0;
    setPriznIsSet(false);
    this.prizn = 0;
    setTer_livIsSet(false);
    this.ter_liv = 0;
    setRegion_livIsSet(false);
    this.region_liv = 0;
  }

  public int getNpasp() {
    return this.npasp;
  }

  public PatientFullInfo setNpasp(int npasp) {
    this.npasp = npasp;
    setNpaspIsSet(true);
    return this;
  }

  public void unsetNpasp() {
    __isset_bit_vector.clear(__NPASP_ISSET_ID);
  }

  /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
  public boolean isSetNpasp() {
    return __isset_bit_vector.get(__NPASP_ISSET_ID);
  }

  public void setNpaspIsSet(boolean value) {
    __isset_bit_vector.set(__NPASP_ISSET_ID, value);
  }

  public String getFam() {
    return this.fam;
  }

  public PatientFullInfo setFam(String fam) {
    this.fam = fam;
    return this;
  }

  public void unsetFam() {
    this.fam = null;
  }

  /** Returns true if field fam is set (has been assigned a value) and false otherwise */
  public boolean isSetFam() {
    return this.fam != null;
  }

  public void setFamIsSet(boolean value) {
    if (!value) {
      this.fam = null;
    }
  }

  public String getIm() {
    return this.im;
  }

  public PatientFullInfo setIm(String im) {
    this.im = im;
    return this;
  }

  public void unsetIm() {
    this.im = null;
  }

  /** Returns true if field im is set (has been assigned a value) and false otherwise */
  public boolean isSetIm() {
    return this.im != null;
  }

  public void setImIsSet(boolean value) {
    if (!value) {
      this.im = null;
    }
  }

  public String getOt() {
    return this.ot;
  }

  public PatientFullInfo setOt(String ot) {
    this.ot = ot;
    return this;
  }

  public void unsetOt() {
    this.ot = null;
  }

  /** Returns true if field ot is set (has been assigned a value) and false otherwise */
  public boolean isSetOt() {
    return this.ot != null;
  }

  public void setOtIsSet(boolean value) {
    if (!value) {
      this.ot = null;
    }
  }

  public long getDatar() {
    return this.datar;
  }

  public PatientFullInfo setDatar(long datar) {
    this.datar = datar;
    setDatarIsSet(true);
    return this;
  }

  public void unsetDatar() {
    __isset_bit_vector.clear(__DATAR_ISSET_ID);
  }

  /** Returns true if field datar is set (has been assigned a value) and false otherwise */
  public boolean isSetDatar() {
    return __isset_bit_vector.get(__DATAR_ISSET_ID);
  }

  public void setDatarIsSet(boolean value) {
    __isset_bit_vector.set(__DATAR_ISSET_ID, value);
  }

  public int getPol() {
    return this.pol;
  }

  public PatientFullInfo setPol(int pol) {
    this.pol = pol;
    setPolIsSet(true);
    return this;
  }

  public void unsetPol() {
    __isset_bit_vector.clear(__POL_ISSET_ID);
  }

  /** Returns true if field pol is set (has been assigned a value) and false otherwise */
  public boolean isSetPol() {
    return __isset_bit_vector.get(__POL_ISSET_ID);
  }

  public void setPolIsSet(boolean value) {
    __isset_bit_vector.set(__POL_ISSET_ID, value);
  }

  public int getJitel() {
    return this.jitel;
  }

  public PatientFullInfo setJitel(int jitel) {
    this.jitel = jitel;
    setJitelIsSet(true);
    return this;
  }

  public void unsetJitel() {
    __isset_bit_vector.clear(__JITEL_ISSET_ID);
  }

  /** Returns true if field jitel is set (has been assigned a value) and false otherwise */
  public boolean isSetJitel() {
    return __isset_bit_vector.get(__JITEL_ISSET_ID);
  }

  public void setJitelIsSet(boolean value) {
    __isset_bit_vector.set(__JITEL_ISSET_ID, value);
  }

  public int getSgrp() {
    return this.sgrp;
  }

  public PatientFullInfo setSgrp(int sgrp) {
    this.sgrp = sgrp;
    setSgrpIsSet(true);
    return this;
  }

  public void unsetSgrp() {
    __isset_bit_vector.clear(__SGRP_ISSET_ID);
  }

  /** Returns true if field sgrp is set (has been assigned a value) and false otherwise */
  public boolean isSetSgrp() {
    return __isset_bit_vector.get(__SGRP_ISSET_ID);
  }

  public void setSgrpIsSet(boolean value) {
    __isset_bit_vector.set(__SGRP_ISSET_ID, value);
  }

  public Address getAdpAddress() {
    return this.adpAddress;
  }

  public PatientFullInfo setAdpAddress(Address adpAddress) {
    this.adpAddress = adpAddress;
    return this;
  }

  public void unsetAdpAddress() {
    this.adpAddress = null;
  }

  /** Returns true if field adpAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetAdpAddress() {
    return this.adpAddress != null;
  }

  public void setAdpAddressIsSet(boolean value) {
    if (!value) {
      this.adpAddress = null;
    }
  }

  public Address getAdmAddress() {
    return this.admAddress;
  }

  public PatientFullInfo setAdmAddress(Address admAddress) {
    this.admAddress = admAddress;
    return this;
  }

  public void unsetAdmAddress() {
    this.admAddress = null;
  }

  /** Returns true if field admAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetAdmAddress() {
    return this.admAddress != null;
  }

  public void setAdmAddressIsSet(boolean value) {
    if (!value) {
      this.admAddress = null;
    }
  }

  public Polis getPolis_oms() {
    return this.Polis_oms;
  }

  public PatientFullInfo setPolis_oms(Polis Polis_oms) {
    this.Polis_oms = Polis_oms;
    return this;
  }

  public void unsetPolis_oms() {
    this.Polis_oms = null;
  }

  /** Returns true if field Polis_oms is set (has been assigned a value) and false otherwise */
  public boolean isSetPolis_oms() {
    return this.Polis_oms != null;
  }

  public void setPolis_omsIsSet(boolean value) {
    if (!value) {
      this.Polis_oms = null;
    }
  }

  public Polis getPolis_dms() {
    return this.Polis_dms;
  }

  public PatientFullInfo setPolis_dms(Polis Polis_dms) {
    this.Polis_dms = Polis_dms;
    return this;
  }

  public void unsetPolis_dms() {
    this.Polis_dms = null;
  }

  /** Returns true if field Polis_dms is set (has been assigned a value) and false otherwise */
  public boolean isSetPolis_dms() {
    return this.Polis_dms != null;
  }

  public void setPolis_dmsIsSet(boolean value) {
    if (!value) {
      this.Polis_dms = null;
    }
  }

  public String getMrab() {
    return this.mrab;
  }

  public PatientFullInfo setMrab(String mrab) {
    this.mrab = mrab;
    return this;
  }

  public void unsetMrab() {
    this.mrab = null;
  }

  /** Returns true if field mrab is set (has been assigned a value) and false otherwise */
  public boolean isSetMrab() {
    return this.mrab != null;
  }

  public void setMrabIsSet(boolean value) {
    if (!value) {
      this.mrab = null;
    }
  }

  public String getNamemr() {
    return this.namemr;
  }

  public PatientFullInfo setNamemr(String namemr) {
    this.namemr = namemr;
    return this;
  }

  public void unsetNamemr() {
    this.namemr = null;
  }

  /** Returns true if field namemr is set (has been assigned a value) and false otherwise */
  public boolean isSetNamemr() {
    return this.namemr != null;
  }

  public void setNamemrIsSet(boolean value) {
    if (!value) {
      this.namemr = null;
    }
  }

  public int getNcex() {
    return this.ncex;
  }

  public PatientFullInfo setNcex(int ncex) {
    this.ncex = ncex;
    setNcexIsSet(true);
    return this;
  }

  public void unsetNcex() {
    __isset_bit_vector.clear(__NCEX_ISSET_ID);
  }

  /** Returns true if field ncex is set (has been assigned a value) and false otherwise */
  public boolean isSetNcex() {
    return __isset_bit_vector.get(__NCEX_ISSET_ID);
  }

  public void setNcexIsSet(boolean value) {
    __isset_bit_vector.set(__NCEX_ISSET_ID, value);
  }

  public int getCpol_pr() {
    return this.cpol_pr;
  }

  public PatientFullInfo setCpol_pr(int cpol_pr) {
    this.cpol_pr = cpol_pr;
    setCpol_prIsSet(true);
    return this;
  }

  public void unsetCpol_pr() {
    __isset_bit_vector.clear(__CPOL_PR_ISSET_ID);
  }

  /** Returns true if field cpol_pr is set (has been assigned a value) and false otherwise */
  public boolean isSetCpol_pr() {
    return __isset_bit_vector.get(__CPOL_PR_ISSET_ID);
  }

  public void setCpol_prIsSet(boolean value) {
    __isset_bit_vector.set(__CPOL_PR_ISSET_ID, value);
  }

  public int getTerp() {
    return this.terp;
  }

  public PatientFullInfo setTerp(int terp) {
    this.terp = terp;
    setTerpIsSet(true);
    return this;
  }

  public void unsetTerp() {
    __isset_bit_vector.clear(__TERP_ISSET_ID);
  }

  /** Returns true if field terp is set (has been assigned a value) and false otherwise */
  public boolean isSetTerp() {
    return __isset_bit_vector.get(__TERP_ISSET_ID);
  }

  public void setTerpIsSet(boolean value) {
    __isset_bit_vector.set(__TERP_ISSET_ID, value);
  }

  public int getTdoc() {
    return this.tdoc;
  }

  public PatientFullInfo setTdoc(int tdoc) {
    this.tdoc = tdoc;
    setTdocIsSet(true);
    return this;
  }

  public void unsetTdoc() {
    __isset_bit_vector.clear(__TDOC_ISSET_ID);
  }

  /** Returns true if field tdoc is set (has been assigned a value) and false otherwise */
  public boolean isSetTdoc() {
    return __isset_bit_vector.get(__TDOC_ISSET_ID);
  }

  public void setTdocIsSet(boolean value) {
    __isset_bit_vector.set(__TDOC_ISSET_ID, value);
  }

  public String getDocser() {
    return this.docser;
  }

  public PatientFullInfo setDocser(String docser) {
    this.docser = docser;
    return this;
  }

  public void unsetDocser() {
    this.docser = null;
  }

  /** Returns true if field docser is set (has been assigned a value) and false otherwise */
  public boolean isSetDocser() {
    return this.docser != null;
  }

  public void setDocserIsSet(boolean value) {
    if (!value) {
      this.docser = null;
    }
  }

  public String getDocnum() {
    return this.docnum;
  }

  public PatientFullInfo setDocnum(String docnum) {
    this.docnum = docnum;
    return this;
  }

  public void unsetDocnum() {
    this.docnum = null;
  }

  /** Returns true if field docnum is set (has been assigned a value) and false otherwise */
  public boolean isSetDocnum() {
    return this.docnum != null;
  }

  public void setDocnumIsSet(boolean value) {
    if (!value) {
      this.docnum = null;
    }
  }

  public long getDatadoc() {
    return this.datadoc;
  }

  public PatientFullInfo setDatadoc(long datadoc) {
    this.datadoc = datadoc;
    setDatadocIsSet(true);
    return this;
  }

  public void unsetDatadoc() {
    __isset_bit_vector.clear(__DATADOC_ISSET_ID);
  }

  /** Returns true if field datadoc is set (has been assigned a value) and false otherwise */
  public boolean isSetDatadoc() {
    return __isset_bit_vector.get(__DATADOC_ISSET_ID);
  }

  public void setDatadocIsSet(boolean value) {
    __isset_bit_vector.set(__DATADOC_ISSET_ID, value);
  }

  public String getOdoc() {
    return this.odoc;
  }

  public PatientFullInfo setOdoc(String odoc) {
    this.odoc = odoc;
    return this;
  }

  public void unsetOdoc() {
    this.odoc = null;
  }

  /** Returns true if field odoc is set (has been assigned a value) and false otherwise */
  public boolean isSetOdoc() {
    return this.odoc != null;
  }

  public void setOdocIsSet(boolean value) {
    if (!value) {
      this.odoc = null;
    }
  }

  public String getSnils() {
    return this.snils;
  }

  public PatientFullInfo setSnils(String snils) {
    this.snils = snils;
    return this;
  }

  public void unsetSnils() {
    this.snils = null;
  }

  /** Returns true if field snils is set (has been assigned a value) and false otherwise */
  public boolean isSetSnils() {
    return this.snils != null;
  }

  public void setSnilsIsSet(boolean value) {
    if (!value) {
      this.snils = null;
    }
  }

  public long getDataz() {
    return this.dataz;
  }

  public PatientFullInfo setDataz(long dataz) {
    this.dataz = dataz;
    setDatazIsSet(true);
    return this;
  }

  public void unsetDataz() {
    __isset_bit_vector.clear(__DATAZ_ISSET_ID);
  }

  /** Returns true if field dataz is set (has been assigned a value) and false otherwise */
  public boolean isSetDataz() {
    return __isset_bit_vector.get(__DATAZ_ISSET_ID);
  }

  public void setDatazIsSet(boolean value) {
    __isset_bit_vector.set(__DATAZ_ISSET_ID, value);
  }

  public String getProf() {
    return this.prof;
  }

  public PatientFullInfo setProf(String prof) {
    this.prof = prof;
    return this;
  }

  public void unsetProf() {
    this.prof = null;
  }

  /** Returns true if field prof is set (has been assigned a value) and false otherwise */
  public boolean isSetProf() {
    return this.prof != null;
  }

  public void setProfIsSet(boolean value) {
    if (!value) {
      this.prof = null;
    }
  }

  public String getTel() {
    return this.tel;
  }

  public PatientFullInfo setTel(String tel) {
    this.tel = tel;
    return this;
  }

  public void unsetTel() {
    this.tel = null;
  }

  /** Returns true if field tel is set (has been assigned a value) and false otherwise */
  public boolean isSetTel() {
    return this.tel != null;
  }

  public void setTelIsSet(boolean value) {
    if (!value) {
      this.tel = null;
    }
  }

  public long getDsv() {
    return this.dsv;
  }

  public PatientFullInfo setDsv(long dsv) {
    this.dsv = dsv;
    setDsvIsSet(true);
    return this;
  }

  public void unsetDsv() {
    __isset_bit_vector.clear(__DSV_ISSET_ID);
  }

  /** Returns true if field dsv is set (has been assigned a value) and false otherwise */
  public boolean isSetDsv() {
    return __isset_bit_vector.get(__DSV_ISSET_ID);
  }

  public void setDsvIsSet(boolean value) {
    __isset_bit_vector.set(__DSV_ISSET_ID, value);
  }

  public int getPrizn() {
    return this.prizn;
  }

  public PatientFullInfo setPrizn(int prizn) {
    this.prizn = prizn;
    setPriznIsSet(true);
    return this;
  }

  public void unsetPrizn() {
    __isset_bit_vector.clear(__PRIZN_ISSET_ID);
  }

  /** Returns true if field prizn is set (has been assigned a value) and false otherwise */
  public boolean isSetPrizn() {
    return __isset_bit_vector.get(__PRIZN_ISSET_ID);
  }

  public void setPriznIsSet(boolean value) {
    __isset_bit_vector.set(__PRIZN_ISSET_ID, value);
  }

  public int getTer_liv() {
    return this.ter_liv;
  }

  public PatientFullInfo setTer_liv(int ter_liv) {
    this.ter_liv = ter_liv;
    setTer_livIsSet(true);
    return this;
  }

  public void unsetTer_liv() {
    __isset_bit_vector.clear(__TER_LIV_ISSET_ID);
  }

  /** Returns true if field ter_liv is set (has been assigned a value) and false otherwise */
  public boolean isSetTer_liv() {
    return __isset_bit_vector.get(__TER_LIV_ISSET_ID);
  }

  public void setTer_livIsSet(boolean value) {
    __isset_bit_vector.set(__TER_LIV_ISSET_ID, value);
  }

  public int getRegion_liv() {
    return this.region_liv;
  }

  public PatientFullInfo setRegion_liv(int region_liv) {
    this.region_liv = region_liv;
    setRegion_livIsSet(true);
    return this;
  }

  public void unsetRegion_liv() {
    __isset_bit_vector.clear(__REGION_LIV_ISSET_ID);
  }

  /** Returns true if field region_liv is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion_liv() {
    return __isset_bit_vector.get(__REGION_LIV_ISSET_ID);
  }

  public void setRegion_livIsSet(boolean value) {
    __isset_bit_vector.set(__REGION_LIV_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NPASP:
      if (value == null) {
        unsetNpasp();
      } else {
        setNpasp((Integer)value);
      }
      break;

    case FAM:
      if (value == null) {
        unsetFam();
      } else {
        setFam((String)value);
      }
      break;

    case IM:
      if (value == null) {
        unsetIm();
      } else {
        setIm((String)value);
      }
      break;

    case OT:
      if (value == null) {
        unsetOt();
      } else {
        setOt((String)value);
      }
      break;

    case DATAR:
      if (value == null) {
        unsetDatar();
      } else {
        setDatar((Long)value);
      }
      break;

    case POL:
      if (value == null) {
        unsetPol();
      } else {
        setPol((Integer)value);
      }
      break;

    case JITEL:
      if (value == null) {
        unsetJitel();
      } else {
        setJitel((Integer)value);
      }
      break;

    case SGRP:
      if (value == null) {
        unsetSgrp();
      } else {
        setSgrp((Integer)value);
      }
      break;

    case ADP_ADDRESS:
      if (value == null) {
        unsetAdpAddress();
      } else {
        setAdpAddress((Address)value);
      }
      break;

    case ADM_ADDRESS:
      if (value == null) {
        unsetAdmAddress();
      } else {
        setAdmAddress((Address)value);
      }
      break;

    case POLIS_OMS:
      if (value == null) {
        unsetPolis_oms();
      } else {
        setPolis_oms((Polis)value);
      }
      break;

    case POLIS_DMS:
      if (value == null) {
        unsetPolis_dms();
      } else {
        setPolis_dms((Polis)value);
      }
      break;

    case MRAB:
      if (value == null) {
        unsetMrab();
      } else {
        setMrab((String)value);
      }
      break;

    case NAMEMR:
      if (value == null) {
        unsetNamemr();
      } else {
        setNamemr((String)value);
      }
      break;

    case NCEX:
      if (value == null) {
        unsetNcex();
      } else {
        setNcex((Integer)value);
      }
      break;

    case CPOL_PR:
      if (value == null) {
        unsetCpol_pr();
      } else {
        setCpol_pr((Integer)value);
      }
      break;

    case TERP:
      if (value == null) {
        unsetTerp();
      } else {
        setTerp((Integer)value);
      }
      break;

    case TDOC:
      if (value == null) {
        unsetTdoc();
      } else {
        setTdoc((Integer)value);
      }
      break;

    case DOCSER:
      if (value == null) {
        unsetDocser();
      } else {
        setDocser((String)value);
      }
      break;

    case DOCNUM:
      if (value == null) {
        unsetDocnum();
      } else {
        setDocnum((String)value);
      }
      break;

    case DATADOC:
      if (value == null) {
        unsetDatadoc();
      } else {
        setDatadoc((Long)value);
      }
      break;

    case ODOC:
      if (value == null) {
        unsetOdoc();
      } else {
        setOdoc((String)value);
      }
      break;

    case SNILS:
      if (value == null) {
        unsetSnils();
      } else {
        setSnils((String)value);
      }
      break;

    case DATAZ:
      if (value == null) {
        unsetDataz();
      } else {
        setDataz((Long)value);
      }
      break;

    case PROF:
      if (value == null) {
        unsetProf();
      } else {
        setProf((String)value);
      }
      break;

    case TEL:
      if (value == null) {
        unsetTel();
      } else {
        setTel((String)value);
      }
      break;

    case DSV:
      if (value == null) {
        unsetDsv();
      } else {
        setDsv((Long)value);
      }
      break;

    case PRIZN:
      if (value == null) {
        unsetPrizn();
      } else {
        setPrizn((Integer)value);
      }
      break;

    case TER_LIV:
      if (value == null) {
        unsetTer_liv();
      } else {
        setTer_liv((Integer)value);
      }
      break;

    case REGION_LIV:
      if (value == null) {
        unsetRegion_liv();
      } else {
        setRegion_liv((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NPASP:
      return Integer.valueOf(getNpasp());

    case FAM:
      return getFam();

    case IM:
      return getIm();

    case OT:
      return getOt();

    case DATAR:
      return Long.valueOf(getDatar());

    case POL:
      return Integer.valueOf(getPol());

    case JITEL:
      return Integer.valueOf(getJitel());

    case SGRP:
      return Integer.valueOf(getSgrp());

    case ADP_ADDRESS:
      return getAdpAddress();

    case ADM_ADDRESS:
      return getAdmAddress();

    case POLIS_OMS:
      return getPolis_oms();

    case POLIS_DMS:
      return getPolis_dms();

    case MRAB:
      return getMrab();

    case NAMEMR:
      return getNamemr();

    case NCEX:
      return Integer.valueOf(getNcex());

    case CPOL_PR:
      return Integer.valueOf(getCpol_pr());

    case TERP:
      return Integer.valueOf(getTerp());

    case TDOC:
      return Integer.valueOf(getTdoc());

    case DOCSER:
      return getDocser();

    case DOCNUM:
      return getDocnum();

    case DATADOC:
      return Long.valueOf(getDatadoc());

    case ODOC:
      return getOdoc();

    case SNILS:
      return getSnils();

    case DATAZ:
      return Long.valueOf(getDataz());

    case PROF:
      return getProf();

    case TEL:
      return getTel();

    case DSV:
      return Long.valueOf(getDsv());

    case PRIZN:
      return Integer.valueOf(getPrizn());

    case TER_LIV:
      return Integer.valueOf(getTer_liv());

    case REGION_LIV:
      return Integer.valueOf(getRegion_liv());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NPASP:
      return isSetNpasp();
    case FAM:
      return isSetFam();
    case IM:
      return isSetIm();
    case OT:
      return isSetOt();
    case DATAR:
      return isSetDatar();
    case POL:
      return isSetPol();
    case JITEL:
      return isSetJitel();
    case SGRP:
      return isSetSgrp();
    case ADP_ADDRESS:
      return isSetAdpAddress();
    case ADM_ADDRESS:
      return isSetAdmAddress();
    case POLIS_OMS:
      return isSetPolis_oms();
    case POLIS_DMS:
      return isSetPolis_dms();
    case MRAB:
      return isSetMrab();
    case NAMEMR:
      return isSetNamemr();
    case NCEX:
      return isSetNcex();
    case CPOL_PR:
      return isSetCpol_pr();
    case TERP:
      return isSetTerp();
    case TDOC:
      return isSetTdoc();
    case DOCSER:
      return isSetDocser();
    case DOCNUM:
      return isSetDocnum();
    case DATADOC:
      return isSetDatadoc();
    case ODOC:
      return isSetOdoc();
    case SNILS:
      return isSetSnils();
    case DATAZ:
      return isSetDataz();
    case PROF:
      return isSetProf();
    case TEL:
      return isSetTel();
    case DSV:
      return isSetDsv();
    case PRIZN:
      return isSetPrizn();
    case TER_LIV:
      return isSetTer_liv();
    case REGION_LIV:
      return isSetRegion_liv();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PatientFullInfo)
      return this.equals((PatientFullInfo)that);
    return false;
  }

  public boolean equals(PatientFullInfo that) {
    if (that == null)
      return false;

    boolean this_present_npasp = true;
    boolean that_present_npasp = true;
    if (this_present_npasp || that_present_npasp) {
      if (!(this_present_npasp && that_present_npasp))
        return false;
      if (this.npasp != that.npasp)
        return false;
    }

    boolean this_present_fam = true && this.isSetFam();
    boolean that_present_fam = true && that.isSetFam();
    if (this_present_fam || that_present_fam) {
      if (!(this_present_fam && that_present_fam))
        return false;
      if (!this.fam.equals(that.fam))
        return false;
    }

    boolean this_present_im = true && this.isSetIm();
    boolean that_present_im = true && that.isSetIm();
    if (this_present_im || that_present_im) {
      if (!(this_present_im && that_present_im))
        return false;
      if (!this.im.equals(that.im))
        return false;
    }

    boolean this_present_ot = true && this.isSetOt();
    boolean that_present_ot = true && that.isSetOt();
    if (this_present_ot || that_present_ot) {
      if (!(this_present_ot && that_present_ot))
        return false;
      if (!this.ot.equals(that.ot))
        return false;
    }

    boolean this_present_datar = true;
    boolean that_present_datar = true;
    if (this_present_datar || that_present_datar) {
      if (!(this_present_datar && that_present_datar))
        return false;
      if (this.datar != that.datar)
        return false;
    }

    boolean this_present_pol = true;
    boolean that_present_pol = true;
    if (this_present_pol || that_present_pol) {
      if (!(this_present_pol && that_present_pol))
        return false;
      if (this.pol != that.pol)
        return false;
    }

    boolean this_present_jitel = true;
    boolean that_present_jitel = true;
    if (this_present_jitel || that_present_jitel) {
      if (!(this_present_jitel && that_present_jitel))
        return false;
      if (this.jitel != that.jitel)
        return false;
    }

    boolean this_present_sgrp = true;
    boolean that_present_sgrp = true;
    if (this_present_sgrp || that_present_sgrp) {
      if (!(this_present_sgrp && that_present_sgrp))
        return false;
      if (this.sgrp != that.sgrp)
        return false;
    }

    boolean this_present_adpAddress = true && this.isSetAdpAddress();
    boolean that_present_adpAddress = true && that.isSetAdpAddress();
    if (this_present_adpAddress || that_present_adpAddress) {
      if (!(this_present_adpAddress && that_present_adpAddress))
        return false;
      if (!this.adpAddress.equals(that.adpAddress))
        return false;
    }

    boolean this_present_admAddress = true && this.isSetAdmAddress();
    boolean that_present_admAddress = true && that.isSetAdmAddress();
    if (this_present_admAddress || that_present_admAddress) {
      if (!(this_present_admAddress && that_present_admAddress))
        return false;
      if (!this.admAddress.equals(that.admAddress))
        return false;
    }

    boolean this_present_Polis_oms = true && this.isSetPolis_oms();
    boolean that_present_Polis_oms = true && that.isSetPolis_oms();
    if (this_present_Polis_oms || that_present_Polis_oms) {
      if (!(this_present_Polis_oms && that_present_Polis_oms))
        return false;
      if (!this.Polis_oms.equals(that.Polis_oms))
        return false;
    }

    boolean this_present_Polis_dms = true && this.isSetPolis_dms();
    boolean that_present_Polis_dms = true && that.isSetPolis_dms();
    if (this_present_Polis_dms || that_present_Polis_dms) {
      if (!(this_present_Polis_dms && that_present_Polis_dms))
        return false;
      if (!this.Polis_dms.equals(that.Polis_dms))
        return false;
    }

    boolean this_present_mrab = true && this.isSetMrab();
    boolean that_present_mrab = true && that.isSetMrab();
    if (this_present_mrab || that_present_mrab) {
      if (!(this_present_mrab && that_present_mrab))
        return false;
      if (!this.mrab.equals(that.mrab))
        return false;
    }

    boolean this_present_namemr = true && this.isSetNamemr();
    boolean that_present_namemr = true && that.isSetNamemr();
    if (this_present_namemr || that_present_namemr) {
      if (!(this_present_namemr && that_present_namemr))
        return false;
      if (!this.namemr.equals(that.namemr))
        return false;
    }

    boolean this_present_ncex = true;
    boolean that_present_ncex = true;
    if (this_present_ncex || that_present_ncex) {
      if (!(this_present_ncex && that_present_ncex))
        return false;
      if (this.ncex != that.ncex)
        return false;
    }

    boolean this_present_cpol_pr = true;
    boolean that_present_cpol_pr = true;
    if (this_present_cpol_pr || that_present_cpol_pr) {
      if (!(this_present_cpol_pr && that_present_cpol_pr))
        return false;
      if (this.cpol_pr != that.cpol_pr)
        return false;
    }

    boolean this_present_terp = true;
    boolean that_present_terp = true;
    if (this_present_terp || that_present_terp) {
      if (!(this_present_terp && that_present_terp))
        return false;
      if (this.terp != that.terp)
        return false;
    }

    boolean this_present_tdoc = true;
    boolean that_present_tdoc = true;
    if (this_present_tdoc || that_present_tdoc) {
      if (!(this_present_tdoc && that_present_tdoc))
        return false;
      if (this.tdoc != that.tdoc)
        return false;
    }

    boolean this_present_docser = true && this.isSetDocser();
    boolean that_present_docser = true && that.isSetDocser();
    if (this_present_docser || that_present_docser) {
      if (!(this_present_docser && that_present_docser))
        return false;
      if (!this.docser.equals(that.docser))
        return false;
    }

    boolean this_present_docnum = true && this.isSetDocnum();
    boolean that_present_docnum = true && that.isSetDocnum();
    if (this_present_docnum || that_present_docnum) {
      if (!(this_present_docnum && that_present_docnum))
        return false;
      if (!this.docnum.equals(that.docnum))
        return false;
    }

    boolean this_present_datadoc = true;
    boolean that_present_datadoc = true;
    if (this_present_datadoc || that_present_datadoc) {
      if (!(this_present_datadoc && that_present_datadoc))
        return false;
      if (this.datadoc != that.datadoc)
        return false;
    }

    boolean this_present_odoc = true && this.isSetOdoc();
    boolean that_present_odoc = true && that.isSetOdoc();
    if (this_present_odoc || that_present_odoc) {
      if (!(this_present_odoc && that_present_odoc))
        return false;
      if (!this.odoc.equals(that.odoc))
        return false;
    }

    boolean this_present_snils = true && this.isSetSnils();
    boolean that_present_snils = true && that.isSetSnils();
    if (this_present_snils || that_present_snils) {
      if (!(this_present_snils && that_present_snils))
        return false;
      if (!this.snils.equals(that.snils))
        return false;
    }

    boolean this_present_dataz = true;
    boolean that_present_dataz = true;
    if (this_present_dataz || that_present_dataz) {
      if (!(this_present_dataz && that_present_dataz))
        return false;
      if (this.dataz != that.dataz)
        return false;
    }

    boolean this_present_prof = true && this.isSetProf();
    boolean that_present_prof = true && that.isSetProf();
    if (this_present_prof || that_present_prof) {
      if (!(this_present_prof && that_present_prof))
        return false;
      if (!this.prof.equals(that.prof))
        return false;
    }

    boolean this_present_tel = true && this.isSetTel();
    boolean that_present_tel = true && that.isSetTel();
    if (this_present_tel || that_present_tel) {
      if (!(this_present_tel && that_present_tel))
        return false;
      if (!this.tel.equals(that.tel))
        return false;
    }

    boolean this_present_dsv = true;
    boolean that_present_dsv = true;
    if (this_present_dsv || that_present_dsv) {
      if (!(this_present_dsv && that_present_dsv))
        return false;
      if (this.dsv != that.dsv)
        return false;
    }

    boolean this_present_prizn = true;
    boolean that_present_prizn = true;
    if (this_present_prizn || that_present_prizn) {
      if (!(this_present_prizn && that_present_prizn))
        return false;
      if (this.prizn != that.prizn)
        return false;
    }

    boolean this_present_ter_liv = true;
    boolean that_present_ter_liv = true;
    if (this_present_ter_liv || that_present_ter_liv) {
      if (!(this_present_ter_liv && that_present_ter_liv))
        return false;
      if (this.ter_liv != that.ter_liv)
        return false;
    }

    boolean this_present_region_liv = true;
    boolean that_present_region_liv = true;
    if (this_present_region_liv || that_present_region_liv) {
      if (!(this_present_region_liv && that_present_region_liv))
        return false;
      if (this.region_liv != that.region_liv)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PatientFullInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PatientFullInfo typedOther = (PatientFullInfo)other;

    lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNpasp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFam()).compareTo(typedOther.isSetFam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fam, typedOther.fam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIm()).compareTo(typedOther.isSetIm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.im, typedOther.im);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOt()).compareTo(typedOther.isSetOt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ot, typedOther.ot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatar()).compareTo(typedOther.isSetDatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datar, typedOther.datar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPol()).compareTo(typedOther.isSetPol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pol, typedOther.pol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJitel()).compareTo(typedOther.isSetJitel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJitel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jitel, typedOther.jitel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSgrp()).compareTo(typedOther.isSetSgrp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSgrp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sgrp, typedOther.sgrp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdpAddress()).compareTo(typedOther.isSetAdpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adpAddress, typedOther.adpAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdmAddress()).compareTo(typedOther.isSetAdmAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdmAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.admAddress, typedOther.admAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolis_oms()).compareTo(typedOther.isSetPolis_oms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolis_oms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Polis_oms, typedOther.Polis_oms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolis_dms()).compareTo(typedOther.isSetPolis_dms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolis_dms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Polis_dms, typedOther.Polis_dms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMrab()).compareTo(typedOther.isSetMrab());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMrab()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mrab, typedOther.mrab);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNamemr()).compareTo(typedOther.isSetNamemr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNamemr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.namemr, typedOther.namemr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNcex()).compareTo(typedOther.isSetNcex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNcex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ncex, typedOther.ncex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpol_pr()).compareTo(typedOther.isSetCpol_pr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpol_pr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpol_pr, typedOther.cpol_pr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTerp()).compareTo(typedOther.isSetTerp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.terp, typedOther.terp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTdoc()).compareTo(typedOther.isSetTdoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTdoc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tdoc, typedOther.tdoc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocser()).compareTo(typedOther.isSetDocser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docser, typedOther.docser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocnum()).compareTo(typedOther.isSetDocnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docnum, typedOther.docnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatadoc()).compareTo(typedOther.isSetDatadoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatadoc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datadoc, typedOther.datadoc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOdoc()).compareTo(typedOther.isSetOdoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOdoc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.odoc, typedOther.odoc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnils()).compareTo(typedOther.isSetSnils());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnils()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snils, typedOther.snils);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataz()).compareTo(typedOther.isSetDataz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataz, typedOther.dataz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProf()).compareTo(typedOther.isSetProf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prof, typedOther.prof);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTel()).compareTo(typedOther.isSetTel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tel, typedOther.tel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDsv()).compareTo(typedOther.isSetDsv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDsv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dsv, typedOther.dsv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrizn()).compareTo(typedOther.isSetPrizn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrizn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prizn, typedOther.prizn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTer_liv()).compareTo(typedOther.isSetTer_liv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTer_liv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ter_liv, typedOther.ter_liv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegion_liv()).compareTo(typedOther.isSetRegion_liv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion_liv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region_liv, typedOther.region_liv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PatientFullInfo(");
    boolean first = true;

    sb.append("npasp:");
    sb.append(this.npasp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fam:");
    if (this.fam == null) {
      sb.append("null");
    } else {
      sb.append(this.fam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("im:");
    if (this.im == null) {
      sb.append("null");
    } else {
      sb.append(this.im);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ot:");
    if (this.ot == null) {
      sb.append("null");
    } else {
      sb.append(this.ot);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datar:");
    sb.append(this.datar);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pol:");
    sb.append(this.pol);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jitel:");
    sb.append(this.jitel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sgrp:");
    sb.append(this.sgrp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("adpAddress:");
    if (this.adpAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.adpAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("admAddress:");
    if (this.admAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.admAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Polis_oms:");
    if (this.Polis_oms == null) {
      sb.append("null");
    } else {
      sb.append(this.Polis_oms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Polis_dms:");
    if (this.Polis_dms == null) {
      sb.append("null");
    } else {
      sb.append(this.Polis_dms);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mrab:");
    if (this.mrab == null) {
      sb.append("null");
    } else {
      sb.append(this.mrab);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("namemr:");
    if (this.namemr == null) {
      sb.append("null");
    } else {
      sb.append(this.namemr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ncex:");
    sb.append(this.ncex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpol_pr:");
    sb.append(this.cpol_pr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("terp:");
    sb.append(this.terp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tdoc:");
    sb.append(this.tdoc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("docser:");
    if (this.docser == null) {
      sb.append("null");
    } else {
      sb.append(this.docser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("docnum:");
    if (this.docnum == null) {
      sb.append("null");
    } else {
      sb.append(this.docnum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datadoc:");
    sb.append(this.datadoc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("odoc:");
    if (this.odoc == null) {
      sb.append("null");
    } else {
      sb.append(this.odoc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("snils:");
    if (this.snils == null) {
      sb.append("null");
    } else {
      sb.append(this.snils);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataz:");
    sb.append(this.dataz);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prof:");
    if (this.prof == null) {
      sb.append("null");
    } else {
      sb.append(this.prof);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tel:");
    if (this.tel == null) {
      sb.append("null");
    } else {
      sb.append(this.tel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dsv:");
    sb.append(this.dsv);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prizn:");
    sb.append(this.prizn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ter_liv:");
    sb.append(this.ter_liv);
    first = false;
    if (!first) sb.append(", ");
    sb.append("region_liv:");
    sb.append(this.region_liv);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PatientFullInfoStandardSchemeFactory implements SchemeFactory {
    public PatientFullInfoStandardScheme getScheme() {
      return new PatientFullInfoStandardScheme();
    }
  }

  private static class PatientFullInfoStandardScheme extends StandardScheme<PatientFullInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PatientFullInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NPASP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.npasp = iprot.readI32();
              struct.setNpaspIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fam = iprot.readString();
              struct.setFamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.im = iprot.readString();
              struct.setImIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ot = iprot.readString();
              struct.setOtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datar = iprot.readI64();
              struct.setDatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pol = iprot.readI32();
              struct.setPolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // JITEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jitel = iprot.readI32();
              struct.setJitelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SGRP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sgrp = iprot.readI32();
              struct.setSgrpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ADP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.adpAddress = new Address();
              struct.adpAddress.read(iprot);
              struct.setAdpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ADM_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.admAddress = new Address();
              struct.admAddress.read(iprot);
              struct.setAdmAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // POLIS_OMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Polis_oms = new Polis();
              struct.Polis_oms.read(iprot);
              struct.setPolis_omsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // POLIS_DMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Polis_dms = new Polis();
              struct.Polis_dms.read(iprot);
              struct.setPolis_dmsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MRAB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mrab = iprot.readString();
              struct.setMrabIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NAMEMR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.namemr = iprot.readString();
              struct.setNamemrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NCEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ncex = iprot.readI32();
              struct.setNcexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CPOL_PR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpol_pr = iprot.readI32();
              struct.setCpol_prIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TERP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.terp = iprot.readI32();
              struct.setTerpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TDOC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tdoc = iprot.readI32();
              struct.setTdocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // DOCSER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.docser = iprot.readString();
              struct.setDocserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DOCNUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.docnum = iprot.readString();
              struct.setDocnumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DATADOC
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datadoc = iprot.readI64();
              struct.setDatadocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ODOC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.odoc = iprot.readString();
              struct.setOdocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SNILS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.snils = iprot.readString();
              struct.setSnilsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // DATAZ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataz = iprot.readI64();
              struct.setDatazIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PROF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.prof = iprot.readString();
              struct.setProfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // TEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tel = iprot.readString();
              struct.setTelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // DSV
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dsv = iprot.readI64();
              struct.setDsvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PRIZN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.prizn = iprot.readI32();
              struct.setPriznIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // TER_LIV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ter_liv = iprot.readI32();
              struct.setTer_livIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // REGION_LIV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.region_liv = iprot.readI32();
              struct.setRegion_livIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PatientFullInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NPASP_FIELD_DESC);
      oprot.writeI32(struct.npasp);
      oprot.writeFieldEnd();
      if (struct.fam != null) {
        oprot.writeFieldBegin(FAM_FIELD_DESC);
        oprot.writeString(struct.fam);
        oprot.writeFieldEnd();
      }
      if (struct.im != null) {
        oprot.writeFieldBegin(IM_FIELD_DESC);
        oprot.writeString(struct.im);
        oprot.writeFieldEnd();
      }
      if (struct.ot != null) {
        oprot.writeFieldBegin(OT_FIELD_DESC);
        oprot.writeString(struct.ot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATAR_FIELD_DESC);
      oprot.writeI64(struct.datar);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POL_FIELD_DESC);
      oprot.writeI32(struct.pol);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JITEL_FIELD_DESC);
      oprot.writeI32(struct.jitel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SGRP_FIELD_DESC);
      oprot.writeI32(struct.sgrp);
      oprot.writeFieldEnd();
      if (struct.adpAddress != null) {
        oprot.writeFieldBegin(ADP_ADDRESS_FIELD_DESC);
        struct.adpAddress.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.admAddress != null) {
        oprot.writeFieldBegin(ADM_ADDRESS_FIELD_DESC);
        struct.admAddress.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.Polis_oms != null) {
        oprot.writeFieldBegin(POLIS_OMS_FIELD_DESC);
        struct.Polis_oms.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.Polis_dms != null) {
        oprot.writeFieldBegin(POLIS_DMS_FIELD_DESC);
        struct.Polis_dms.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.mrab != null) {
        oprot.writeFieldBegin(MRAB_FIELD_DESC);
        oprot.writeString(struct.mrab);
        oprot.writeFieldEnd();
      }
      if (struct.namemr != null) {
        oprot.writeFieldBegin(NAMEMR_FIELD_DESC);
        oprot.writeString(struct.namemr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NCEX_FIELD_DESC);
      oprot.writeI32(struct.ncex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CPOL_PR_FIELD_DESC);
      oprot.writeI32(struct.cpol_pr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TERP_FIELD_DESC);
      oprot.writeI32(struct.terp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TDOC_FIELD_DESC);
      oprot.writeI32(struct.tdoc);
      oprot.writeFieldEnd();
      if (struct.docser != null) {
        oprot.writeFieldBegin(DOCSER_FIELD_DESC);
        oprot.writeString(struct.docser);
        oprot.writeFieldEnd();
      }
      if (struct.docnum != null) {
        oprot.writeFieldBegin(DOCNUM_FIELD_DESC);
        oprot.writeString(struct.docnum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATADOC_FIELD_DESC);
      oprot.writeI64(struct.datadoc);
      oprot.writeFieldEnd();
      if (struct.odoc != null) {
        oprot.writeFieldBegin(ODOC_FIELD_DESC);
        oprot.writeString(struct.odoc);
        oprot.writeFieldEnd();
      }
      if (struct.snils != null) {
        oprot.writeFieldBegin(SNILS_FIELD_DESC);
        oprot.writeString(struct.snils);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATAZ_FIELD_DESC);
      oprot.writeI64(struct.dataz);
      oprot.writeFieldEnd();
      if (struct.prof != null) {
        oprot.writeFieldBegin(PROF_FIELD_DESC);
        oprot.writeString(struct.prof);
        oprot.writeFieldEnd();
      }
      if (struct.tel != null) {
        oprot.writeFieldBegin(TEL_FIELD_DESC);
        oprot.writeString(struct.tel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DSV_FIELD_DESC);
      oprot.writeI64(struct.dsv);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIZN_FIELD_DESC);
      oprot.writeI32(struct.prizn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TER_LIV_FIELD_DESC);
      oprot.writeI32(struct.ter_liv);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REGION_LIV_FIELD_DESC);
      oprot.writeI32(struct.region_liv);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PatientFullInfoTupleSchemeFactory implements SchemeFactory {
    public PatientFullInfoTupleScheme getScheme() {
      return new PatientFullInfoTupleScheme();
    }
  }

  private static class PatientFullInfoTupleScheme extends TupleScheme<PatientFullInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PatientFullInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNpasp()) {
        optionals.set(0);
      }
      if (struct.isSetFam()) {
        optionals.set(1);
      }
      if (struct.isSetIm()) {
        optionals.set(2);
      }
      if (struct.isSetOt()) {
        optionals.set(3);
      }
      if (struct.isSetDatar()) {
        optionals.set(4);
      }
      if (struct.isSetPol()) {
        optionals.set(5);
      }
      if (struct.isSetJitel()) {
        optionals.set(6);
      }
      if (struct.isSetSgrp()) {
        optionals.set(7);
      }
      if (struct.isSetAdpAddress()) {
        optionals.set(8);
      }
      if (struct.isSetAdmAddress()) {
        optionals.set(9);
      }
      if (struct.isSetPolis_oms()) {
        optionals.set(10);
      }
      if (struct.isSetPolis_dms()) {
        optionals.set(11);
      }
      if (struct.isSetMrab()) {
        optionals.set(12);
      }
      if (struct.isSetNamemr()) {
        optionals.set(13);
      }
      if (struct.isSetNcex()) {
        optionals.set(14);
      }
      if (struct.isSetCpol_pr()) {
        optionals.set(15);
      }
      if (struct.isSetTerp()) {
        optionals.set(16);
      }
      if (struct.isSetTdoc()) {
        optionals.set(17);
      }
      if (struct.isSetDocser()) {
        optionals.set(18);
      }
      if (struct.isSetDocnum()) {
        optionals.set(19);
      }
      if (struct.isSetDatadoc()) {
        optionals.set(20);
      }
      if (struct.isSetOdoc()) {
        optionals.set(21);
      }
      if (struct.isSetSnils()) {
        optionals.set(22);
      }
      if (struct.isSetDataz()) {
        optionals.set(23);
      }
      if (struct.isSetProf()) {
        optionals.set(24);
      }
      if (struct.isSetTel()) {
        optionals.set(25);
      }
      if (struct.isSetDsv()) {
        optionals.set(26);
      }
      if (struct.isSetPrizn()) {
        optionals.set(27);
      }
      if (struct.isSetTer_liv()) {
        optionals.set(28);
      }
      if (struct.isSetRegion_liv()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetNpasp()) {
        oprot.writeI32(struct.npasp);
      }
      if (struct.isSetFam()) {
        oprot.writeString(struct.fam);
      }
      if (struct.isSetIm()) {
        oprot.writeString(struct.im);
      }
      if (struct.isSetOt()) {
        oprot.writeString(struct.ot);
      }
      if (struct.isSetDatar()) {
        oprot.writeI64(struct.datar);
      }
      if (struct.isSetPol()) {
        oprot.writeI32(struct.pol);
      }
      if (struct.isSetJitel()) {
        oprot.writeI32(struct.jitel);
      }
      if (struct.isSetSgrp()) {
        oprot.writeI32(struct.sgrp);
      }
      if (struct.isSetAdpAddress()) {
        struct.adpAddress.write(oprot);
      }
      if (struct.isSetAdmAddress()) {
        struct.admAddress.write(oprot);
      }
      if (struct.isSetPolis_oms()) {
        struct.Polis_oms.write(oprot);
      }
      if (struct.isSetPolis_dms()) {
        struct.Polis_dms.write(oprot);
      }
      if (struct.isSetMrab()) {
        oprot.writeString(struct.mrab);
      }
      if (struct.isSetNamemr()) {
        oprot.writeString(struct.namemr);
      }
      if (struct.isSetNcex()) {
        oprot.writeI32(struct.ncex);
      }
      if (struct.isSetCpol_pr()) {
        oprot.writeI32(struct.cpol_pr);
      }
      if (struct.isSetTerp()) {
        oprot.writeI32(struct.terp);
      }
      if (struct.isSetTdoc()) {
        oprot.writeI32(struct.tdoc);
      }
      if (struct.isSetDocser()) {
        oprot.writeString(struct.docser);
      }
      if (struct.isSetDocnum()) {
        oprot.writeString(struct.docnum);
      }
      if (struct.isSetDatadoc()) {
        oprot.writeI64(struct.datadoc);
      }
      if (struct.isSetOdoc()) {
        oprot.writeString(struct.odoc);
      }
      if (struct.isSetSnils()) {
        oprot.writeString(struct.snils);
      }
      if (struct.isSetDataz()) {
        oprot.writeI64(struct.dataz);
      }
      if (struct.isSetProf()) {
        oprot.writeString(struct.prof);
      }
      if (struct.isSetTel()) {
        oprot.writeString(struct.tel);
      }
      if (struct.isSetDsv()) {
        oprot.writeI64(struct.dsv);
      }
      if (struct.isSetPrizn()) {
        oprot.writeI32(struct.prizn);
      }
      if (struct.isSetTer_liv()) {
        oprot.writeI32(struct.ter_liv);
      }
      if (struct.isSetRegion_liv()) {
        oprot.writeI32(struct.region_liv);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PatientFullInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.npasp = iprot.readI32();
        struct.setNpaspIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fam = iprot.readString();
        struct.setFamIsSet(true);
      }
      if (incoming.get(2)) {
        struct.im = iprot.readString();
        struct.setImIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ot = iprot.readString();
        struct.setOtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.datar = iprot.readI64();
        struct.setDatarIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pol = iprot.readI32();
        struct.setPolIsSet(true);
      }
      if (incoming.get(6)) {
        struct.jitel = iprot.readI32();
        struct.setJitelIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sgrp = iprot.readI32();
        struct.setSgrpIsSet(true);
      }
      if (incoming.get(8)) {
        struct.adpAddress = new Address();
        struct.adpAddress.read(iprot);
        struct.setAdpAddressIsSet(true);
      }
      if (incoming.get(9)) {
        struct.admAddress = new Address();
        struct.admAddress.read(iprot);
        struct.setAdmAddressIsSet(true);
      }
      if (incoming.get(10)) {
        struct.Polis_oms = new Polis();
        struct.Polis_oms.read(iprot);
        struct.setPolis_omsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.Polis_dms = new Polis();
        struct.Polis_dms.read(iprot);
        struct.setPolis_dmsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.mrab = iprot.readString();
        struct.setMrabIsSet(true);
      }
      if (incoming.get(13)) {
        struct.namemr = iprot.readString();
        struct.setNamemrIsSet(true);
      }
      if (incoming.get(14)) {
        struct.ncex = iprot.readI32();
        struct.setNcexIsSet(true);
      }
      if (incoming.get(15)) {
        struct.cpol_pr = iprot.readI32();
        struct.setCpol_prIsSet(true);
      }
      if (incoming.get(16)) {
        struct.terp = iprot.readI32();
        struct.setTerpIsSet(true);
      }
      if (incoming.get(17)) {
        struct.tdoc = iprot.readI32();
        struct.setTdocIsSet(true);
      }
      if (incoming.get(18)) {
        struct.docser = iprot.readString();
        struct.setDocserIsSet(true);
      }
      if (incoming.get(19)) {
        struct.docnum = iprot.readString();
        struct.setDocnumIsSet(true);
      }
      if (incoming.get(20)) {
        struct.datadoc = iprot.readI64();
        struct.setDatadocIsSet(true);
      }
      if (incoming.get(21)) {
        struct.odoc = iprot.readString();
        struct.setOdocIsSet(true);
      }
      if (incoming.get(22)) {
        struct.snils = iprot.readString();
        struct.setSnilsIsSet(true);
      }
      if (incoming.get(23)) {
        struct.dataz = iprot.readI64();
        struct.setDatazIsSet(true);
      }
      if (incoming.get(24)) {
        struct.prof = iprot.readString();
        struct.setProfIsSet(true);
      }
      if (incoming.get(25)) {
        struct.tel = iprot.readString();
        struct.setTelIsSet(true);
      }
      if (incoming.get(26)) {
        struct.dsv = iprot.readI64();
        struct.setDsvIsSet(true);
      }
      if (incoming.get(27)) {
        struct.prizn = iprot.readI32();
        struct.setPriznIsSet(true);
      }
      if (incoming.get(28)) {
        struct.ter_liv = iprot.readI32();
        struct.setTer_livIsSet(true);
      }
      if (incoming.get(29)) {
        struct.region_liv = iprot.readI32();
        struct.setRegion_livIsSet(true);
      }
    }
  }

}

