/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftRegPatient;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PatientGosp implements org.apache.thrift.TBase<PatientGosp, PatientGosp._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PatientGosp");

  private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NGOSP_FIELD_DESC = new org.apache.thrift.protocol.TField("ngosp", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NIST_FIELD_DESC = new org.apache.thrift.protocol.TField("nist", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DATAP_FIELD_DESC = new org.apache.thrift.protocol.TField("datap", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField VREMP_FIELD_DESC = new org.apache.thrift.protocol.TField("vremp", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PL_EXTR_FIELD_DESC = new org.apache.thrift.protocol.TField("pl_extr", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NAPRAV_FIELD_DESC = new org.apache.thrift.protocol.TField("naprav", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField N_ORG_FIELD_DESC = new org.apache.thrift.protocol.TField("n_org", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField COTD_FIELD_DESC = new org.apache.thrift.protocol.TField("cotd", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField SV_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sv_time", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField SV_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("sv_day", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField NTALON_FIELD_DESC = new org.apache.thrift.protocol.TField("ntalon", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField VIDTR_FIELD_DESC = new org.apache.thrift.protocol.TField("vidtr", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField PR_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("pr_out", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ALKG_FIELD_DESC = new org.apache.thrift.protocol.TField("alkg", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField MESSR_FIELD_DESC = new org.apache.thrift.protocol.TField("messr", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField VID_TRANS_FIELD_DESC = new org.apache.thrift.protocol.TField("vid_trans", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField DIAG_N_FIELD_DESC = new org.apache.thrift.protocol.TField("diag_n", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField DIAG_P_FIELD_DESC = new org.apache.thrift.protocol.TField("diag_p", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField NAMED_N_FIELD_DESC = new org.apache.thrift.protocol.TField("named_n", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField NAMED_P_FIELD_DESC = new org.apache.thrift.protocol.TField("named_p", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField NAL_Z_FIELD_DESC = new org.apache.thrift.protocol.TField("nal_z", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField NAL_P_FIELD_DESC = new org.apache.thrift.protocol.TField("nal_p", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField TOC_FIELD_DESC = new org.apache.thrift.protocol.TField("toc", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField AD_FIELD_DESC = new org.apache.thrift.protocol.TField("ad", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField SMP_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("smp_data", org.apache.thrift.protocol.TType.I64, (short)27);
  private static final org.apache.thrift.protocol.TField SMP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("smp_time", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField SMP_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("smp_num", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField COTD_P_FIELD_DESC = new org.apache.thrift.protocol.TField("cotd_p", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField DATAGOS_FIELD_DESC = new org.apache.thrift.protocol.TField("datagos", org.apache.thrift.protocol.TType.I64, (short)31);
  private static final org.apache.thrift.protocol.TField VREMGOS_FIELD_DESC = new org.apache.thrift.protocol.TField("vremgos", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField CUSER_FIELD_DESC = new org.apache.thrift.protocol.TField("cuser", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField DATAOSM_FIELD_DESC = new org.apache.thrift.protocol.TField("dataosm", org.apache.thrift.protocol.TType.I64, (short)34);
  private static final org.apache.thrift.protocol.TField VREMOSM_FIELD_DESC = new org.apache.thrift.protocol.TField("vremosm", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField DATAZ_FIELD_DESC = new org.apache.thrift.protocol.TField("dataz", org.apache.thrift.protocol.TType.I64, (short)36);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PatientGospStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PatientGospTupleSchemeFactory());
  }

  public int npasp; // required
  public int ngosp; // required
  public int id; // required
  public int nist; // required
  public long datap; // required
  public String vremp; // required
  public int pl_extr; // required
  public String naprav; // required
  public int n_org; // required
  public int cotd; // required
  public int sv_time; // required
  public int sv_day; // required
  public int ntalon; // required
  public int vidtr; // required
  public int pr_out; // required
  public int alkg; // required
  public int messr; // required
  public int vid_trans; // required
  public String diag_n; // required
  public String diag_p; // required
  public String named_n; // required
  public String named_p; // required
  public int nal_z; // required
  public int nal_p; // required
  public String toc; // required
  public String ad; // required
  public long smp_data; // required
  public String smp_time; // required
  public int smp_num; // required
  public int cotd_p; // required
  public long datagos; // required
  public String vremgos; // required
  public int cuser; // required
  public long dataosm; // required
  public String vremosm; // required
  public long dataz; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NPASP((short)1, "npasp"),
    NGOSP((short)2, "ngosp"),
    ID((short)3, "id"),
    NIST((short)4, "nist"),
    DATAP((short)5, "datap"),
    VREMP((short)6, "vremp"),
    PL_EXTR((short)7, "pl_extr"),
    NAPRAV((short)8, "naprav"),
    N_ORG((short)9, "n_org"),
    COTD((short)10, "cotd"),
    SV_TIME((short)11, "sv_time"),
    SV_DAY((short)12, "sv_day"),
    NTALON((short)13, "ntalon"),
    VIDTR((short)14, "vidtr"),
    PR_OUT((short)15, "pr_out"),
    ALKG((short)16, "alkg"),
    MESSR((short)17, "messr"),
    VID_TRANS((short)18, "vid_trans"),
    DIAG_N((short)19, "diag_n"),
    DIAG_P((short)20, "diag_p"),
    NAMED_N((short)21, "named_n"),
    NAMED_P((short)22, "named_p"),
    NAL_Z((short)23, "nal_z"),
    NAL_P((short)24, "nal_p"),
    TOC((short)25, "toc"),
    AD((short)26, "ad"),
    SMP_DATA((short)27, "smp_data"),
    SMP_TIME((short)28, "smp_time"),
    SMP_NUM((short)29, "smp_num"),
    COTD_P((short)30, "cotd_p"),
    DATAGOS((short)31, "datagos"),
    VREMGOS((short)32, "vremgos"),
    CUSER((short)33, "cuser"),
    DATAOSM((short)34, "dataosm"),
    VREMOSM((short)35, "vremosm"),
    DATAZ((short)36, "dataz");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NPASP
          return NPASP;
        case 2: // NGOSP
          return NGOSP;
        case 3: // ID
          return ID;
        case 4: // NIST
          return NIST;
        case 5: // DATAP
          return DATAP;
        case 6: // VREMP
          return VREMP;
        case 7: // PL_EXTR
          return PL_EXTR;
        case 8: // NAPRAV
          return NAPRAV;
        case 9: // N_ORG
          return N_ORG;
        case 10: // COTD
          return COTD;
        case 11: // SV_TIME
          return SV_TIME;
        case 12: // SV_DAY
          return SV_DAY;
        case 13: // NTALON
          return NTALON;
        case 14: // VIDTR
          return VIDTR;
        case 15: // PR_OUT
          return PR_OUT;
        case 16: // ALKG
          return ALKG;
        case 17: // MESSR
          return MESSR;
        case 18: // VID_TRANS
          return VID_TRANS;
        case 19: // DIAG_N
          return DIAG_N;
        case 20: // DIAG_P
          return DIAG_P;
        case 21: // NAMED_N
          return NAMED_N;
        case 22: // NAMED_P
          return NAMED_P;
        case 23: // NAL_Z
          return NAL_Z;
        case 24: // NAL_P
          return NAL_P;
        case 25: // TOC
          return TOC;
        case 26: // AD
          return AD;
        case 27: // SMP_DATA
          return SMP_DATA;
        case 28: // SMP_TIME
          return SMP_TIME;
        case 29: // SMP_NUM
          return SMP_NUM;
        case 30: // COTD_P
          return COTD_P;
        case 31: // DATAGOS
          return DATAGOS;
        case 32: // VREMGOS
          return VREMGOS;
        case 33: // CUSER
          return CUSER;
        case 34: // DATAOSM
          return DATAOSM;
        case 35: // VREMOSM
          return VREMOSM;
        case 36: // DATAZ
          return DATAZ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NPASP_ISSET_ID = 0;
  private static final int __NGOSP_ISSET_ID = 1;
  private static final int __ID_ISSET_ID = 2;
  private static final int __NIST_ISSET_ID = 3;
  private static final int __DATAP_ISSET_ID = 4;
  private static final int __PL_EXTR_ISSET_ID = 5;
  private static final int __N_ORG_ISSET_ID = 6;
  private static final int __COTD_ISSET_ID = 7;
  private static final int __SV_TIME_ISSET_ID = 8;
  private static final int __SV_DAY_ISSET_ID = 9;
  private static final int __NTALON_ISSET_ID = 10;
  private static final int __VIDTR_ISSET_ID = 11;
  private static final int __PR_OUT_ISSET_ID = 12;
  private static final int __ALKG_ISSET_ID = 13;
  private static final int __MESSR_ISSET_ID = 14;
  private static final int __VID_TRANS_ISSET_ID = 15;
  private static final int __NAL_Z_ISSET_ID = 16;
  private static final int __NAL_P_ISSET_ID = 17;
  private static final int __SMP_DATA_ISSET_ID = 18;
  private static final int __SMP_NUM_ISSET_ID = 19;
  private static final int __COTD_P_ISSET_ID = 20;
  private static final int __DATAGOS_ISSET_ID = 21;
  private static final int __CUSER_ISSET_ID = 22;
  private static final int __DATAOSM_ISSET_ID = 23;
  private static final int __DATAZ_ISSET_ID = 24;
  private BitSet __isset_bit_vector = new BitSet(25);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NGOSP, new org.apache.thrift.meta_data.FieldMetaData("ngosp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NIST, new org.apache.thrift.meta_data.FieldMetaData("nist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATAP, new org.apache.thrift.meta_data.FieldMetaData("datap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VREMP, new org.apache.thrift.meta_data.FieldMetaData("vremp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PL_EXTR, new org.apache.thrift.meta_data.FieldMetaData("pl_extr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAPRAV, new org.apache.thrift.meta_data.FieldMetaData("naprav", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.N_ORG, new org.apache.thrift.meta_data.FieldMetaData("n_org", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COTD, new org.apache.thrift.meta_data.FieldMetaData("cotd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SV_TIME, new org.apache.thrift.meta_data.FieldMetaData("sv_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SV_DAY, new org.apache.thrift.meta_data.FieldMetaData("sv_day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NTALON, new org.apache.thrift.meta_data.FieldMetaData("ntalon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIDTR, new org.apache.thrift.meta_data.FieldMetaData("vidtr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PR_OUT, new org.apache.thrift.meta_data.FieldMetaData("pr_out", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALKG, new org.apache.thrift.meta_data.FieldMetaData("alkg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSR, new org.apache.thrift.meta_data.FieldMetaData("messr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VID_TRANS, new org.apache.thrift.meta_data.FieldMetaData("vid_trans", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIAG_N, new org.apache.thrift.meta_data.FieldMetaData("diag_n", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIAG_P, new org.apache.thrift.meta_data.FieldMetaData("diag_p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAMED_N, new org.apache.thrift.meta_data.FieldMetaData("named_n", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAMED_P, new org.apache.thrift.meta_data.FieldMetaData("named_p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAL_Z, new org.apache.thrift.meta_data.FieldMetaData("nal_z", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAL_P, new org.apache.thrift.meta_data.FieldMetaData("nal_p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOC, new org.apache.thrift.meta_data.FieldMetaData("toc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AD, new org.apache.thrift.meta_data.FieldMetaData("ad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SMP_DATA, new org.apache.thrift.meta_data.FieldMetaData("smp_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SMP_TIME, new org.apache.thrift.meta_data.FieldMetaData("smp_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SMP_NUM, new org.apache.thrift.meta_data.FieldMetaData("smp_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COTD_P, new org.apache.thrift.meta_data.FieldMetaData("cotd_p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATAGOS, new org.apache.thrift.meta_data.FieldMetaData("datagos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VREMGOS, new org.apache.thrift.meta_data.FieldMetaData("vremgos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSER, new org.apache.thrift.meta_data.FieldMetaData("cuser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATAOSM, new org.apache.thrift.meta_data.FieldMetaData("dataosm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VREMOSM, new org.apache.thrift.meta_data.FieldMetaData("vremosm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATAZ, new org.apache.thrift.meta_data.FieldMetaData("dataz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PatientGosp.class, metaDataMap);
  }

  public PatientGosp() {
  }

  public PatientGosp(
    int npasp,
    int ngosp,
    int id,
    int nist,
    long datap,
    String vremp,
    int pl_extr,
    String naprav,
    int n_org,
    int cotd,
    int sv_time,
    int sv_day,
    int ntalon,
    int vidtr,
    int pr_out,
    int alkg,
    int messr,
    int vid_trans,
    String diag_n,
    String diag_p,
    String named_n,
    String named_p,
    int nal_z,
    int nal_p,
    String toc,
    String ad,
    long smp_data,
    String smp_time,
    int smp_num,
    int cotd_p,
    long datagos,
    String vremgos,
    int cuser,
    long dataosm,
    String vremosm,
    long dataz)
  {
    this();
    this.npasp = npasp;
    setNpaspIsSet(true);
    this.ngosp = ngosp;
    setNgospIsSet(true);
    this.id = id;
    setIdIsSet(true);
    this.nist = nist;
    setNistIsSet(true);
    this.datap = datap;
    setDatapIsSet(true);
    this.vremp = vremp;
    this.pl_extr = pl_extr;
    setPl_extrIsSet(true);
    this.naprav = naprav;
    this.n_org = n_org;
    setN_orgIsSet(true);
    this.cotd = cotd;
    setCotdIsSet(true);
    this.sv_time = sv_time;
    setSv_timeIsSet(true);
    this.sv_day = sv_day;
    setSv_dayIsSet(true);
    this.ntalon = ntalon;
    setNtalonIsSet(true);
    this.vidtr = vidtr;
    setVidtrIsSet(true);
    this.pr_out = pr_out;
    setPr_outIsSet(true);
    this.alkg = alkg;
    setAlkgIsSet(true);
    this.messr = messr;
    setMessrIsSet(true);
    this.vid_trans = vid_trans;
    setVid_transIsSet(true);
    this.diag_n = diag_n;
    this.diag_p = diag_p;
    this.named_n = named_n;
    this.named_p = named_p;
    this.nal_z = nal_z;
    setNal_zIsSet(true);
    this.nal_p = nal_p;
    setNal_pIsSet(true);
    this.toc = toc;
    this.ad = ad;
    this.smp_data = smp_data;
    setSmp_dataIsSet(true);
    this.smp_time = smp_time;
    this.smp_num = smp_num;
    setSmp_numIsSet(true);
    this.cotd_p = cotd_p;
    setCotd_pIsSet(true);
    this.datagos = datagos;
    setDatagosIsSet(true);
    this.vremgos = vremgos;
    this.cuser = cuser;
    setCuserIsSet(true);
    this.dataosm = dataosm;
    setDataosmIsSet(true);
    this.vremosm = vremosm;
    this.dataz = dataz;
    setDatazIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PatientGosp(PatientGosp other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.npasp = other.npasp;
    this.ngosp = other.ngosp;
    this.id = other.id;
    this.nist = other.nist;
    this.datap = other.datap;
    if (other.isSetVremp()) {
      this.vremp = other.vremp;
    }
    this.pl_extr = other.pl_extr;
    if (other.isSetNaprav()) {
      this.naprav = other.naprav;
    }
    this.n_org = other.n_org;
    this.cotd = other.cotd;
    this.sv_time = other.sv_time;
    this.sv_day = other.sv_day;
    this.ntalon = other.ntalon;
    this.vidtr = other.vidtr;
    this.pr_out = other.pr_out;
    this.alkg = other.alkg;
    this.messr = other.messr;
    this.vid_trans = other.vid_trans;
    if (other.isSetDiag_n()) {
      this.diag_n = other.diag_n;
    }
    if (other.isSetDiag_p()) {
      this.diag_p = other.diag_p;
    }
    if (other.isSetNamed_n()) {
      this.named_n = other.named_n;
    }
    if (other.isSetNamed_p()) {
      this.named_p = other.named_p;
    }
    this.nal_z = other.nal_z;
    this.nal_p = other.nal_p;
    if (other.isSetToc()) {
      this.toc = other.toc;
    }
    if (other.isSetAd()) {
      this.ad = other.ad;
    }
    this.smp_data = other.smp_data;
    if (other.isSetSmp_time()) {
      this.smp_time = other.smp_time;
    }
    this.smp_num = other.smp_num;
    this.cotd_p = other.cotd_p;
    this.datagos = other.datagos;
    if (other.isSetVremgos()) {
      this.vremgos = other.vremgos;
    }
    this.cuser = other.cuser;
    this.dataosm = other.dataosm;
    if (other.isSetVremosm()) {
      this.vremosm = other.vremosm;
    }
    this.dataz = other.dataz;
  }

  public PatientGosp deepCopy() {
    return new PatientGosp(this);
  }

  @Override
  public void clear() {
    setNpaspIsSet(false);
    this.npasp = 0;
    setNgospIsSet(false);
    this.ngosp = 0;
    setIdIsSet(false);
    this.id = 0;
    setNistIsSet(false);
    this.nist = 0;
    setDatapIsSet(false);
    this.datap = 0;
    this.vremp = null;
    setPl_extrIsSet(false);
    this.pl_extr = 0;
    this.naprav = null;
    setN_orgIsSet(false);
    this.n_org = 0;
    setCotdIsSet(false);
    this.cotd = 0;
    setSv_timeIsSet(false);
    this.sv_time = 0;
    setSv_dayIsSet(false);
    this.sv_day = 0;
    setNtalonIsSet(false);
    this.ntalon = 0;
    setVidtrIsSet(false);
    this.vidtr = 0;
    setPr_outIsSet(false);
    this.pr_out = 0;
    setAlkgIsSet(false);
    this.alkg = 0;
    setMessrIsSet(false);
    this.messr = 0;
    setVid_transIsSet(false);
    this.vid_trans = 0;
    this.diag_n = null;
    this.diag_p = null;
    this.named_n = null;
    this.named_p = null;
    setNal_zIsSet(false);
    this.nal_z = 0;
    setNal_pIsSet(false);
    this.nal_p = 0;
    this.toc = null;
    this.ad = null;
    setSmp_dataIsSet(false);
    this.smp_data = 0;
    this.smp_time = null;
    setSmp_numIsSet(false);
    this.smp_num = 0;
    setCotd_pIsSet(false);
    this.cotd_p = 0;
    setDatagosIsSet(false);
    this.datagos = 0;
    this.vremgos = null;
    setCuserIsSet(false);
    this.cuser = 0;
    setDataosmIsSet(false);
    this.dataosm = 0;
    this.vremosm = null;
    setDatazIsSet(false);
    this.dataz = 0;
  }

  public int getNpasp() {
    return this.npasp;
  }

  public PatientGosp setNpasp(int npasp) {
    this.npasp = npasp;
    setNpaspIsSet(true);
    return this;
  }

  public void unsetNpasp() {
    __isset_bit_vector.clear(__NPASP_ISSET_ID);
  }

  /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
  public boolean isSetNpasp() {
    return __isset_bit_vector.get(__NPASP_ISSET_ID);
  }

  public void setNpaspIsSet(boolean value) {
    __isset_bit_vector.set(__NPASP_ISSET_ID, value);
  }

  public int getNgosp() {
    return this.ngosp;
  }

  public PatientGosp setNgosp(int ngosp) {
    this.ngosp = ngosp;
    setNgospIsSet(true);
    return this;
  }

  public void unsetNgosp() {
    __isset_bit_vector.clear(__NGOSP_ISSET_ID);
  }

  /** Returns true if field ngosp is set (has been assigned a value) and false otherwise */
  public boolean isSetNgosp() {
    return __isset_bit_vector.get(__NGOSP_ISSET_ID);
  }

  public void setNgospIsSet(boolean value) {
    __isset_bit_vector.set(__NGOSP_ISSET_ID, value);
  }

  public int getId() {
    return this.id;
  }

  public PatientGosp setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public int getNist() {
    return this.nist;
  }

  public PatientGosp setNist(int nist) {
    this.nist = nist;
    setNistIsSet(true);
    return this;
  }

  public void unsetNist() {
    __isset_bit_vector.clear(__NIST_ISSET_ID);
  }

  /** Returns true if field nist is set (has been assigned a value) and false otherwise */
  public boolean isSetNist() {
    return __isset_bit_vector.get(__NIST_ISSET_ID);
  }

  public void setNistIsSet(boolean value) {
    __isset_bit_vector.set(__NIST_ISSET_ID, value);
  }

  public long getDatap() {
    return this.datap;
  }

  public PatientGosp setDatap(long datap) {
    this.datap = datap;
    setDatapIsSet(true);
    return this;
  }

  public void unsetDatap() {
    __isset_bit_vector.clear(__DATAP_ISSET_ID);
  }

  /** Returns true if field datap is set (has been assigned a value) and false otherwise */
  public boolean isSetDatap() {
    return __isset_bit_vector.get(__DATAP_ISSET_ID);
  }

  public void setDatapIsSet(boolean value) {
    __isset_bit_vector.set(__DATAP_ISSET_ID, value);
  }

  public String getVremp() {
    return this.vremp;
  }

  public PatientGosp setVremp(String vremp) {
    this.vremp = vremp;
    return this;
  }

  public void unsetVremp() {
    this.vremp = null;
  }

  /** Returns true if field vremp is set (has been assigned a value) and false otherwise */
  public boolean isSetVremp() {
    return this.vremp != null;
  }

  public void setVrempIsSet(boolean value) {
    if (!value) {
      this.vremp = null;
    }
  }

  public int getPl_extr() {
    return this.pl_extr;
  }

  public PatientGosp setPl_extr(int pl_extr) {
    this.pl_extr = pl_extr;
    setPl_extrIsSet(true);
    return this;
  }

  public void unsetPl_extr() {
    __isset_bit_vector.clear(__PL_EXTR_ISSET_ID);
  }

  /** Returns true if field pl_extr is set (has been assigned a value) and false otherwise */
  public boolean isSetPl_extr() {
    return __isset_bit_vector.get(__PL_EXTR_ISSET_ID);
  }

  public void setPl_extrIsSet(boolean value) {
    __isset_bit_vector.set(__PL_EXTR_ISSET_ID, value);
  }

  public String getNaprav() {
    return this.naprav;
  }

  public PatientGosp setNaprav(String naprav) {
    this.naprav = naprav;
    return this;
  }

  public void unsetNaprav() {
    this.naprav = null;
  }

  /** Returns true if field naprav is set (has been assigned a value) and false otherwise */
  public boolean isSetNaprav() {
    return this.naprav != null;
  }

  public void setNapravIsSet(boolean value) {
    if (!value) {
      this.naprav = null;
    }
  }

  public int getN_org() {
    return this.n_org;
  }

  public PatientGosp setN_org(int n_org) {
    this.n_org = n_org;
    setN_orgIsSet(true);
    return this;
  }

  public void unsetN_org() {
    __isset_bit_vector.clear(__N_ORG_ISSET_ID);
  }

  /** Returns true if field n_org is set (has been assigned a value) and false otherwise */
  public boolean isSetN_org() {
    return __isset_bit_vector.get(__N_ORG_ISSET_ID);
  }

  public void setN_orgIsSet(boolean value) {
    __isset_bit_vector.set(__N_ORG_ISSET_ID, value);
  }

  public int getCotd() {
    return this.cotd;
  }

  public PatientGosp setCotd(int cotd) {
    this.cotd = cotd;
    setCotdIsSet(true);
    return this;
  }

  public void unsetCotd() {
    __isset_bit_vector.clear(__COTD_ISSET_ID);
  }

  /** Returns true if field cotd is set (has been assigned a value) and false otherwise */
  public boolean isSetCotd() {
    return __isset_bit_vector.get(__COTD_ISSET_ID);
  }

  public void setCotdIsSet(boolean value) {
    __isset_bit_vector.set(__COTD_ISSET_ID, value);
  }

  public int getSv_time() {
    return this.sv_time;
  }

  public PatientGosp setSv_time(int sv_time) {
    this.sv_time = sv_time;
    setSv_timeIsSet(true);
    return this;
  }

  public void unsetSv_time() {
    __isset_bit_vector.clear(__SV_TIME_ISSET_ID);
  }

  /** Returns true if field sv_time is set (has been assigned a value) and false otherwise */
  public boolean isSetSv_time() {
    return __isset_bit_vector.get(__SV_TIME_ISSET_ID);
  }

  public void setSv_timeIsSet(boolean value) {
    __isset_bit_vector.set(__SV_TIME_ISSET_ID, value);
  }

  public int getSv_day() {
    return this.sv_day;
  }

  public PatientGosp setSv_day(int sv_day) {
    this.sv_day = sv_day;
    setSv_dayIsSet(true);
    return this;
  }

  public void unsetSv_day() {
    __isset_bit_vector.clear(__SV_DAY_ISSET_ID);
  }

  /** Returns true if field sv_day is set (has been assigned a value) and false otherwise */
  public boolean isSetSv_day() {
    return __isset_bit_vector.get(__SV_DAY_ISSET_ID);
  }

  public void setSv_dayIsSet(boolean value) {
    __isset_bit_vector.set(__SV_DAY_ISSET_ID, value);
  }

  public int getNtalon() {
    return this.ntalon;
  }

  public PatientGosp setNtalon(int ntalon) {
    this.ntalon = ntalon;
    setNtalonIsSet(true);
    return this;
  }

  public void unsetNtalon() {
    __isset_bit_vector.clear(__NTALON_ISSET_ID);
  }

  /** Returns true if field ntalon is set (has been assigned a value) and false otherwise */
  public boolean isSetNtalon() {
    return __isset_bit_vector.get(__NTALON_ISSET_ID);
  }

  public void setNtalonIsSet(boolean value) {
    __isset_bit_vector.set(__NTALON_ISSET_ID, value);
  }

  public int getVidtr() {
    return this.vidtr;
  }

  public PatientGosp setVidtr(int vidtr) {
    this.vidtr = vidtr;
    setVidtrIsSet(true);
    return this;
  }

  public void unsetVidtr() {
    __isset_bit_vector.clear(__VIDTR_ISSET_ID);
  }

  /** Returns true if field vidtr is set (has been assigned a value) and false otherwise */
  public boolean isSetVidtr() {
    return __isset_bit_vector.get(__VIDTR_ISSET_ID);
  }

  public void setVidtrIsSet(boolean value) {
    __isset_bit_vector.set(__VIDTR_ISSET_ID, value);
  }

  public int getPr_out() {
    return this.pr_out;
  }

  public PatientGosp setPr_out(int pr_out) {
    this.pr_out = pr_out;
    setPr_outIsSet(true);
    return this;
  }

  public void unsetPr_out() {
    __isset_bit_vector.clear(__PR_OUT_ISSET_ID);
  }

  /** Returns true if field pr_out is set (has been assigned a value) and false otherwise */
  public boolean isSetPr_out() {
    return __isset_bit_vector.get(__PR_OUT_ISSET_ID);
  }

  public void setPr_outIsSet(boolean value) {
    __isset_bit_vector.set(__PR_OUT_ISSET_ID, value);
  }

  public int getAlkg() {
    return this.alkg;
  }

  public PatientGosp setAlkg(int alkg) {
    this.alkg = alkg;
    setAlkgIsSet(true);
    return this;
  }

  public void unsetAlkg() {
    __isset_bit_vector.clear(__ALKG_ISSET_ID);
  }

  /** Returns true if field alkg is set (has been assigned a value) and false otherwise */
  public boolean isSetAlkg() {
    return __isset_bit_vector.get(__ALKG_ISSET_ID);
  }

  public void setAlkgIsSet(boolean value) {
    __isset_bit_vector.set(__ALKG_ISSET_ID, value);
  }

  public int getMessr() {
    return this.messr;
  }

  public PatientGosp setMessr(int messr) {
    this.messr = messr;
    setMessrIsSet(true);
    return this;
  }

  public void unsetMessr() {
    __isset_bit_vector.clear(__MESSR_ISSET_ID);
  }

  /** Returns true if field messr is set (has been assigned a value) and false otherwise */
  public boolean isSetMessr() {
    return __isset_bit_vector.get(__MESSR_ISSET_ID);
  }

  public void setMessrIsSet(boolean value) {
    __isset_bit_vector.set(__MESSR_ISSET_ID, value);
  }

  public int getVid_trans() {
    return this.vid_trans;
  }

  public PatientGosp setVid_trans(int vid_trans) {
    this.vid_trans = vid_trans;
    setVid_transIsSet(true);
    return this;
  }

  public void unsetVid_trans() {
    __isset_bit_vector.clear(__VID_TRANS_ISSET_ID);
  }

  /** Returns true if field vid_trans is set (has been assigned a value) and false otherwise */
  public boolean isSetVid_trans() {
    return __isset_bit_vector.get(__VID_TRANS_ISSET_ID);
  }

  public void setVid_transIsSet(boolean value) {
    __isset_bit_vector.set(__VID_TRANS_ISSET_ID, value);
  }

  public String getDiag_n() {
    return this.diag_n;
  }

  public PatientGosp setDiag_n(String diag_n) {
    this.diag_n = diag_n;
    return this;
  }

  public void unsetDiag_n() {
    this.diag_n = null;
  }

  /** Returns true if field diag_n is set (has been assigned a value) and false otherwise */
  public boolean isSetDiag_n() {
    return this.diag_n != null;
  }

  public void setDiag_nIsSet(boolean value) {
    if (!value) {
      this.diag_n = null;
    }
  }

  public String getDiag_p() {
    return this.diag_p;
  }

  public PatientGosp setDiag_p(String diag_p) {
    this.diag_p = diag_p;
    return this;
  }

  public void unsetDiag_p() {
    this.diag_p = null;
  }

  /** Returns true if field diag_p is set (has been assigned a value) and false otherwise */
  public boolean isSetDiag_p() {
    return this.diag_p != null;
  }

  public void setDiag_pIsSet(boolean value) {
    if (!value) {
      this.diag_p = null;
    }
  }

  public String getNamed_n() {
    return this.named_n;
  }

  public PatientGosp setNamed_n(String named_n) {
    this.named_n = named_n;
    return this;
  }

  public void unsetNamed_n() {
    this.named_n = null;
  }

  /** Returns true if field named_n is set (has been assigned a value) and false otherwise */
  public boolean isSetNamed_n() {
    return this.named_n != null;
  }

  public void setNamed_nIsSet(boolean value) {
    if (!value) {
      this.named_n = null;
    }
  }

  public String getNamed_p() {
    return this.named_p;
  }

  public PatientGosp setNamed_p(String named_p) {
    this.named_p = named_p;
    return this;
  }

  public void unsetNamed_p() {
    this.named_p = null;
  }

  /** Returns true if field named_p is set (has been assigned a value) and false otherwise */
  public boolean isSetNamed_p() {
    return this.named_p != null;
  }

  public void setNamed_pIsSet(boolean value) {
    if (!value) {
      this.named_p = null;
    }
  }

  public int getNal_z() {
    return this.nal_z;
  }

  public PatientGosp setNal_z(int nal_z) {
    this.nal_z = nal_z;
    setNal_zIsSet(true);
    return this;
  }

  public void unsetNal_z() {
    __isset_bit_vector.clear(__NAL_Z_ISSET_ID);
  }

  /** Returns true if field nal_z is set (has been assigned a value) and false otherwise */
  public boolean isSetNal_z() {
    return __isset_bit_vector.get(__NAL_Z_ISSET_ID);
  }

  public void setNal_zIsSet(boolean value) {
    __isset_bit_vector.set(__NAL_Z_ISSET_ID, value);
  }

  public int getNal_p() {
    return this.nal_p;
  }

  public PatientGosp setNal_p(int nal_p) {
    this.nal_p = nal_p;
    setNal_pIsSet(true);
    return this;
  }

  public void unsetNal_p() {
    __isset_bit_vector.clear(__NAL_P_ISSET_ID);
  }

  /** Returns true if field nal_p is set (has been assigned a value) and false otherwise */
  public boolean isSetNal_p() {
    return __isset_bit_vector.get(__NAL_P_ISSET_ID);
  }

  public void setNal_pIsSet(boolean value) {
    __isset_bit_vector.set(__NAL_P_ISSET_ID, value);
  }

  public String getToc() {
    return this.toc;
  }

  public PatientGosp setToc(String toc) {
    this.toc = toc;
    return this;
  }

  public void unsetToc() {
    this.toc = null;
  }

  /** Returns true if field toc is set (has been assigned a value) and false otherwise */
  public boolean isSetToc() {
    return this.toc != null;
  }

  public void setTocIsSet(boolean value) {
    if (!value) {
      this.toc = null;
    }
  }

  public String getAd() {
    return this.ad;
  }

  public PatientGosp setAd(String ad) {
    this.ad = ad;
    return this;
  }

  public void unsetAd() {
    this.ad = null;
  }

  /** Returns true if field ad is set (has been assigned a value) and false otherwise */
  public boolean isSetAd() {
    return this.ad != null;
  }

  public void setAdIsSet(boolean value) {
    if (!value) {
      this.ad = null;
    }
  }

  public long getSmp_data() {
    return this.smp_data;
  }

  public PatientGosp setSmp_data(long smp_data) {
    this.smp_data = smp_data;
    setSmp_dataIsSet(true);
    return this;
  }

  public void unsetSmp_data() {
    __isset_bit_vector.clear(__SMP_DATA_ISSET_ID);
  }

  /** Returns true if field smp_data is set (has been assigned a value) and false otherwise */
  public boolean isSetSmp_data() {
    return __isset_bit_vector.get(__SMP_DATA_ISSET_ID);
  }

  public void setSmp_dataIsSet(boolean value) {
    __isset_bit_vector.set(__SMP_DATA_ISSET_ID, value);
  }

  public String getSmp_time() {
    return this.smp_time;
  }

  public PatientGosp setSmp_time(String smp_time) {
    this.smp_time = smp_time;
    return this;
  }

  public void unsetSmp_time() {
    this.smp_time = null;
  }

  /** Returns true if field smp_time is set (has been assigned a value) and false otherwise */
  public boolean isSetSmp_time() {
    return this.smp_time != null;
  }

  public void setSmp_timeIsSet(boolean value) {
    if (!value) {
      this.smp_time = null;
    }
  }

  public int getSmp_num() {
    return this.smp_num;
  }

  public PatientGosp setSmp_num(int smp_num) {
    this.smp_num = smp_num;
    setSmp_numIsSet(true);
    return this;
  }

  public void unsetSmp_num() {
    __isset_bit_vector.clear(__SMP_NUM_ISSET_ID);
  }

  /** Returns true if field smp_num is set (has been assigned a value) and false otherwise */
  public boolean isSetSmp_num() {
    return __isset_bit_vector.get(__SMP_NUM_ISSET_ID);
  }

  public void setSmp_numIsSet(boolean value) {
    __isset_bit_vector.set(__SMP_NUM_ISSET_ID, value);
  }

  public int getCotd_p() {
    return this.cotd_p;
  }

  public PatientGosp setCotd_p(int cotd_p) {
    this.cotd_p = cotd_p;
    setCotd_pIsSet(true);
    return this;
  }

  public void unsetCotd_p() {
    __isset_bit_vector.clear(__COTD_P_ISSET_ID);
  }

  /** Returns true if field cotd_p is set (has been assigned a value) and false otherwise */
  public boolean isSetCotd_p() {
    return __isset_bit_vector.get(__COTD_P_ISSET_ID);
  }

  public void setCotd_pIsSet(boolean value) {
    __isset_bit_vector.set(__COTD_P_ISSET_ID, value);
  }

  public long getDatagos() {
    return this.datagos;
  }

  public PatientGosp setDatagos(long datagos) {
    this.datagos = datagos;
    setDatagosIsSet(true);
    return this;
  }

  public void unsetDatagos() {
    __isset_bit_vector.clear(__DATAGOS_ISSET_ID);
  }

  /** Returns true if field datagos is set (has been assigned a value) and false otherwise */
  public boolean isSetDatagos() {
    return __isset_bit_vector.get(__DATAGOS_ISSET_ID);
  }

  public void setDatagosIsSet(boolean value) {
    __isset_bit_vector.set(__DATAGOS_ISSET_ID, value);
  }

  public String getVremgos() {
    return this.vremgos;
  }

  public PatientGosp setVremgos(String vremgos) {
    this.vremgos = vremgos;
    return this;
  }

  public void unsetVremgos() {
    this.vremgos = null;
  }

  /** Returns true if field vremgos is set (has been assigned a value) and false otherwise */
  public boolean isSetVremgos() {
    return this.vremgos != null;
  }

  public void setVremgosIsSet(boolean value) {
    if (!value) {
      this.vremgos = null;
    }
  }

  public int getCuser() {
    return this.cuser;
  }

  public PatientGosp setCuser(int cuser) {
    this.cuser = cuser;
    setCuserIsSet(true);
    return this;
  }

  public void unsetCuser() {
    __isset_bit_vector.clear(__CUSER_ISSET_ID);
  }

  /** Returns true if field cuser is set (has been assigned a value) and false otherwise */
  public boolean isSetCuser() {
    return __isset_bit_vector.get(__CUSER_ISSET_ID);
  }

  public void setCuserIsSet(boolean value) {
    __isset_bit_vector.set(__CUSER_ISSET_ID, value);
  }

  public long getDataosm() {
    return this.dataosm;
  }

  public PatientGosp setDataosm(long dataosm) {
    this.dataosm = dataosm;
    setDataosmIsSet(true);
    return this;
  }

  public void unsetDataosm() {
    __isset_bit_vector.clear(__DATAOSM_ISSET_ID);
  }

  /** Returns true if field dataosm is set (has been assigned a value) and false otherwise */
  public boolean isSetDataosm() {
    return __isset_bit_vector.get(__DATAOSM_ISSET_ID);
  }

  public void setDataosmIsSet(boolean value) {
    __isset_bit_vector.set(__DATAOSM_ISSET_ID, value);
  }

  public String getVremosm() {
    return this.vremosm;
  }

  public PatientGosp setVremosm(String vremosm) {
    this.vremosm = vremosm;
    return this;
  }

  public void unsetVremosm() {
    this.vremosm = null;
  }

  /** Returns true if field vremosm is set (has been assigned a value) and false otherwise */
  public boolean isSetVremosm() {
    return this.vremosm != null;
  }

  public void setVremosmIsSet(boolean value) {
    if (!value) {
      this.vremosm = null;
    }
  }

  public long getDataz() {
    return this.dataz;
  }

  public PatientGosp setDataz(long dataz) {
    this.dataz = dataz;
    setDatazIsSet(true);
    return this;
  }

  public void unsetDataz() {
    __isset_bit_vector.clear(__DATAZ_ISSET_ID);
  }

  /** Returns true if field dataz is set (has been assigned a value) and false otherwise */
  public boolean isSetDataz() {
    return __isset_bit_vector.get(__DATAZ_ISSET_ID);
  }

  public void setDatazIsSet(boolean value) {
    __isset_bit_vector.set(__DATAZ_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NPASP:
      if (value == null) {
        unsetNpasp();
      } else {
        setNpasp((Integer)value);
      }
      break;

    case NGOSP:
      if (value == null) {
        unsetNgosp();
      } else {
        setNgosp((Integer)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NIST:
      if (value == null) {
        unsetNist();
      } else {
        setNist((Integer)value);
      }
      break;

    case DATAP:
      if (value == null) {
        unsetDatap();
      } else {
        setDatap((Long)value);
      }
      break;

    case VREMP:
      if (value == null) {
        unsetVremp();
      } else {
        setVremp((String)value);
      }
      break;

    case PL_EXTR:
      if (value == null) {
        unsetPl_extr();
      } else {
        setPl_extr((Integer)value);
      }
      break;

    case NAPRAV:
      if (value == null) {
        unsetNaprav();
      } else {
        setNaprav((String)value);
      }
      break;

    case N_ORG:
      if (value == null) {
        unsetN_org();
      } else {
        setN_org((Integer)value);
      }
      break;

    case COTD:
      if (value == null) {
        unsetCotd();
      } else {
        setCotd((Integer)value);
      }
      break;

    case SV_TIME:
      if (value == null) {
        unsetSv_time();
      } else {
        setSv_time((Integer)value);
      }
      break;

    case SV_DAY:
      if (value == null) {
        unsetSv_day();
      } else {
        setSv_day((Integer)value);
      }
      break;

    case NTALON:
      if (value == null) {
        unsetNtalon();
      } else {
        setNtalon((Integer)value);
      }
      break;

    case VIDTR:
      if (value == null) {
        unsetVidtr();
      } else {
        setVidtr((Integer)value);
      }
      break;

    case PR_OUT:
      if (value == null) {
        unsetPr_out();
      } else {
        setPr_out((Integer)value);
      }
      break;

    case ALKG:
      if (value == null) {
        unsetAlkg();
      } else {
        setAlkg((Integer)value);
      }
      break;

    case MESSR:
      if (value == null) {
        unsetMessr();
      } else {
        setMessr((Integer)value);
      }
      break;

    case VID_TRANS:
      if (value == null) {
        unsetVid_trans();
      } else {
        setVid_trans((Integer)value);
      }
      break;

    case DIAG_N:
      if (value == null) {
        unsetDiag_n();
      } else {
        setDiag_n((String)value);
      }
      break;

    case DIAG_P:
      if (value == null) {
        unsetDiag_p();
      } else {
        setDiag_p((String)value);
      }
      break;

    case NAMED_N:
      if (value == null) {
        unsetNamed_n();
      } else {
        setNamed_n((String)value);
      }
      break;

    case NAMED_P:
      if (value == null) {
        unsetNamed_p();
      } else {
        setNamed_p((String)value);
      }
      break;

    case NAL_Z:
      if (value == null) {
        unsetNal_z();
      } else {
        setNal_z((Integer)value);
      }
      break;

    case NAL_P:
      if (value == null) {
        unsetNal_p();
      } else {
        setNal_p((Integer)value);
      }
      break;

    case TOC:
      if (value == null) {
        unsetToc();
      } else {
        setToc((String)value);
      }
      break;

    case AD:
      if (value == null) {
        unsetAd();
      } else {
        setAd((String)value);
      }
      break;

    case SMP_DATA:
      if (value == null) {
        unsetSmp_data();
      } else {
        setSmp_data((Long)value);
      }
      break;

    case SMP_TIME:
      if (value == null) {
        unsetSmp_time();
      } else {
        setSmp_time((String)value);
      }
      break;

    case SMP_NUM:
      if (value == null) {
        unsetSmp_num();
      } else {
        setSmp_num((Integer)value);
      }
      break;

    case COTD_P:
      if (value == null) {
        unsetCotd_p();
      } else {
        setCotd_p((Integer)value);
      }
      break;

    case DATAGOS:
      if (value == null) {
        unsetDatagos();
      } else {
        setDatagos((Long)value);
      }
      break;

    case VREMGOS:
      if (value == null) {
        unsetVremgos();
      } else {
        setVremgos((String)value);
      }
      break;

    case CUSER:
      if (value == null) {
        unsetCuser();
      } else {
        setCuser((Integer)value);
      }
      break;

    case DATAOSM:
      if (value == null) {
        unsetDataosm();
      } else {
        setDataosm((Long)value);
      }
      break;

    case VREMOSM:
      if (value == null) {
        unsetVremosm();
      } else {
        setVremosm((String)value);
      }
      break;

    case DATAZ:
      if (value == null) {
        unsetDataz();
      } else {
        setDataz((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NPASP:
      return Integer.valueOf(getNpasp());

    case NGOSP:
      return Integer.valueOf(getNgosp());

    case ID:
      return Integer.valueOf(getId());

    case NIST:
      return Integer.valueOf(getNist());

    case DATAP:
      return Long.valueOf(getDatap());

    case VREMP:
      return getVremp();

    case PL_EXTR:
      return Integer.valueOf(getPl_extr());

    case NAPRAV:
      return getNaprav();

    case N_ORG:
      return Integer.valueOf(getN_org());

    case COTD:
      return Integer.valueOf(getCotd());

    case SV_TIME:
      return Integer.valueOf(getSv_time());

    case SV_DAY:
      return Integer.valueOf(getSv_day());

    case NTALON:
      return Integer.valueOf(getNtalon());

    case VIDTR:
      return Integer.valueOf(getVidtr());

    case PR_OUT:
      return Integer.valueOf(getPr_out());

    case ALKG:
      return Integer.valueOf(getAlkg());

    case MESSR:
      return Integer.valueOf(getMessr());

    case VID_TRANS:
      return Integer.valueOf(getVid_trans());

    case DIAG_N:
      return getDiag_n();

    case DIAG_P:
      return getDiag_p();

    case NAMED_N:
      return getNamed_n();

    case NAMED_P:
      return getNamed_p();

    case NAL_Z:
      return Integer.valueOf(getNal_z());

    case NAL_P:
      return Integer.valueOf(getNal_p());

    case TOC:
      return getToc();

    case AD:
      return getAd();

    case SMP_DATA:
      return Long.valueOf(getSmp_data());

    case SMP_TIME:
      return getSmp_time();

    case SMP_NUM:
      return Integer.valueOf(getSmp_num());

    case COTD_P:
      return Integer.valueOf(getCotd_p());

    case DATAGOS:
      return Long.valueOf(getDatagos());

    case VREMGOS:
      return getVremgos();

    case CUSER:
      return Integer.valueOf(getCuser());

    case DATAOSM:
      return Long.valueOf(getDataosm());

    case VREMOSM:
      return getVremosm();

    case DATAZ:
      return Long.valueOf(getDataz());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NPASP:
      return isSetNpasp();
    case NGOSP:
      return isSetNgosp();
    case ID:
      return isSetId();
    case NIST:
      return isSetNist();
    case DATAP:
      return isSetDatap();
    case VREMP:
      return isSetVremp();
    case PL_EXTR:
      return isSetPl_extr();
    case NAPRAV:
      return isSetNaprav();
    case N_ORG:
      return isSetN_org();
    case COTD:
      return isSetCotd();
    case SV_TIME:
      return isSetSv_time();
    case SV_DAY:
      return isSetSv_day();
    case NTALON:
      return isSetNtalon();
    case VIDTR:
      return isSetVidtr();
    case PR_OUT:
      return isSetPr_out();
    case ALKG:
      return isSetAlkg();
    case MESSR:
      return isSetMessr();
    case VID_TRANS:
      return isSetVid_trans();
    case DIAG_N:
      return isSetDiag_n();
    case DIAG_P:
      return isSetDiag_p();
    case NAMED_N:
      return isSetNamed_n();
    case NAMED_P:
      return isSetNamed_p();
    case NAL_Z:
      return isSetNal_z();
    case NAL_P:
      return isSetNal_p();
    case TOC:
      return isSetToc();
    case AD:
      return isSetAd();
    case SMP_DATA:
      return isSetSmp_data();
    case SMP_TIME:
      return isSetSmp_time();
    case SMP_NUM:
      return isSetSmp_num();
    case COTD_P:
      return isSetCotd_p();
    case DATAGOS:
      return isSetDatagos();
    case VREMGOS:
      return isSetVremgos();
    case CUSER:
      return isSetCuser();
    case DATAOSM:
      return isSetDataosm();
    case VREMOSM:
      return isSetVremosm();
    case DATAZ:
      return isSetDataz();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PatientGosp)
      return this.equals((PatientGosp)that);
    return false;
  }

  public boolean equals(PatientGosp that) {
    if (that == null)
      return false;

    boolean this_present_npasp = true;
    boolean that_present_npasp = true;
    if (this_present_npasp || that_present_npasp) {
      if (!(this_present_npasp && that_present_npasp))
        return false;
      if (this.npasp != that.npasp)
        return false;
    }

    boolean this_present_ngosp = true;
    boolean that_present_ngosp = true;
    if (this_present_ngosp || that_present_ngosp) {
      if (!(this_present_ngosp && that_present_ngosp))
        return false;
      if (this.ngosp != that.ngosp)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_nist = true;
    boolean that_present_nist = true;
    if (this_present_nist || that_present_nist) {
      if (!(this_present_nist && that_present_nist))
        return false;
      if (this.nist != that.nist)
        return false;
    }

    boolean this_present_datap = true;
    boolean that_present_datap = true;
    if (this_present_datap || that_present_datap) {
      if (!(this_present_datap && that_present_datap))
        return false;
      if (this.datap != that.datap)
        return false;
    }

    boolean this_present_vremp = true && this.isSetVremp();
    boolean that_present_vremp = true && that.isSetVremp();
    if (this_present_vremp || that_present_vremp) {
      if (!(this_present_vremp && that_present_vremp))
        return false;
      if (!this.vremp.equals(that.vremp))
        return false;
    }

    boolean this_present_pl_extr = true;
    boolean that_present_pl_extr = true;
    if (this_present_pl_extr || that_present_pl_extr) {
      if (!(this_present_pl_extr && that_present_pl_extr))
        return false;
      if (this.pl_extr != that.pl_extr)
        return false;
    }

    boolean this_present_naprav = true && this.isSetNaprav();
    boolean that_present_naprav = true && that.isSetNaprav();
    if (this_present_naprav || that_present_naprav) {
      if (!(this_present_naprav && that_present_naprav))
        return false;
      if (!this.naprav.equals(that.naprav))
        return false;
    }

    boolean this_present_n_org = true;
    boolean that_present_n_org = true;
    if (this_present_n_org || that_present_n_org) {
      if (!(this_present_n_org && that_present_n_org))
        return false;
      if (this.n_org != that.n_org)
        return false;
    }

    boolean this_present_cotd = true;
    boolean that_present_cotd = true;
    if (this_present_cotd || that_present_cotd) {
      if (!(this_present_cotd && that_present_cotd))
        return false;
      if (this.cotd != that.cotd)
        return false;
    }

    boolean this_present_sv_time = true;
    boolean that_present_sv_time = true;
    if (this_present_sv_time || that_present_sv_time) {
      if (!(this_present_sv_time && that_present_sv_time))
        return false;
      if (this.sv_time != that.sv_time)
        return false;
    }

    boolean this_present_sv_day = true;
    boolean that_present_sv_day = true;
    if (this_present_sv_day || that_present_sv_day) {
      if (!(this_present_sv_day && that_present_sv_day))
        return false;
      if (this.sv_day != that.sv_day)
        return false;
    }

    boolean this_present_ntalon = true;
    boolean that_present_ntalon = true;
    if (this_present_ntalon || that_present_ntalon) {
      if (!(this_present_ntalon && that_present_ntalon))
        return false;
      if (this.ntalon != that.ntalon)
        return false;
    }

    boolean this_present_vidtr = true;
    boolean that_present_vidtr = true;
    if (this_present_vidtr || that_present_vidtr) {
      if (!(this_present_vidtr && that_present_vidtr))
        return false;
      if (this.vidtr != that.vidtr)
        return false;
    }

    boolean this_present_pr_out = true;
    boolean that_present_pr_out = true;
    if (this_present_pr_out || that_present_pr_out) {
      if (!(this_present_pr_out && that_present_pr_out))
        return false;
      if (this.pr_out != that.pr_out)
        return false;
    }

    boolean this_present_alkg = true;
    boolean that_present_alkg = true;
    if (this_present_alkg || that_present_alkg) {
      if (!(this_present_alkg && that_present_alkg))
        return false;
      if (this.alkg != that.alkg)
        return false;
    }

    boolean this_present_messr = true;
    boolean that_present_messr = true;
    if (this_present_messr || that_present_messr) {
      if (!(this_present_messr && that_present_messr))
        return false;
      if (this.messr != that.messr)
        return false;
    }

    boolean this_present_vid_trans = true;
    boolean that_present_vid_trans = true;
    if (this_present_vid_trans || that_present_vid_trans) {
      if (!(this_present_vid_trans && that_present_vid_trans))
        return false;
      if (this.vid_trans != that.vid_trans)
        return false;
    }

    boolean this_present_diag_n = true && this.isSetDiag_n();
    boolean that_present_diag_n = true && that.isSetDiag_n();
    if (this_present_diag_n || that_present_diag_n) {
      if (!(this_present_diag_n && that_present_diag_n))
        return false;
      if (!this.diag_n.equals(that.diag_n))
        return false;
    }

    boolean this_present_diag_p = true && this.isSetDiag_p();
    boolean that_present_diag_p = true && that.isSetDiag_p();
    if (this_present_diag_p || that_present_diag_p) {
      if (!(this_present_diag_p && that_present_diag_p))
        return false;
      if (!this.diag_p.equals(that.diag_p))
        return false;
    }

    boolean this_present_named_n = true && this.isSetNamed_n();
    boolean that_present_named_n = true && that.isSetNamed_n();
    if (this_present_named_n || that_present_named_n) {
      if (!(this_present_named_n && that_present_named_n))
        return false;
      if (!this.named_n.equals(that.named_n))
        return false;
    }

    boolean this_present_named_p = true && this.isSetNamed_p();
    boolean that_present_named_p = true && that.isSetNamed_p();
    if (this_present_named_p || that_present_named_p) {
      if (!(this_present_named_p && that_present_named_p))
        return false;
      if (!this.named_p.equals(that.named_p))
        return false;
    }

    boolean this_present_nal_z = true;
    boolean that_present_nal_z = true;
    if (this_present_nal_z || that_present_nal_z) {
      if (!(this_present_nal_z && that_present_nal_z))
        return false;
      if (this.nal_z != that.nal_z)
        return false;
    }

    boolean this_present_nal_p = true;
    boolean that_present_nal_p = true;
    if (this_present_nal_p || that_present_nal_p) {
      if (!(this_present_nal_p && that_present_nal_p))
        return false;
      if (this.nal_p != that.nal_p)
        return false;
    }

    boolean this_present_toc = true && this.isSetToc();
    boolean that_present_toc = true && that.isSetToc();
    if (this_present_toc || that_present_toc) {
      if (!(this_present_toc && that_present_toc))
        return false;
      if (!this.toc.equals(that.toc))
        return false;
    }

    boolean this_present_ad = true && this.isSetAd();
    boolean that_present_ad = true && that.isSetAd();
    if (this_present_ad || that_present_ad) {
      if (!(this_present_ad && that_present_ad))
        return false;
      if (!this.ad.equals(that.ad))
        return false;
    }

    boolean this_present_smp_data = true;
    boolean that_present_smp_data = true;
    if (this_present_smp_data || that_present_smp_data) {
      if (!(this_present_smp_data && that_present_smp_data))
        return false;
      if (this.smp_data != that.smp_data)
        return false;
    }

    boolean this_present_smp_time = true && this.isSetSmp_time();
    boolean that_present_smp_time = true && that.isSetSmp_time();
    if (this_present_smp_time || that_present_smp_time) {
      if (!(this_present_smp_time && that_present_smp_time))
        return false;
      if (!this.smp_time.equals(that.smp_time))
        return false;
    }

    boolean this_present_smp_num = true;
    boolean that_present_smp_num = true;
    if (this_present_smp_num || that_present_smp_num) {
      if (!(this_present_smp_num && that_present_smp_num))
        return false;
      if (this.smp_num != that.smp_num)
        return false;
    }

    boolean this_present_cotd_p = true;
    boolean that_present_cotd_p = true;
    if (this_present_cotd_p || that_present_cotd_p) {
      if (!(this_present_cotd_p && that_present_cotd_p))
        return false;
      if (this.cotd_p != that.cotd_p)
        return false;
    }

    boolean this_present_datagos = true;
    boolean that_present_datagos = true;
    if (this_present_datagos || that_present_datagos) {
      if (!(this_present_datagos && that_present_datagos))
        return false;
      if (this.datagos != that.datagos)
        return false;
    }

    boolean this_present_vremgos = true && this.isSetVremgos();
    boolean that_present_vremgos = true && that.isSetVremgos();
    if (this_present_vremgos || that_present_vremgos) {
      if (!(this_present_vremgos && that_present_vremgos))
        return false;
      if (!this.vremgos.equals(that.vremgos))
        return false;
    }

    boolean this_present_cuser = true;
    boolean that_present_cuser = true;
    if (this_present_cuser || that_present_cuser) {
      if (!(this_present_cuser && that_present_cuser))
        return false;
      if (this.cuser != that.cuser)
        return false;
    }

    boolean this_present_dataosm = true;
    boolean that_present_dataosm = true;
    if (this_present_dataosm || that_present_dataosm) {
      if (!(this_present_dataosm && that_present_dataosm))
        return false;
      if (this.dataosm != that.dataosm)
        return false;
    }

    boolean this_present_vremosm = true && this.isSetVremosm();
    boolean that_present_vremosm = true && that.isSetVremosm();
    if (this_present_vremosm || that_present_vremosm) {
      if (!(this_present_vremosm && that_present_vremosm))
        return false;
      if (!this.vremosm.equals(that.vremosm))
        return false;
    }

    boolean this_present_dataz = true;
    boolean that_present_dataz = true;
    if (this_present_dataz || that_present_dataz) {
      if (!(this_present_dataz && that_present_dataz))
        return false;
      if (this.dataz != that.dataz)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PatientGosp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PatientGosp typedOther = (PatientGosp)other;

    lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNpasp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNgosp()).compareTo(typedOther.isSetNgosp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNgosp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ngosp, typedOther.ngosp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNist()).compareTo(typedOther.isSetNist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nist, typedOther.nist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatap()).compareTo(typedOther.isSetDatap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datap, typedOther.datap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVremp()).compareTo(typedOther.isSetVremp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVremp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vremp, typedOther.vremp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPl_extr()).compareTo(typedOther.isSetPl_extr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPl_extr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pl_extr, typedOther.pl_extr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNaprav()).compareTo(typedOther.isSetNaprav());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNaprav()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.naprav, typedOther.naprav);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetN_org()).compareTo(typedOther.isSetN_org());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN_org()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n_org, typedOther.n_org);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCotd()).compareTo(typedOther.isSetCotd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCotd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cotd, typedOther.cotd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSv_time()).compareTo(typedOther.isSetSv_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSv_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sv_time, typedOther.sv_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSv_day()).compareTo(typedOther.isSetSv_day());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSv_day()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sv_day, typedOther.sv_day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNtalon()).compareTo(typedOther.isSetNtalon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNtalon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ntalon, typedOther.ntalon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVidtr()).compareTo(typedOther.isSetVidtr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVidtr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vidtr, typedOther.vidtr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPr_out()).compareTo(typedOther.isSetPr_out());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPr_out()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pr_out, typedOther.pr_out);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlkg()).compareTo(typedOther.isSetAlkg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlkg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alkg, typedOther.alkg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessr()).compareTo(typedOther.isSetMessr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messr, typedOther.messr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVid_trans()).compareTo(typedOther.isSetVid_trans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVid_trans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid_trans, typedOther.vid_trans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiag_n()).compareTo(typedOther.isSetDiag_n());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiag_n()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diag_n, typedOther.diag_n);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiag_p()).compareTo(typedOther.isSetDiag_p());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiag_p()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diag_p, typedOther.diag_p);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNamed_n()).compareTo(typedOther.isSetNamed_n());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNamed_n()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.named_n, typedOther.named_n);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNamed_p()).compareTo(typedOther.isSetNamed_p());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNamed_p()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.named_p, typedOther.named_p);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNal_z()).compareTo(typedOther.isSetNal_z());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNal_z()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nal_z, typedOther.nal_z);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNal_p()).compareTo(typedOther.isSetNal_p());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNal_p()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nal_p, typedOther.nal_p);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToc()).compareTo(typedOther.isSetToc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toc, typedOther.toc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAd()).compareTo(typedOther.isSetAd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ad, typedOther.ad);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmp_data()).compareTo(typedOther.isSetSmp_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmp_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smp_data, typedOther.smp_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmp_time()).compareTo(typedOther.isSetSmp_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmp_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smp_time, typedOther.smp_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmp_num()).compareTo(typedOther.isSetSmp_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmp_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smp_num, typedOther.smp_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCotd_p()).compareTo(typedOther.isSetCotd_p());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCotd_p()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cotd_p, typedOther.cotd_p);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatagos()).compareTo(typedOther.isSetDatagos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatagos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datagos, typedOther.datagos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVremgos()).compareTo(typedOther.isSetVremgos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVremgos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vremgos, typedOther.vremgos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCuser()).compareTo(typedOther.isSetCuser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCuser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cuser, typedOther.cuser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataosm()).compareTo(typedOther.isSetDataosm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataosm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataosm, typedOther.dataosm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVremosm()).compareTo(typedOther.isSetVremosm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVremosm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vremosm, typedOther.vremosm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataz()).compareTo(typedOther.isSetDataz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataz, typedOther.dataz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PatientGosp(");
    boolean first = true;

    sb.append("npasp:");
    sb.append(this.npasp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ngosp:");
    sb.append(this.ngosp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nist:");
    sb.append(this.nist);
    first = false;
    if (!first) sb.append(", ");
    sb.append("datap:");
    sb.append(this.datap);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vremp:");
    if (this.vremp == null) {
      sb.append("null");
    } else {
      sb.append(this.vremp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pl_extr:");
    sb.append(this.pl_extr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("naprav:");
    if (this.naprav == null) {
      sb.append("null");
    } else {
      sb.append(this.naprav);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("n_org:");
    sb.append(this.n_org);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cotd:");
    sb.append(this.cotd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sv_time:");
    sb.append(this.sv_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sv_day:");
    sb.append(this.sv_day);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ntalon:");
    sb.append(this.ntalon);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vidtr:");
    sb.append(this.vidtr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pr_out:");
    sb.append(this.pr_out);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alkg:");
    sb.append(this.alkg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messr:");
    sb.append(this.messr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vid_trans:");
    sb.append(this.vid_trans);
    first = false;
    if (!first) sb.append(", ");
    sb.append("diag_n:");
    if (this.diag_n == null) {
      sb.append("null");
    } else {
      sb.append(this.diag_n);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("diag_p:");
    if (this.diag_p == null) {
      sb.append("null");
    } else {
      sb.append(this.diag_p);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("named_n:");
    if (this.named_n == null) {
      sb.append("null");
    } else {
      sb.append(this.named_n);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("named_p:");
    if (this.named_p == null) {
      sb.append("null");
    } else {
      sb.append(this.named_p);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nal_z:");
    sb.append(this.nal_z);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nal_p:");
    sb.append(this.nal_p);
    first = false;
    if (!first) sb.append(", ");
    sb.append("toc:");
    if (this.toc == null) {
      sb.append("null");
    } else {
      sb.append(this.toc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ad:");
    if (this.ad == null) {
      sb.append("null");
    } else {
      sb.append(this.ad);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("smp_data:");
    sb.append(this.smp_data);
    first = false;
    if (!first) sb.append(", ");
    sb.append("smp_time:");
    if (this.smp_time == null) {
      sb.append("null");
    } else {
      sb.append(this.smp_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("smp_num:");
    sb.append(this.smp_num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cotd_p:");
    sb.append(this.cotd_p);
    first = false;
    if (!first) sb.append(", ");
    sb.append("datagos:");
    sb.append(this.datagos);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vremgos:");
    if (this.vremgos == null) {
      sb.append("null");
    } else {
      sb.append(this.vremgos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cuser:");
    sb.append(this.cuser);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataosm:");
    sb.append(this.dataosm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vremosm:");
    if (this.vremosm == null) {
      sb.append("null");
    } else {
      sb.append(this.vremosm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataz:");
    sb.append(this.dataz);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PatientGospStandardSchemeFactory implements SchemeFactory {
    public PatientGospStandardScheme getScheme() {
      return new PatientGospStandardScheme();
    }
  }

  private static class PatientGospStandardScheme extends StandardScheme<PatientGosp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PatientGosp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NPASP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.npasp = iprot.readI32();
              struct.setNpaspIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NGOSP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ngosp = iprot.readI32();
              struct.setNgospIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NIST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nist = iprot.readI32();
              struct.setNistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATAP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datap = iprot.readI64();
              struct.setDatapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VREMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vremp = iprot.readString();
              struct.setVrempIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PL_EXTR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pl_extr = iprot.readI32();
              struct.setPl_extrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NAPRAV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.naprav = iprot.readString();
              struct.setNapravIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // N_ORG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n_org = iprot.readI32();
              struct.setN_orgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COTD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cotd = iprot.readI32();
              struct.setCotdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SV_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sv_time = iprot.readI32();
              struct.setSv_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SV_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sv_day = iprot.readI32();
              struct.setSv_dayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NTALON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ntalon = iprot.readI32();
              struct.setNtalonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // VIDTR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vidtr = iprot.readI32();
              struct.setVidtrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PR_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pr_out = iprot.readI32();
              struct.setPr_outIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ALKG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.alkg = iprot.readI32();
              struct.setAlkgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MESSR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.messr = iprot.readI32();
              struct.setMessrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // VID_TRANS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vid_trans = iprot.readI32();
              struct.setVid_transIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // DIAG_N
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.diag_n = iprot.readString();
              struct.setDiag_nIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DIAG_P
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.diag_p = iprot.readString();
              struct.setDiag_pIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // NAMED_N
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.named_n = iprot.readString();
              struct.setNamed_nIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // NAMED_P
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.named_p = iprot.readString();
              struct.setNamed_pIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // NAL_Z
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nal_z = iprot.readI32();
              struct.setNal_zIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // NAL_P
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nal_p = iprot.readI32();
              struct.setNal_pIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TOC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toc = iprot.readString();
              struct.setTocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // AD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ad = iprot.readString();
              struct.setAdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // SMP_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.smp_data = iprot.readI64();
              struct.setSmp_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // SMP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.smp_time = iprot.readString();
              struct.setSmp_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // SMP_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.smp_num = iprot.readI32();
              struct.setSmp_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // COTD_P
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cotd_p = iprot.readI32();
              struct.setCotd_pIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // DATAGOS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datagos = iprot.readI64();
              struct.setDatagosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // VREMGOS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vremgos = iprot.readString();
              struct.setVremgosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // CUSER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cuser = iprot.readI32();
              struct.setCuserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // DATAOSM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataosm = iprot.readI64();
              struct.setDataosmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // VREMOSM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vremosm = iprot.readString();
              struct.setVremosmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // DATAZ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataz = iprot.readI64();
              struct.setDatazIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PatientGosp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NPASP_FIELD_DESC);
      oprot.writeI32(struct.npasp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NGOSP_FIELD_DESC);
      oprot.writeI32(struct.ngosp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NIST_FIELD_DESC);
      oprot.writeI32(struct.nist);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATAP_FIELD_DESC);
      oprot.writeI64(struct.datap);
      oprot.writeFieldEnd();
      if (struct.vremp != null) {
        oprot.writeFieldBegin(VREMP_FIELD_DESC);
        oprot.writeString(struct.vremp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PL_EXTR_FIELD_DESC);
      oprot.writeI32(struct.pl_extr);
      oprot.writeFieldEnd();
      if (struct.naprav != null) {
        oprot.writeFieldBegin(NAPRAV_FIELD_DESC);
        oprot.writeString(struct.naprav);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(N_ORG_FIELD_DESC);
      oprot.writeI32(struct.n_org);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COTD_FIELD_DESC);
      oprot.writeI32(struct.cotd);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SV_TIME_FIELD_DESC);
      oprot.writeI32(struct.sv_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SV_DAY_FIELD_DESC);
      oprot.writeI32(struct.sv_day);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NTALON_FIELD_DESC);
      oprot.writeI32(struct.ntalon);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIDTR_FIELD_DESC);
      oprot.writeI32(struct.vidtr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PR_OUT_FIELD_DESC);
      oprot.writeI32(struct.pr_out);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALKG_FIELD_DESC);
      oprot.writeI32(struct.alkg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSR_FIELD_DESC);
      oprot.writeI32(struct.messr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VID_TRANS_FIELD_DESC);
      oprot.writeI32(struct.vid_trans);
      oprot.writeFieldEnd();
      if (struct.diag_n != null) {
        oprot.writeFieldBegin(DIAG_N_FIELD_DESC);
        oprot.writeString(struct.diag_n);
        oprot.writeFieldEnd();
      }
      if (struct.diag_p != null) {
        oprot.writeFieldBegin(DIAG_P_FIELD_DESC);
        oprot.writeString(struct.diag_p);
        oprot.writeFieldEnd();
      }
      if (struct.named_n != null) {
        oprot.writeFieldBegin(NAMED_N_FIELD_DESC);
        oprot.writeString(struct.named_n);
        oprot.writeFieldEnd();
      }
      if (struct.named_p != null) {
        oprot.writeFieldBegin(NAMED_P_FIELD_DESC);
        oprot.writeString(struct.named_p);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NAL_Z_FIELD_DESC);
      oprot.writeI32(struct.nal_z);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NAL_P_FIELD_DESC);
      oprot.writeI32(struct.nal_p);
      oprot.writeFieldEnd();
      if (struct.toc != null) {
        oprot.writeFieldBegin(TOC_FIELD_DESC);
        oprot.writeString(struct.toc);
        oprot.writeFieldEnd();
      }
      if (struct.ad != null) {
        oprot.writeFieldBegin(AD_FIELD_DESC);
        oprot.writeString(struct.ad);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SMP_DATA_FIELD_DESC);
      oprot.writeI64(struct.smp_data);
      oprot.writeFieldEnd();
      if (struct.smp_time != null) {
        oprot.writeFieldBegin(SMP_TIME_FIELD_DESC);
        oprot.writeString(struct.smp_time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SMP_NUM_FIELD_DESC);
      oprot.writeI32(struct.smp_num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COTD_P_FIELD_DESC);
      oprot.writeI32(struct.cotd_p);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATAGOS_FIELD_DESC);
      oprot.writeI64(struct.datagos);
      oprot.writeFieldEnd();
      if (struct.vremgos != null) {
        oprot.writeFieldBegin(VREMGOS_FIELD_DESC);
        oprot.writeString(struct.vremgos);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUSER_FIELD_DESC);
      oprot.writeI32(struct.cuser);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATAOSM_FIELD_DESC);
      oprot.writeI64(struct.dataosm);
      oprot.writeFieldEnd();
      if (struct.vremosm != null) {
        oprot.writeFieldBegin(VREMOSM_FIELD_DESC);
        oprot.writeString(struct.vremosm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATAZ_FIELD_DESC);
      oprot.writeI64(struct.dataz);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PatientGospTupleSchemeFactory implements SchemeFactory {
    public PatientGospTupleScheme getScheme() {
      return new PatientGospTupleScheme();
    }
  }

  private static class PatientGospTupleScheme extends TupleScheme<PatientGosp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PatientGosp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNpasp()) {
        optionals.set(0);
      }
      if (struct.isSetNgosp()) {
        optionals.set(1);
      }
      if (struct.isSetId()) {
        optionals.set(2);
      }
      if (struct.isSetNist()) {
        optionals.set(3);
      }
      if (struct.isSetDatap()) {
        optionals.set(4);
      }
      if (struct.isSetVremp()) {
        optionals.set(5);
      }
      if (struct.isSetPl_extr()) {
        optionals.set(6);
      }
      if (struct.isSetNaprav()) {
        optionals.set(7);
      }
      if (struct.isSetN_org()) {
        optionals.set(8);
      }
      if (struct.isSetCotd()) {
        optionals.set(9);
      }
      if (struct.isSetSv_time()) {
        optionals.set(10);
      }
      if (struct.isSetSv_day()) {
        optionals.set(11);
      }
      if (struct.isSetNtalon()) {
        optionals.set(12);
      }
      if (struct.isSetVidtr()) {
        optionals.set(13);
      }
      if (struct.isSetPr_out()) {
        optionals.set(14);
      }
      if (struct.isSetAlkg()) {
        optionals.set(15);
      }
      if (struct.isSetMessr()) {
        optionals.set(16);
      }
      if (struct.isSetVid_trans()) {
        optionals.set(17);
      }
      if (struct.isSetDiag_n()) {
        optionals.set(18);
      }
      if (struct.isSetDiag_p()) {
        optionals.set(19);
      }
      if (struct.isSetNamed_n()) {
        optionals.set(20);
      }
      if (struct.isSetNamed_p()) {
        optionals.set(21);
      }
      if (struct.isSetNal_z()) {
        optionals.set(22);
      }
      if (struct.isSetNal_p()) {
        optionals.set(23);
      }
      if (struct.isSetToc()) {
        optionals.set(24);
      }
      if (struct.isSetAd()) {
        optionals.set(25);
      }
      if (struct.isSetSmp_data()) {
        optionals.set(26);
      }
      if (struct.isSetSmp_time()) {
        optionals.set(27);
      }
      if (struct.isSetSmp_num()) {
        optionals.set(28);
      }
      if (struct.isSetCotd_p()) {
        optionals.set(29);
      }
      if (struct.isSetDatagos()) {
        optionals.set(30);
      }
      if (struct.isSetVremgos()) {
        optionals.set(31);
      }
      if (struct.isSetCuser()) {
        optionals.set(32);
      }
      if (struct.isSetDataosm()) {
        optionals.set(33);
      }
      if (struct.isSetVremosm()) {
        optionals.set(34);
      }
      if (struct.isSetDataz()) {
        optionals.set(35);
      }
      oprot.writeBitSet(optionals, 36);
      if (struct.isSetNpasp()) {
        oprot.writeI32(struct.npasp);
      }
      if (struct.isSetNgosp()) {
        oprot.writeI32(struct.ngosp);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetNist()) {
        oprot.writeI32(struct.nist);
      }
      if (struct.isSetDatap()) {
        oprot.writeI64(struct.datap);
      }
      if (struct.isSetVremp()) {
        oprot.writeString(struct.vremp);
      }
      if (struct.isSetPl_extr()) {
        oprot.writeI32(struct.pl_extr);
      }
      if (struct.isSetNaprav()) {
        oprot.writeString(struct.naprav);
      }
      if (struct.isSetN_org()) {
        oprot.writeI32(struct.n_org);
      }
      if (struct.isSetCotd()) {
        oprot.writeI32(struct.cotd);
      }
      if (struct.isSetSv_time()) {
        oprot.writeI32(struct.sv_time);
      }
      if (struct.isSetSv_day()) {
        oprot.writeI32(struct.sv_day);
      }
      if (struct.isSetNtalon()) {
        oprot.writeI32(struct.ntalon);
      }
      if (struct.isSetVidtr()) {
        oprot.writeI32(struct.vidtr);
      }
      if (struct.isSetPr_out()) {
        oprot.writeI32(struct.pr_out);
      }
      if (struct.isSetAlkg()) {
        oprot.writeI32(struct.alkg);
      }
      if (struct.isSetMessr()) {
        oprot.writeI32(struct.messr);
      }
      if (struct.isSetVid_trans()) {
        oprot.writeI32(struct.vid_trans);
      }
      if (struct.isSetDiag_n()) {
        oprot.writeString(struct.diag_n);
      }
      if (struct.isSetDiag_p()) {
        oprot.writeString(struct.diag_p);
      }
      if (struct.isSetNamed_n()) {
        oprot.writeString(struct.named_n);
      }
      if (struct.isSetNamed_p()) {
        oprot.writeString(struct.named_p);
      }
      if (struct.isSetNal_z()) {
        oprot.writeI32(struct.nal_z);
      }
      if (struct.isSetNal_p()) {
        oprot.writeI32(struct.nal_p);
      }
      if (struct.isSetToc()) {
        oprot.writeString(struct.toc);
      }
      if (struct.isSetAd()) {
        oprot.writeString(struct.ad);
      }
      if (struct.isSetSmp_data()) {
        oprot.writeI64(struct.smp_data);
      }
      if (struct.isSetSmp_time()) {
        oprot.writeString(struct.smp_time);
      }
      if (struct.isSetSmp_num()) {
        oprot.writeI32(struct.smp_num);
      }
      if (struct.isSetCotd_p()) {
        oprot.writeI32(struct.cotd_p);
      }
      if (struct.isSetDatagos()) {
        oprot.writeI64(struct.datagos);
      }
      if (struct.isSetVremgos()) {
        oprot.writeString(struct.vremgos);
      }
      if (struct.isSetCuser()) {
        oprot.writeI32(struct.cuser);
      }
      if (struct.isSetDataosm()) {
        oprot.writeI64(struct.dataosm);
      }
      if (struct.isSetVremosm()) {
        oprot.writeString(struct.vremosm);
      }
      if (struct.isSetDataz()) {
        oprot.writeI64(struct.dataz);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PatientGosp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(36);
      if (incoming.get(0)) {
        struct.npasp = iprot.readI32();
        struct.setNpaspIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ngosp = iprot.readI32();
        struct.setNgospIsSet(true);
      }
      if (incoming.get(2)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nist = iprot.readI32();
        struct.setNistIsSet(true);
      }
      if (incoming.get(4)) {
        struct.datap = iprot.readI64();
        struct.setDatapIsSet(true);
      }
      if (incoming.get(5)) {
        struct.vremp = iprot.readString();
        struct.setVrempIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pl_extr = iprot.readI32();
        struct.setPl_extrIsSet(true);
      }
      if (incoming.get(7)) {
        struct.naprav = iprot.readString();
        struct.setNapravIsSet(true);
      }
      if (incoming.get(8)) {
        struct.n_org = iprot.readI32();
        struct.setN_orgIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cotd = iprot.readI32();
        struct.setCotdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sv_time = iprot.readI32();
        struct.setSv_timeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.sv_day = iprot.readI32();
        struct.setSv_dayIsSet(true);
      }
      if (incoming.get(12)) {
        struct.ntalon = iprot.readI32();
        struct.setNtalonIsSet(true);
      }
      if (incoming.get(13)) {
        struct.vidtr = iprot.readI32();
        struct.setVidtrIsSet(true);
      }
      if (incoming.get(14)) {
        struct.pr_out = iprot.readI32();
        struct.setPr_outIsSet(true);
      }
      if (incoming.get(15)) {
        struct.alkg = iprot.readI32();
        struct.setAlkgIsSet(true);
      }
      if (incoming.get(16)) {
        struct.messr = iprot.readI32();
        struct.setMessrIsSet(true);
      }
      if (incoming.get(17)) {
        struct.vid_trans = iprot.readI32();
        struct.setVid_transIsSet(true);
      }
      if (incoming.get(18)) {
        struct.diag_n = iprot.readString();
        struct.setDiag_nIsSet(true);
      }
      if (incoming.get(19)) {
        struct.diag_p = iprot.readString();
        struct.setDiag_pIsSet(true);
      }
      if (incoming.get(20)) {
        struct.named_n = iprot.readString();
        struct.setNamed_nIsSet(true);
      }
      if (incoming.get(21)) {
        struct.named_p = iprot.readString();
        struct.setNamed_pIsSet(true);
      }
      if (incoming.get(22)) {
        struct.nal_z = iprot.readI32();
        struct.setNal_zIsSet(true);
      }
      if (incoming.get(23)) {
        struct.nal_p = iprot.readI32();
        struct.setNal_pIsSet(true);
      }
      if (incoming.get(24)) {
        struct.toc = iprot.readString();
        struct.setTocIsSet(true);
      }
      if (incoming.get(25)) {
        struct.ad = iprot.readString();
        struct.setAdIsSet(true);
      }
      if (incoming.get(26)) {
        struct.smp_data = iprot.readI64();
        struct.setSmp_dataIsSet(true);
      }
      if (incoming.get(27)) {
        struct.smp_time = iprot.readString();
        struct.setSmp_timeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.smp_num = iprot.readI32();
        struct.setSmp_numIsSet(true);
      }
      if (incoming.get(29)) {
        struct.cotd_p = iprot.readI32();
        struct.setCotd_pIsSet(true);
      }
      if (incoming.get(30)) {
        struct.datagos = iprot.readI64();
        struct.setDatagosIsSet(true);
      }
      if (incoming.get(31)) {
        struct.vremgos = iprot.readString();
        struct.setVremgosIsSet(true);
      }
      if (incoming.get(32)) {
        struct.cuser = iprot.readI32();
        struct.setCuserIsSet(true);
      }
      if (incoming.get(33)) {
        struct.dataosm = iprot.readI64();
        struct.setDataosmIsSet(true);
      }
      if (incoming.get(34)) {
        struct.vremosm = iprot.readString();
        struct.setVremosmIsSet(true);
      }
      if (incoming.get(35)) {
        struct.dataz = iprot.readI64();
        struct.setDatazIsSet(true);
      }
    }
  }

}

