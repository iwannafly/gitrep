/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftRegPatient;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PatientJalob implements org.apache.thrift.TBase<PatientJalob, PatientJalob._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PatientJalob");

  private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ID_GOSP_FIELD_DESC = new org.apache.thrift.protocol.TField("id_gosp", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DATAZ_FIELD_DESC = new org.apache.thrift.protocol.TField("dataz", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField JALOB_FIELD_DESC = new org.apache.thrift.protocol.TField("jalob", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PatientJalobStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PatientJalobTupleSchemeFactory());
  }

  public int npasp; // required
  public int id_gosp; // required
  public long dataz; // required
  public String jalob; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NPASP((short)1, "npasp"),
    ID_GOSP((short)2, "id_gosp"),
    DATAZ((short)3, "dataz"),
    JALOB((short)4, "jalob");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NPASP
          return NPASP;
        case 2: // ID_GOSP
          return ID_GOSP;
        case 3: // DATAZ
          return DATAZ;
        case 4: // JALOB
          return JALOB;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NPASP_ISSET_ID = 0;
  private static final int __ID_GOSP_ISSET_ID = 1;
  private static final int __DATAZ_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID_GOSP, new org.apache.thrift.meta_data.FieldMetaData("id_gosp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATAZ, new org.apache.thrift.meta_data.FieldMetaData("dataz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JALOB, new org.apache.thrift.meta_data.FieldMetaData("jalob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PatientJalob.class, metaDataMap);
  }

  public PatientJalob() {
  }

  public PatientJalob(
    int npasp,
    int id_gosp,
    long dataz,
    String jalob)
  {
    this();
    this.npasp = npasp;
    setNpaspIsSet(true);
    this.id_gosp = id_gosp;
    setId_gospIsSet(true);
    this.dataz = dataz;
    setDatazIsSet(true);
    this.jalob = jalob;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PatientJalob(PatientJalob other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.npasp = other.npasp;
    this.id_gosp = other.id_gosp;
    this.dataz = other.dataz;
    if (other.isSetJalob()) {
      this.jalob = other.jalob;
    }
  }

  public PatientJalob deepCopy() {
    return new PatientJalob(this);
  }

  @Override
  public void clear() {
    setNpaspIsSet(false);
    this.npasp = 0;
    setId_gospIsSet(false);
    this.id_gosp = 0;
    setDatazIsSet(false);
    this.dataz = 0;
    this.jalob = null;
  }

  public int getNpasp() {
    return this.npasp;
  }

  public PatientJalob setNpasp(int npasp) {
    this.npasp = npasp;
    setNpaspIsSet(true);
    return this;
  }

  public void unsetNpasp() {
    __isset_bit_vector.clear(__NPASP_ISSET_ID);
  }

  /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
  public boolean isSetNpasp() {
    return __isset_bit_vector.get(__NPASP_ISSET_ID);
  }

  public void setNpaspIsSet(boolean value) {
    __isset_bit_vector.set(__NPASP_ISSET_ID, value);
  }

  public int getId_gosp() {
    return this.id_gosp;
  }

  public PatientJalob setId_gosp(int id_gosp) {
    this.id_gosp = id_gosp;
    setId_gospIsSet(true);
    return this;
  }

  public void unsetId_gosp() {
    __isset_bit_vector.clear(__ID_GOSP_ISSET_ID);
  }

  /** Returns true if field id_gosp is set (has been assigned a value) and false otherwise */
  public boolean isSetId_gosp() {
    return __isset_bit_vector.get(__ID_GOSP_ISSET_ID);
  }

  public void setId_gospIsSet(boolean value) {
    __isset_bit_vector.set(__ID_GOSP_ISSET_ID, value);
  }

  public long getDataz() {
    return this.dataz;
  }

  public PatientJalob setDataz(long dataz) {
    this.dataz = dataz;
    setDatazIsSet(true);
    return this;
  }

  public void unsetDataz() {
    __isset_bit_vector.clear(__DATAZ_ISSET_ID);
  }

  /** Returns true if field dataz is set (has been assigned a value) and false otherwise */
  public boolean isSetDataz() {
    return __isset_bit_vector.get(__DATAZ_ISSET_ID);
  }

  public void setDatazIsSet(boolean value) {
    __isset_bit_vector.set(__DATAZ_ISSET_ID, value);
  }

  public String getJalob() {
    return this.jalob;
  }

  public PatientJalob setJalob(String jalob) {
    this.jalob = jalob;
    return this;
  }

  public void unsetJalob() {
    this.jalob = null;
  }

  /** Returns true if field jalob is set (has been assigned a value) and false otherwise */
  public boolean isSetJalob() {
    return this.jalob != null;
  }

  public void setJalobIsSet(boolean value) {
    if (!value) {
      this.jalob = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NPASP:
      if (value == null) {
        unsetNpasp();
      } else {
        setNpasp((Integer)value);
      }
      break;

    case ID_GOSP:
      if (value == null) {
        unsetId_gosp();
      } else {
        setId_gosp((Integer)value);
      }
      break;

    case DATAZ:
      if (value == null) {
        unsetDataz();
      } else {
        setDataz((Long)value);
      }
      break;

    case JALOB:
      if (value == null) {
        unsetJalob();
      } else {
        setJalob((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NPASP:
      return Integer.valueOf(getNpasp());

    case ID_GOSP:
      return Integer.valueOf(getId_gosp());

    case DATAZ:
      return Long.valueOf(getDataz());

    case JALOB:
      return getJalob();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NPASP:
      return isSetNpasp();
    case ID_GOSP:
      return isSetId_gosp();
    case DATAZ:
      return isSetDataz();
    case JALOB:
      return isSetJalob();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PatientJalob)
      return this.equals((PatientJalob)that);
    return false;
  }

  public boolean equals(PatientJalob that) {
    if (that == null)
      return false;

    boolean this_present_npasp = true;
    boolean that_present_npasp = true;
    if (this_present_npasp || that_present_npasp) {
      if (!(this_present_npasp && that_present_npasp))
        return false;
      if (this.npasp != that.npasp)
        return false;
    }

    boolean this_present_id_gosp = true;
    boolean that_present_id_gosp = true;
    if (this_present_id_gosp || that_present_id_gosp) {
      if (!(this_present_id_gosp && that_present_id_gosp))
        return false;
      if (this.id_gosp != that.id_gosp)
        return false;
    }

    boolean this_present_dataz = true;
    boolean that_present_dataz = true;
    if (this_present_dataz || that_present_dataz) {
      if (!(this_present_dataz && that_present_dataz))
        return false;
      if (this.dataz != that.dataz)
        return false;
    }

    boolean this_present_jalob = true && this.isSetJalob();
    boolean that_present_jalob = true && that.isSetJalob();
    if (this_present_jalob || that_present_jalob) {
      if (!(this_present_jalob && that_present_jalob))
        return false;
      if (!this.jalob.equals(that.jalob))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PatientJalob other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PatientJalob typedOther = (PatientJalob)other;

    lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNpasp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId_gosp()).compareTo(typedOther.isSetId_gosp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId_gosp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_gosp, typedOther.id_gosp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataz()).compareTo(typedOther.isSetDataz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataz, typedOther.dataz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJalob()).compareTo(typedOther.isSetJalob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJalob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jalob, typedOther.jalob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PatientJalob(");
    boolean first = true;

    sb.append("npasp:");
    sb.append(this.npasp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id_gosp:");
    sb.append(this.id_gosp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataz:");
    sb.append(this.dataz);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jalob:");
    if (this.jalob == null) {
      sb.append("null");
    } else {
      sb.append(this.jalob);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PatientJalobStandardSchemeFactory implements SchemeFactory {
    public PatientJalobStandardScheme getScheme() {
      return new PatientJalobStandardScheme();
    }
  }

  private static class PatientJalobStandardScheme extends StandardScheme<PatientJalob> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PatientJalob struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NPASP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.npasp = iprot.readI32();
              struct.setNpaspIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID_GOSP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id_gosp = iprot.readI32();
              struct.setId_gospIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATAZ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataz = iprot.readI64();
              struct.setDatazIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JALOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jalob = iprot.readString();
              struct.setJalobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PatientJalob struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NPASP_FIELD_DESC);
      oprot.writeI32(struct.npasp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_GOSP_FIELD_DESC);
      oprot.writeI32(struct.id_gosp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATAZ_FIELD_DESC);
      oprot.writeI64(struct.dataz);
      oprot.writeFieldEnd();
      if (struct.jalob != null) {
        oprot.writeFieldBegin(JALOB_FIELD_DESC);
        oprot.writeString(struct.jalob);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PatientJalobTupleSchemeFactory implements SchemeFactory {
    public PatientJalobTupleScheme getScheme() {
      return new PatientJalobTupleScheme();
    }
  }

  private static class PatientJalobTupleScheme extends TupleScheme<PatientJalob> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PatientJalob struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNpasp()) {
        optionals.set(0);
      }
      if (struct.isSetId_gosp()) {
        optionals.set(1);
      }
      if (struct.isSetDataz()) {
        optionals.set(2);
      }
      if (struct.isSetJalob()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetNpasp()) {
        oprot.writeI32(struct.npasp);
      }
      if (struct.isSetId_gosp()) {
        oprot.writeI32(struct.id_gosp);
      }
      if (struct.isSetDataz()) {
        oprot.writeI64(struct.dataz);
      }
      if (struct.isSetJalob()) {
        oprot.writeString(struct.jalob);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PatientJalob struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.npasp = iprot.readI32();
        struct.setNpaspIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id_gosp = iprot.readI32();
        struct.setId_gospIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dataz = iprot.readI64();
        struct.setDatazIsSet(true);
      }
      if (incoming.get(3)) {
        struct.jalob = iprot.readString();
        struct.setJalobIsSet(true);
      }
    }
  }

}

