/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftRegPatient;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PatientNambk implements org.apache.thrift.TBase<PatientNambk, PatientNambk._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PatientNambk");

  private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAMBK_FIELD_DESC = new org.apache.thrift.protocol.TField("nambk", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CPOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cpol", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DATAPR_FIELD_DESC = new org.apache.thrift.protocol.TField("datapr", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DATAOT_FIELD_DESC = new org.apache.thrift.protocol.TField("dataot", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ISHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("ishod", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PatientNambkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PatientNambkTupleSchemeFactory());
  }

  public int npasp; // required
  public String nambk; // required
  public int cpol; // required
  public long datapr; // required
  public long dataot; // required
  public int ishod; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NPASP((short)1, "npasp"),
    NAMBK((short)2, "nambk"),
    CPOL((short)3, "cpol"),
    DATAPR((short)4, "datapr"),
    DATAOT((short)5, "dataot"),
    ISHOD((short)6, "ishod");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NPASP
          return NPASP;
        case 2: // NAMBK
          return NAMBK;
        case 3: // CPOL
          return CPOL;
        case 4: // DATAPR
          return DATAPR;
        case 5: // DATAOT
          return DATAOT;
        case 6: // ISHOD
          return ISHOD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NPASP_ISSET_ID = 0;
  private static final int __CPOL_ISSET_ID = 1;
  private static final int __DATAPR_ISSET_ID = 2;
  private static final int __DATAOT_ISSET_ID = 3;
  private static final int __ISHOD_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAMBK, new org.apache.thrift.meta_data.FieldMetaData("nambk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPOL, new org.apache.thrift.meta_data.FieldMetaData("cpol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATAPR, new org.apache.thrift.meta_data.FieldMetaData("datapr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATAOT, new org.apache.thrift.meta_data.FieldMetaData("dataot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ISHOD, new org.apache.thrift.meta_data.FieldMetaData("ishod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PatientNambk.class, metaDataMap);
  }

  public PatientNambk() {
  }

  public PatientNambk(
    int npasp,
    String nambk,
    int cpol,
    long datapr,
    long dataot,
    int ishod)
  {
    this();
    this.npasp = npasp;
    setNpaspIsSet(true);
    this.nambk = nambk;
    this.cpol = cpol;
    setCpolIsSet(true);
    this.datapr = datapr;
    setDataprIsSet(true);
    this.dataot = dataot;
    setDataotIsSet(true);
    this.ishod = ishod;
    setIshodIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PatientNambk(PatientNambk other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.npasp = other.npasp;
    if (other.isSetNambk()) {
      this.nambk = other.nambk;
    }
    this.cpol = other.cpol;
    this.datapr = other.datapr;
    this.dataot = other.dataot;
    this.ishod = other.ishod;
  }

  public PatientNambk deepCopy() {
    return new PatientNambk(this);
  }

  @Override
  public void clear() {
    setNpaspIsSet(false);
    this.npasp = 0;
    this.nambk = null;
    setCpolIsSet(false);
    this.cpol = 0;
    setDataprIsSet(false);
    this.datapr = 0;
    setDataotIsSet(false);
    this.dataot = 0;
    setIshodIsSet(false);
    this.ishod = 0;
  }

  public int getNpasp() {
    return this.npasp;
  }

  public PatientNambk setNpasp(int npasp) {
    this.npasp = npasp;
    setNpaspIsSet(true);
    return this;
  }

  public void unsetNpasp() {
    __isset_bit_vector.clear(__NPASP_ISSET_ID);
  }

  /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
  public boolean isSetNpasp() {
    return __isset_bit_vector.get(__NPASP_ISSET_ID);
  }

  public void setNpaspIsSet(boolean value) {
    __isset_bit_vector.set(__NPASP_ISSET_ID, value);
  }

  public String getNambk() {
    return this.nambk;
  }

  public PatientNambk setNambk(String nambk) {
    this.nambk = nambk;
    return this;
  }

  public void unsetNambk() {
    this.nambk = null;
  }

  /** Returns true if field nambk is set (has been assigned a value) and false otherwise */
  public boolean isSetNambk() {
    return this.nambk != null;
  }

  public void setNambkIsSet(boolean value) {
    if (!value) {
      this.nambk = null;
    }
  }

  public int getCpol() {
    return this.cpol;
  }

  public PatientNambk setCpol(int cpol) {
    this.cpol = cpol;
    setCpolIsSet(true);
    return this;
  }

  public void unsetCpol() {
    __isset_bit_vector.clear(__CPOL_ISSET_ID);
  }

  /** Returns true if field cpol is set (has been assigned a value) and false otherwise */
  public boolean isSetCpol() {
    return __isset_bit_vector.get(__CPOL_ISSET_ID);
  }

  public void setCpolIsSet(boolean value) {
    __isset_bit_vector.set(__CPOL_ISSET_ID, value);
  }

  public long getDatapr() {
    return this.datapr;
  }

  public PatientNambk setDatapr(long datapr) {
    this.datapr = datapr;
    setDataprIsSet(true);
    return this;
  }

  public void unsetDatapr() {
    __isset_bit_vector.clear(__DATAPR_ISSET_ID);
  }

  /** Returns true if field datapr is set (has been assigned a value) and false otherwise */
  public boolean isSetDatapr() {
    return __isset_bit_vector.get(__DATAPR_ISSET_ID);
  }

  public void setDataprIsSet(boolean value) {
    __isset_bit_vector.set(__DATAPR_ISSET_ID, value);
  }

  public long getDataot() {
    return this.dataot;
  }

  public PatientNambk setDataot(long dataot) {
    this.dataot = dataot;
    setDataotIsSet(true);
    return this;
  }

  public void unsetDataot() {
    __isset_bit_vector.clear(__DATAOT_ISSET_ID);
  }

  /** Returns true if field dataot is set (has been assigned a value) and false otherwise */
  public boolean isSetDataot() {
    return __isset_bit_vector.get(__DATAOT_ISSET_ID);
  }

  public void setDataotIsSet(boolean value) {
    __isset_bit_vector.set(__DATAOT_ISSET_ID, value);
  }

  public int getIshod() {
    return this.ishod;
  }

  public PatientNambk setIshod(int ishod) {
    this.ishod = ishod;
    setIshodIsSet(true);
    return this;
  }

  public void unsetIshod() {
    __isset_bit_vector.clear(__ISHOD_ISSET_ID);
  }

  /** Returns true if field ishod is set (has been assigned a value) and false otherwise */
  public boolean isSetIshod() {
    return __isset_bit_vector.get(__ISHOD_ISSET_ID);
  }

  public void setIshodIsSet(boolean value) {
    __isset_bit_vector.set(__ISHOD_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NPASP:
      if (value == null) {
        unsetNpasp();
      } else {
        setNpasp((Integer)value);
      }
      break;

    case NAMBK:
      if (value == null) {
        unsetNambk();
      } else {
        setNambk((String)value);
      }
      break;

    case CPOL:
      if (value == null) {
        unsetCpol();
      } else {
        setCpol((Integer)value);
      }
      break;

    case DATAPR:
      if (value == null) {
        unsetDatapr();
      } else {
        setDatapr((Long)value);
      }
      break;

    case DATAOT:
      if (value == null) {
        unsetDataot();
      } else {
        setDataot((Long)value);
      }
      break;

    case ISHOD:
      if (value == null) {
        unsetIshod();
      } else {
        setIshod((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NPASP:
      return Integer.valueOf(getNpasp());

    case NAMBK:
      return getNambk();

    case CPOL:
      return Integer.valueOf(getCpol());

    case DATAPR:
      return Long.valueOf(getDatapr());

    case DATAOT:
      return Long.valueOf(getDataot());

    case ISHOD:
      return Integer.valueOf(getIshod());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NPASP:
      return isSetNpasp();
    case NAMBK:
      return isSetNambk();
    case CPOL:
      return isSetCpol();
    case DATAPR:
      return isSetDatapr();
    case DATAOT:
      return isSetDataot();
    case ISHOD:
      return isSetIshod();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PatientNambk)
      return this.equals((PatientNambk)that);
    return false;
  }

  public boolean equals(PatientNambk that) {
    if (that == null)
      return false;

    boolean this_present_npasp = true;
    boolean that_present_npasp = true;
    if (this_present_npasp || that_present_npasp) {
      if (!(this_present_npasp && that_present_npasp))
        return false;
      if (this.npasp != that.npasp)
        return false;
    }

    boolean this_present_nambk = true && this.isSetNambk();
    boolean that_present_nambk = true && that.isSetNambk();
    if (this_present_nambk || that_present_nambk) {
      if (!(this_present_nambk && that_present_nambk))
        return false;
      if (!this.nambk.equals(that.nambk))
        return false;
    }

    boolean this_present_cpol = true;
    boolean that_present_cpol = true;
    if (this_present_cpol || that_present_cpol) {
      if (!(this_present_cpol && that_present_cpol))
        return false;
      if (this.cpol != that.cpol)
        return false;
    }

    boolean this_present_datapr = true;
    boolean that_present_datapr = true;
    if (this_present_datapr || that_present_datapr) {
      if (!(this_present_datapr && that_present_datapr))
        return false;
      if (this.datapr != that.datapr)
        return false;
    }

    boolean this_present_dataot = true;
    boolean that_present_dataot = true;
    if (this_present_dataot || that_present_dataot) {
      if (!(this_present_dataot && that_present_dataot))
        return false;
      if (this.dataot != that.dataot)
        return false;
    }

    boolean this_present_ishod = true;
    boolean that_present_ishod = true;
    if (this_present_ishod || that_present_ishod) {
      if (!(this_present_ishod && that_present_ishod))
        return false;
      if (this.ishod != that.ishod)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PatientNambk other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PatientNambk typedOther = (PatientNambk)other;

    lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNpasp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNambk()).compareTo(typedOther.isSetNambk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNambk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nambk, typedOther.nambk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpol()).compareTo(typedOther.isSetCpol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpol, typedOther.cpol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatapr()).compareTo(typedOther.isSetDatapr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatapr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datapr, typedOther.datapr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataot()).compareTo(typedOther.isSetDataot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataot, typedOther.dataot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIshod()).compareTo(typedOther.isSetIshod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIshod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ishod, typedOther.ishod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PatientNambk(");
    boolean first = true;

    sb.append("npasp:");
    sb.append(this.npasp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nambk:");
    if (this.nambk == null) {
      sb.append("null");
    } else {
      sb.append(this.nambk);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpol:");
    sb.append(this.cpol);
    first = false;
    if (!first) sb.append(", ");
    sb.append("datapr:");
    sb.append(this.datapr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataot:");
    sb.append(this.dataot);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ishod:");
    sb.append(this.ishod);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PatientNambkStandardSchemeFactory implements SchemeFactory {
    public PatientNambkStandardScheme getScheme() {
      return new PatientNambkStandardScheme();
    }
  }

  private static class PatientNambkStandardScheme extends StandardScheme<PatientNambk> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PatientNambk struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NPASP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.npasp = iprot.readI32();
              struct.setNpaspIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAMBK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nambk = iprot.readString();
              struct.setNambkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CPOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpol = iprot.readI32();
              struct.setCpolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATAPR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datapr = iprot.readI64();
              struct.setDataprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATAOT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dataot = iprot.readI64();
              struct.setDataotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ISHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ishod = iprot.readI32();
              struct.setIshodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PatientNambk struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NPASP_FIELD_DESC);
      oprot.writeI32(struct.npasp);
      oprot.writeFieldEnd();
      if (struct.nambk != null) {
        oprot.writeFieldBegin(NAMBK_FIELD_DESC);
        oprot.writeString(struct.nambk);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CPOL_FIELD_DESC);
      oprot.writeI32(struct.cpol);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATAPR_FIELD_DESC);
      oprot.writeI64(struct.datapr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATAOT_FIELD_DESC);
      oprot.writeI64(struct.dataot);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISHOD_FIELD_DESC);
      oprot.writeI32(struct.ishod);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PatientNambkTupleSchemeFactory implements SchemeFactory {
    public PatientNambkTupleScheme getScheme() {
      return new PatientNambkTupleScheme();
    }
  }

  private static class PatientNambkTupleScheme extends TupleScheme<PatientNambk> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PatientNambk struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNpasp()) {
        optionals.set(0);
      }
      if (struct.isSetNambk()) {
        optionals.set(1);
      }
      if (struct.isSetCpol()) {
        optionals.set(2);
      }
      if (struct.isSetDatapr()) {
        optionals.set(3);
      }
      if (struct.isSetDataot()) {
        optionals.set(4);
      }
      if (struct.isSetIshod()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetNpasp()) {
        oprot.writeI32(struct.npasp);
      }
      if (struct.isSetNambk()) {
        oprot.writeString(struct.nambk);
      }
      if (struct.isSetCpol()) {
        oprot.writeI32(struct.cpol);
      }
      if (struct.isSetDatapr()) {
        oprot.writeI64(struct.datapr);
      }
      if (struct.isSetDataot()) {
        oprot.writeI64(struct.dataot);
      }
      if (struct.isSetIshod()) {
        oprot.writeI32(struct.ishod);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PatientNambk struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.npasp = iprot.readI32();
        struct.setNpaspIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nambk = iprot.readString();
        struct.setNambkIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cpol = iprot.readI32();
        struct.setCpolIsSet(true);
      }
      if (incoming.get(3)) {
        struct.datapr = iprot.readI64();
        struct.setDataprIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dataot = iprot.readI64();
        struct.setDataotIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ishod = iprot.readI32();
        struct.setIshodIsSet(true);
      }
    }
  }

}

