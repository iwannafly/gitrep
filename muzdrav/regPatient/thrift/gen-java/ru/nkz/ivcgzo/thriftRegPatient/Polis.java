/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftRegPatient;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Polis implements org.apache.thrift.TBase<Polis, Polis._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Polis");

  private static final org.apache.thrift.protocol.TField STRG_FIELD_DESC = new org.apache.thrift.protocol.TField("strg", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SER_FIELD_DESC = new org.apache.thrift.protocol.TField("ser", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NOM_FIELD_DESC = new org.apache.thrift.protocol.TField("nom", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TDOC_FIELD_DESC = new org.apache.thrift.protocol.TField("tdoc", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PolisStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PolisTupleSchemeFactory());
  }

  public int strg; // required
  public String ser; // required
  public String nom; // required
  public int tdoc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STRG((short)1, "strg"),
    SER((short)2, "ser"),
    NOM((short)3, "nom"),
    TDOC((short)4, "tdoc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRG
          return STRG;
        case 2: // SER
          return SER;
        case 3: // NOM
          return NOM;
        case 4: // TDOC
          return TDOC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STRG_ISSET_ID = 0;
  private static final int __TDOC_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRG, new org.apache.thrift.meta_data.FieldMetaData("strg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SER, new org.apache.thrift.meta_data.FieldMetaData("ser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOM, new org.apache.thrift.meta_data.FieldMetaData("nom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TDOC, new org.apache.thrift.meta_data.FieldMetaData("tdoc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Polis.class, metaDataMap);
  }

  public Polis() {
  }

  public Polis(
    int strg,
    String ser,
    String nom,
    int tdoc)
  {
    this();
    this.strg = strg;
    setStrgIsSet(true);
    this.ser = ser;
    this.nom = nom;
    this.tdoc = tdoc;
    setTdocIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Polis(Polis other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.strg = other.strg;
    if (other.isSetSer()) {
      this.ser = other.ser;
    }
    if (other.isSetNom()) {
      this.nom = other.nom;
    }
    this.tdoc = other.tdoc;
  }

  public Polis deepCopy() {
    return new Polis(this);
  }

  @Override
  public void clear() {
    setStrgIsSet(false);
    this.strg = 0;
    this.ser = null;
    this.nom = null;
    setTdocIsSet(false);
    this.tdoc = 0;
  }

  public int getStrg() {
    return this.strg;
  }

  public Polis setStrg(int strg) {
    this.strg = strg;
    setStrgIsSet(true);
    return this;
  }

  public void unsetStrg() {
    __isset_bit_vector.clear(__STRG_ISSET_ID);
  }

  /** Returns true if field strg is set (has been assigned a value) and false otherwise */
  public boolean isSetStrg() {
    return __isset_bit_vector.get(__STRG_ISSET_ID);
  }

  public void setStrgIsSet(boolean value) {
    __isset_bit_vector.set(__STRG_ISSET_ID, value);
  }

  public String getSer() {
    return this.ser;
  }

  public Polis setSer(String ser) {
    this.ser = ser;
    return this;
  }

  public void unsetSer() {
    this.ser = null;
  }

  /** Returns true if field ser is set (has been assigned a value) and false otherwise */
  public boolean isSetSer() {
    return this.ser != null;
  }

  public void setSerIsSet(boolean value) {
    if (!value) {
      this.ser = null;
    }
  }

  public String getNom() {
    return this.nom;
  }

  public Polis setNom(String nom) {
    this.nom = nom;
    return this;
  }

  public void unsetNom() {
    this.nom = null;
  }

  /** Returns true if field nom is set (has been assigned a value) and false otherwise */
  public boolean isSetNom() {
    return this.nom != null;
  }

  public void setNomIsSet(boolean value) {
    if (!value) {
      this.nom = null;
    }
  }

  public int getTdoc() {
    return this.tdoc;
  }

  public Polis setTdoc(int tdoc) {
    this.tdoc = tdoc;
    setTdocIsSet(true);
    return this;
  }

  public void unsetTdoc() {
    __isset_bit_vector.clear(__TDOC_ISSET_ID);
  }

  /** Returns true if field tdoc is set (has been assigned a value) and false otherwise */
  public boolean isSetTdoc() {
    return __isset_bit_vector.get(__TDOC_ISSET_ID);
  }

  public void setTdocIsSet(boolean value) {
    __isset_bit_vector.set(__TDOC_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STRG:
      if (value == null) {
        unsetStrg();
      } else {
        setStrg((Integer)value);
      }
      break;

    case SER:
      if (value == null) {
        unsetSer();
      } else {
        setSer((String)value);
      }
      break;

    case NOM:
      if (value == null) {
        unsetNom();
      } else {
        setNom((String)value);
      }
      break;

    case TDOC:
      if (value == null) {
        unsetTdoc();
      } else {
        setTdoc((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STRG:
      return Integer.valueOf(getStrg());

    case SER:
      return getSer();

    case NOM:
      return getNom();

    case TDOC:
      return Integer.valueOf(getTdoc());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STRG:
      return isSetStrg();
    case SER:
      return isSetSer();
    case NOM:
      return isSetNom();
    case TDOC:
      return isSetTdoc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Polis)
      return this.equals((Polis)that);
    return false;
  }

  public boolean equals(Polis that) {
    if (that == null)
      return false;

    boolean this_present_strg = true;
    boolean that_present_strg = true;
    if (this_present_strg || that_present_strg) {
      if (!(this_present_strg && that_present_strg))
        return false;
      if (this.strg != that.strg)
        return false;
    }

    boolean this_present_ser = true && this.isSetSer();
    boolean that_present_ser = true && that.isSetSer();
    if (this_present_ser || that_present_ser) {
      if (!(this_present_ser && that_present_ser))
        return false;
      if (!this.ser.equals(that.ser))
        return false;
    }

    boolean this_present_nom = true && this.isSetNom();
    boolean that_present_nom = true && that.isSetNom();
    if (this_present_nom || that_present_nom) {
      if (!(this_present_nom && that_present_nom))
        return false;
      if (!this.nom.equals(that.nom))
        return false;
    }

    boolean this_present_tdoc = true;
    boolean that_present_tdoc = true;
    if (this_present_tdoc || that_present_tdoc) {
      if (!(this_present_tdoc && that_present_tdoc))
        return false;
      if (this.tdoc != that.tdoc)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Polis other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Polis typedOther = (Polis)other;

    lastComparison = Boolean.valueOf(isSetStrg()).compareTo(typedOther.isSetStrg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strg, typedOther.strg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSer()).compareTo(typedOther.isSetSer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ser, typedOther.ser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNom()).compareTo(typedOther.isSetNom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nom, typedOther.nom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTdoc()).compareTo(typedOther.isSetTdoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTdoc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tdoc, typedOther.tdoc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Polis(");
    boolean first = true;

    sb.append("strg:");
    sb.append(this.strg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ser:");
    if (this.ser == null) {
      sb.append("null");
    } else {
      sb.append(this.ser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nom:");
    if (this.nom == null) {
      sb.append("null");
    } else {
      sb.append(this.nom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tdoc:");
    sb.append(this.tdoc);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PolisStandardSchemeFactory implements SchemeFactory {
    public PolisStandardScheme getScheme() {
      return new PolisStandardScheme();
    }
  }

  private static class PolisStandardScheme extends StandardScheme<Polis> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Polis struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STRG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.strg = iprot.readI32();
              struct.setStrgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ser = iprot.readString();
              struct.setSerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nom = iprot.readString();
              struct.setNomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TDOC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tdoc = iprot.readI32();
              struct.setTdocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Polis struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STRG_FIELD_DESC);
      oprot.writeI32(struct.strg);
      oprot.writeFieldEnd();
      if (struct.ser != null) {
        oprot.writeFieldBegin(SER_FIELD_DESC);
        oprot.writeString(struct.ser);
        oprot.writeFieldEnd();
      }
      if (struct.nom != null) {
        oprot.writeFieldBegin(NOM_FIELD_DESC);
        oprot.writeString(struct.nom);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TDOC_FIELD_DESC);
      oprot.writeI32(struct.tdoc);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PolisTupleSchemeFactory implements SchemeFactory {
    public PolisTupleScheme getScheme() {
      return new PolisTupleScheme();
    }
  }

  private static class PolisTupleScheme extends TupleScheme<Polis> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Polis struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStrg()) {
        optionals.set(0);
      }
      if (struct.isSetSer()) {
        optionals.set(1);
      }
      if (struct.isSetNom()) {
        optionals.set(2);
      }
      if (struct.isSetTdoc()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStrg()) {
        oprot.writeI32(struct.strg);
      }
      if (struct.isSetSer()) {
        oprot.writeString(struct.ser);
      }
      if (struct.isSetNom()) {
        oprot.writeString(struct.nom);
      }
      if (struct.isSetTdoc()) {
        oprot.writeI32(struct.tdoc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Polis struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.strg = iprot.readI32();
        struct.setStrgIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ser = iprot.readString();
        struct.setSerIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nom = iprot.readString();
        struct.setNomIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tdoc = iprot.readI32();
        struct.setTdocIsSet(true);
      }
    }
  }

}

