/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftRegPatient;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftRegPatient {

  public interface Iface {

    public List<PatientBrief> getAllPatientBrief(PatientBrief patient) throws org.apache.thrift.TException;

    public PatientFullInfo getPatientFullInfo(int npasp) throws org.apache.thrift.TException;

    public PatientAgent getPatientAgent(int npasp) throws org.apache.thrift.TException;

    public List<PatientLgota> getPatientLgota(int npasp) throws org.apache.thrift.TException;

    public List<PatientKontingent> getPatientKontingent(int npasp) throws org.apache.thrift.TException;

    public PatientSign getPatientSign(int npasp) throws org.apache.thrift.TException;

    public PatientNambk getPatientNambk(int npasp) throws org.apache.thrift.TException;

    public List<PatientAllGosp> getPatientAllGosp(int npasp, int ngosp) throws org.apache.thrift.TException;

    public PatientGosp getPatientGosp(int npasp, int ngosp) throws org.apache.thrift.TException;

    public List<SpravStruct> getSpravInfo(String param) throws org.apache.thrift.TException;

    public int addPatient(PatientFullInfo patinfo) throws org.apache.thrift.TException;

    public void addLgota(PatientLgota lgota) throws org.apache.thrift.TException;

    public void addKont(PatientKontingent kont) throws org.apache.thrift.TException;

    public void addAgent(PatientAgent agent) throws org.apache.thrift.TException;

    public void addSign(PatientSign sign) throws org.apache.thrift.TException;

    public void addJalob(PatientJalob jalob) throws org.apache.thrift.TException;

    public void addGosp(PatientGosp gosp) throws org.apache.thrift.TException;

    public void addNambk(PatientNambk nambk) throws org.apache.thrift.TException;

    public void deletePatient(int npasp) throws org.apache.thrift.TException;

    public void deleteNambk(int npasp, int cpol) throws org.apache.thrift.TException;

    public void deleteLgota(int npasp, int lgota) throws org.apache.thrift.TException;

    public void deleteKont(int npasp, int kateg) throws org.apache.thrift.TException;

    public void deleteAgent(int npasp) throws org.apache.thrift.TException;

    public void deleteSign(int npasp) throws org.apache.thrift.TException;

    public void deleteJalob(int npasp, int ngosp) throws org.apache.thrift.TException;

    public void deleteGosp(int npasp, int ngosp) throws org.apache.thrift.TException;

    public void updatePatient(PatientFullInfo patinfo) throws org.apache.thrift.TException;

    public void updateNambk(PatientNambk nambk) throws org.apache.thrift.TException;

    public void updateLgota(int npasp, int lgota) throws org.apache.thrift.TException;

    public void updateKont(int npasp, int kateg) throws org.apache.thrift.TException;

    public void updateAgent(PatientAgent agent) throws org.apache.thrift.TException;

    public void updateSign(PatientSign sign) throws org.apache.thrift.TException;

    public void updateJalob(PatientJalob jalob) throws org.apache.thrift.TException;

    public void updateGosp(PatientGosp gosp) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAllPatientBrief(PatientBrief patient, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAllPatientBrief_call> resultHandler) throws org.apache.thrift.TException;

    public void getPatientFullInfo(int npasp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPatientFullInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void getPatientAgent(int npasp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPatientAgent_call> resultHandler) throws org.apache.thrift.TException;

    public void getPatientLgota(int npasp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPatientLgota_call> resultHandler) throws org.apache.thrift.TException;

    public void getPatientKontingent(int npasp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPatientKontingent_call> resultHandler) throws org.apache.thrift.TException;

    public void getPatientSign(int npasp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPatientSign_call> resultHandler) throws org.apache.thrift.TException;

    public void getPatientNambk(int npasp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPatientNambk_call> resultHandler) throws org.apache.thrift.TException;

    public void getPatientAllGosp(int npasp, int ngosp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPatientAllGosp_call> resultHandler) throws org.apache.thrift.TException;

    public void getPatientGosp(int npasp, int ngosp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPatientGosp_call> resultHandler) throws org.apache.thrift.TException;

    public void getSpravInfo(String param, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSpravInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void addPatient(PatientFullInfo patinfo, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addPatient_call> resultHandler) throws org.apache.thrift.TException;

    public void addLgota(PatientLgota lgota, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addLgota_call> resultHandler) throws org.apache.thrift.TException;

    public void addKont(PatientKontingent kont, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addKont_call> resultHandler) throws org.apache.thrift.TException;

    public void addAgent(PatientAgent agent, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addAgent_call> resultHandler) throws org.apache.thrift.TException;

    public void addSign(PatientSign sign, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addSign_call> resultHandler) throws org.apache.thrift.TException;

    public void addJalob(PatientJalob jalob, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addJalob_call> resultHandler) throws org.apache.thrift.TException;

    public void addGosp(PatientGosp gosp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addGosp_call> resultHandler) throws org.apache.thrift.TException;

    public void addNambk(PatientNambk nambk, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addNambk_call> resultHandler) throws org.apache.thrift.TException;

    public void deletePatient(int npasp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deletePatient_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteNambk(int npasp, int cpol, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteNambk_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteLgota(int npasp, int lgota, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteLgota_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteKont(int npasp, int kateg, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteKont_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteAgent(int npasp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteAgent_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteSign(int npasp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteSign_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteJalob(int npasp, int ngosp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteJalob_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteGosp(int npasp, int ngosp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteGosp_call> resultHandler) throws org.apache.thrift.TException;

    public void updatePatient(PatientFullInfo patinfo, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updatePatient_call> resultHandler) throws org.apache.thrift.TException;

    public void updateNambk(PatientNambk nambk, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateNambk_call> resultHandler) throws org.apache.thrift.TException;

    public void updateLgota(int npasp, int lgota, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateLgota_call> resultHandler) throws org.apache.thrift.TException;

    public void updateKont(int npasp, int kateg, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateKont_call> resultHandler) throws org.apache.thrift.TException;

    public void updateAgent(PatientAgent agent, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateAgent_call> resultHandler) throws org.apache.thrift.TException;

    public void updateSign(PatientSign sign, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateSign_call> resultHandler) throws org.apache.thrift.TException;

    public void updateJalob(PatientJalob jalob, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateJalob_call> resultHandler) throws org.apache.thrift.TException;

    public void updateGosp(PatientGosp gosp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateGosp_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<PatientBrief> getAllPatientBrief(PatientBrief patient) throws org.apache.thrift.TException
    {
      send_getAllPatientBrief(patient);
      return recv_getAllPatientBrief();
    }

    public void send_getAllPatientBrief(PatientBrief patient) throws org.apache.thrift.TException
    {
      getAllPatientBrief_args args = new getAllPatientBrief_args();
      args.setPatient(patient);
      sendBase("getAllPatientBrief", args);
    }

    public List<PatientBrief> recv_getAllPatientBrief() throws org.apache.thrift.TException
    {
      getAllPatientBrief_result result = new getAllPatientBrief_result();
      receiveBase(result, "getAllPatientBrief");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllPatientBrief failed: unknown result");
    }

    public PatientFullInfo getPatientFullInfo(int npasp) throws org.apache.thrift.TException
    {
      send_getPatientFullInfo(npasp);
      return recv_getPatientFullInfo();
    }

    public void send_getPatientFullInfo(int npasp) throws org.apache.thrift.TException
    {
      getPatientFullInfo_args args = new getPatientFullInfo_args();
      args.setNpasp(npasp);
      sendBase("getPatientFullInfo", args);
    }

    public PatientFullInfo recv_getPatientFullInfo() throws org.apache.thrift.TException
    {
      getPatientFullInfo_result result = new getPatientFullInfo_result();
      receiveBase(result, "getPatientFullInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatientFullInfo failed: unknown result");
    }

    public PatientAgent getPatientAgent(int npasp) throws org.apache.thrift.TException
    {
      send_getPatientAgent(npasp);
      return recv_getPatientAgent();
    }

    public void send_getPatientAgent(int npasp) throws org.apache.thrift.TException
    {
      getPatientAgent_args args = new getPatientAgent_args();
      args.setNpasp(npasp);
      sendBase("getPatientAgent", args);
    }

    public PatientAgent recv_getPatientAgent() throws org.apache.thrift.TException
    {
      getPatientAgent_result result = new getPatientAgent_result();
      receiveBase(result, "getPatientAgent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatientAgent failed: unknown result");
    }

    public List<PatientLgota> getPatientLgota(int npasp) throws org.apache.thrift.TException
    {
      send_getPatientLgota(npasp);
      return recv_getPatientLgota();
    }

    public void send_getPatientLgota(int npasp) throws org.apache.thrift.TException
    {
      getPatientLgota_args args = new getPatientLgota_args();
      args.setNpasp(npasp);
      sendBase("getPatientLgota", args);
    }

    public List<PatientLgota> recv_getPatientLgota() throws org.apache.thrift.TException
    {
      getPatientLgota_result result = new getPatientLgota_result();
      receiveBase(result, "getPatientLgota");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatientLgota failed: unknown result");
    }

    public List<PatientKontingent> getPatientKontingent(int npasp) throws org.apache.thrift.TException
    {
      send_getPatientKontingent(npasp);
      return recv_getPatientKontingent();
    }

    public void send_getPatientKontingent(int npasp) throws org.apache.thrift.TException
    {
      getPatientKontingent_args args = new getPatientKontingent_args();
      args.setNpasp(npasp);
      sendBase("getPatientKontingent", args);
    }

    public List<PatientKontingent> recv_getPatientKontingent() throws org.apache.thrift.TException
    {
      getPatientKontingent_result result = new getPatientKontingent_result();
      receiveBase(result, "getPatientKontingent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatientKontingent failed: unknown result");
    }

    public PatientSign getPatientSign(int npasp) throws org.apache.thrift.TException
    {
      send_getPatientSign(npasp);
      return recv_getPatientSign();
    }

    public void send_getPatientSign(int npasp) throws org.apache.thrift.TException
    {
      getPatientSign_args args = new getPatientSign_args();
      args.setNpasp(npasp);
      sendBase("getPatientSign", args);
    }

    public PatientSign recv_getPatientSign() throws org.apache.thrift.TException
    {
      getPatientSign_result result = new getPatientSign_result();
      receiveBase(result, "getPatientSign");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatientSign failed: unknown result");
    }

    public PatientNambk getPatientNambk(int npasp) throws org.apache.thrift.TException
    {
      send_getPatientNambk(npasp);
      return recv_getPatientNambk();
    }

    public void send_getPatientNambk(int npasp) throws org.apache.thrift.TException
    {
      getPatientNambk_args args = new getPatientNambk_args();
      args.setNpasp(npasp);
      sendBase("getPatientNambk", args);
    }

    public PatientNambk recv_getPatientNambk() throws org.apache.thrift.TException
    {
      getPatientNambk_result result = new getPatientNambk_result();
      receiveBase(result, "getPatientNambk");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatientNambk failed: unknown result");
    }

    public List<PatientAllGosp> getPatientAllGosp(int npasp, int ngosp) throws org.apache.thrift.TException
    {
      send_getPatientAllGosp(npasp, ngosp);
      return recv_getPatientAllGosp();
    }

    public void send_getPatientAllGosp(int npasp, int ngosp) throws org.apache.thrift.TException
    {
      getPatientAllGosp_args args = new getPatientAllGosp_args();
      args.setNpasp(npasp);
      args.setNgosp(ngosp);
      sendBase("getPatientAllGosp", args);
    }

    public List<PatientAllGosp> recv_getPatientAllGosp() throws org.apache.thrift.TException
    {
      getPatientAllGosp_result result = new getPatientAllGosp_result();
      receiveBase(result, "getPatientAllGosp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatientAllGosp failed: unknown result");
    }

    public PatientGosp getPatientGosp(int npasp, int ngosp) throws org.apache.thrift.TException
    {
      send_getPatientGosp(npasp, ngosp);
      return recv_getPatientGosp();
    }

    public void send_getPatientGosp(int npasp, int ngosp) throws org.apache.thrift.TException
    {
      getPatientGosp_args args = new getPatientGosp_args();
      args.setNpasp(npasp);
      args.setNgosp(ngosp);
      sendBase("getPatientGosp", args);
    }

    public PatientGosp recv_getPatientGosp() throws org.apache.thrift.TException
    {
      getPatientGosp_result result = new getPatientGosp_result();
      receiveBase(result, "getPatientGosp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatientGosp failed: unknown result");
    }

    public List<SpravStruct> getSpravInfo(String param) throws org.apache.thrift.TException
    {
      send_getSpravInfo(param);
      return recv_getSpravInfo();
    }

    public void send_getSpravInfo(String param) throws org.apache.thrift.TException
    {
      getSpravInfo_args args = new getSpravInfo_args();
      args.setParam(param);
      sendBase("getSpravInfo", args);
    }

    public List<SpravStruct> recv_getSpravInfo() throws org.apache.thrift.TException
    {
      getSpravInfo_result result = new getSpravInfo_result();
      receiveBase(result, "getSpravInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSpravInfo failed: unknown result");
    }

    public int addPatient(PatientFullInfo patinfo) throws org.apache.thrift.TException
    {
      send_addPatient(patinfo);
      return recv_addPatient();
    }

    public void send_addPatient(PatientFullInfo patinfo) throws org.apache.thrift.TException
    {
      addPatient_args args = new addPatient_args();
      args.setPatinfo(patinfo);
      sendBase("addPatient", args);
    }

    public int recv_addPatient() throws org.apache.thrift.TException
    {
      addPatient_result result = new addPatient_result();
      receiveBase(result, "addPatient");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPatient failed: unknown result");
    }

    public void addLgota(PatientLgota lgota) throws org.apache.thrift.TException
    {
      send_addLgota(lgota);
      recv_addLgota();
    }

    public void send_addLgota(PatientLgota lgota) throws org.apache.thrift.TException
    {
      addLgota_args args = new addLgota_args();
      args.setLgota(lgota);
      sendBase("addLgota", args);
    }

    public void recv_addLgota() throws org.apache.thrift.TException
    {
      addLgota_result result = new addLgota_result();
      receiveBase(result, "addLgota");
      return;
    }

    public void addKont(PatientKontingent kont) throws org.apache.thrift.TException
    {
      send_addKont(kont);
      recv_addKont();
    }

    public void send_addKont(PatientKontingent kont) throws org.apache.thrift.TException
    {
      addKont_args args = new addKont_args();
      args.setKont(kont);
      sendBase("addKont", args);
    }

    public void recv_addKont() throws org.apache.thrift.TException
    {
      addKont_result result = new addKont_result();
      receiveBase(result, "addKont");
      return;
    }

    public void addAgent(PatientAgent agent) throws org.apache.thrift.TException
    {
      send_addAgent(agent);
      recv_addAgent();
    }

    public void send_addAgent(PatientAgent agent) throws org.apache.thrift.TException
    {
      addAgent_args args = new addAgent_args();
      args.setAgent(agent);
      sendBase("addAgent", args);
    }

    public void recv_addAgent() throws org.apache.thrift.TException
    {
      addAgent_result result = new addAgent_result();
      receiveBase(result, "addAgent");
      return;
    }

    public void addSign(PatientSign sign) throws org.apache.thrift.TException
    {
      send_addSign(sign);
      recv_addSign();
    }

    public void send_addSign(PatientSign sign) throws org.apache.thrift.TException
    {
      addSign_args args = new addSign_args();
      args.setSign(sign);
      sendBase("addSign", args);
    }

    public void recv_addSign() throws org.apache.thrift.TException
    {
      addSign_result result = new addSign_result();
      receiveBase(result, "addSign");
      return;
    }

    public void addJalob(PatientJalob jalob) throws org.apache.thrift.TException
    {
      send_addJalob(jalob);
      recv_addJalob();
    }

    public void send_addJalob(PatientJalob jalob) throws org.apache.thrift.TException
    {
      addJalob_args args = new addJalob_args();
      args.setJalob(jalob);
      sendBase("addJalob", args);
    }

    public void recv_addJalob() throws org.apache.thrift.TException
    {
      addJalob_result result = new addJalob_result();
      receiveBase(result, "addJalob");
      return;
    }

    public void addGosp(PatientGosp gosp) throws org.apache.thrift.TException
    {
      send_addGosp(gosp);
      recv_addGosp();
    }

    public void send_addGosp(PatientGosp gosp) throws org.apache.thrift.TException
    {
      addGosp_args args = new addGosp_args();
      args.setGosp(gosp);
      sendBase("addGosp", args);
    }

    public void recv_addGosp() throws org.apache.thrift.TException
    {
      addGosp_result result = new addGosp_result();
      receiveBase(result, "addGosp");
      return;
    }

    public void addNambk(PatientNambk nambk) throws org.apache.thrift.TException
    {
      send_addNambk(nambk);
      recv_addNambk();
    }

    public void send_addNambk(PatientNambk nambk) throws org.apache.thrift.TException
    {
      addNambk_args args = new addNambk_args();
      args.setNambk(nambk);
      sendBase("addNambk", args);
    }

    public void recv_addNambk() throws org.apache.thrift.TException
    {
      addNambk_result result = new addNambk_result();
      receiveBase(result, "addNambk");
      return;
    }

    public void deletePatient(int npasp) throws org.apache.thrift.TException
    {
      send_deletePatient(npasp);
      recv_deletePatient();
    }

    public void send_deletePatient(int npasp) throws org.apache.thrift.TException
    {
      deletePatient_args args = new deletePatient_args();
      args.setNpasp(npasp);
      sendBase("deletePatient", args);
    }

    public void recv_deletePatient() throws org.apache.thrift.TException
    {
      deletePatient_result result = new deletePatient_result();
      receiveBase(result, "deletePatient");
      return;
    }

    public void deleteNambk(int npasp, int cpol) throws org.apache.thrift.TException
    {
      send_deleteNambk(npasp, cpol);
      recv_deleteNambk();
    }

    public void send_deleteNambk(int npasp, int cpol) throws org.apache.thrift.TException
    {
      deleteNambk_args args = new deleteNambk_args();
      args.setNpasp(npasp);
      args.setCpol(cpol);
      sendBase("deleteNambk", args);
    }

    public void recv_deleteNambk() throws org.apache.thrift.TException
    {
      deleteNambk_result result = new deleteNambk_result();
      receiveBase(result, "deleteNambk");
      return;
    }

    public void deleteLgota(int npasp, int lgota) throws org.apache.thrift.TException
    {
      send_deleteLgota(npasp, lgota);
      recv_deleteLgota();
    }

    public void send_deleteLgota(int npasp, int lgota) throws org.apache.thrift.TException
    {
      deleteLgota_args args = new deleteLgota_args();
      args.setNpasp(npasp);
      args.setLgota(lgota);
      sendBase("deleteLgota", args);
    }

    public void recv_deleteLgota() throws org.apache.thrift.TException
    {
      deleteLgota_result result = new deleteLgota_result();
      receiveBase(result, "deleteLgota");
      return;
    }

    public void deleteKont(int npasp, int kateg) throws org.apache.thrift.TException
    {
      send_deleteKont(npasp, kateg);
      recv_deleteKont();
    }

    public void send_deleteKont(int npasp, int kateg) throws org.apache.thrift.TException
    {
      deleteKont_args args = new deleteKont_args();
      args.setNpasp(npasp);
      args.setKateg(kateg);
      sendBase("deleteKont", args);
    }

    public void recv_deleteKont() throws org.apache.thrift.TException
    {
      deleteKont_result result = new deleteKont_result();
      receiveBase(result, "deleteKont");
      return;
    }

    public void deleteAgent(int npasp) throws org.apache.thrift.TException
    {
      send_deleteAgent(npasp);
      recv_deleteAgent();
    }

    public void send_deleteAgent(int npasp) throws org.apache.thrift.TException
    {
      deleteAgent_args args = new deleteAgent_args();
      args.setNpasp(npasp);
      sendBase("deleteAgent", args);
    }

    public void recv_deleteAgent() throws org.apache.thrift.TException
    {
      deleteAgent_result result = new deleteAgent_result();
      receiveBase(result, "deleteAgent");
      return;
    }

    public void deleteSign(int npasp) throws org.apache.thrift.TException
    {
      send_deleteSign(npasp);
      recv_deleteSign();
    }

    public void send_deleteSign(int npasp) throws org.apache.thrift.TException
    {
      deleteSign_args args = new deleteSign_args();
      args.setNpasp(npasp);
      sendBase("deleteSign", args);
    }

    public void recv_deleteSign() throws org.apache.thrift.TException
    {
      deleteSign_result result = new deleteSign_result();
      receiveBase(result, "deleteSign");
      return;
    }

    public void deleteJalob(int npasp, int ngosp) throws org.apache.thrift.TException
    {
      send_deleteJalob(npasp, ngosp);
      recv_deleteJalob();
    }

    public void send_deleteJalob(int npasp, int ngosp) throws org.apache.thrift.TException
    {
      deleteJalob_args args = new deleteJalob_args();
      args.setNpasp(npasp);
      args.setNgosp(ngosp);
      sendBase("deleteJalob", args);
    }

    public void recv_deleteJalob() throws org.apache.thrift.TException
    {
      deleteJalob_result result = new deleteJalob_result();
      receiveBase(result, "deleteJalob");
      return;
    }

    public void deleteGosp(int npasp, int ngosp) throws org.apache.thrift.TException
    {
      send_deleteGosp(npasp, ngosp);
      recv_deleteGosp();
    }

    public void send_deleteGosp(int npasp, int ngosp) throws org.apache.thrift.TException
    {
      deleteGosp_args args = new deleteGosp_args();
      args.setNpasp(npasp);
      args.setNgosp(ngosp);
      sendBase("deleteGosp", args);
    }

    public void recv_deleteGosp() throws org.apache.thrift.TException
    {
      deleteGosp_result result = new deleteGosp_result();
      receiveBase(result, "deleteGosp");
      return;
    }

    public void updatePatient(PatientFullInfo patinfo) throws org.apache.thrift.TException
    {
      send_updatePatient(patinfo);
      recv_updatePatient();
    }

    public void send_updatePatient(PatientFullInfo patinfo) throws org.apache.thrift.TException
    {
      updatePatient_args args = new updatePatient_args();
      args.setPatinfo(patinfo);
      sendBase("updatePatient", args);
    }

    public void recv_updatePatient() throws org.apache.thrift.TException
    {
      updatePatient_result result = new updatePatient_result();
      receiveBase(result, "updatePatient");
      return;
    }

    public void updateNambk(PatientNambk nambk) throws org.apache.thrift.TException
    {
      send_updateNambk(nambk);
      recv_updateNambk();
    }

    public void send_updateNambk(PatientNambk nambk) throws org.apache.thrift.TException
    {
      updateNambk_args args = new updateNambk_args();
      args.setNambk(nambk);
      sendBase("updateNambk", args);
    }

    public void recv_updateNambk() throws org.apache.thrift.TException
    {
      updateNambk_result result = new updateNambk_result();
      receiveBase(result, "updateNambk");
      return;
    }

    public void updateLgota(int npasp, int lgota) throws org.apache.thrift.TException
    {
      send_updateLgota(npasp, lgota);
      recv_updateLgota();
    }

    public void send_updateLgota(int npasp, int lgota) throws org.apache.thrift.TException
    {
      updateLgota_args args = new updateLgota_args();
      args.setNpasp(npasp);
      args.setLgota(lgota);
      sendBase("updateLgota", args);
    }

    public void recv_updateLgota() throws org.apache.thrift.TException
    {
      updateLgota_result result = new updateLgota_result();
      receiveBase(result, "updateLgota");
      return;
    }

    public void updateKont(int npasp, int kateg) throws org.apache.thrift.TException
    {
      send_updateKont(npasp, kateg);
      recv_updateKont();
    }

    public void send_updateKont(int npasp, int kateg) throws org.apache.thrift.TException
    {
      updateKont_args args = new updateKont_args();
      args.setNpasp(npasp);
      args.setKateg(kateg);
      sendBase("updateKont", args);
    }

    public void recv_updateKont() throws org.apache.thrift.TException
    {
      updateKont_result result = new updateKont_result();
      receiveBase(result, "updateKont");
      return;
    }

    public void updateAgent(PatientAgent agent) throws org.apache.thrift.TException
    {
      send_updateAgent(agent);
      recv_updateAgent();
    }

    public void send_updateAgent(PatientAgent agent) throws org.apache.thrift.TException
    {
      updateAgent_args args = new updateAgent_args();
      args.setAgent(agent);
      sendBase("updateAgent", args);
    }

    public void recv_updateAgent() throws org.apache.thrift.TException
    {
      updateAgent_result result = new updateAgent_result();
      receiveBase(result, "updateAgent");
      return;
    }

    public void updateSign(PatientSign sign) throws org.apache.thrift.TException
    {
      send_updateSign(sign);
      recv_updateSign();
    }

    public void send_updateSign(PatientSign sign) throws org.apache.thrift.TException
    {
      updateSign_args args = new updateSign_args();
      args.setSign(sign);
      sendBase("updateSign", args);
    }

    public void recv_updateSign() throws org.apache.thrift.TException
    {
      updateSign_result result = new updateSign_result();
      receiveBase(result, "updateSign");
      return;
    }

    public void updateJalob(PatientJalob jalob) throws org.apache.thrift.TException
    {
      send_updateJalob(jalob);
      recv_updateJalob();
    }

    public void send_updateJalob(PatientJalob jalob) throws org.apache.thrift.TException
    {
      updateJalob_args args = new updateJalob_args();
      args.setJalob(jalob);
      sendBase("updateJalob", args);
    }

    public void recv_updateJalob() throws org.apache.thrift.TException
    {
      updateJalob_result result = new updateJalob_result();
      receiveBase(result, "updateJalob");
      return;
    }

    public void updateGosp(PatientGosp gosp) throws org.apache.thrift.TException
    {
      send_updateGosp(gosp);
      recv_updateGosp();
    }

    public void send_updateGosp(PatientGosp gosp) throws org.apache.thrift.TException
    {
      updateGosp_args args = new updateGosp_args();
      args.setGosp(gosp);
      sendBase("updateGosp", args);
    }

    public void recv_updateGosp() throws org.apache.thrift.TException
    {
      updateGosp_result result = new updateGosp_result();
      receiveBase(result, "updateGosp");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAllPatientBrief(PatientBrief patient, org.apache.thrift.async.AsyncMethodCallback<getAllPatientBrief_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllPatientBrief_call method_call = new getAllPatientBrief_call(patient, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllPatientBrief_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PatientBrief patient;
      public getAllPatientBrief_call(PatientBrief patient, org.apache.thrift.async.AsyncMethodCallback<getAllPatientBrief_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.patient = patient;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllPatientBrief", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllPatientBrief_args args = new getAllPatientBrief_args();
        args.setPatient(patient);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<PatientBrief> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllPatientBrief();
      }
    }

    public void getPatientFullInfo(int npasp, org.apache.thrift.async.AsyncMethodCallback<getPatientFullInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatientFullInfo_call method_call = new getPatientFullInfo_call(npasp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatientFullInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      public getPatientFullInfo_call(int npasp, org.apache.thrift.async.AsyncMethodCallback<getPatientFullInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatientFullInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatientFullInfo_args args = new getPatientFullInfo_args();
        args.setNpasp(npasp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PatientFullInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatientFullInfo();
      }
    }

    public void getPatientAgent(int npasp, org.apache.thrift.async.AsyncMethodCallback<getPatientAgent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatientAgent_call method_call = new getPatientAgent_call(npasp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatientAgent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      public getPatientAgent_call(int npasp, org.apache.thrift.async.AsyncMethodCallback<getPatientAgent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatientAgent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatientAgent_args args = new getPatientAgent_args();
        args.setNpasp(npasp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PatientAgent getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatientAgent();
      }
    }

    public void getPatientLgota(int npasp, org.apache.thrift.async.AsyncMethodCallback<getPatientLgota_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatientLgota_call method_call = new getPatientLgota_call(npasp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatientLgota_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      public getPatientLgota_call(int npasp, org.apache.thrift.async.AsyncMethodCallback<getPatientLgota_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatientLgota", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatientLgota_args args = new getPatientLgota_args();
        args.setNpasp(npasp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<PatientLgota> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatientLgota();
      }
    }

    public void getPatientKontingent(int npasp, org.apache.thrift.async.AsyncMethodCallback<getPatientKontingent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatientKontingent_call method_call = new getPatientKontingent_call(npasp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatientKontingent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      public getPatientKontingent_call(int npasp, org.apache.thrift.async.AsyncMethodCallback<getPatientKontingent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatientKontingent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatientKontingent_args args = new getPatientKontingent_args();
        args.setNpasp(npasp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<PatientKontingent> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatientKontingent();
      }
    }

    public void getPatientSign(int npasp, org.apache.thrift.async.AsyncMethodCallback<getPatientSign_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatientSign_call method_call = new getPatientSign_call(npasp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatientSign_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      public getPatientSign_call(int npasp, org.apache.thrift.async.AsyncMethodCallback<getPatientSign_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatientSign", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatientSign_args args = new getPatientSign_args();
        args.setNpasp(npasp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PatientSign getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatientSign();
      }
    }

    public void getPatientNambk(int npasp, org.apache.thrift.async.AsyncMethodCallback<getPatientNambk_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatientNambk_call method_call = new getPatientNambk_call(npasp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatientNambk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      public getPatientNambk_call(int npasp, org.apache.thrift.async.AsyncMethodCallback<getPatientNambk_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatientNambk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatientNambk_args args = new getPatientNambk_args();
        args.setNpasp(npasp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PatientNambk getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatientNambk();
      }
    }

    public void getPatientAllGosp(int npasp, int ngosp, org.apache.thrift.async.AsyncMethodCallback<getPatientAllGosp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatientAllGosp_call method_call = new getPatientAllGosp_call(npasp, ngosp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatientAllGosp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      private int ngosp;
      public getPatientAllGosp_call(int npasp, int ngosp, org.apache.thrift.async.AsyncMethodCallback<getPatientAllGosp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
        this.ngosp = ngosp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatientAllGosp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatientAllGosp_args args = new getPatientAllGosp_args();
        args.setNpasp(npasp);
        args.setNgosp(ngosp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<PatientAllGosp> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatientAllGosp();
      }
    }

    public void getPatientGosp(int npasp, int ngosp, org.apache.thrift.async.AsyncMethodCallback<getPatientGosp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatientGosp_call method_call = new getPatientGosp_call(npasp, ngosp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatientGosp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      private int ngosp;
      public getPatientGosp_call(int npasp, int ngosp, org.apache.thrift.async.AsyncMethodCallback<getPatientGosp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
        this.ngosp = ngosp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatientGosp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatientGosp_args args = new getPatientGosp_args();
        args.setNpasp(npasp);
        args.setNgosp(ngosp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PatientGosp getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatientGosp();
      }
    }

    public void getSpravInfo(String param, org.apache.thrift.async.AsyncMethodCallback<getSpravInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSpravInfo_call method_call = new getSpravInfo_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSpravInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String param;
      public getSpravInfo_call(String param, org.apache.thrift.async.AsyncMethodCallback<getSpravInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSpravInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSpravInfo_args args = new getSpravInfo_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SpravStruct> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSpravInfo();
      }
    }

    public void addPatient(PatientFullInfo patinfo, org.apache.thrift.async.AsyncMethodCallback<addPatient_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPatient_call method_call = new addPatient_call(patinfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPatient_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PatientFullInfo patinfo;
      public addPatient_call(PatientFullInfo patinfo, org.apache.thrift.async.AsyncMethodCallback<addPatient_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.patinfo = patinfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPatient", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPatient_args args = new addPatient_args();
        args.setPatinfo(patinfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addPatient();
      }
    }

    public void addLgota(PatientLgota lgota, org.apache.thrift.async.AsyncMethodCallback<addLgota_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addLgota_call method_call = new addLgota_call(lgota, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addLgota_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PatientLgota lgota;
      public addLgota_call(PatientLgota lgota, org.apache.thrift.async.AsyncMethodCallback<addLgota_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lgota = lgota;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addLgota", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addLgota_args args = new addLgota_args();
        args.setLgota(lgota);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addLgota();
      }
    }

    public void addKont(PatientKontingent kont, org.apache.thrift.async.AsyncMethodCallback<addKont_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addKont_call method_call = new addKont_call(kont, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addKont_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PatientKontingent kont;
      public addKont_call(PatientKontingent kont, org.apache.thrift.async.AsyncMethodCallback<addKont_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.kont = kont;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addKont", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addKont_args args = new addKont_args();
        args.setKont(kont);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addKont();
      }
    }

    public void addAgent(PatientAgent agent, org.apache.thrift.async.AsyncMethodCallback<addAgent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addAgent_call method_call = new addAgent_call(agent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addAgent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PatientAgent agent;
      public addAgent_call(PatientAgent agent, org.apache.thrift.async.AsyncMethodCallback<addAgent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.agent = agent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAgent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addAgent_args args = new addAgent_args();
        args.setAgent(agent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addAgent();
      }
    }

    public void addSign(PatientSign sign, org.apache.thrift.async.AsyncMethodCallback<addSign_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSign_call method_call = new addSign_call(sign, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSign_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PatientSign sign;
      public addSign_call(PatientSign sign, org.apache.thrift.async.AsyncMethodCallback<addSign_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sign = sign;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSign", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSign_args args = new addSign_args();
        args.setSign(sign);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addSign();
      }
    }

    public void addJalob(PatientJalob jalob, org.apache.thrift.async.AsyncMethodCallback<addJalob_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addJalob_call method_call = new addJalob_call(jalob, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addJalob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PatientJalob jalob;
      public addJalob_call(PatientJalob jalob, org.apache.thrift.async.AsyncMethodCallback<addJalob_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jalob = jalob;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addJalob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addJalob_args args = new addJalob_args();
        args.setJalob(jalob);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addJalob();
      }
    }

    public void addGosp(PatientGosp gosp, org.apache.thrift.async.AsyncMethodCallback<addGosp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addGosp_call method_call = new addGosp_call(gosp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addGosp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PatientGosp gosp;
      public addGosp_call(PatientGosp gosp, org.apache.thrift.async.AsyncMethodCallback<addGosp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gosp = gosp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addGosp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addGosp_args args = new addGosp_args();
        args.setGosp(gosp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addGosp();
      }
    }

    public void addNambk(PatientNambk nambk, org.apache.thrift.async.AsyncMethodCallback<addNambk_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addNambk_call method_call = new addNambk_call(nambk, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addNambk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PatientNambk nambk;
      public addNambk_call(PatientNambk nambk, org.apache.thrift.async.AsyncMethodCallback<addNambk_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nambk = nambk;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addNambk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addNambk_args args = new addNambk_args();
        args.setNambk(nambk);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addNambk();
      }
    }

    public void deletePatient(int npasp, org.apache.thrift.async.AsyncMethodCallback<deletePatient_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deletePatient_call method_call = new deletePatient_call(npasp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deletePatient_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      public deletePatient_call(int npasp, org.apache.thrift.async.AsyncMethodCallback<deletePatient_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deletePatient", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deletePatient_args args = new deletePatient_args();
        args.setNpasp(npasp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deletePatient();
      }
    }

    public void deleteNambk(int npasp, int cpol, org.apache.thrift.async.AsyncMethodCallback<deleteNambk_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteNambk_call method_call = new deleteNambk_call(npasp, cpol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteNambk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      private int cpol;
      public deleteNambk_call(int npasp, int cpol, org.apache.thrift.async.AsyncMethodCallback<deleteNambk_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
        this.cpol = cpol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteNambk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteNambk_args args = new deleteNambk_args();
        args.setNpasp(npasp);
        args.setCpol(cpol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteNambk();
      }
    }

    public void deleteLgota(int npasp, int lgota, org.apache.thrift.async.AsyncMethodCallback<deleteLgota_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteLgota_call method_call = new deleteLgota_call(npasp, lgota, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteLgota_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      private int lgota;
      public deleteLgota_call(int npasp, int lgota, org.apache.thrift.async.AsyncMethodCallback<deleteLgota_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
        this.lgota = lgota;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteLgota", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteLgota_args args = new deleteLgota_args();
        args.setNpasp(npasp);
        args.setLgota(lgota);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteLgota();
      }
    }

    public void deleteKont(int npasp, int kateg, org.apache.thrift.async.AsyncMethodCallback<deleteKont_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteKont_call method_call = new deleteKont_call(npasp, kateg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteKont_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      private int kateg;
      public deleteKont_call(int npasp, int kateg, org.apache.thrift.async.AsyncMethodCallback<deleteKont_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
        this.kateg = kateg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteKont", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteKont_args args = new deleteKont_args();
        args.setNpasp(npasp);
        args.setKateg(kateg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteKont();
      }
    }

    public void deleteAgent(int npasp, org.apache.thrift.async.AsyncMethodCallback<deleteAgent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteAgent_call method_call = new deleteAgent_call(npasp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteAgent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      public deleteAgent_call(int npasp, org.apache.thrift.async.AsyncMethodCallback<deleteAgent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteAgent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteAgent_args args = new deleteAgent_args();
        args.setNpasp(npasp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteAgent();
      }
    }

    public void deleteSign(int npasp, org.apache.thrift.async.AsyncMethodCallback<deleteSign_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSign_call method_call = new deleteSign_call(npasp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSign_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      public deleteSign_call(int npasp, org.apache.thrift.async.AsyncMethodCallback<deleteSign_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSign", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSign_args args = new deleteSign_args();
        args.setNpasp(npasp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteSign();
      }
    }

    public void deleteJalob(int npasp, int ngosp, org.apache.thrift.async.AsyncMethodCallback<deleteJalob_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteJalob_call method_call = new deleteJalob_call(npasp, ngosp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteJalob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      private int ngosp;
      public deleteJalob_call(int npasp, int ngosp, org.apache.thrift.async.AsyncMethodCallback<deleteJalob_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
        this.ngosp = ngosp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteJalob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteJalob_args args = new deleteJalob_args();
        args.setNpasp(npasp);
        args.setNgosp(ngosp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteJalob();
      }
    }

    public void deleteGosp(int npasp, int ngosp, org.apache.thrift.async.AsyncMethodCallback<deleteGosp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteGosp_call method_call = new deleteGosp_call(npasp, ngosp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteGosp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      private int ngosp;
      public deleteGosp_call(int npasp, int ngosp, org.apache.thrift.async.AsyncMethodCallback<deleteGosp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
        this.ngosp = ngosp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteGosp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteGosp_args args = new deleteGosp_args();
        args.setNpasp(npasp);
        args.setNgosp(ngosp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteGosp();
      }
    }

    public void updatePatient(PatientFullInfo patinfo, org.apache.thrift.async.AsyncMethodCallback<updatePatient_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePatient_call method_call = new updatePatient_call(patinfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePatient_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PatientFullInfo patinfo;
      public updatePatient_call(PatientFullInfo patinfo, org.apache.thrift.async.AsyncMethodCallback<updatePatient_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.patinfo = patinfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePatient", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePatient_args args = new updatePatient_args();
        args.setPatinfo(patinfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updatePatient();
      }
    }

    public void updateNambk(PatientNambk nambk, org.apache.thrift.async.AsyncMethodCallback<updateNambk_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateNambk_call method_call = new updateNambk_call(nambk, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateNambk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PatientNambk nambk;
      public updateNambk_call(PatientNambk nambk, org.apache.thrift.async.AsyncMethodCallback<updateNambk_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nambk = nambk;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateNambk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateNambk_args args = new updateNambk_args();
        args.setNambk(nambk);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateNambk();
      }
    }

    public void updateLgota(int npasp, int lgota, org.apache.thrift.async.AsyncMethodCallback<updateLgota_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateLgota_call method_call = new updateLgota_call(npasp, lgota, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateLgota_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      private int lgota;
      public updateLgota_call(int npasp, int lgota, org.apache.thrift.async.AsyncMethodCallback<updateLgota_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
        this.lgota = lgota;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateLgota", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateLgota_args args = new updateLgota_args();
        args.setNpasp(npasp);
        args.setLgota(lgota);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateLgota();
      }
    }

    public void updateKont(int npasp, int kateg, org.apache.thrift.async.AsyncMethodCallback<updateKont_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateKont_call method_call = new updateKont_call(npasp, kateg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateKont_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int npasp;
      private int kateg;
      public updateKont_call(int npasp, int kateg, org.apache.thrift.async.AsyncMethodCallback<updateKont_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.npasp = npasp;
        this.kateg = kateg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateKont", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateKont_args args = new updateKont_args();
        args.setNpasp(npasp);
        args.setKateg(kateg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateKont();
      }
    }

    public void updateAgent(PatientAgent agent, org.apache.thrift.async.AsyncMethodCallback<updateAgent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAgent_call method_call = new updateAgent_call(agent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAgent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PatientAgent agent;
      public updateAgent_call(PatientAgent agent, org.apache.thrift.async.AsyncMethodCallback<updateAgent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.agent = agent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAgent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAgent_args args = new updateAgent_args();
        args.setAgent(agent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateAgent();
      }
    }

    public void updateSign(PatientSign sign, org.apache.thrift.async.AsyncMethodCallback<updateSign_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSign_call method_call = new updateSign_call(sign, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSign_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PatientSign sign;
      public updateSign_call(PatientSign sign, org.apache.thrift.async.AsyncMethodCallback<updateSign_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sign = sign;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSign", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSign_args args = new updateSign_args();
        args.setSign(sign);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateSign();
      }
    }

    public void updateJalob(PatientJalob jalob, org.apache.thrift.async.AsyncMethodCallback<updateJalob_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateJalob_call method_call = new updateJalob_call(jalob, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateJalob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PatientJalob jalob;
      public updateJalob_call(PatientJalob jalob, org.apache.thrift.async.AsyncMethodCallback<updateJalob_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jalob = jalob;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateJalob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateJalob_args args = new updateJalob_args();
        args.setJalob(jalob);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateJalob();
      }
    }

    public void updateGosp(PatientGosp gosp, org.apache.thrift.async.AsyncMethodCallback<updateGosp_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateGosp_call method_call = new updateGosp_call(gosp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateGosp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PatientGosp gosp;
      public updateGosp_call(PatientGosp gosp, org.apache.thrift.async.AsyncMethodCallback<updateGosp_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gosp = gosp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateGosp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateGosp_args args = new updateGosp_args();
        args.setGosp(gosp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateGosp();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAllPatientBrief", new getAllPatientBrief());
      processMap.put("getPatientFullInfo", new getPatientFullInfo());
      processMap.put("getPatientAgent", new getPatientAgent());
      processMap.put("getPatientLgota", new getPatientLgota());
      processMap.put("getPatientKontingent", new getPatientKontingent());
      processMap.put("getPatientSign", new getPatientSign());
      processMap.put("getPatientNambk", new getPatientNambk());
      processMap.put("getPatientAllGosp", new getPatientAllGosp());
      processMap.put("getPatientGosp", new getPatientGosp());
      processMap.put("getSpravInfo", new getSpravInfo());
      processMap.put("addPatient", new addPatient());
      processMap.put("addLgota", new addLgota());
      processMap.put("addKont", new addKont());
      processMap.put("addAgent", new addAgent());
      processMap.put("addSign", new addSign());
      processMap.put("addJalob", new addJalob());
      processMap.put("addGosp", new addGosp());
      processMap.put("addNambk", new addNambk());
      processMap.put("deletePatient", new deletePatient());
      processMap.put("deleteNambk", new deleteNambk());
      processMap.put("deleteLgota", new deleteLgota());
      processMap.put("deleteKont", new deleteKont());
      processMap.put("deleteAgent", new deleteAgent());
      processMap.put("deleteSign", new deleteSign());
      processMap.put("deleteJalob", new deleteJalob());
      processMap.put("deleteGosp", new deleteGosp());
      processMap.put("updatePatient", new updatePatient());
      processMap.put("updateNambk", new updateNambk());
      processMap.put("updateLgota", new updateLgota());
      processMap.put("updateKont", new updateKont());
      processMap.put("updateAgent", new updateAgent());
      processMap.put("updateSign", new updateSign());
      processMap.put("updateJalob", new updateJalob());
      processMap.put("updateGosp", new updateGosp());
      return processMap;
    }

    private static class getAllPatientBrief<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllPatientBrief_args> {
      public getAllPatientBrief() {
        super("getAllPatientBrief");
      }

      protected getAllPatientBrief_args getEmptyArgsInstance() {
        return new getAllPatientBrief_args();
      }

      protected getAllPatientBrief_result getResult(I iface, getAllPatientBrief_args args) throws org.apache.thrift.TException {
        getAllPatientBrief_result result = new getAllPatientBrief_result();
        result.success = iface.getAllPatientBrief(args.patient);
        return result;
      }
    }

    private static class getPatientFullInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatientFullInfo_args> {
      public getPatientFullInfo() {
        super("getPatientFullInfo");
      }

      protected getPatientFullInfo_args getEmptyArgsInstance() {
        return new getPatientFullInfo_args();
      }

      protected getPatientFullInfo_result getResult(I iface, getPatientFullInfo_args args) throws org.apache.thrift.TException {
        getPatientFullInfo_result result = new getPatientFullInfo_result();
        result.success = iface.getPatientFullInfo(args.npasp);
        return result;
      }
    }

    private static class getPatientAgent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatientAgent_args> {
      public getPatientAgent() {
        super("getPatientAgent");
      }

      protected getPatientAgent_args getEmptyArgsInstance() {
        return new getPatientAgent_args();
      }

      protected getPatientAgent_result getResult(I iface, getPatientAgent_args args) throws org.apache.thrift.TException {
        getPatientAgent_result result = new getPatientAgent_result();
        result.success = iface.getPatientAgent(args.npasp);
        return result;
      }
    }

    private static class getPatientLgota<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatientLgota_args> {
      public getPatientLgota() {
        super("getPatientLgota");
      }

      protected getPatientLgota_args getEmptyArgsInstance() {
        return new getPatientLgota_args();
      }

      protected getPatientLgota_result getResult(I iface, getPatientLgota_args args) throws org.apache.thrift.TException {
        getPatientLgota_result result = new getPatientLgota_result();
        result.success = iface.getPatientLgota(args.npasp);
        return result;
      }
    }

    private static class getPatientKontingent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatientKontingent_args> {
      public getPatientKontingent() {
        super("getPatientKontingent");
      }

      protected getPatientKontingent_args getEmptyArgsInstance() {
        return new getPatientKontingent_args();
      }

      protected getPatientKontingent_result getResult(I iface, getPatientKontingent_args args) throws org.apache.thrift.TException {
        getPatientKontingent_result result = new getPatientKontingent_result();
        result.success = iface.getPatientKontingent(args.npasp);
        return result;
      }
    }

    private static class getPatientSign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatientSign_args> {
      public getPatientSign() {
        super("getPatientSign");
      }

      protected getPatientSign_args getEmptyArgsInstance() {
        return new getPatientSign_args();
      }

      protected getPatientSign_result getResult(I iface, getPatientSign_args args) throws org.apache.thrift.TException {
        getPatientSign_result result = new getPatientSign_result();
        result.success = iface.getPatientSign(args.npasp);
        return result;
      }
    }

    private static class getPatientNambk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatientNambk_args> {
      public getPatientNambk() {
        super("getPatientNambk");
      }

      protected getPatientNambk_args getEmptyArgsInstance() {
        return new getPatientNambk_args();
      }

      protected getPatientNambk_result getResult(I iface, getPatientNambk_args args) throws org.apache.thrift.TException {
        getPatientNambk_result result = new getPatientNambk_result();
        result.success = iface.getPatientNambk(args.npasp);
        return result;
      }
    }

    private static class getPatientAllGosp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatientAllGosp_args> {
      public getPatientAllGosp() {
        super("getPatientAllGosp");
      }

      protected getPatientAllGosp_args getEmptyArgsInstance() {
        return new getPatientAllGosp_args();
      }

      protected getPatientAllGosp_result getResult(I iface, getPatientAllGosp_args args) throws org.apache.thrift.TException {
        getPatientAllGosp_result result = new getPatientAllGosp_result();
        result.success = iface.getPatientAllGosp(args.npasp, args.ngosp);
        return result;
      }
    }

    private static class getPatientGosp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatientGosp_args> {
      public getPatientGosp() {
        super("getPatientGosp");
      }

      protected getPatientGosp_args getEmptyArgsInstance() {
        return new getPatientGosp_args();
      }

      protected getPatientGosp_result getResult(I iface, getPatientGosp_args args) throws org.apache.thrift.TException {
        getPatientGosp_result result = new getPatientGosp_result();
        result.success = iface.getPatientGosp(args.npasp, args.ngosp);
        return result;
      }
    }

    private static class getSpravInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSpravInfo_args> {
      public getSpravInfo() {
        super("getSpravInfo");
      }

      protected getSpravInfo_args getEmptyArgsInstance() {
        return new getSpravInfo_args();
      }

      protected getSpravInfo_result getResult(I iface, getSpravInfo_args args) throws org.apache.thrift.TException {
        getSpravInfo_result result = new getSpravInfo_result();
        result.success = iface.getSpravInfo(args.param);
        return result;
      }
    }

    private static class addPatient<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPatient_args> {
      public addPatient() {
        super("addPatient");
      }

      protected addPatient_args getEmptyArgsInstance() {
        return new addPatient_args();
      }

      protected addPatient_result getResult(I iface, addPatient_args args) throws org.apache.thrift.TException {
        addPatient_result result = new addPatient_result();
        result.success = iface.addPatient(args.patinfo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class addLgota<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addLgota_args> {
      public addLgota() {
        super("addLgota");
      }

      protected addLgota_args getEmptyArgsInstance() {
        return new addLgota_args();
      }

      protected addLgota_result getResult(I iface, addLgota_args args) throws org.apache.thrift.TException {
        addLgota_result result = new addLgota_result();
        iface.addLgota(args.lgota);
        return result;
      }
    }

    private static class addKont<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addKont_args> {
      public addKont() {
        super("addKont");
      }

      protected addKont_args getEmptyArgsInstance() {
        return new addKont_args();
      }

      protected addKont_result getResult(I iface, addKont_args args) throws org.apache.thrift.TException {
        addKont_result result = new addKont_result();
        iface.addKont(args.kont);
        return result;
      }
    }

    private static class addAgent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAgent_args> {
      public addAgent() {
        super("addAgent");
      }

      protected addAgent_args getEmptyArgsInstance() {
        return new addAgent_args();
      }

      protected addAgent_result getResult(I iface, addAgent_args args) throws org.apache.thrift.TException {
        addAgent_result result = new addAgent_result();
        iface.addAgent(args.agent);
        return result;
      }
    }

    private static class addSign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSign_args> {
      public addSign() {
        super("addSign");
      }

      protected addSign_args getEmptyArgsInstance() {
        return new addSign_args();
      }

      protected addSign_result getResult(I iface, addSign_args args) throws org.apache.thrift.TException {
        addSign_result result = new addSign_result();
        iface.addSign(args.sign);
        return result;
      }
    }

    private static class addJalob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addJalob_args> {
      public addJalob() {
        super("addJalob");
      }

      protected addJalob_args getEmptyArgsInstance() {
        return new addJalob_args();
      }

      protected addJalob_result getResult(I iface, addJalob_args args) throws org.apache.thrift.TException {
        addJalob_result result = new addJalob_result();
        iface.addJalob(args.jalob);
        return result;
      }
    }

    private static class addGosp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addGosp_args> {
      public addGosp() {
        super("addGosp");
      }

      protected addGosp_args getEmptyArgsInstance() {
        return new addGosp_args();
      }

      protected addGosp_result getResult(I iface, addGosp_args args) throws org.apache.thrift.TException {
        addGosp_result result = new addGosp_result();
        iface.addGosp(args.gosp);
        return result;
      }
    }

    private static class addNambk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addNambk_args> {
      public addNambk() {
        super("addNambk");
      }

      protected addNambk_args getEmptyArgsInstance() {
        return new addNambk_args();
      }

      protected addNambk_result getResult(I iface, addNambk_args args) throws org.apache.thrift.TException {
        addNambk_result result = new addNambk_result();
        iface.addNambk(args.nambk);
        return result;
      }
    }

    private static class deletePatient<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deletePatient_args> {
      public deletePatient() {
        super("deletePatient");
      }

      protected deletePatient_args getEmptyArgsInstance() {
        return new deletePatient_args();
      }

      protected deletePatient_result getResult(I iface, deletePatient_args args) throws org.apache.thrift.TException {
        deletePatient_result result = new deletePatient_result();
        iface.deletePatient(args.npasp);
        return result;
      }
    }

    private static class deleteNambk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteNambk_args> {
      public deleteNambk() {
        super("deleteNambk");
      }

      protected deleteNambk_args getEmptyArgsInstance() {
        return new deleteNambk_args();
      }

      protected deleteNambk_result getResult(I iface, deleteNambk_args args) throws org.apache.thrift.TException {
        deleteNambk_result result = new deleteNambk_result();
        iface.deleteNambk(args.npasp, args.cpol);
        return result;
      }
    }

    private static class deleteLgota<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteLgota_args> {
      public deleteLgota() {
        super("deleteLgota");
      }

      protected deleteLgota_args getEmptyArgsInstance() {
        return new deleteLgota_args();
      }

      protected deleteLgota_result getResult(I iface, deleteLgota_args args) throws org.apache.thrift.TException {
        deleteLgota_result result = new deleteLgota_result();
        iface.deleteLgota(args.npasp, args.lgota);
        return result;
      }
    }

    private static class deleteKont<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteKont_args> {
      public deleteKont() {
        super("deleteKont");
      }

      protected deleteKont_args getEmptyArgsInstance() {
        return new deleteKont_args();
      }

      protected deleteKont_result getResult(I iface, deleteKont_args args) throws org.apache.thrift.TException {
        deleteKont_result result = new deleteKont_result();
        iface.deleteKont(args.npasp, args.kateg);
        return result;
      }
    }

    private static class deleteAgent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAgent_args> {
      public deleteAgent() {
        super("deleteAgent");
      }

      protected deleteAgent_args getEmptyArgsInstance() {
        return new deleteAgent_args();
      }

      protected deleteAgent_result getResult(I iface, deleteAgent_args args) throws org.apache.thrift.TException {
        deleteAgent_result result = new deleteAgent_result();
        iface.deleteAgent(args.npasp);
        return result;
      }
    }

    private static class deleteSign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSign_args> {
      public deleteSign() {
        super("deleteSign");
      }

      protected deleteSign_args getEmptyArgsInstance() {
        return new deleteSign_args();
      }

      protected deleteSign_result getResult(I iface, deleteSign_args args) throws org.apache.thrift.TException {
        deleteSign_result result = new deleteSign_result();
        iface.deleteSign(args.npasp);
        return result;
      }
    }

    private static class deleteJalob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteJalob_args> {
      public deleteJalob() {
        super("deleteJalob");
      }

      protected deleteJalob_args getEmptyArgsInstance() {
        return new deleteJalob_args();
      }

      protected deleteJalob_result getResult(I iface, deleteJalob_args args) throws org.apache.thrift.TException {
        deleteJalob_result result = new deleteJalob_result();
        iface.deleteJalob(args.npasp, args.ngosp);
        return result;
      }
    }

    private static class deleteGosp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteGosp_args> {
      public deleteGosp() {
        super("deleteGosp");
      }

      protected deleteGosp_args getEmptyArgsInstance() {
        return new deleteGosp_args();
      }

      protected deleteGosp_result getResult(I iface, deleteGosp_args args) throws org.apache.thrift.TException {
        deleteGosp_result result = new deleteGosp_result();
        iface.deleteGosp(args.npasp, args.ngosp);
        return result;
      }
    }

    private static class updatePatient<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePatient_args> {
      public updatePatient() {
        super("updatePatient");
      }

      protected updatePatient_args getEmptyArgsInstance() {
        return new updatePatient_args();
      }

      protected updatePatient_result getResult(I iface, updatePatient_args args) throws org.apache.thrift.TException {
        updatePatient_result result = new updatePatient_result();
        iface.updatePatient(args.patinfo);
        return result;
      }
    }

    private static class updateNambk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateNambk_args> {
      public updateNambk() {
        super("updateNambk");
      }

      protected updateNambk_args getEmptyArgsInstance() {
        return new updateNambk_args();
      }

      protected updateNambk_result getResult(I iface, updateNambk_args args) throws org.apache.thrift.TException {
        updateNambk_result result = new updateNambk_result();
        iface.updateNambk(args.nambk);
        return result;
      }
    }

    private static class updateLgota<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateLgota_args> {
      public updateLgota() {
        super("updateLgota");
      }

      protected updateLgota_args getEmptyArgsInstance() {
        return new updateLgota_args();
      }

      protected updateLgota_result getResult(I iface, updateLgota_args args) throws org.apache.thrift.TException {
        updateLgota_result result = new updateLgota_result();
        iface.updateLgota(args.npasp, args.lgota);
        return result;
      }
    }

    private static class updateKont<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateKont_args> {
      public updateKont() {
        super("updateKont");
      }

      protected updateKont_args getEmptyArgsInstance() {
        return new updateKont_args();
      }

      protected updateKont_result getResult(I iface, updateKont_args args) throws org.apache.thrift.TException {
        updateKont_result result = new updateKont_result();
        iface.updateKont(args.npasp, args.kateg);
        return result;
      }
    }

    private static class updateAgent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAgent_args> {
      public updateAgent() {
        super("updateAgent");
      }

      protected updateAgent_args getEmptyArgsInstance() {
        return new updateAgent_args();
      }

      protected updateAgent_result getResult(I iface, updateAgent_args args) throws org.apache.thrift.TException {
        updateAgent_result result = new updateAgent_result();
        iface.updateAgent(args.agent);
        return result;
      }
    }

    private static class updateSign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSign_args> {
      public updateSign() {
        super("updateSign");
      }

      protected updateSign_args getEmptyArgsInstance() {
        return new updateSign_args();
      }

      protected updateSign_result getResult(I iface, updateSign_args args) throws org.apache.thrift.TException {
        updateSign_result result = new updateSign_result();
        iface.updateSign(args.sign);
        return result;
      }
    }

    private static class updateJalob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateJalob_args> {
      public updateJalob() {
        super("updateJalob");
      }

      protected updateJalob_args getEmptyArgsInstance() {
        return new updateJalob_args();
      }

      protected updateJalob_result getResult(I iface, updateJalob_args args) throws org.apache.thrift.TException {
        updateJalob_result result = new updateJalob_result();
        iface.updateJalob(args.jalob);
        return result;
      }
    }

    private static class updateGosp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateGosp_args> {
      public updateGosp() {
        super("updateGosp");
      }

      protected updateGosp_args getEmptyArgsInstance() {
        return new updateGosp_args();
      }

      protected updateGosp_result getResult(I iface, updateGosp_args args) throws org.apache.thrift.TException {
        updateGosp_result result = new updateGosp_result();
        iface.updateGosp(args.gosp);
        return result;
      }
    }

  }

  public static class getAllPatientBrief_args implements org.apache.thrift.TBase<getAllPatientBrief_args, getAllPatientBrief_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllPatientBrief_args");

    private static final org.apache.thrift.protocol.TField PATIENT_FIELD_DESC = new org.apache.thrift.protocol.TField("patient", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllPatientBrief_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllPatientBrief_argsTupleSchemeFactory());
    }

    public PatientBrief patient; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATIENT((short)1, "patient");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATIENT
            return PATIENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATIENT, new org.apache.thrift.meta_data.FieldMetaData("patient", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientBrief.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllPatientBrief_args.class, metaDataMap);
    }

    public getAllPatientBrief_args() {
    }

    public getAllPatientBrief_args(
      PatientBrief patient)
    {
      this();
      this.patient = patient;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllPatientBrief_args(getAllPatientBrief_args other) {
      if (other.isSetPatient()) {
        this.patient = new PatientBrief(other.patient);
      }
    }

    public getAllPatientBrief_args deepCopy() {
      return new getAllPatientBrief_args(this);
    }

    @Override
    public void clear() {
      this.patient = null;
    }

    public PatientBrief getPatient() {
      return this.patient;
    }

    public getAllPatientBrief_args setPatient(PatientBrief patient) {
      this.patient = patient;
      return this;
    }

    public void unsetPatient() {
      this.patient = null;
    }

    /** Returns true if field patient is set (has been assigned a value) and false otherwise */
    public boolean isSetPatient() {
      return this.patient != null;
    }

    public void setPatientIsSet(boolean value) {
      if (!value) {
        this.patient = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATIENT:
        if (value == null) {
          unsetPatient();
        } else {
          setPatient((PatientBrief)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATIENT:
        return getPatient();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATIENT:
        return isSetPatient();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllPatientBrief_args)
        return this.equals((getAllPatientBrief_args)that);
      return false;
    }

    public boolean equals(getAllPatientBrief_args that) {
      if (that == null)
        return false;

      boolean this_present_patient = true && this.isSetPatient();
      boolean that_present_patient = true && that.isSetPatient();
      if (this_present_patient || that_present_patient) {
        if (!(this_present_patient && that_present_patient))
          return false;
        if (!this.patient.equals(that.patient))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAllPatientBrief_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAllPatientBrief_args typedOther = (getAllPatientBrief_args)other;

      lastComparison = Boolean.valueOf(isSetPatient()).compareTo(typedOther.isSetPatient());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPatient()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patient, typedOther.patient);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllPatientBrief_args(");
      boolean first = true;

      sb.append("patient:");
      if (this.patient == null) {
        sb.append("null");
      } else {
        sb.append(this.patient);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllPatientBrief_argsStandardSchemeFactory implements SchemeFactory {
      public getAllPatientBrief_argsStandardScheme getScheme() {
        return new getAllPatientBrief_argsStandardScheme();
      }
    }

    private static class getAllPatientBrief_argsStandardScheme extends StandardScheme<getAllPatientBrief_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllPatientBrief_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATIENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.patient = new PatientBrief();
                struct.patient.read(iprot);
                struct.setPatientIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllPatientBrief_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.patient != null) {
          oprot.writeFieldBegin(PATIENT_FIELD_DESC);
          struct.patient.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllPatientBrief_argsTupleSchemeFactory implements SchemeFactory {
      public getAllPatientBrief_argsTupleScheme getScheme() {
        return new getAllPatientBrief_argsTupleScheme();
      }
    }

    private static class getAllPatientBrief_argsTupleScheme extends TupleScheme<getAllPatientBrief_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllPatientBrief_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPatient()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPatient()) {
          struct.patient.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllPatientBrief_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.patient = new PatientBrief();
          struct.patient.read(iprot);
          struct.setPatientIsSet(true);
        }
      }
    }

  }

  public static class getAllPatientBrief_result implements org.apache.thrift.TBase<getAllPatientBrief_result, getAllPatientBrief_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllPatientBrief_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllPatientBrief_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllPatientBrief_resultTupleSchemeFactory());
    }

    public List<PatientBrief> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientBrief.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllPatientBrief_result.class, metaDataMap);
    }

    public getAllPatientBrief_result() {
    }

    public getAllPatientBrief_result(
      List<PatientBrief> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllPatientBrief_result(getAllPatientBrief_result other) {
      if (other.isSetSuccess()) {
        List<PatientBrief> __this__success = new ArrayList<PatientBrief>();
        for (PatientBrief other_element : other.success) {
          __this__success.add(new PatientBrief(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllPatientBrief_result deepCopy() {
      return new getAllPatientBrief_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PatientBrief> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PatientBrief elem) {
      if (this.success == null) {
        this.success = new ArrayList<PatientBrief>();
      }
      this.success.add(elem);
    }

    public List<PatientBrief> getSuccess() {
      return this.success;
    }

    public getAllPatientBrief_result setSuccess(List<PatientBrief> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<PatientBrief>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllPatientBrief_result)
        return this.equals((getAllPatientBrief_result)that);
      return false;
    }

    public boolean equals(getAllPatientBrief_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAllPatientBrief_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAllPatientBrief_result typedOther = (getAllPatientBrief_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllPatientBrief_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllPatientBrief_resultStandardSchemeFactory implements SchemeFactory {
      public getAllPatientBrief_resultStandardScheme getScheme() {
        return new getAllPatientBrief_resultStandardScheme();
      }
    }

    private static class getAllPatientBrief_resultStandardScheme extends StandardScheme<getAllPatientBrief_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllPatientBrief_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<PatientBrief>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    PatientBrief _elem2; // required
                    _elem2 = new PatientBrief();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllPatientBrief_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PatientBrief _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllPatientBrief_resultTupleSchemeFactory implements SchemeFactory {
      public getAllPatientBrief_resultTupleScheme getScheme() {
        return new getAllPatientBrief_resultTupleScheme();
      }
    }

    private static class getAllPatientBrief_resultTupleScheme extends TupleScheme<getAllPatientBrief_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllPatientBrief_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PatientBrief _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllPatientBrief_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<PatientBrief>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              PatientBrief _elem7; // required
              _elem7 = new PatientBrief();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPatientFullInfo_args implements org.apache.thrift.TBase<getPatientFullInfo_args, getPatientFullInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientFullInfo_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientFullInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientFullInfo_argsTupleSchemeFactory());
    }

    public int npasp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientFullInfo_args.class, metaDataMap);
    }

    public getPatientFullInfo_args() {
    }

    public getPatientFullInfo_args(
      int npasp)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientFullInfo_args(getPatientFullInfo_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
    }

    public getPatientFullInfo_args deepCopy() {
      return new getPatientFullInfo_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public getPatientFullInfo_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientFullInfo_args)
        return this.equals((getPatientFullInfo_args)that);
      return false;
    }

    public boolean equals(getPatientFullInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientFullInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientFullInfo_args typedOther = (getPatientFullInfo_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientFullInfo_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientFullInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getPatientFullInfo_argsStandardScheme getScheme() {
        return new getPatientFullInfo_argsStandardScheme();
      }
    }

    private static class getPatientFullInfo_argsStandardScheme extends StandardScheme<getPatientFullInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientFullInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientFullInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientFullInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getPatientFullInfo_argsTupleScheme getScheme() {
        return new getPatientFullInfo_argsTupleScheme();
      }
    }

    private static class getPatientFullInfo_argsTupleScheme extends TupleScheme<getPatientFullInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientFullInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientFullInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
      }
    }

  }

  public static class getPatientFullInfo_result implements org.apache.thrift.TBase<getPatientFullInfo_result, getPatientFullInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientFullInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientFullInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientFullInfo_resultTupleSchemeFactory());
    }

    public PatientFullInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientFullInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientFullInfo_result.class, metaDataMap);
    }

    public getPatientFullInfo_result() {
    }

    public getPatientFullInfo_result(
      PatientFullInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientFullInfo_result(getPatientFullInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new PatientFullInfo(other.success);
      }
    }

    public getPatientFullInfo_result deepCopy() {
      return new getPatientFullInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PatientFullInfo getSuccess() {
      return this.success;
    }

    public getPatientFullInfo_result setSuccess(PatientFullInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PatientFullInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientFullInfo_result)
        return this.equals((getPatientFullInfo_result)that);
      return false;
    }

    public boolean equals(getPatientFullInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientFullInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientFullInfo_result typedOther = (getPatientFullInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientFullInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientFullInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getPatientFullInfo_resultStandardScheme getScheme() {
        return new getPatientFullInfo_resultStandardScheme();
      }
    }

    private static class getPatientFullInfo_resultStandardScheme extends StandardScheme<getPatientFullInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientFullInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PatientFullInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientFullInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientFullInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getPatientFullInfo_resultTupleScheme getScheme() {
        return new getPatientFullInfo_resultTupleScheme();
      }
    }

    private static class getPatientFullInfo_resultTupleScheme extends TupleScheme<getPatientFullInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientFullInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientFullInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PatientFullInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPatientAgent_args implements org.apache.thrift.TBase<getPatientAgent_args, getPatientAgent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientAgent_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientAgent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientAgent_argsTupleSchemeFactory());
    }

    public int npasp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientAgent_args.class, metaDataMap);
    }

    public getPatientAgent_args() {
    }

    public getPatientAgent_args(
      int npasp)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientAgent_args(getPatientAgent_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
    }

    public getPatientAgent_args deepCopy() {
      return new getPatientAgent_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public getPatientAgent_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientAgent_args)
        return this.equals((getPatientAgent_args)that);
      return false;
    }

    public boolean equals(getPatientAgent_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientAgent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientAgent_args typedOther = (getPatientAgent_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientAgent_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientAgent_argsStandardSchemeFactory implements SchemeFactory {
      public getPatientAgent_argsStandardScheme getScheme() {
        return new getPatientAgent_argsStandardScheme();
      }
    }

    private static class getPatientAgent_argsStandardScheme extends StandardScheme<getPatientAgent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientAgent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientAgent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientAgent_argsTupleSchemeFactory implements SchemeFactory {
      public getPatientAgent_argsTupleScheme getScheme() {
        return new getPatientAgent_argsTupleScheme();
      }
    }

    private static class getPatientAgent_argsTupleScheme extends TupleScheme<getPatientAgent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientAgent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientAgent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
      }
    }

  }

  public static class getPatientAgent_result implements org.apache.thrift.TBase<getPatientAgent_result, getPatientAgent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientAgent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientAgent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientAgent_resultTupleSchemeFactory());
    }

    public PatientAgent success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientAgent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientAgent_result.class, metaDataMap);
    }

    public getPatientAgent_result() {
    }

    public getPatientAgent_result(
      PatientAgent success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientAgent_result(getPatientAgent_result other) {
      if (other.isSetSuccess()) {
        this.success = new PatientAgent(other.success);
      }
    }

    public getPatientAgent_result deepCopy() {
      return new getPatientAgent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PatientAgent getSuccess() {
      return this.success;
    }

    public getPatientAgent_result setSuccess(PatientAgent success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PatientAgent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientAgent_result)
        return this.equals((getPatientAgent_result)that);
      return false;
    }

    public boolean equals(getPatientAgent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientAgent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientAgent_result typedOther = (getPatientAgent_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientAgent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientAgent_resultStandardSchemeFactory implements SchemeFactory {
      public getPatientAgent_resultStandardScheme getScheme() {
        return new getPatientAgent_resultStandardScheme();
      }
    }

    private static class getPatientAgent_resultStandardScheme extends StandardScheme<getPatientAgent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientAgent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PatientAgent();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientAgent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientAgent_resultTupleSchemeFactory implements SchemeFactory {
      public getPatientAgent_resultTupleScheme getScheme() {
        return new getPatientAgent_resultTupleScheme();
      }
    }

    private static class getPatientAgent_resultTupleScheme extends TupleScheme<getPatientAgent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientAgent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientAgent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PatientAgent();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPatientLgota_args implements org.apache.thrift.TBase<getPatientLgota_args, getPatientLgota_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientLgota_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientLgota_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientLgota_argsTupleSchemeFactory());
    }

    public int npasp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientLgota_args.class, metaDataMap);
    }

    public getPatientLgota_args() {
    }

    public getPatientLgota_args(
      int npasp)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientLgota_args(getPatientLgota_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
    }

    public getPatientLgota_args deepCopy() {
      return new getPatientLgota_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public getPatientLgota_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientLgota_args)
        return this.equals((getPatientLgota_args)that);
      return false;
    }

    public boolean equals(getPatientLgota_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientLgota_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientLgota_args typedOther = (getPatientLgota_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientLgota_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientLgota_argsStandardSchemeFactory implements SchemeFactory {
      public getPatientLgota_argsStandardScheme getScheme() {
        return new getPatientLgota_argsStandardScheme();
      }
    }

    private static class getPatientLgota_argsStandardScheme extends StandardScheme<getPatientLgota_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientLgota_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientLgota_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientLgota_argsTupleSchemeFactory implements SchemeFactory {
      public getPatientLgota_argsTupleScheme getScheme() {
        return new getPatientLgota_argsTupleScheme();
      }
    }

    private static class getPatientLgota_argsTupleScheme extends TupleScheme<getPatientLgota_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientLgota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientLgota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
      }
    }

  }

  public static class getPatientLgota_result implements org.apache.thrift.TBase<getPatientLgota_result, getPatientLgota_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientLgota_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientLgota_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientLgota_resultTupleSchemeFactory());
    }

    public List<PatientLgota> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientLgota.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientLgota_result.class, metaDataMap);
    }

    public getPatientLgota_result() {
    }

    public getPatientLgota_result(
      List<PatientLgota> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientLgota_result(getPatientLgota_result other) {
      if (other.isSetSuccess()) {
        List<PatientLgota> __this__success = new ArrayList<PatientLgota>();
        for (PatientLgota other_element : other.success) {
          __this__success.add(new PatientLgota(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPatientLgota_result deepCopy() {
      return new getPatientLgota_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PatientLgota> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PatientLgota elem) {
      if (this.success == null) {
        this.success = new ArrayList<PatientLgota>();
      }
      this.success.add(elem);
    }

    public List<PatientLgota> getSuccess() {
      return this.success;
    }

    public getPatientLgota_result setSuccess(List<PatientLgota> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<PatientLgota>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientLgota_result)
        return this.equals((getPatientLgota_result)that);
      return false;
    }

    public boolean equals(getPatientLgota_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientLgota_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientLgota_result typedOther = (getPatientLgota_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientLgota_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientLgota_resultStandardSchemeFactory implements SchemeFactory {
      public getPatientLgota_resultStandardScheme getScheme() {
        return new getPatientLgota_resultStandardScheme();
      }
    }

    private static class getPatientLgota_resultStandardScheme extends StandardScheme<getPatientLgota_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientLgota_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<PatientLgota>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    PatientLgota _elem10; // required
                    _elem10 = new PatientLgota();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientLgota_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PatientLgota _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientLgota_resultTupleSchemeFactory implements SchemeFactory {
      public getPatientLgota_resultTupleScheme getScheme() {
        return new getPatientLgota_resultTupleScheme();
      }
    }

    private static class getPatientLgota_resultTupleScheme extends TupleScheme<getPatientLgota_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientLgota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PatientLgota _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientLgota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<PatientLgota>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              PatientLgota _elem15; // required
              _elem15 = new PatientLgota();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPatientKontingent_args implements org.apache.thrift.TBase<getPatientKontingent_args, getPatientKontingent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientKontingent_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientKontingent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientKontingent_argsTupleSchemeFactory());
    }

    public int npasp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientKontingent_args.class, metaDataMap);
    }

    public getPatientKontingent_args() {
    }

    public getPatientKontingent_args(
      int npasp)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientKontingent_args(getPatientKontingent_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
    }

    public getPatientKontingent_args deepCopy() {
      return new getPatientKontingent_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public getPatientKontingent_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientKontingent_args)
        return this.equals((getPatientKontingent_args)that);
      return false;
    }

    public boolean equals(getPatientKontingent_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientKontingent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientKontingent_args typedOther = (getPatientKontingent_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientKontingent_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientKontingent_argsStandardSchemeFactory implements SchemeFactory {
      public getPatientKontingent_argsStandardScheme getScheme() {
        return new getPatientKontingent_argsStandardScheme();
      }
    }

    private static class getPatientKontingent_argsStandardScheme extends StandardScheme<getPatientKontingent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientKontingent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientKontingent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientKontingent_argsTupleSchemeFactory implements SchemeFactory {
      public getPatientKontingent_argsTupleScheme getScheme() {
        return new getPatientKontingent_argsTupleScheme();
      }
    }

    private static class getPatientKontingent_argsTupleScheme extends TupleScheme<getPatientKontingent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientKontingent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientKontingent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
      }
    }

  }

  public static class getPatientKontingent_result implements org.apache.thrift.TBase<getPatientKontingent_result, getPatientKontingent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientKontingent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientKontingent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientKontingent_resultTupleSchemeFactory());
    }

    public List<PatientKontingent> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientKontingent.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientKontingent_result.class, metaDataMap);
    }

    public getPatientKontingent_result() {
    }

    public getPatientKontingent_result(
      List<PatientKontingent> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientKontingent_result(getPatientKontingent_result other) {
      if (other.isSetSuccess()) {
        List<PatientKontingent> __this__success = new ArrayList<PatientKontingent>();
        for (PatientKontingent other_element : other.success) {
          __this__success.add(new PatientKontingent(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPatientKontingent_result deepCopy() {
      return new getPatientKontingent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PatientKontingent> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PatientKontingent elem) {
      if (this.success == null) {
        this.success = new ArrayList<PatientKontingent>();
      }
      this.success.add(elem);
    }

    public List<PatientKontingent> getSuccess() {
      return this.success;
    }

    public getPatientKontingent_result setSuccess(List<PatientKontingent> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<PatientKontingent>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientKontingent_result)
        return this.equals((getPatientKontingent_result)that);
      return false;
    }

    public boolean equals(getPatientKontingent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientKontingent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientKontingent_result typedOther = (getPatientKontingent_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientKontingent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientKontingent_resultStandardSchemeFactory implements SchemeFactory {
      public getPatientKontingent_resultStandardScheme getScheme() {
        return new getPatientKontingent_resultStandardScheme();
      }
    }

    private static class getPatientKontingent_resultStandardScheme extends StandardScheme<getPatientKontingent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientKontingent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<PatientKontingent>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    PatientKontingent _elem18; // required
                    _elem18 = new PatientKontingent();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientKontingent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PatientKontingent _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientKontingent_resultTupleSchemeFactory implements SchemeFactory {
      public getPatientKontingent_resultTupleScheme getScheme() {
        return new getPatientKontingent_resultTupleScheme();
      }
    }

    private static class getPatientKontingent_resultTupleScheme extends TupleScheme<getPatientKontingent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientKontingent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PatientKontingent _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientKontingent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<PatientKontingent>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              PatientKontingent _elem23; // required
              _elem23 = new PatientKontingent();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPatientSign_args implements org.apache.thrift.TBase<getPatientSign_args, getPatientSign_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientSign_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientSign_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientSign_argsTupleSchemeFactory());
    }

    public int npasp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientSign_args.class, metaDataMap);
    }

    public getPatientSign_args() {
    }

    public getPatientSign_args(
      int npasp)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientSign_args(getPatientSign_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
    }

    public getPatientSign_args deepCopy() {
      return new getPatientSign_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public getPatientSign_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientSign_args)
        return this.equals((getPatientSign_args)that);
      return false;
    }

    public boolean equals(getPatientSign_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientSign_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientSign_args typedOther = (getPatientSign_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientSign_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientSign_argsStandardSchemeFactory implements SchemeFactory {
      public getPatientSign_argsStandardScheme getScheme() {
        return new getPatientSign_argsStandardScheme();
      }
    }

    private static class getPatientSign_argsStandardScheme extends StandardScheme<getPatientSign_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientSign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientSign_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientSign_argsTupleSchemeFactory implements SchemeFactory {
      public getPatientSign_argsTupleScheme getScheme() {
        return new getPatientSign_argsTupleScheme();
      }
    }

    private static class getPatientSign_argsTupleScheme extends TupleScheme<getPatientSign_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientSign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientSign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
      }
    }

  }

  public static class getPatientSign_result implements org.apache.thrift.TBase<getPatientSign_result, getPatientSign_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientSign_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientSign_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientSign_resultTupleSchemeFactory());
    }

    public PatientSign success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientSign.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientSign_result.class, metaDataMap);
    }

    public getPatientSign_result() {
    }

    public getPatientSign_result(
      PatientSign success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientSign_result(getPatientSign_result other) {
      if (other.isSetSuccess()) {
        this.success = new PatientSign(other.success);
      }
    }

    public getPatientSign_result deepCopy() {
      return new getPatientSign_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PatientSign getSuccess() {
      return this.success;
    }

    public getPatientSign_result setSuccess(PatientSign success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PatientSign)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientSign_result)
        return this.equals((getPatientSign_result)that);
      return false;
    }

    public boolean equals(getPatientSign_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientSign_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientSign_result typedOther = (getPatientSign_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientSign_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientSign_resultStandardSchemeFactory implements SchemeFactory {
      public getPatientSign_resultStandardScheme getScheme() {
        return new getPatientSign_resultStandardScheme();
      }
    }

    private static class getPatientSign_resultStandardScheme extends StandardScheme<getPatientSign_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientSign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PatientSign();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientSign_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientSign_resultTupleSchemeFactory implements SchemeFactory {
      public getPatientSign_resultTupleScheme getScheme() {
        return new getPatientSign_resultTupleScheme();
      }
    }

    private static class getPatientSign_resultTupleScheme extends TupleScheme<getPatientSign_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientSign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientSign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PatientSign();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPatientNambk_args implements org.apache.thrift.TBase<getPatientNambk_args, getPatientNambk_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientNambk_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientNambk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientNambk_argsTupleSchemeFactory());
    }

    public int npasp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientNambk_args.class, metaDataMap);
    }

    public getPatientNambk_args() {
    }

    public getPatientNambk_args(
      int npasp)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientNambk_args(getPatientNambk_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
    }

    public getPatientNambk_args deepCopy() {
      return new getPatientNambk_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public getPatientNambk_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientNambk_args)
        return this.equals((getPatientNambk_args)that);
      return false;
    }

    public boolean equals(getPatientNambk_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientNambk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientNambk_args typedOther = (getPatientNambk_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientNambk_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientNambk_argsStandardSchemeFactory implements SchemeFactory {
      public getPatientNambk_argsStandardScheme getScheme() {
        return new getPatientNambk_argsStandardScheme();
      }
    }

    private static class getPatientNambk_argsStandardScheme extends StandardScheme<getPatientNambk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientNambk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientNambk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientNambk_argsTupleSchemeFactory implements SchemeFactory {
      public getPatientNambk_argsTupleScheme getScheme() {
        return new getPatientNambk_argsTupleScheme();
      }
    }

    private static class getPatientNambk_argsTupleScheme extends TupleScheme<getPatientNambk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientNambk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientNambk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
      }
    }

  }

  public static class getPatientNambk_result implements org.apache.thrift.TBase<getPatientNambk_result, getPatientNambk_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientNambk_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientNambk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientNambk_resultTupleSchemeFactory());
    }

    public PatientNambk success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientNambk.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientNambk_result.class, metaDataMap);
    }

    public getPatientNambk_result() {
    }

    public getPatientNambk_result(
      PatientNambk success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientNambk_result(getPatientNambk_result other) {
      if (other.isSetSuccess()) {
        this.success = new PatientNambk(other.success);
      }
    }

    public getPatientNambk_result deepCopy() {
      return new getPatientNambk_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PatientNambk getSuccess() {
      return this.success;
    }

    public getPatientNambk_result setSuccess(PatientNambk success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PatientNambk)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientNambk_result)
        return this.equals((getPatientNambk_result)that);
      return false;
    }

    public boolean equals(getPatientNambk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientNambk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientNambk_result typedOther = (getPatientNambk_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientNambk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientNambk_resultStandardSchemeFactory implements SchemeFactory {
      public getPatientNambk_resultStandardScheme getScheme() {
        return new getPatientNambk_resultStandardScheme();
      }
    }

    private static class getPatientNambk_resultStandardScheme extends StandardScheme<getPatientNambk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientNambk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PatientNambk();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientNambk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientNambk_resultTupleSchemeFactory implements SchemeFactory {
      public getPatientNambk_resultTupleScheme getScheme() {
        return new getPatientNambk_resultTupleScheme();
      }
    }

    private static class getPatientNambk_resultTupleScheme extends TupleScheme<getPatientNambk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientNambk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientNambk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PatientNambk();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPatientAllGosp_args implements org.apache.thrift.TBase<getPatientAllGosp_args, getPatientAllGosp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientAllGosp_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NGOSP_FIELD_DESC = new org.apache.thrift.protocol.TField("ngosp", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientAllGosp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientAllGosp_argsTupleSchemeFactory());
    }

    public int npasp; // required
    public int ngosp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp"),
      NGOSP((short)2, "ngosp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          case 2: // NGOSP
            return NGOSP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private static final int __NGOSP_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NGOSP, new org.apache.thrift.meta_data.FieldMetaData("ngosp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientAllGosp_args.class, metaDataMap);
    }

    public getPatientAllGosp_args() {
    }

    public getPatientAllGosp_args(
      int npasp,
      int ngosp)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
      this.ngosp = ngosp;
      setNgospIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientAllGosp_args(getPatientAllGosp_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
      this.ngosp = other.ngosp;
    }

    public getPatientAllGosp_args deepCopy() {
      return new getPatientAllGosp_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
      setNgospIsSet(false);
      this.ngosp = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public getPatientAllGosp_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public int getNgosp() {
      return this.ngosp;
    }

    public getPatientAllGosp_args setNgosp(int ngosp) {
      this.ngosp = ngosp;
      setNgospIsSet(true);
      return this;
    }

    public void unsetNgosp() {
      __isset_bit_vector.clear(__NGOSP_ISSET_ID);
    }

    /** Returns true if field ngosp is set (has been assigned a value) and false otherwise */
    public boolean isSetNgosp() {
      return __isset_bit_vector.get(__NGOSP_ISSET_ID);
    }

    public void setNgospIsSet(boolean value) {
      __isset_bit_vector.set(__NGOSP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      case NGOSP:
        if (value == null) {
          unsetNgosp();
        } else {
          setNgosp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      case NGOSP:
        return Integer.valueOf(getNgosp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      case NGOSP:
        return isSetNgosp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientAllGosp_args)
        return this.equals((getPatientAllGosp_args)that);
      return false;
    }

    public boolean equals(getPatientAllGosp_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      boolean this_present_ngosp = true;
      boolean that_present_ngosp = true;
      if (this_present_ngosp || that_present_ngosp) {
        if (!(this_present_ngosp && that_present_ngosp))
          return false;
        if (this.ngosp != that.ngosp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientAllGosp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientAllGosp_args typedOther = (getPatientAllGosp_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNgosp()).compareTo(typedOther.isSetNgosp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNgosp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ngosp, typedOther.ngosp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientAllGosp_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ngosp:");
      sb.append(this.ngosp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientAllGosp_argsStandardSchemeFactory implements SchemeFactory {
      public getPatientAllGosp_argsStandardScheme getScheme() {
        return new getPatientAllGosp_argsStandardScheme();
      }
    }

    private static class getPatientAllGosp_argsStandardScheme extends StandardScheme<getPatientAllGosp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientAllGosp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NGOSP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ngosp = iprot.readI32();
                struct.setNgospIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientAllGosp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NGOSP_FIELD_DESC);
        oprot.writeI32(struct.ngosp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientAllGosp_argsTupleSchemeFactory implements SchemeFactory {
      public getPatientAllGosp_argsTupleScheme getScheme() {
        return new getPatientAllGosp_argsTupleScheme();
      }
    }

    private static class getPatientAllGosp_argsTupleScheme extends TupleScheme<getPatientAllGosp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientAllGosp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        if (struct.isSetNgosp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
        if (struct.isSetNgosp()) {
          oprot.writeI32(struct.ngosp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientAllGosp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ngosp = iprot.readI32();
          struct.setNgospIsSet(true);
        }
      }
    }

  }

  public static class getPatientAllGosp_result implements org.apache.thrift.TBase<getPatientAllGosp_result, getPatientAllGosp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientAllGosp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientAllGosp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientAllGosp_resultTupleSchemeFactory());
    }

    public List<PatientAllGosp> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientAllGosp.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientAllGosp_result.class, metaDataMap);
    }

    public getPatientAllGosp_result() {
    }

    public getPatientAllGosp_result(
      List<PatientAllGosp> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientAllGosp_result(getPatientAllGosp_result other) {
      if (other.isSetSuccess()) {
        List<PatientAllGosp> __this__success = new ArrayList<PatientAllGosp>();
        for (PatientAllGosp other_element : other.success) {
          __this__success.add(new PatientAllGosp(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPatientAllGosp_result deepCopy() {
      return new getPatientAllGosp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PatientAllGosp> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PatientAllGosp elem) {
      if (this.success == null) {
        this.success = new ArrayList<PatientAllGosp>();
      }
      this.success.add(elem);
    }

    public List<PatientAllGosp> getSuccess() {
      return this.success;
    }

    public getPatientAllGosp_result setSuccess(List<PatientAllGosp> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<PatientAllGosp>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientAllGosp_result)
        return this.equals((getPatientAllGosp_result)that);
      return false;
    }

    public boolean equals(getPatientAllGosp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientAllGosp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientAllGosp_result typedOther = (getPatientAllGosp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientAllGosp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientAllGosp_resultStandardSchemeFactory implements SchemeFactory {
      public getPatientAllGosp_resultStandardScheme getScheme() {
        return new getPatientAllGosp_resultStandardScheme();
      }
    }

    private static class getPatientAllGosp_resultStandardScheme extends StandardScheme<getPatientAllGosp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientAllGosp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<PatientAllGosp>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    PatientAllGosp _elem26; // required
                    _elem26 = new PatientAllGosp();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientAllGosp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PatientAllGosp _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientAllGosp_resultTupleSchemeFactory implements SchemeFactory {
      public getPatientAllGosp_resultTupleScheme getScheme() {
        return new getPatientAllGosp_resultTupleScheme();
      }
    }

    private static class getPatientAllGosp_resultTupleScheme extends TupleScheme<getPatientAllGosp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientAllGosp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PatientAllGosp _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientAllGosp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<PatientAllGosp>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              PatientAllGosp _elem31; // required
              _elem31 = new PatientAllGosp();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPatientGosp_args implements org.apache.thrift.TBase<getPatientGosp_args, getPatientGosp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientGosp_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NGOSP_FIELD_DESC = new org.apache.thrift.protocol.TField("ngosp", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientGosp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientGosp_argsTupleSchemeFactory());
    }

    public int npasp; // required
    public int ngosp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp"),
      NGOSP((short)2, "ngosp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          case 2: // NGOSP
            return NGOSP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private static final int __NGOSP_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NGOSP, new org.apache.thrift.meta_data.FieldMetaData("ngosp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientGosp_args.class, metaDataMap);
    }

    public getPatientGosp_args() {
    }

    public getPatientGosp_args(
      int npasp,
      int ngosp)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
      this.ngosp = ngosp;
      setNgospIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientGosp_args(getPatientGosp_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
      this.ngosp = other.ngosp;
    }

    public getPatientGosp_args deepCopy() {
      return new getPatientGosp_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
      setNgospIsSet(false);
      this.ngosp = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public getPatientGosp_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public int getNgosp() {
      return this.ngosp;
    }

    public getPatientGosp_args setNgosp(int ngosp) {
      this.ngosp = ngosp;
      setNgospIsSet(true);
      return this;
    }

    public void unsetNgosp() {
      __isset_bit_vector.clear(__NGOSP_ISSET_ID);
    }

    /** Returns true if field ngosp is set (has been assigned a value) and false otherwise */
    public boolean isSetNgosp() {
      return __isset_bit_vector.get(__NGOSP_ISSET_ID);
    }

    public void setNgospIsSet(boolean value) {
      __isset_bit_vector.set(__NGOSP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      case NGOSP:
        if (value == null) {
          unsetNgosp();
        } else {
          setNgosp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      case NGOSP:
        return Integer.valueOf(getNgosp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      case NGOSP:
        return isSetNgosp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientGosp_args)
        return this.equals((getPatientGosp_args)that);
      return false;
    }

    public boolean equals(getPatientGosp_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      boolean this_present_ngosp = true;
      boolean that_present_ngosp = true;
      if (this_present_ngosp || that_present_ngosp) {
        if (!(this_present_ngosp && that_present_ngosp))
          return false;
        if (this.ngosp != that.ngosp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientGosp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientGosp_args typedOther = (getPatientGosp_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNgosp()).compareTo(typedOther.isSetNgosp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNgosp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ngosp, typedOther.ngosp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientGosp_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ngosp:");
      sb.append(this.ngosp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientGosp_argsStandardSchemeFactory implements SchemeFactory {
      public getPatientGosp_argsStandardScheme getScheme() {
        return new getPatientGosp_argsStandardScheme();
      }
    }

    private static class getPatientGosp_argsStandardScheme extends StandardScheme<getPatientGosp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientGosp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NGOSP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ngosp = iprot.readI32();
                struct.setNgospIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientGosp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NGOSP_FIELD_DESC);
        oprot.writeI32(struct.ngosp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientGosp_argsTupleSchemeFactory implements SchemeFactory {
      public getPatientGosp_argsTupleScheme getScheme() {
        return new getPatientGosp_argsTupleScheme();
      }
    }

    private static class getPatientGosp_argsTupleScheme extends TupleScheme<getPatientGosp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientGosp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        if (struct.isSetNgosp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
        if (struct.isSetNgosp()) {
          oprot.writeI32(struct.ngosp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientGosp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ngosp = iprot.readI32();
          struct.setNgospIsSet(true);
        }
      }
    }

  }

  public static class getPatientGosp_result implements org.apache.thrift.TBase<getPatientGosp_result, getPatientGosp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientGosp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientGosp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientGosp_resultTupleSchemeFactory());
    }

    public PatientGosp success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientGosp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientGosp_result.class, metaDataMap);
    }

    public getPatientGosp_result() {
    }

    public getPatientGosp_result(
      PatientGosp success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientGosp_result(getPatientGosp_result other) {
      if (other.isSetSuccess()) {
        this.success = new PatientGosp(other.success);
      }
    }

    public getPatientGosp_result deepCopy() {
      return new getPatientGosp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PatientGosp getSuccess() {
      return this.success;
    }

    public getPatientGosp_result setSuccess(PatientGosp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PatientGosp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientGosp_result)
        return this.equals((getPatientGosp_result)that);
      return false;
    }

    public boolean equals(getPatientGosp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPatientGosp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPatientGosp_result typedOther = (getPatientGosp_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientGosp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientGosp_resultStandardSchemeFactory implements SchemeFactory {
      public getPatientGosp_resultStandardScheme getScheme() {
        return new getPatientGosp_resultStandardScheme();
      }
    }

    private static class getPatientGosp_resultStandardScheme extends StandardScheme<getPatientGosp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientGosp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PatientGosp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientGosp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientGosp_resultTupleSchemeFactory implements SchemeFactory {
      public getPatientGosp_resultTupleScheme getScheme() {
        return new getPatientGosp_resultTupleScheme();
      }
    }

    private static class getPatientGosp_resultTupleScheme extends TupleScheme<getPatientGosp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientGosp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientGosp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PatientGosp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSpravInfo_args implements org.apache.thrift.TBase<getSpravInfo_args, getSpravInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSpravInfo_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSpravInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSpravInfo_argsTupleSchemeFactory());
    }

    public String param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpravInfo_args.class, metaDataMap);
    }

    public getSpravInfo_args() {
    }

    public getSpravInfo_args(
      String param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSpravInfo_args(getSpravInfo_args other) {
      if (other.isSetParam()) {
        this.param = other.param;
      }
    }

    public getSpravInfo_args deepCopy() {
      return new getSpravInfo_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public String getParam() {
      return this.param;
    }

    public getSpravInfo_args setParam(String param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSpravInfo_args)
        return this.equals((getSpravInfo_args)that);
      return false;
    }

    public boolean equals(getSpravInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSpravInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSpravInfo_args typedOther = (getSpravInfo_args)other;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(typedOther.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, typedOther.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSpravInfo_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSpravInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getSpravInfo_argsStandardScheme getScheme() {
        return new getSpravInfo_argsStandardScheme();
      }
    }

    private static class getSpravInfo_argsStandardScheme extends StandardScheme<getSpravInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSpravInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.param = iprot.readString();
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSpravInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          oprot.writeString(struct.param);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSpravInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getSpravInfo_argsTupleScheme getScheme() {
        return new getSpravInfo_argsTupleScheme();
      }
    }

    private static class getSpravInfo_argsTupleScheme extends TupleScheme<getSpravInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSpravInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          oprot.writeString(struct.param);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSpravInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.param = iprot.readString();
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class getSpravInfo_result implements org.apache.thrift.TBase<getSpravInfo_result, getSpravInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSpravInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSpravInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSpravInfo_resultTupleSchemeFactory());
    }

    public List<SpravStruct> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpravStruct.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpravInfo_result.class, metaDataMap);
    }

    public getSpravInfo_result() {
    }

    public getSpravInfo_result(
      List<SpravStruct> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSpravInfo_result(getSpravInfo_result other) {
      if (other.isSetSuccess()) {
        List<SpravStruct> __this__success = new ArrayList<SpravStruct>();
        for (SpravStruct other_element : other.success) {
          __this__success.add(new SpravStruct(other_element));
        }
        this.success = __this__success;
      }
    }

    public getSpravInfo_result deepCopy() {
      return new getSpravInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SpravStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SpravStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<SpravStruct>();
      }
      this.success.add(elem);
    }

    public List<SpravStruct> getSuccess() {
      return this.success;
    }

    public getSpravInfo_result setSuccess(List<SpravStruct> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SpravStruct>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSpravInfo_result)
        return this.equals((getSpravInfo_result)that);
      return false;
    }

    public boolean equals(getSpravInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSpravInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSpravInfo_result typedOther = (getSpravInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSpravInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSpravInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getSpravInfo_resultStandardScheme getScheme() {
        return new getSpravInfo_resultStandardScheme();
      }
    }

    private static class getSpravInfo_resultStandardScheme extends StandardScheme<getSpravInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSpravInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<SpravStruct>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    SpravStruct _elem34; // required
                    _elem34 = new SpravStruct();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSpravInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SpravStruct _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSpravInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getSpravInfo_resultTupleScheme getScheme() {
        return new getSpravInfo_resultTupleScheme();
      }
    }

    private static class getSpravInfo_resultTupleScheme extends TupleScheme<getSpravInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSpravInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SpravStruct _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSpravInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SpravStruct>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              SpravStruct _elem39; // required
              _elem39 = new SpravStruct();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addPatient_args implements org.apache.thrift.TBase<addPatient_args, addPatient_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPatient_args");

    private static final org.apache.thrift.protocol.TField PATINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("patinfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPatient_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPatient_argsTupleSchemeFactory());
    }

    public PatientFullInfo patinfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATINFO((short)1, "patinfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATINFO
            return PATINFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATINFO, new org.apache.thrift.meta_data.FieldMetaData("patinfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientFullInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPatient_args.class, metaDataMap);
    }

    public addPatient_args() {
    }

    public addPatient_args(
      PatientFullInfo patinfo)
    {
      this();
      this.patinfo = patinfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPatient_args(addPatient_args other) {
      if (other.isSetPatinfo()) {
        this.patinfo = new PatientFullInfo(other.patinfo);
      }
    }

    public addPatient_args deepCopy() {
      return new addPatient_args(this);
    }

    @Override
    public void clear() {
      this.patinfo = null;
    }

    public PatientFullInfo getPatinfo() {
      return this.patinfo;
    }

    public addPatient_args setPatinfo(PatientFullInfo patinfo) {
      this.patinfo = patinfo;
      return this;
    }

    public void unsetPatinfo() {
      this.patinfo = null;
    }

    /** Returns true if field patinfo is set (has been assigned a value) and false otherwise */
    public boolean isSetPatinfo() {
      return this.patinfo != null;
    }

    public void setPatinfoIsSet(boolean value) {
      if (!value) {
        this.patinfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATINFO:
        if (value == null) {
          unsetPatinfo();
        } else {
          setPatinfo((PatientFullInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATINFO:
        return getPatinfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATINFO:
        return isSetPatinfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPatient_args)
        return this.equals((addPatient_args)that);
      return false;
    }

    public boolean equals(addPatient_args that) {
      if (that == null)
        return false;

      boolean this_present_patinfo = true && this.isSetPatinfo();
      boolean that_present_patinfo = true && that.isSetPatinfo();
      if (this_present_patinfo || that_present_patinfo) {
        if (!(this_present_patinfo && that_present_patinfo))
          return false;
        if (!this.patinfo.equals(that.patinfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addPatient_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addPatient_args typedOther = (addPatient_args)other;

      lastComparison = Boolean.valueOf(isSetPatinfo()).compareTo(typedOther.isSetPatinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPatinfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patinfo, typedOther.patinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPatient_args(");
      boolean first = true;

      sb.append("patinfo:");
      if (this.patinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.patinfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPatient_argsStandardSchemeFactory implements SchemeFactory {
      public addPatient_argsStandardScheme getScheme() {
        return new addPatient_argsStandardScheme();
      }
    }

    private static class addPatient_argsStandardScheme extends StandardScheme<addPatient_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPatient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATINFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.patinfo = new PatientFullInfo();
                struct.patinfo.read(iprot);
                struct.setPatinfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPatient_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.patinfo != null) {
          oprot.writeFieldBegin(PATINFO_FIELD_DESC);
          struct.patinfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPatient_argsTupleSchemeFactory implements SchemeFactory {
      public addPatient_argsTupleScheme getScheme() {
        return new addPatient_argsTupleScheme();
      }
    }

    private static class addPatient_argsTupleScheme extends TupleScheme<addPatient_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPatient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPatinfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPatinfo()) {
          struct.patinfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPatient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.patinfo = new PatientFullInfo();
          struct.patinfo.read(iprot);
          struct.setPatinfoIsSet(true);
        }
      }
    }

  }

  public static class addPatient_result implements org.apache.thrift.TBase<addPatient_result, addPatient_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPatient_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPatient_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPatient_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPatient_result.class, metaDataMap);
    }

    public addPatient_result() {
    }

    public addPatient_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPatient_result(addPatient_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public addPatient_result deepCopy() {
      return new addPatient_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addPatient_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPatient_result)
        return this.equals((addPatient_result)that);
      return false;
    }

    public boolean equals(addPatient_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addPatient_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addPatient_result typedOther = (addPatient_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPatient_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPatient_resultStandardSchemeFactory implements SchemeFactory {
      public addPatient_resultStandardScheme getScheme() {
        return new addPatient_resultStandardScheme();
      }
    }

    private static class addPatient_resultStandardScheme extends StandardScheme<addPatient_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPatient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPatient_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPatient_resultTupleSchemeFactory implements SchemeFactory {
      public addPatient_resultTupleScheme getScheme() {
        return new addPatient_resultTupleScheme();
      }
    }

    private static class addPatient_resultTupleScheme extends TupleScheme<addPatient_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPatient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPatient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addLgota_args implements org.apache.thrift.TBase<addLgota_args, addLgota_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLgota_args");

    private static final org.apache.thrift.protocol.TField LGOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("lgota", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addLgota_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addLgota_argsTupleSchemeFactory());
    }

    public PatientLgota lgota; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LGOTA((short)1, "lgota");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LGOTA
            return LGOTA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LGOTA, new org.apache.thrift.meta_data.FieldMetaData("lgota", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientLgota.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLgota_args.class, metaDataMap);
    }

    public addLgota_args() {
    }

    public addLgota_args(
      PatientLgota lgota)
    {
      this();
      this.lgota = lgota;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLgota_args(addLgota_args other) {
      if (other.isSetLgota()) {
        this.lgota = new PatientLgota(other.lgota);
      }
    }

    public addLgota_args deepCopy() {
      return new addLgota_args(this);
    }

    @Override
    public void clear() {
      this.lgota = null;
    }

    public PatientLgota getLgota() {
      return this.lgota;
    }

    public addLgota_args setLgota(PatientLgota lgota) {
      this.lgota = lgota;
      return this;
    }

    public void unsetLgota() {
      this.lgota = null;
    }

    /** Returns true if field lgota is set (has been assigned a value) and false otherwise */
    public boolean isSetLgota() {
      return this.lgota != null;
    }

    public void setLgotaIsSet(boolean value) {
      if (!value) {
        this.lgota = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LGOTA:
        if (value == null) {
          unsetLgota();
        } else {
          setLgota((PatientLgota)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LGOTA:
        return getLgota();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LGOTA:
        return isSetLgota();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addLgota_args)
        return this.equals((addLgota_args)that);
      return false;
    }

    public boolean equals(addLgota_args that) {
      if (that == null)
        return false;

      boolean this_present_lgota = true && this.isSetLgota();
      boolean that_present_lgota = true && that.isSetLgota();
      if (this_present_lgota || that_present_lgota) {
        if (!(this_present_lgota && that_present_lgota))
          return false;
        if (!this.lgota.equals(that.lgota))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addLgota_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addLgota_args typedOther = (addLgota_args)other;

      lastComparison = Boolean.valueOf(isSetLgota()).compareTo(typedOther.isSetLgota());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLgota()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lgota, typedOther.lgota);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addLgota_args(");
      boolean first = true;

      sb.append("lgota:");
      if (this.lgota == null) {
        sb.append("null");
      } else {
        sb.append(this.lgota);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLgota_argsStandardSchemeFactory implements SchemeFactory {
      public addLgota_argsStandardScheme getScheme() {
        return new addLgota_argsStandardScheme();
      }
    }

    private static class addLgota_argsStandardScheme extends StandardScheme<addLgota_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLgota_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LGOTA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lgota = new PatientLgota();
                struct.lgota.read(iprot);
                struct.setLgotaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLgota_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lgota != null) {
          oprot.writeFieldBegin(LGOTA_FIELD_DESC);
          struct.lgota.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLgota_argsTupleSchemeFactory implements SchemeFactory {
      public addLgota_argsTupleScheme getScheme() {
        return new addLgota_argsTupleScheme();
      }
    }

    private static class addLgota_argsTupleScheme extends TupleScheme<addLgota_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLgota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLgota()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLgota()) {
          struct.lgota.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLgota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lgota = new PatientLgota();
          struct.lgota.read(iprot);
          struct.setLgotaIsSet(true);
        }
      }
    }

  }

  public static class addLgota_result implements org.apache.thrift.TBase<addLgota_result, addLgota_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLgota_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addLgota_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addLgota_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLgota_result.class, metaDataMap);
    }

    public addLgota_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLgota_result(addLgota_result other) {
    }

    public addLgota_result deepCopy() {
      return new addLgota_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addLgota_result)
        return this.equals((addLgota_result)that);
      return false;
    }

    public boolean equals(addLgota_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addLgota_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addLgota_result typedOther = (addLgota_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addLgota_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLgota_resultStandardSchemeFactory implements SchemeFactory {
      public addLgota_resultStandardScheme getScheme() {
        return new addLgota_resultStandardScheme();
      }
    }

    private static class addLgota_resultStandardScheme extends StandardScheme<addLgota_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLgota_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLgota_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLgota_resultTupleSchemeFactory implements SchemeFactory {
      public addLgota_resultTupleScheme getScheme() {
        return new addLgota_resultTupleScheme();
      }
    }

    private static class addLgota_resultTupleScheme extends TupleScheme<addLgota_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLgota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLgota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addKont_args implements org.apache.thrift.TBase<addKont_args, addKont_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addKont_args");

    private static final org.apache.thrift.protocol.TField KONT_FIELD_DESC = new org.apache.thrift.protocol.TField("kont", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addKont_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addKont_argsTupleSchemeFactory());
    }

    public PatientKontingent kont; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KONT((short)1, "kont");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KONT
            return KONT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KONT, new org.apache.thrift.meta_data.FieldMetaData("kont", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientKontingent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addKont_args.class, metaDataMap);
    }

    public addKont_args() {
    }

    public addKont_args(
      PatientKontingent kont)
    {
      this();
      this.kont = kont;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addKont_args(addKont_args other) {
      if (other.isSetKont()) {
        this.kont = new PatientKontingent(other.kont);
      }
    }

    public addKont_args deepCopy() {
      return new addKont_args(this);
    }

    @Override
    public void clear() {
      this.kont = null;
    }

    public PatientKontingent getKont() {
      return this.kont;
    }

    public addKont_args setKont(PatientKontingent kont) {
      this.kont = kont;
      return this;
    }

    public void unsetKont() {
      this.kont = null;
    }

    /** Returns true if field kont is set (has been assigned a value) and false otherwise */
    public boolean isSetKont() {
      return this.kont != null;
    }

    public void setKontIsSet(boolean value) {
      if (!value) {
        this.kont = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KONT:
        if (value == null) {
          unsetKont();
        } else {
          setKont((PatientKontingent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KONT:
        return getKont();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KONT:
        return isSetKont();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addKont_args)
        return this.equals((addKont_args)that);
      return false;
    }

    public boolean equals(addKont_args that) {
      if (that == null)
        return false;

      boolean this_present_kont = true && this.isSetKont();
      boolean that_present_kont = true && that.isSetKont();
      if (this_present_kont || that_present_kont) {
        if (!(this_present_kont && that_present_kont))
          return false;
        if (!this.kont.equals(that.kont))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addKont_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addKont_args typedOther = (addKont_args)other;

      lastComparison = Boolean.valueOf(isSetKont()).compareTo(typedOther.isSetKont());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKont()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kont, typedOther.kont);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addKont_args(");
      boolean first = true;

      sb.append("kont:");
      if (this.kont == null) {
        sb.append("null");
      } else {
        sb.append(this.kont);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addKont_argsStandardSchemeFactory implements SchemeFactory {
      public addKont_argsStandardScheme getScheme() {
        return new addKont_argsStandardScheme();
      }
    }

    private static class addKont_argsStandardScheme extends StandardScheme<addKont_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addKont_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KONT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.kont = new PatientKontingent();
                struct.kont.read(iprot);
                struct.setKontIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addKont_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.kont != null) {
          oprot.writeFieldBegin(KONT_FIELD_DESC);
          struct.kont.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addKont_argsTupleSchemeFactory implements SchemeFactory {
      public addKont_argsTupleScheme getScheme() {
        return new addKont_argsTupleScheme();
      }
    }

    private static class addKont_argsTupleScheme extends TupleScheme<addKont_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addKont_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKont()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKont()) {
          struct.kont.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addKont_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.kont = new PatientKontingent();
          struct.kont.read(iprot);
          struct.setKontIsSet(true);
        }
      }
    }

  }

  public static class addKont_result implements org.apache.thrift.TBase<addKont_result, addKont_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addKont_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addKont_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addKont_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addKont_result.class, metaDataMap);
    }

    public addKont_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addKont_result(addKont_result other) {
    }

    public addKont_result deepCopy() {
      return new addKont_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addKont_result)
        return this.equals((addKont_result)that);
      return false;
    }

    public boolean equals(addKont_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addKont_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addKont_result typedOther = (addKont_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addKont_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addKont_resultStandardSchemeFactory implements SchemeFactory {
      public addKont_resultStandardScheme getScheme() {
        return new addKont_resultStandardScheme();
      }
    }

    private static class addKont_resultStandardScheme extends StandardScheme<addKont_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addKont_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addKont_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addKont_resultTupleSchemeFactory implements SchemeFactory {
      public addKont_resultTupleScheme getScheme() {
        return new addKont_resultTupleScheme();
      }
    }

    private static class addKont_resultTupleScheme extends TupleScheme<addKont_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addKont_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addKont_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addAgent_args implements org.apache.thrift.TBase<addAgent_args, addAgent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAgent_args");

    private static final org.apache.thrift.protocol.TField AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("agent", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAgent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAgent_argsTupleSchemeFactory());
    }

    public PatientAgent agent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AGENT((short)1, "agent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AGENT
            return AGENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AGENT, new org.apache.thrift.meta_data.FieldMetaData("agent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientAgent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAgent_args.class, metaDataMap);
    }

    public addAgent_args() {
    }

    public addAgent_args(
      PatientAgent agent)
    {
      this();
      this.agent = agent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAgent_args(addAgent_args other) {
      if (other.isSetAgent()) {
        this.agent = new PatientAgent(other.agent);
      }
    }

    public addAgent_args deepCopy() {
      return new addAgent_args(this);
    }

    @Override
    public void clear() {
      this.agent = null;
    }

    public PatientAgent getAgent() {
      return this.agent;
    }

    public addAgent_args setAgent(PatientAgent agent) {
      this.agent = agent;
      return this;
    }

    public void unsetAgent() {
      this.agent = null;
    }

    /** Returns true if field agent is set (has been assigned a value) and false otherwise */
    public boolean isSetAgent() {
      return this.agent != null;
    }

    public void setAgentIsSet(boolean value) {
      if (!value) {
        this.agent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AGENT:
        if (value == null) {
          unsetAgent();
        } else {
          setAgent((PatientAgent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AGENT:
        return getAgent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AGENT:
        return isSetAgent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAgent_args)
        return this.equals((addAgent_args)that);
      return false;
    }

    public boolean equals(addAgent_args that) {
      if (that == null)
        return false;

      boolean this_present_agent = true && this.isSetAgent();
      boolean that_present_agent = true && that.isSetAgent();
      if (this_present_agent || that_present_agent) {
        if (!(this_present_agent && that_present_agent))
          return false;
        if (!this.agent.equals(that.agent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAgent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAgent_args typedOther = (addAgent_args)other;

      lastComparison = Boolean.valueOf(isSetAgent()).compareTo(typedOther.isSetAgent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agent, typedOther.agent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAgent_args(");
      boolean first = true;

      sb.append("agent:");
      if (this.agent == null) {
        sb.append("null");
      } else {
        sb.append(this.agent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAgent_argsStandardSchemeFactory implements SchemeFactory {
      public addAgent_argsStandardScheme getScheme() {
        return new addAgent_argsStandardScheme();
      }
    }

    private static class addAgent_argsStandardScheme extends StandardScheme<addAgent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAgent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AGENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.agent = new PatientAgent();
                struct.agent.read(iprot);
                struct.setAgentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAgent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.agent != null) {
          oprot.writeFieldBegin(AGENT_FIELD_DESC);
          struct.agent.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAgent_argsTupleSchemeFactory implements SchemeFactory {
      public addAgent_argsTupleScheme getScheme() {
        return new addAgent_argsTupleScheme();
      }
    }

    private static class addAgent_argsTupleScheme extends TupleScheme<addAgent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAgent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAgent()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAgent()) {
          struct.agent.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAgent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.agent = new PatientAgent();
          struct.agent.read(iprot);
          struct.setAgentIsSet(true);
        }
      }
    }

  }

  public static class addAgent_result implements org.apache.thrift.TBase<addAgent_result, addAgent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAgent_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAgent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAgent_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAgent_result.class, metaDataMap);
    }

    public addAgent_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAgent_result(addAgent_result other) {
    }

    public addAgent_result deepCopy() {
      return new addAgent_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAgent_result)
        return this.equals((addAgent_result)that);
      return false;
    }

    public boolean equals(addAgent_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addAgent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addAgent_result typedOther = (addAgent_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAgent_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAgent_resultStandardSchemeFactory implements SchemeFactory {
      public addAgent_resultStandardScheme getScheme() {
        return new addAgent_resultStandardScheme();
      }
    }

    private static class addAgent_resultStandardScheme extends StandardScheme<addAgent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAgent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAgent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAgent_resultTupleSchemeFactory implements SchemeFactory {
      public addAgent_resultTupleScheme getScheme() {
        return new addAgent_resultTupleScheme();
      }
    }

    private static class addAgent_resultTupleScheme extends TupleScheme<addAgent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAgent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAgent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addSign_args implements org.apache.thrift.TBase<addSign_args, addSign_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSign_args");

    private static final org.apache.thrift.protocol.TField SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("sign", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSign_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSign_argsTupleSchemeFactory());
    }

    public PatientSign sign; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIGN((short)1, "sign");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIGN
            return SIGN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIGN, new org.apache.thrift.meta_data.FieldMetaData("sign", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientSign.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSign_args.class, metaDataMap);
    }

    public addSign_args() {
    }

    public addSign_args(
      PatientSign sign)
    {
      this();
      this.sign = sign;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSign_args(addSign_args other) {
      if (other.isSetSign()) {
        this.sign = new PatientSign(other.sign);
      }
    }

    public addSign_args deepCopy() {
      return new addSign_args(this);
    }

    @Override
    public void clear() {
      this.sign = null;
    }

    public PatientSign getSign() {
      return this.sign;
    }

    public addSign_args setSign(PatientSign sign) {
      this.sign = sign;
      return this;
    }

    public void unsetSign() {
      this.sign = null;
    }

    /** Returns true if field sign is set (has been assigned a value) and false otherwise */
    public boolean isSetSign() {
      return this.sign != null;
    }

    public void setSignIsSet(boolean value) {
      if (!value) {
        this.sign = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIGN:
        if (value == null) {
          unsetSign();
        } else {
          setSign((PatientSign)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIGN:
        return getSign();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIGN:
        return isSetSign();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSign_args)
        return this.equals((addSign_args)that);
      return false;
    }

    public boolean equals(addSign_args that) {
      if (that == null)
        return false;

      boolean this_present_sign = true && this.isSetSign();
      boolean that_present_sign = true && that.isSetSign();
      if (this_present_sign || that_present_sign) {
        if (!(this_present_sign && that_present_sign))
          return false;
        if (!this.sign.equals(that.sign))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addSign_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addSign_args typedOther = (addSign_args)other;

      lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSign()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sign, typedOther.sign);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSign_args(");
      boolean first = true;

      sb.append("sign:");
      if (this.sign == null) {
        sb.append("null");
      } else {
        sb.append(this.sign);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSign_argsStandardSchemeFactory implements SchemeFactory {
      public addSign_argsStandardScheme getScheme() {
        return new addSign_argsStandardScheme();
      }
    }

    private static class addSign_argsStandardScheme extends StandardScheme<addSign_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIGN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sign = new PatientSign();
                struct.sign.read(iprot);
                struct.setSignIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSign_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sign != null) {
          oprot.writeFieldBegin(SIGN_FIELD_DESC);
          struct.sign.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSign_argsTupleSchemeFactory implements SchemeFactory {
      public addSign_argsTupleScheme getScheme() {
        return new addSign_argsTupleScheme();
      }
    }

    private static class addSign_argsTupleScheme extends TupleScheme<addSign_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSign()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSign()) {
          struct.sign.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sign = new PatientSign();
          struct.sign.read(iprot);
          struct.setSignIsSet(true);
        }
      }
    }

  }

  public static class addSign_result implements org.apache.thrift.TBase<addSign_result, addSign_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSign_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSign_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSign_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSign_result.class, metaDataMap);
    }

    public addSign_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSign_result(addSign_result other) {
    }

    public addSign_result deepCopy() {
      return new addSign_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSign_result)
        return this.equals((addSign_result)that);
      return false;
    }

    public boolean equals(addSign_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addSign_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addSign_result typedOther = (addSign_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSign_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSign_resultStandardSchemeFactory implements SchemeFactory {
      public addSign_resultStandardScheme getScheme() {
        return new addSign_resultStandardScheme();
      }
    }

    private static class addSign_resultStandardScheme extends StandardScheme<addSign_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSign_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSign_resultTupleSchemeFactory implements SchemeFactory {
      public addSign_resultTupleScheme getScheme() {
        return new addSign_resultTupleScheme();
      }
    }

    private static class addSign_resultTupleScheme extends TupleScheme<addSign_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addJalob_args implements org.apache.thrift.TBase<addJalob_args, addJalob_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addJalob_args");

    private static final org.apache.thrift.protocol.TField JALOB_FIELD_DESC = new org.apache.thrift.protocol.TField("jalob", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addJalob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addJalob_argsTupleSchemeFactory());
    }

    public PatientJalob jalob; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JALOB((short)1, "jalob");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JALOB
            return JALOB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JALOB, new org.apache.thrift.meta_data.FieldMetaData("jalob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientJalob.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addJalob_args.class, metaDataMap);
    }

    public addJalob_args() {
    }

    public addJalob_args(
      PatientJalob jalob)
    {
      this();
      this.jalob = jalob;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addJalob_args(addJalob_args other) {
      if (other.isSetJalob()) {
        this.jalob = new PatientJalob(other.jalob);
      }
    }

    public addJalob_args deepCopy() {
      return new addJalob_args(this);
    }

    @Override
    public void clear() {
      this.jalob = null;
    }

    public PatientJalob getJalob() {
      return this.jalob;
    }

    public addJalob_args setJalob(PatientJalob jalob) {
      this.jalob = jalob;
      return this;
    }

    public void unsetJalob() {
      this.jalob = null;
    }

    /** Returns true if field jalob is set (has been assigned a value) and false otherwise */
    public boolean isSetJalob() {
      return this.jalob != null;
    }

    public void setJalobIsSet(boolean value) {
      if (!value) {
        this.jalob = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JALOB:
        if (value == null) {
          unsetJalob();
        } else {
          setJalob((PatientJalob)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JALOB:
        return getJalob();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JALOB:
        return isSetJalob();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addJalob_args)
        return this.equals((addJalob_args)that);
      return false;
    }

    public boolean equals(addJalob_args that) {
      if (that == null)
        return false;

      boolean this_present_jalob = true && this.isSetJalob();
      boolean that_present_jalob = true && that.isSetJalob();
      if (this_present_jalob || that_present_jalob) {
        if (!(this_present_jalob && that_present_jalob))
          return false;
        if (!this.jalob.equals(that.jalob))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addJalob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addJalob_args typedOther = (addJalob_args)other;

      lastComparison = Boolean.valueOf(isSetJalob()).compareTo(typedOther.isSetJalob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJalob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jalob, typedOther.jalob);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addJalob_args(");
      boolean first = true;

      sb.append("jalob:");
      if (this.jalob == null) {
        sb.append("null");
      } else {
        sb.append(this.jalob);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addJalob_argsStandardSchemeFactory implements SchemeFactory {
      public addJalob_argsStandardScheme getScheme() {
        return new addJalob_argsStandardScheme();
      }
    }

    private static class addJalob_argsStandardScheme extends StandardScheme<addJalob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addJalob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JALOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jalob = new PatientJalob();
                struct.jalob.read(iprot);
                struct.setJalobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addJalob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jalob != null) {
          oprot.writeFieldBegin(JALOB_FIELD_DESC);
          struct.jalob.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addJalob_argsTupleSchemeFactory implements SchemeFactory {
      public addJalob_argsTupleScheme getScheme() {
        return new addJalob_argsTupleScheme();
      }
    }

    private static class addJalob_argsTupleScheme extends TupleScheme<addJalob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addJalob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJalob()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJalob()) {
          struct.jalob.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addJalob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jalob = new PatientJalob();
          struct.jalob.read(iprot);
          struct.setJalobIsSet(true);
        }
      }
    }

  }

  public static class addJalob_result implements org.apache.thrift.TBase<addJalob_result, addJalob_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addJalob_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addJalob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addJalob_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addJalob_result.class, metaDataMap);
    }

    public addJalob_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addJalob_result(addJalob_result other) {
    }

    public addJalob_result deepCopy() {
      return new addJalob_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addJalob_result)
        return this.equals((addJalob_result)that);
      return false;
    }

    public boolean equals(addJalob_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addJalob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addJalob_result typedOther = (addJalob_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addJalob_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addJalob_resultStandardSchemeFactory implements SchemeFactory {
      public addJalob_resultStandardScheme getScheme() {
        return new addJalob_resultStandardScheme();
      }
    }

    private static class addJalob_resultStandardScheme extends StandardScheme<addJalob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addJalob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addJalob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addJalob_resultTupleSchemeFactory implements SchemeFactory {
      public addJalob_resultTupleScheme getScheme() {
        return new addJalob_resultTupleScheme();
      }
    }

    private static class addJalob_resultTupleScheme extends TupleScheme<addJalob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addJalob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addJalob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addGosp_args implements org.apache.thrift.TBase<addGosp_args, addGosp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGosp_args");

    private static final org.apache.thrift.protocol.TField GOSP_FIELD_DESC = new org.apache.thrift.protocol.TField("gosp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addGosp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addGosp_argsTupleSchemeFactory());
    }

    public PatientGosp gosp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GOSP((short)1, "gosp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GOSP
            return GOSP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GOSP, new org.apache.thrift.meta_data.FieldMetaData("gosp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientGosp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGosp_args.class, metaDataMap);
    }

    public addGosp_args() {
    }

    public addGosp_args(
      PatientGosp gosp)
    {
      this();
      this.gosp = gosp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGosp_args(addGosp_args other) {
      if (other.isSetGosp()) {
        this.gosp = new PatientGosp(other.gosp);
      }
    }

    public addGosp_args deepCopy() {
      return new addGosp_args(this);
    }

    @Override
    public void clear() {
      this.gosp = null;
    }

    public PatientGosp getGosp() {
      return this.gosp;
    }

    public addGosp_args setGosp(PatientGosp gosp) {
      this.gosp = gosp;
      return this;
    }

    public void unsetGosp() {
      this.gosp = null;
    }

    /** Returns true if field gosp is set (has been assigned a value) and false otherwise */
    public boolean isSetGosp() {
      return this.gosp != null;
    }

    public void setGospIsSet(boolean value) {
      if (!value) {
        this.gosp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GOSP:
        if (value == null) {
          unsetGosp();
        } else {
          setGosp((PatientGosp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GOSP:
        return getGosp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GOSP:
        return isSetGosp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addGosp_args)
        return this.equals((addGosp_args)that);
      return false;
    }

    public boolean equals(addGosp_args that) {
      if (that == null)
        return false;

      boolean this_present_gosp = true && this.isSetGosp();
      boolean that_present_gosp = true && that.isSetGosp();
      if (this_present_gosp || that_present_gosp) {
        if (!(this_present_gosp && that_present_gosp))
          return false;
        if (!this.gosp.equals(that.gosp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addGosp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addGosp_args typedOther = (addGosp_args)other;

      lastComparison = Boolean.valueOf(isSetGosp()).compareTo(typedOther.isSetGosp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGosp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gosp, typedOther.gosp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addGosp_args(");
      boolean first = true;

      sb.append("gosp:");
      if (this.gosp == null) {
        sb.append("null");
      } else {
        sb.append(this.gosp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addGosp_argsStandardSchemeFactory implements SchemeFactory {
      public addGosp_argsStandardScheme getScheme() {
        return new addGosp_argsStandardScheme();
      }
    }

    private static class addGosp_argsStandardScheme extends StandardScheme<addGosp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addGosp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GOSP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.gosp = new PatientGosp();
                struct.gosp.read(iprot);
                struct.setGospIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addGosp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gosp != null) {
          oprot.writeFieldBegin(GOSP_FIELD_DESC);
          struct.gosp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addGosp_argsTupleSchemeFactory implements SchemeFactory {
      public addGosp_argsTupleScheme getScheme() {
        return new addGosp_argsTupleScheme();
      }
    }

    private static class addGosp_argsTupleScheme extends TupleScheme<addGosp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addGosp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGosp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGosp()) {
          struct.gosp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addGosp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.gosp = new PatientGosp();
          struct.gosp.read(iprot);
          struct.setGospIsSet(true);
        }
      }
    }

  }

  public static class addGosp_result implements org.apache.thrift.TBase<addGosp_result, addGosp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGosp_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addGosp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addGosp_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGosp_result.class, metaDataMap);
    }

    public addGosp_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGosp_result(addGosp_result other) {
    }

    public addGosp_result deepCopy() {
      return new addGosp_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addGosp_result)
        return this.equals((addGosp_result)that);
      return false;
    }

    public boolean equals(addGosp_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addGosp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addGosp_result typedOther = (addGosp_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addGosp_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addGosp_resultStandardSchemeFactory implements SchemeFactory {
      public addGosp_resultStandardScheme getScheme() {
        return new addGosp_resultStandardScheme();
      }
    }

    private static class addGosp_resultStandardScheme extends StandardScheme<addGosp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addGosp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addGosp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addGosp_resultTupleSchemeFactory implements SchemeFactory {
      public addGosp_resultTupleScheme getScheme() {
        return new addGosp_resultTupleScheme();
      }
    }

    private static class addGosp_resultTupleScheme extends TupleScheme<addGosp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addGosp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addGosp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addNambk_args implements org.apache.thrift.TBase<addNambk_args, addNambk_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNambk_args");

    private static final org.apache.thrift.protocol.TField NAMBK_FIELD_DESC = new org.apache.thrift.protocol.TField("nambk", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addNambk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addNambk_argsTupleSchemeFactory());
    }

    public PatientNambk nambk; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAMBK((short)1, "nambk");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAMBK
            return NAMBK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAMBK, new org.apache.thrift.meta_data.FieldMetaData("nambk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientNambk.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNambk_args.class, metaDataMap);
    }

    public addNambk_args() {
    }

    public addNambk_args(
      PatientNambk nambk)
    {
      this();
      this.nambk = nambk;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNambk_args(addNambk_args other) {
      if (other.isSetNambk()) {
        this.nambk = new PatientNambk(other.nambk);
      }
    }

    public addNambk_args deepCopy() {
      return new addNambk_args(this);
    }

    @Override
    public void clear() {
      this.nambk = null;
    }

    public PatientNambk getNambk() {
      return this.nambk;
    }

    public addNambk_args setNambk(PatientNambk nambk) {
      this.nambk = nambk;
      return this;
    }

    public void unsetNambk() {
      this.nambk = null;
    }

    /** Returns true if field nambk is set (has been assigned a value) and false otherwise */
    public boolean isSetNambk() {
      return this.nambk != null;
    }

    public void setNambkIsSet(boolean value) {
      if (!value) {
        this.nambk = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAMBK:
        if (value == null) {
          unsetNambk();
        } else {
          setNambk((PatientNambk)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAMBK:
        return getNambk();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAMBK:
        return isSetNambk();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addNambk_args)
        return this.equals((addNambk_args)that);
      return false;
    }

    public boolean equals(addNambk_args that) {
      if (that == null)
        return false;

      boolean this_present_nambk = true && this.isSetNambk();
      boolean that_present_nambk = true && that.isSetNambk();
      if (this_present_nambk || that_present_nambk) {
        if (!(this_present_nambk && that_present_nambk))
          return false;
        if (!this.nambk.equals(that.nambk))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addNambk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addNambk_args typedOther = (addNambk_args)other;

      lastComparison = Boolean.valueOf(isSetNambk()).compareTo(typedOther.isSetNambk());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNambk()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nambk, typedOther.nambk);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addNambk_args(");
      boolean first = true;

      sb.append("nambk:");
      if (this.nambk == null) {
        sb.append("null");
      } else {
        sb.append(this.nambk);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNambk_argsStandardSchemeFactory implements SchemeFactory {
      public addNambk_argsStandardScheme getScheme() {
        return new addNambk_argsStandardScheme();
      }
    }

    private static class addNambk_argsStandardScheme extends StandardScheme<addNambk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNambk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAMBK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nambk = new PatientNambk();
                struct.nambk.read(iprot);
                struct.setNambkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNambk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nambk != null) {
          oprot.writeFieldBegin(NAMBK_FIELD_DESC);
          struct.nambk.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNambk_argsTupleSchemeFactory implements SchemeFactory {
      public addNambk_argsTupleScheme getScheme() {
        return new addNambk_argsTupleScheme();
      }
    }

    private static class addNambk_argsTupleScheme extends TupleScheme<addNambk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNambk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNambk()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNambk()) {
          struct.nambk.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNambk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nambk = new PatientNambk();
          struct.nambk.read(iprot);
          struct.setNambkIsSet(true);
        }
      }
    }

  }

  public static class addNambk_result implements org.apache.thrift.TBase<addNambk_result, addNambk_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNambk_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addNambk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addNambk_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNambk_result.class, metaDataMap);
    }

    public addNambk_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNambk_result(addNambk_result other) {
    }

    public addNambk_result deepCopy() {
      return new addNambk_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addNambk_result)
        return this.equals((addNambk_result)that);
      return false;
    }

    public boolean equals(addNambk_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addNambk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addNambk_result typedOther = (addNambk_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addNambk_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNambk_resultStandardSchemeFactory implements SchemeFactory {
      public addNambk_resultStandardScheme getScheme() {
        return new addNambk_resultStandardScheme();
      }
    }

    private static class addNambk_resultStandardScheme extends StandardScheme<addNambk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNambk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNambk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNambk_resultTupleSchemeFactory implements SchemeFactory {
      public addNambk_resultTupleScheme getScheme() {
        return new addNambk_resultTupleScheme();
      }
    }

    private static class addNambk_resultTupleScheme extends TupleScheme<addNambk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNambk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNambk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deletePatient_args implements org.apache.thrift.TBase<deletePatient_args, deletePatient_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePatient_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deletePatient_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deletePatient_argsTupleSchemeFactory());
    }

    public int npasp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePatient_args.class, metaDataMap);
    }

    public deletePatient_args() {
    }

    public deletePatient_args(
      int npasp)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletePatient_args(deletePatient_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
    }

    public deletePatient_args deepCopy() {
      return new deletePatient_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public deletePatient_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deletePatient_args)
        return this.equals((deletePatient_args)that);
      return false;
    }

    public boolean equals(deletePatient_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deletePatient_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deletePatient_args typedOther = (deletePatient_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deletePatient_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletePatient_argsStandardSchemeFactory implements SchemeFactory {
      public deletePatient_argsStandardScheme getScheme() {
        return new deletePatient_argsStandardScheme();
      }
    }

    private static class deletePatient_argsStandardScheme extends StandardScheme<deletePatient_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletePatient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletePatient_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletePatient_argsTupleSchemeFactory implements SchemeFactory {
      public deletePatient_argsTupleScheme getScheme() {
        return new deletePatient_argsTupleScheme();
      }
    }

    private static class deletePatient_argsTupleScheme extends TupleScheme<deletePatient_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletePatient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletePatient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
      }
    }

  }

  public static class deletePatient_result implements org.apache.thrift.TBase<deletePatient_result, deletePatient_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePatient_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deletePatient_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deletePatient_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePatient_result.class, metaDataMap);
    }

    public deletePatient_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletePatient_result(deletePatient_result other) {
    }

    public deletePatient_result deepCopy() {
      return new deletePatient_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deletePatient_result)
        return this.equals((deletePatient_result)that);
      return false;
    }

    public boolean equals(deletePatient_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deletePatient_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deletePatient_result typedOther = (deletePatient_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deletePatient_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletePatient_resultStandardSchemeFactory implements SchemeFactory {
      public deletePatient_resultStandardScheme getScheme() {
        return new deletePatient_resultStandardScheme();
      }
    }

    private static class deletePatient_resultStandardScheme extends StandardScheme<deletePatient_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletePatient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletePatient_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletePatient_resultTupleSchemeFactory implements SchemeFactory {
      public deletePatient_resultTupleScheme getScheme() {
        return new deletePatient_resultTupleScheme();
      }
    }

    private static class deletePatient_resultTupleScheme extends TupleScheme<deletePatient_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletePatient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletePatient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteNambk_args implements org.apache.thrift.TBase<deleteNambk_args, deleteNambk_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteNambk_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CPOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cpol", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteNambk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteNambk_argsTupleSchemeFactory());
    }

    public int npasp; // required
    public int cpol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp"),
      CPOL((short)2, "cpol");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          case 2: // CPOL
            return CPOL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private static final int __CPOL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CPOL, new org.apache.thrift.meta_data.FieldMetaData("cpol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteNambk_args.class, metaDataMap);
    }

    public deleteNambk_args() {
    }

    public deleteNambk_args(
      int npasp,
      int cpol)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
      this.cpol = cpol;
      setCpolIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteNambk_args(deleteNambk_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
      this.cpol = other.cpol;
    }

    public deleteNambk_args deepCopy() {
      return new deleteNambk_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
      setCpolIsSet(false);
      this.cpol = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public deleteNambk_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public int getCpol() {
      return this.cpol;
    }

    public deleteNambk_args setCpol(int cpol) {
      this.cpol = cpol;
      setCpolIsSet(true);
      return this;
    }

    public void unsetCpol() {
      __isset_bit_vector.clear(__CPOL_ISSET_ID);
    }

    /** Returns true if field cpol is set (has been assigned a value) and false otherwise */
    public boolean isSetCpol() {
      return __isset_bit_vector.get(__CPOL_ISSET_ID);
    }

    public void setCpolIsSet(boolean value) {
      __isset_bit_vector.set(__CPOL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      case CPOL:
        if (value == null) {
          unsetCpol();
        } else {
          setCpol((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      case CPOL:
        return Integer.valueOf(getCpol());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      case CPOL:
        return isSetCpol();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteNambk_args)
        return this.equals((deleteNambk_args)that);
      return false;
    }

    public boolean equals(deleteNambk_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      boolean this_present_cpol = true;
      boolean that_present_cpol = true;
      if (this_present_cpol || that_present_cpol) {
        if (!(this_present_cpol && that_present_cpol))
          return false;
        if (this.cpol != that.cpol)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteNambk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteNambk_args typedOther = (deleteNambk_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCpol()).compareTo(typedOther.isSetCpol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCpol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpol, typedOther.cpol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteNambk_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cpol:");
      sb.append(this.cpol);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteNambk_argsStandardSchemeFactory implements SchemeFactory {
      public deleteNambk_argsStandardScheme getScheme() {
        return new deleteNambk_argsStandardScheme();
      }
    }

    private static class deleteNambk_argsStandardScheme extends StandardScheme<deleteNambk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteNambk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CPOL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cpol = iprot.readI32();
                struct.setCpolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteNambk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CPOL_FIELD_DESC);
        oprot.writeI32(struct.cpol);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteNambk_argsTupleSchemeFactory implements SchemeFactory {
      public deleteNambk_argsTupleScheme getScheme() {
        return new deleteNambk_argsTupleScheme();
      }
    }

    private static class deleteNambk_argsTupleScheme extends TupleScheme<deleteNambk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteNambk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        if (struct.isSetCpol()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
        if (struct.isSetCpol()) {
          oprot.writeI32(struct.cpol);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteNambk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cpol = iprot.readI32();
          struct.setCpolIsSet(true);
        }
      }
    }

  }

  public static class deleteNambk_result implements org.apache.thrift.TBase<deleteNambk_result, deleteNambk_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteNambk_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteNambk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteNambk_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteNambk_result.class, metaDataMap);
    }

    public deleteNambk_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteNambk_result(deleteNambk_result other) {
    }

    public deleteNambk_result deepCopy() {
      return new deleteNambk_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteNambk_result)
        return this.equals((deleteNambk_result)that);
      return false;
    }

    public boolean equals(deleteNambk_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteNambk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteNambk_result typedOther = (deleteNambk_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteNambk_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteNambk_resultStandardSchemeFactory implements SchemeFactory {
      public deleteNambk_resultStandardScheme getScheme() {
        return new deleteNambk_resultStandardScheme();
      }
    }

    private static class deleteNambk_resultStandardScheme extends StandardScheme<deleteNambk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteNambk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteNambk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteNambk_resultTupleSchemeFactory implements SchemeFactory {
      public deleteNambk_resultTupleScheme getScheme() {
        return new deleteNambk_resultTupleScheme();
      }
    }

    private static class deleteNambk_resultTupleScheme extends TupleScheme<deleteNambk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteNambk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteNambk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteLgota_args implements org.apache.thrift.TBase<deleteLgota_args, deleteLgota_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLgota_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LGOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("lgota", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLgota_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLgota_argsTupleSchemeFactory());
    }

    public int npasp; // required
    public int lgota; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp"),
      LGOTA((short)2, "lgota");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          case 2: // LGOTA
            return LGOTA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private static final int __LGOTA_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LGOTA, new org.apache.thrift.meta_data.FieldMetaData("lgota", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLgota_args.class, metaDataMap);
    }

    public deleteLgota_args() {
    }

    public deleteLgota_args(
      int npasp,
      int lgota)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
      this.lgota = lgota;
      setLgotaIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLgota_args(deleteLgota_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
      this.lgota = other.lgota;
    }

    public deleteLgota_args deepCopy() {
      return new deleteLgota_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
      setLgotaIsSet(false);
      this.lgota = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public deleteLgota_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public int getLgota() {
      return this.lgota;
    }

    public deleteLgota_args setLgota(int lgota) {
      this.lgota = lgota;
      setLgotaIsSet(true);
      return this;
    }

    public void unsetLgota() {
      __isset_bit_vector.clear(__LGOTA_ISSET_ID);
    }

    /** Returns true if field lgota is set (has been assigned a value) and false otherwise */
    public boolean isSetLgota() {
      return __isset_bit_vector.get(__LGOTA_ISSET_ID);
    }

    public void setLgotaIsSet(boolean value) {
      __isset_bit_vector.set(__LGOTA_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      case LGOTA:
        if (value == null) {
          unsetLgota();
        } else {
          setLgota((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      case LGOTA:
        return Integer.valueOf(getLgota());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      case LGOTA:
        return isSetLgota();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLgota_args)
        return this.equals((deleteLgota_args)that);
      return false;
    }

    public boolean equals(deleteLgota_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      boolean this_present_lgota = true;
      boolean that_present_lgota = true;
      if (this_present_lgota || that_present_lgota) {
        if (!(this_present_lgota && that_present_lgota))
          return false;
        if (this.lgota != that.lgota)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteLgota_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteLgota_args typedOther = (deleteLgota_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLgota()).compareTo(typedOther.isSetLgota());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLgota()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lgota, typedOther.lgota);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLgota_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lgota:");
      sb.append(this.lgota);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLgota_argsStandardSchemeFactory implements SchemeFactory {
      public deleteLgota_argsStandardScheme getScheme() {
        return new deleteLgota_argsStandardScheme();
      }
    }

    private static class deleteLgota_argsStandardScheme extends StandardScheme<deleteLgota_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLgota_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LGOTA
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lgota = iprot.readI32();
                struct.setLgotaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLgota_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LGOTA_FIELD_DESC);
        oprot.writeI32(struct.lgota);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLgota_argsTupleSchemeFactory implements SchemeFactory {
      public deleteLgota_argsTupleScheme getScheme() {
        return new deleteLgota_argsTupleScheme();
      }
    }

    private static class deleteLgota_argsTupleScheme extends TupleScheme<deleteLgota_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLgota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        if (struct.isSetLgota()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
        if (struct.isSetLgota()) {
          oprot.writeI32(struct.lgota);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLgota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lgota = iprot.readI32();
          struct.setLgotaIsSet(true);
        }
      }
    }

  }

  public static class deleteLgota_result implements org.apache.thrift.TBase<deleteLgota_result, deleteLgota_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLgota_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLgota_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLgota_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLgota_result.class, metaDataMap);
    }

    public deleteLgota_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLgota_result(deleteLgota_result other) {
    }

    public deleteLgota_result deepCopy() {
      return new deleteLgota_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLgota_result)
        return this.equals((deleteLgota_result)that);
      return false;
    }

    public boolean equals(deleteLgota_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteLgota_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteLgota_result typedOther = (deleteLgota_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLgota_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLgota_resultStandardSchemeFactory implements SchemeFactory {
      public deleteLgota_resultStandardScheme getScheme() {
        return new deleteLgota_resultStandardScheme();
      }
    }

    private static class deleteLgota_resultStandardScheme extends StandardScheme<deleteLgota_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLgota_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLgota_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLgota_resultTupleSchemeFactory implements SchemeFactory {
      public deleteLgota_resultTupleScheme getScheme() {
        return new deleteLgota_resultTupleScheme();
      }
    }

    private static class deleteLgota_resultTupleScheme extends TupleScheme<deleteLgota_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLgota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLgota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteKont_args implements org.apache.thrift.TBase<deleteKont_args, deleteKont_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteKont_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField KATEG_FIELD_DESC = new org.apache.thrift.protocol.TField("kateg", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteKont_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteKont_argsTupleSchemeFactory());
    }

    public int npasp; // required
    public int kateg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp"),
      KATEG((short)2, "kateg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          case 2: // KATEG
            return KATEG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private static final int __KATEG_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KATEG, new org.apache.thrift.meta_data.FieldMetaData("kateg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteKont_args.class, metaDataMap);
    }

    public deleteKont_args() {
    }

    public deleteKont_args(
      int npasp,
      int kateg)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
      this.kateg = kateg;
      setKategIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteKont_args(deleteKont_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
      this.kateg = other.kateg;
    }

    public deleteKont_args deepCopy() {
      return new deleteKont_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
      setKategIsSet(false);
      this.kateg = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public deleteKont_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public int getKateg() {
      return this.kateg;
    }

    public deleteKont_args setKateg(int kateg) {
      this.kateg = kateg;
      setKategIsSet(true);
      return this;
    }

    public void unsetKateg() {
      __isset_bit_vector.clear(__KATEG_ISSET_ID);
    }

    /** Returns true if field kateg is set (has been assigned a value) and false otherwise */
    public boolean isSetKateg() {
      return __isset_bit_vector.get(__KATEG_ISSET_ID);
    }

    public void setKategIsSet(boolean value) {
      __isset_bit_vector.set(__KATEG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      case KATEG:
        if (value == null) {
          unsetKateg();
        } else {
          setKateg((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      case KATEG:
        return Integer.valueOf(getKateg());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      case KATEG:
        return isSetKateg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteKont_args)
        return this.equals((deleteKont_args)that);
      return false;
    }

    public boolean equals(deleteKont_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      boolean this_present_kateg = true;
      boolean that_present_kateg = true;
      if (this_present_kateg || that_present_kateg) {
        if (!(this_present_kateg && that_present_kateg))
          return false;
        if (this.kateg != that.kateg)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteKont_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteKont_args typedOther = (deleteKont_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKateg()).compareTo(typedOther.isSetKateg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKateg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kateg, typedOther.kateg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteKont_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("kateg:");
      sb.append(this.kateg);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteKont_argsStandardSchemeFactory implements SchemeFactory {
      public deleteKont_argsStandardScheme getScheme() {
        return new deleteKont_argsStandardScheme();
      }
    }

    private static class deleteKont_argsStandardScheme extends StandardScheme<deleteKont_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteKont_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KATEG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.kateg = iprot.readI32();
                struct.setKategIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteKont_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(KATEG_FIELD_DESC);
        oprot.writeI32(struct.kateg);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteKont_argsTupleSchemeFactory implements SchemeFactory {
      public deleteKont_argsTupleScheme getScheme() {
        return new deleteKont_argsTupleScheme();
      }
    }

    private static class deleteKont_argsTupleScheme extends TupleScheme<deleteKont_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteKont_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        if (struct.isSetKateg()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
        if (struct.isSetKateg()) {
          oprot.writeI32(struct.kateg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteKont_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kateg = iprot.readI32();
          struct.setKategIsSet(true);
        }
      }
    }

  }

  public static class deleteKont_result implements org.apache.thrift.TBase<deleteKont_result, deleteKont_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteKont_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteKont_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteKont_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteKont_result.class, metaDataMap);
    }

    public deleteKont_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteKont_result(deleteKont_result other) {
    }

    public deleteKont_result deepCopy() {
      return new deleteKont_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteKont_result)
        return this.equals((deleteKont_result)that);
      return false;
    }

    public boolean equals(deleteKont_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteKont_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteKont_result typedOther = (deleteKont_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteKont_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteKont_resultStandardSchemeFactory implements SchemeFactory {
      public deleteKont_resultStandardScheme getScheme() {
        return new deleteKont_resultStandardScheme();
      }
    }

    private static class deleteKont_resultStandardScheme extends StandardScheme<deleteKont_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteKont_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteKont_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteKont_resultTupleSchemeFactory implements SchemeFactory {
      public deleteKont_resultTupleScheme getScheme() {
        return new deleteKont_resultTupleScheme();
      }
    }

    private static class deleteKont_resultTupleScheme extends TupleScheme<deleteKont_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteKont_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteKont_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteAgent_args implements org.apache.thrift.TBase<deleteAgent_args, deleteAgent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAgent_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteAgent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteAgent_argsTupleSchemeFactory());
    }

    public int npasp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAgent_args.class, metaDataMap);
    }

    public deleteAgent_args() {
    }

    public deleteAgent_args(
      int npasp)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAgent_args(deleteAgent_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
    }

    public deleteAgent_args deepCopy() {
      return new deleteAgent_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public deleteAgent_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAgent_args)
        return this.equals((deleteAgent_args)that);
      return false;
    }

    public boolean equals(deleteAgent_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteAgent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteAgent_args typedOther = (deleteAgent_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteAgent_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAgent_argsStandardSchemeFactory implements SchemeFactory {
      public deleteAgent_argsStandardScheme getScheme() {
        return new deleteAgent_argsStandardScheme();
      }
    }

    private static class deleteAgent_argsStandardScheme extends StandardScheme<deleteAgent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAgent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAgent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAgent_argsTupleSchemeFactory implements SchemeFactory {
      public deleteAgent_argsTupleScheme getScheme() {
        return new deleteAgent_argsTupleScheme();
      }
    }

    private static class deleteAgent_argsTupleScheme extends TupleScheme<deleteAgent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAgent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAgent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
      }
    }

  }

  public static class deleteAgent_result implements org.apache.thrift.TBase<deleteAgent_result, deleteAgent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAgent_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteAgent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteAgent_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAgent_result.class, metaDataMap);
    }

    public deleteAgent_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAgent_result(deleteAgent_result other) {
    }

    public deleteAgent_result deepCopy() {
      return new deleteAgent_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAgent_result)
        return this.equals((deleteAgent_result)that);
      return false;
    }

    public boolean equals(deleteAgent_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteAgent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteAgent_result typedOther = (deleteAgent_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteAgent_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAgent_resultStandardSchemeFactory implements SchemeFactory {
      public deleteAgent_resultStandardScheme getScheme() {
        return new deleteAgent_resultStandardScheme();
      }
    }

    private static class deleteAgent_resultStandardScheme extends StandardScheme<deleteAgent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAgent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAgent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAgent_resultTupleSchemeFactory implements SchemeFactory {
      public deleteAgent_resultTupleScheme getScheme() {
        return new deleteAgent_resultTupleScheme();
      }
    }

    private static class deleteAgent_resultTupleScheme extends TupleScheme<deleteAgent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAgent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAgent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteSign_args implements org.apache.thrift.TBase<deleteSign_args, deleteSign_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSign_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSign_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSign_argsTupleSchemeFactory());
    }

    public int npasp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSign_args.class, metaDataMap);
    }

    public deleteSign_args() {
    }

    public deleteSign_args(
      int npasp)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSign_args(deleteSign_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
    }

    public deleteSign_args deepCopy() {
      return new deleteSign_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public deleteSign_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSign_args)
        return this.equals((deleteSign_args)that);
      return false;
    }

    public boolean equals(deleteSign_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteSign_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteSign_args typedOther = (deleteSign_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSign_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSign_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSign_argsStandardScheme getScheme() {
        return new deleteSign_argsStandardScheme();
      }
    }

    private static class deleteSign_argsStandardScheme extends StandardScheme<deleteSign_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSign_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSign_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSign_argsTupleScheme getScheme() {
        return new deleteSign_argsTupleScheme();
      }
    }

    private static class deleteSign_argsTupleScheme extends TupleScheme<deleteSign_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
      }
    }

  }

  public static class deleteSign_result implements org.apache.thrift.TBase<deleteSign_result, deleteSign_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSign_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSign_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSign_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSign_result.class, metaDataMap);
    }

    public deleteSign_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSign_result(deleteSign_result other) {
    }

    public deleteSign_result deepCopy() {
      return new deleteSign_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSign_result)
        return this.equals((deleteSign_result)that);
      return false;
    }

    public boolean equals(deleteSign_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteSign_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteSign_result typedOther = (deleteSign_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSign_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSign_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSign_resultStandardScheme getScheme() {
        return new deleteSign_resultStandardScheme();
      }
    }

    private static class deleteSign_resultStandardScheme extends StandardScheme<deleteSign_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSign_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSign_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSign_resultTupleScheme getScheme() {
        return new deleteSign_resultTupleScheme();
      }
    }

    private static class deleteSign_resultTupleScheme extends TupleScheme<deleteSign_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteJalob_args implements org.apache.thrift.TBase<deleteJalob_args, deleteJalob_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteJalob_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NGOSP_FIELD_DESC = new org.apache.thrift.protocol.TField("ngosp", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteJalob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteJalob_argsTupleSchemeFactory());
    }

    public int npasp; // required
    public int ngosp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp"),
      NGOSP((short)2, "ngosp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          case 2: // NGOSP
            return NGOSP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private static final int __NGOSP_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NGOSP, new org.apache.thrift.meta_data.FieldMetaData("ngosp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteJalob_args.class, metaDataMap);
    }

    public deleteJalob_args() {
    }

    public deleteJalob_args(
      int npasp,
      int ngosp)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
      this.ngosp = ngosp;
      setNgospIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteJalob_args(deleteJalob_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
      this.ngosp = other.ngosp;
    }

    public deleteJalob_args deepCopy() {
      return new deleteJalob_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
      setNgospIsSet(false);
      this.ngosp = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public deleteJalob_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public int getNgosp() {
      return this.ngosp;
    }

    public deleteJalob_args setNgosp(int ngosp) {
      this.ngosp = ngosp;
      setNgospIsSet(true);
      return this;
    }

    public void unsetNgosp() {
      __isset_bit_vector.clear(__NGOSP_ISSET_ID);
    }

    /** Returns true if field ngosp is set (has been assigned a value) and false otherwise */
    public boolean isSetNgosp() {
      return __isset_bit_vector.get(__NGOSP_ISSET_ID);
    }

    public void setNgospIsSet(boolean value) {
      __isset_bit_vector.set(__NGOSP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      case NGOSP:
        if (value == null) {
          unsetNgosp();
        } else {
          setNgosp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      case NGOSP:
        return Integer.valueOf(getNgosp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      case NGOSP:
        return isSetNgosp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteJalob_args)
        return this.equals((deleteJalob_args)that);
      return false;
    }

    public boolean equals(deleteJalob_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      boolean this_present_ngosp = true;
      boolean that_present_ngosp = true;
      if (this_present_ngosp || that_present_ngosp) {
        if (!(this_present_ngosp && that_present_ngosp))
          return false;
        if (this.ngosp != that.ngosp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteJalob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteJalob_args typedOther = (deleteJalob_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNgosp()).compareTo(typedOther.isSetNgosp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNgosp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ngosp, typedOther.ngosp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteJalob_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ngosp:");
      sb.append(this.ngosp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteJalob_argsStandardSchemeFactory implements SchemeFactory {
      public deleteJalob_argsStandardScheme getScheme() {
        return new deleteJalob_argsStandardScheme();
      }
    }

    private static class deleteJalob_argsStandardScheme extends StandardScheme<deleteJalob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteJalob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NGOSP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ngosp = iprot.readI32();
                struct.setNgospIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteJalob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NGOSP_FIELD_DESC);
        oprot.writeI32(struct.ngosp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteJalob_argsTupleSchemeFactory implements SchemeFactory {
      public deleteJalob_argsTupleScheme getScheme() {
        return new deleteJalob_argsTupleScheme();
      }
    }

    private static class deleteJalob_argsTupleScheme extends TupleScheme<deleteJalob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteJalob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        if (struct.isSetNgosp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
        if (struct.isSetNgosp()) {
          oprot.writeI32(struct.ngosp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteJalob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ngosp = iprot.readI32();
          struct.setNgospIsSet(true);
        }
      }
    }

  }

  public static class deleteJalob_result implements org.apache.thrift.TBase<deleteJalob_result, deleteJalob_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteJalob_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteJalob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteJalob_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteJalob_result.class, metaDataMap);
    }

    public deleteJalob_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteJalob_result(deleteJalob_result other) {
    }

    public deleteJalob_result deepCopy() {
      return new deleteJalob_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteJalob_result)
        return this.equals((deleteJalob_result)that);
      return false;
    }

    public boolean equals(deleteJalob_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteJalob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteJalob_result typedOther = (deleteJalob_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteJalob_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteJalob_resultStandardSchemeFactory implements SchemeFactory {
      public deleteJalob_resultStandardScheme getScheme() {
        return new deleteJalob_resultStandardScheme();
      }
    }

    private static class deleteJalob_resultStandardScheme extends StandardScheme<deleteJalob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteJalob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteJalob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteJalob_resultTupleSchemeFactory implements SchemeFactory {
      public deleteJalob_resultTupleScheme getScheme() {
        return new deleteJalob_resultTupleScheme();
      }
    }

    private static class deleteJalob_resultTupleScheme extends TupleScheme<deleteJalob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteJalob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteJalob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteGosp_args implements org.apache.thrift.TBase<deleteGosp_args, deleteGosp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteGosp_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NGOSP_FIELD_DESC = new org.apache.thrift.protocol.TField("ngosp", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteGosp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteGosp_argsTupleSchemeFactory());
    }

    public int npasp; // required
    public int ngosp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp"),
      NGOSP((short)2, "ngosp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          case 2: // NGOSP
            return NGOSP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private static final int __NGOSP_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NGOSP, new org.apache.thrift.meta_data.FieldMetaData("ngosp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteGosp_args.class, metaDataMap);
    }

    public deleteGosp_args() {
    }

    public deleteGosp_args(
      int npasp,
      int ngosp)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
      this.ngosp = ngosp;
      setNgospIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteGosp_args(deleteGosp_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
      this.ngosp = other.ngosp;
    }

    public deleteGosp_args deepCopy() {
      return new deleteGosp_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
      setNgospIsSet(false);
      this.ngosp = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public deleteGosp_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public int getNgosp() {
      return this.ngosp;
    }

    public deleteGosp_args setNgosp(int ngosp) {
      this.ngosp = ngosp;
      setNgospIsSet(true);
      return this;
    }

    public void unsetNgosp() {
      __isset_bit_vector.clear(__NGOSP_ISSET_ID);
    }

    /** Returns true if field ngosp is set (has been assigned a value) and false otherwise */
    public boolean isSetNgosp() {
      return __isset_bit_vector.get(__NGOSP_ISSET_ID);
    }

    public void setNgospIsSet(boolean value) {
      __isset_bit_vector.set(__NGOSP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      case NGOSP:
        if (value == null) {
          unsetNgosp();
        } else {
          setNgosp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      case NGOSP:
        return Integer.valueOf(getNgosp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      case NGOSP:
        return isSetNgosp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteGosp_args)
        return this.equals((deleteGosp_args)that);
      return false;
    }

    public boolean equals(deleteGosp_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      boolean this_present_ngosp = true;
      boolean that_present_ngosp = true;
      if (this_present_ngosp || that_present_ngosp) {
        if (!(this_present_ngosp && that_present_ngosp))
          return false;
        if (this.ngosp != that.ngosp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteGosp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteGosp_args typedOther = (deleteGosp_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNgosp()).compareTo(typedOther.isSetNgosp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNgosp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ngosp, typedOther.ngosp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteGosp_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ngosp:");
      sb.append(this.ngosp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteGosp_argsStandardSchemeFactory implements SchemeFactory {
      public deleteGosp_argsStandardScheme getScheme() {
        return new deleteGosp_argsStandardScheme();
      }
    }

    private static class deleteGosp_argsStandardScheme extends StandardScheme<deleteGosp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteGosp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NGOSP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ngosp = iprot.readI32();
                struct.setNgospIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteGosp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NGOSP_FIELD_DESC);
        oprot.writeI32(struct.ngosp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteGosp_argsTupleSchemeFactory implements SchemeFactory {
      public deleteGosp_argsTupleScheme getScheme() {
        return new deleteGosp_argsTupleScheme();
      }
    }

    private static class deleteGosp_argsTupleScheme extends TupleScheme<deleteGosp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteGosp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        if (struct.isSetNgosp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
        if (struct.isSetNgosp()) {
          oprot.writeI32(struct.ngosp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteGosp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ngosp = iprot.readI32();
          struct.setNgospIsSet(true);
        }
      }
    }

  }

  public static class deleteGosp_result implements org.apache.thrift.TBase<deleteGosp_result, deleteGosp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteGosp_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteGosp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteGosp_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteGosp_result.class, metaDataMap);
    }

    public deleteGosp_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteGosp_result(deleteGosp_result other) {
    }

    public deleteGosp_result deepCopy() {
      return new deleteGosp_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteGosp_result)
        return this.equals((deleteGosp_result)that);
      return false;
    }

    public boolean equals(deleteGosp_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteGosp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteGosp_result typedOther = (deleteGosp_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteGosp_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteGosp_resultStandardSchemeFactory implements SchemeFactory {
      public deleteGosp_resultStandardScheme getScheme() {
        return new deleteGosp_resultStandardScheme();
      }
    }

    private static class deleteGosp_resultStandardScheme extends StandardScheme<deleteGosp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteGosp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteGosp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteGosp_resultTupleSchemeFactory implements SchemeFactory {
      public deleteGosp_resultTupleScheme getScheme() {
        return new deleteGosp_resultTupleScheme();
      }
    }

    private static class deleteGosp_resultTupleScheme extends TupleScheme<deleteGosp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteGosp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteGosp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updatePatient_args implements org.apache.thrift.TBase<updatePatient_args, updatePatient_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePatient_args");

    private static final org.apache.thrift.protocol.TField PATINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("patinfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePatient_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePatient_argsTupleSchemeFactory());
    }

    public PatientFullInfo patinfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATINFO((short)1, "patinfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATINFO
            return PATINFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATINFO, new org.apache.thrift.meta_data.FieldMetaData("patinfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientFullInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePatient_args.class, metaDataMap);
    }

    public updatePatient_args() {
    }

    public updatePatient_args(
      PatientFullInfo patinfo)
    {
      this();
      this.patinfo = patinfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePatient_args(updatePatient_args other) {
      if (other.isSetPatinfo()) {
        this.patinfo = new PatientFullInfo(other.patinfo);
      }
    }

    public updatePatient_args deepCopy() {
      return new updatePatient_args(this);
    }

    @Override
    public void clear() {
      this.patinfo = null;
    }

    public PatientFullInfo getPatinfo() {
      return this.patinfo;
    }

    public updatePatient_args setPatinfo(PatientFullInfo patinfo) {
      this.patinfo = patinfo;
      return this;
    }

    public void unsetPatinfo() {
      this.patinfo = null;
    }

    /** Returns true if field patinfo is set (has been assigned a value) and false otherwise */
    public boolean isSetPatinfo() {
      return this.patinfo != null;
    }

    public void setPatinfoIsSet(boolean value) {
      if (!value) {
        this.patinfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATINFO:
        if (value == null) {
          unsetPatinfo();
        } else {
          setPatinfo((PatientFullInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATINFO:
        return getPatinfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATINFO:
        return isSetPatinfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePatient_args)
        return this.equals((updatePatient_args)that);
      return false;
    }

    public boolean equals(updatePatient_args that) {
      if (that == null)
        return false;

      boolean this_present_patinfo = true && this.isSetPatinfo();
      boolean that_present_patinfo = true && that.isSetPatinfo();
      if (this_present_patinfo || that_present_patinfo) {
        if (!(this_present_patinfo && that_present_patinfo))
          return false;
        if (!this.patinfo.equals(that.patinfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updatePatient_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updatePatient_args typedOther = (updatePatient_args)other;

      lastComparison = Boolean.valueOf(isSetPatinfo()).compareTo(typedOther.isSetPatinfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPatinfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patinfo, typedOther.patinfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePatient_args(");
      boolean first = true;

      sb.append("patinfo:");
      if (this.patinfo == null) {
        sb.append("null");
      } else {
        sb.append(this.patinfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePatient_argsStandardSchemeFactory implements SchemeFactory {
      public updatePatient_argsStandardScheme getScheme() {
        return new updatePatient_argsStandardScheme();
      }
    }

    private static class updatePatient_argsStandardScheme extends StandardScheme<updatePatient_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePatient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATINFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.patinfo = new PatientFullInfo();
                struct.patinfo.read(iprot);
                struct.setPatinfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePatient_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.patinfo != null) {
          oprot.writeFieldBegin(PATINFO_FIELD_DESC);
          struct.patinfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePatient_argsTupleSchemeFactory implements SchemeFactory {
      public updatePatient_argsTupleScheme getScheme() {
        return new updatePatient_argsTupleScheme();
      }
    }

    private static class updatePatient_argsTupleScheme extends TupleScheme<updatePatient_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePatient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPatinfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPatinfo()) {
          struct.patinfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePatient_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.patinfo = new PatientFullInfo();
          struct.patinfo.read(iprot);
          struct.setPatinfoIsSet(true);
        }
      }
    }

  }

  public static class updatePatient_result implements org.apache.thrift.TBase<updatePatient_result, updatePatient_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePatient_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePatient_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePatient_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePatient_result.class, metaDataMap);
    }

    public updatePatient_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePatient_result(updatePatient_result other) {
    }

    public updatePatient_result deepCopy() {
      return new updatePatient_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePatient_result)
        return this.equals((updatePatient_result)that);
      return false;
    }

    public boolean equals(updatePatient_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updatePatient_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updatePatient_result typedOther = (updatePatient_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePatient_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePatient_resultStandardSchemeFactory implements SchemeFactory {
      public updatePatient_resultStandardScheme getScheme() {
        return new updatePatient_resultStandardScheme();
      }
    }

    private static class updatePatient_resultStandardScheme extends StandardScheme<updatePatient_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePatient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePatient_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePatient_resultTupleSchemeFactory implements SchemeFactory {
      public updatePatient_resultTupleScheme getScheme() {
        return new updatePatient_resultTupleScheme();
      }
    }

    private static class updatePatient_resultTupleScheme extends TupleScheme<updatePatient_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePatient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePatient_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateNambk_args implements org.apache.thrift.TBase<updateNambk_args, updateNambk_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNambk_args");

    private static final org.apache.thrift.protocol.TField NAMBK_FIELD_DESC = new org.apache.thrift.protocol.TField("nambk", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateNambk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateNambk_argsTupleSchemeFactory());
    }

    public PatientNambk nambk; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAMBK((short)1, "nambk");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAMBK
            return NAMBK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAMBK, new org.apache.thrift.meta_data.FieldMetaData("nambk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientNambk.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNambk_args.class, metaDataMap);
    }

    public updateNambk_args() {
    }

    public updateNambk_args(
      PatientNambk nambk)
    {
      this();
      this.nambk = nambk;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNambk_args(updateNambk_args other) {
      if (other.isSetNambk()) {
        this.nambk = new PatientNambk(other.nambk);
      }
    }

    public updateNambk_args deepCopy() {
      return new updateNambk_args(this);
    }

    @Override
    public void clear() {
      this.nambk = null;
    }

    public PatientNambk getNambk() {
      return this.nambk;
    }

    public updateNambk_args setNambk(PatientNambk nambk) {
      this.nambk = nambk;
      return this;
    }

    public void unsetNambk() {
      this.nambk = null;
    }

    /** Returns true if field nambk is set (has been assigned a value) and false otherwise */
    public boolean isSetNambk() {
      return this.nambk != null;
    }

    public void setNambkIsSet(boolean value) {
      if (!value) {
        this.nambk = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAMBK:
        if (value == null) {
          unsetNambk();
        } else {
          setNambk((PatientNambk)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAMBK:
        return getNambk();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAMBK:
        return isSetNambk();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNambk_args)
        return this.equals((updateNambk_args)that);
      return false;
    }

    public boolean equals(updateNambk_args that) {
      if (that == null)
        return false;

      boolean this_present_nambk = true && this.isSetNambk();
      boolean that_present_nambk = true && that.isSetNambk();
      if (this_present_nambk || that_present_nambk) {
        if (!(this_present_nambk && that_present_nambk))
          return false;
        if (!this.nambk.equals(that.nambk))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateNambk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateNambk_args typedOther = (updateNambk_args)other;

      lastComparison = Boolean.valueOf(isSetNambk()).compareTo(typedOther.isSetNambk());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNambk()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nambk, typedOther.nambk);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateNambk_args(");
      boolean first = true;

      sb.append("nambk:");
      if (this.nambk == null) {
        sb.append("null");
      } else {
        sb.append(this.nambk);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNambk_argsStandardSchemeFactory implements SchemeFactory {
      public updateNambk_argsStandardScheme getScheme() {
        return new updateNambk_argsStandardScheme();
      }
    }

    private static class updateNambk_argsStandardScheme extends StandardScheme<updateNambk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNambk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAMBK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nambk = new PatientNambk();
                struct.nambk.read(iprot);
                struct.setNambkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNambk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nambk != null) {
          oprot.writeFieldBegin(NAMBK_FIELD_DESC);
          struct.nambk.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNambk_argsTupleSchemeFactory implements SchemeFactory {
      public updateNambk_argsTupleScheme getScheme() {
        return new updateNambk_argsTupleScheme();
      }
    }

    private static class updateNambk_argsTupleScheme extends TupleScheme<updateNambk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNambk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNambk()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNambk()) {
          struct.nambk.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNambk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nambk = new PatientNambk();
          struct.nambk.read(iprot);
          struct.setNambkIsSet(true);
        }
      }
    }

  }

  public static class updateNambk_result implements org.apache.thrift.TBase<updateNambk_result, updateNambk_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNambk_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateNambk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateNambk_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNambk_result.class, metaDataMap);
    }

    public updateNambk_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNambk_result(updateNambk_result other) {
    }

    public updateNambk_result deepCopy() {
      return new updateNambk_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNambk_result)
        return this.equals((updateNambk_result)that);
      return false;
    }

    public boolean equals(updateNambk_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateNambk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateNambk_result typedOther = (updateNambk_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateNambk_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNambk_resultStandardSchemeFactory implements SchemeFactory {
      public updateNambk_resultStandardScheme getScheme() {
        return new updateNambk_resultStandardScheme();
      }
    }

    private static class updateNambk_resultStandardScheme extends StandardScheme<updateNambk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNambk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNambk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNambk_resultTupleSchemeFactory implements SchemeFactory {
      public updateNambk_resultTupleScheme getScheme() {
        return new updateNambk_resultTupleScheme();
      }
    }

    private static class updateNambk_resultTupleScheme extends TupleScheme<updateNambk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNambk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNambk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateLgota_args implements org.apache.thrift.TBase<updateLgota_args, updateLgota_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLgota_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LGOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("lgota", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLgota_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLgota_argsTupleSchemeFactory());
    }

    public int npasp; // required
    public int lgota; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp"),
      LGOTA((short)2, "lgota");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          case 2: // LGOTA
            return LGOTA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private static final int __LGOTA_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LGOTA, new org.apache.thrift.meta_data.FieldMetaData("lgota", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLgota_args.class, metaDataMap);
    }

    public updateLgota_args() {
    }

    public updateLgota_args(
      int npasp,
      int lgota)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
      this.lgota = lgota;
      setLgotaIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLgota_args(updateLgota_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
      this.lgota = other.lgota;
    }

    public updateLgota_args deepCopy() {
      return new updateLgota_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
      setLgotaIsSet(false);
      this.lgota = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public updateLgota_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public int getLgota() {
      return this.lgota;
    }

    public updateLgota_args setLgota(int lgota) {
      this.lgota = lgota;
      setLgotaIsSet(true);
      return this;
    }

    public void unsetLgota() {
      __isset_bit_vector.clear(__LGOTA_ISSET_ID);
    }

    /** Returns true if field lgota is set (has been assigned a value) and false otherwise */
    public boolean isSetLgota() {
      return __isset_bit_vector.get(__LGOTA_ISSET_ID);
    }

    public void setLgotaIsSet(boolean value) {
      __isset_bit_vector.set(__LGOTA_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      case LGOTA:
        if (value == null) {
          unsetLgota();
        } else {
          setLgota((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      case LGOTA:
        return Integer.valueOf(getLgota());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      case LGOTA:
        return isSetLgota();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLgota_args)
        return this.equals((updateLgota_args)that);
      return false;
    }

    public boolean equals(updateLgota_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      boolean this_present_lgota = true;
      boolean that_present_lgota = true;
      if (this_present_lgota || that_present_lgota) {
        if (!(this_present_lgota && that_present_lgota))
          return false;
        if (this.lgota != that.lgota)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateLgota_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateLgota_args typedOther = (updateLgota_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLgota()).compareTo(typedOther.isSetLgota());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLgota()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lgota, typedOther.lgota);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLgota_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lgota:");
      sb.append(this.lgota);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLgota_argsStandardSchemeFactory implements SchemeFactory {
      public updateLgota_argsStandardScheme getScheme() {
        return new updateLgota_argsStandardScheme();
      }
    }

    private static class updateLgota_argsStandardScheme extends StandardScheme<updateLgota_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLgota_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LGOTA
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lgota = iprot.readI32();
                struct.setLgotaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLgota_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LGOTA_FIELD_DESC);
        oprot.writeI32(struct.lgota);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLgota_argsTupleSchemeFactory implements SchemeFactory {
      public updateLgota_argsTupleScheme getScheme() {
        return new updateLgota_argsTupleScheme();
      }
    }

    private static class updateLgota_argsTupleScheme extends TupleScheme<updateLgota_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLgota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        if (struct.isSetLgota()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
        if (struct.isSetLgota()) {
          oprot.writeI32(struct.lgota);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLgota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lgota = iprot.readI32();
          struct.setLgotaIsSet(true);
        }
      }
    }

  }

  public static class updateLgota_result implements org.apache.thrift.TBase<updateLgota_result, updateLgota_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateLgota_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateLgota_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateLgota_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateLgota_result.class, metaDataMap);
    }

    public updateLgota_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLgota_result(updateLgota_result other) {
    }

    public updateLgota_result deepCopy() {
      return new updateLgota_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLgota_result)
        return this.equals((updateLgota_result)that);
      return false;
    }

    public boolean equals(updateLgota_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateLgota_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateLgota_result typedOther = (updateLgota_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateLgota_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateLgota_resultStandardSchemeFactory implements SchemeFactory {
      public updateLgota_resultStandardScheme getScheme() {
        return new updateLgota_resultStandardScheme();
      }
    }

    private static class updateLgota_resultStandardScheme extends StandardScheme<updateLgota_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateLgota_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateLgota_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateLgota_resultTupleSchemeFactory implements SchemeFactory {
      public updateLgota_resultTupleScheme getScheme() {
        return new updateLgota_resultTupleScheme();
      }
    }

    private static class updateLgota_resultTupleScheme extends TupleScheme<updateLgota_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateLgota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateLgota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateKont_args implements org.apache.thrift.TBase<updateKont_args, updateKont_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateKont_args");

    private static final org.apache.thrift.protocol.TField NPASP_FIELD_DESC = new org.apache.thrift.protocol.TField("npasp", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField KATEG_FIELD_DESC = new org.apache.thrift.protocol.TField("kateg", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateKont_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateKont_argsTupleSchemeFactory());
    }

    public int npasp; // required
    public int kateg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NPASP((short)1, "npasp"),
      KATEG((short)2, "kateg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NPASP
            return NPASP;
          case 2: // KATEG
            return KATEG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NPASP_ISSET_ID = 0;
    private static final int __KATEG_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NPASP, new org.apache.thrift.meta_data.FieldMetaData("npasp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KATEG, new org.apache.thrift.meta_data.FieldMetaData("kateg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateKont_args.class, metaDataMap);
    }

    public updateKont_args() {
    }

    public updateKont_args(
      int npasp,
      int kateg)
    {
      this();
      this.npasp = npasp;
      setNpaspIsSet(true);
      this.kateg = kateg;
      setKategIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateKont_args(updateKont_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.npasp = other.npasp;
      this.kateg = other.kateg;
    }

    public updateKont_args deepCopy() {
      return new updateKont_args(this);
    }

    @Override
    public void clear() {
      setNpaspIsSet(false);
      this.npasp = 0;
      setKategIsSet(false);
      this.kateg = 0;
    }

    public int getNpasp() {
      return this.npasp;
    }

    public updateKont_args setNpasp(int npasp) {
      this.npasp = npasp;
      setNpaspIsSet(true);
      return this;
    }

    public void unsetNpasp() {
      __isset_bit_vector.clear(__NPASP_ISSET_ID);
    }

    /** Returns true if field npasp is set (has been assigned a value) and false otherwise */
    public boolean isSetNpasp() {
      return __isset_bit_vector.get(__NPASP_ISSET_ID);
    }

    public void setNpaspIsSet(boolean value) {
      __isset_bit_vector.set(__NPASP_ISSET_ID, value);
    }

    public int getKateg() {
      return this.kateg;
    }

    public updateKont_args setKateg(int kateg) {
      this.kateg = kateg;
      setKategIsSet(true);
      return this;
    }

    public void unsetKateg() {
      __isset_bit_vector.clear(__KATEG_ISSET_ID);
    }

    /** Returns true if field kateg is set (has been assigned a value) and false otherwise */
    public boolean isSetKateg() {
      return __isset_bit_vector.get(__KATEG_ISSET_ID);
    }

    public void setKategIsSet(boolean value) {
      __isset_bit_vector.set(__KATEG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NPASP:
        if (value == null) {
          unsetNpasp();
        } else {
          setNpasp((Integer)value);
        }
        break;

      case KATEG:
        if (value == null) {
          unsetKateg();
        } else {
          setKateg((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NPASP:
        return Integer.valueOf(getNpasp());

      case KATEG:
        return Integer.valueOf(getKateg());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NPASP:
        return isSetNpasp();
      case KATEG:
        return isSetKateg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateKont_args)
        return this.equals((updateKont_args)that);
      return false;
    }

    public boolean equals(updateKont_args that) {
      if (that == null)
        return false;

      boolean this_present_npasp = true;
      boolean that_present_npasp = true;
      if (this_present_npasp || that_present_npasp) {
        if (!(this_present_npasp && that_present_npasp))
          return false;
        if (this.npasp != that.npasp)
          return false;
      }

      boolean this_present_kateg = true;
      boolean that_present_kateg = true;
      if (this_present_kateg || that_present_kateg) {
        if (!(this_present_kateg && that_present_kateg))
          return false;
        if (this.kateg != that.kateg)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateKont_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateKont_args typedOther = (updateKont_args)other;

      lastComparison = Boolean.valueOf(isSetNpasp()).compareTo(typedOther.isSetNpasp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNpasp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.npasp, typedOther.npasp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKateg()).compareTo(typedOther.isSetKateg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKateg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kateg, typedOther.kateg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateKont_args(");
      boolean first = true;

      sb.append("npasp:");
      sb.append(this.npasp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("kateg:");
      sb.append(this.kateg);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateKont_argsStandardSchemeFactory implements SchemeFactory {
      public updateKont_argsStandardScheme getScheme() {
        return new updateKont_argsStandardScheme();
      }
    }

    private static class updateKont_argsStandardScheme extends StandardScheme<updateKont_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateKont_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NPASP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.npasp = iprot.readI32();
                struct.setNpaspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KATEG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.kateg = iprot.readI32();
                struct.setKategIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateKont_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NPASP_FIELD_DESC);
        oprot.writeI32(struct.npasp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(KATEG_FIELD_DESC);
        oprot.writeI32(struct.kateg);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateKont_argsTupleSchemeFactory implements SchemeFactory {
      public updateKont_argsTupleScheme getScheme() {
        return new updateKont_argsTupleScheme();
      }
    }

    private static class updateKont_argsTupleScheme extends TupleScheme<updateKont_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateKont_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNpasp()) {
          optionals.set(0);
        }
        if (struct.isSetKateg()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNpasp()) {
          oprot.writeI32(struct.npasp);
        }
        if (struct.isSetKateg()) {
          oprot.writeI32(struct.kateg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateKont_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.npasp = iprot.readI32();
          struct.setNpaspIsSet(true);
        }
        if (incoming.get(1)) {
          struct.kateg = iprot.readI32();
          struct.setKategIsSet(true);
        }
      }
    }

  }

  public static class updateKont_result implements org.apache.thrift.TBase<updateKont_result, updateKont_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateKont_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateKont_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateKont_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateKont_result.class, metaDataMap);
    }

    public updateKont_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateKont_result(updateKont_result other) {
    }

    public updateKont_result deepCopy() {
      return new updateKont_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateKont_result)
        return this.equals((updateKont_result)that);
      return false;
    }

    public boolean equals(updateKont_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateKont_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateKont_result typedOther = (updateKont_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateKont_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateKont_resultStandardSchemeFactory implements SchemeFactory {
      public updateKont_resultStandardScheme getScheme() {
        return new updateKont_resultStandardScheme();
      }
    }

    private static class updateKont_resultStandardScheme extends StandardScheme<updateKont_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateKont_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateKont_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateKont_resultTupleSchemeFactory implements SchemeFactory {
      public updateKont_resultTupleScheme getScheme() {
        return new updateKont_resultTupleScheme();
      }
    }

    private static class updateKont_resultTupleScheme extends TupleScheme<updateKont_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateKont_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateKont_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateAgent_args implements org.apache.thrift.TBase<updateAgent_args, updateAgent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAgent_args");

    private static final org.apache.thrift.protocol.TField AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("agent", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAgent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAgent_argsTupleSchemeFactory());
    }

    public PatientAgent agent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AGENT((short)1, "agent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AGENT
            return AGENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AGENT, new org.apache.thrift.meta_data.FieldMetaData("agent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientAgent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAgent_args.class, metaDataMap);
    }

    public updateAgent_args() {
    }

    public updateAgent_args(
      PatientAgent agent)
    {
      this();
      this.agent = agent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAgent_args(updateAgent_args other) {
      if (other.isSetAgent()) {
        this.agent = new PatientAgent(other.agent);
      }
    }

    public updateAgent_args deepCopy() {
      return new updateAgent_args(this);
    }

    @Override
    public void clear() {
      this.agent = null;
    }

    public PatientAgent getAgent() {
      return this.agent;
    }

    public updateAgent_args setAgent(PatientAgent agent) {
      this.agent = agent;
      return this;
    }

    public void unsetAgent() {
      this.agent = null;
    }

    /** Returns true if field agent is set (has been assigned a value) and false otherwise */
    public boolean isSetAgent() {
      return this.agent != null;
    }

    public void setAgentIsSet(boolean value) {
      if (!value) {
        this.agent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AGENT:
        if (value == null) {
          unsetAgent();
        } else {
          setAgent((PatientAgent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AGENT:
        return getAgent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AGENT:
        return isSetAgent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAgent_args)
        return this.equals((updateAgent_args)that);
      return false;
    }

    public boolean equals(updateAgent_args that) {
      if (that == null)
        return false;

      boolean this_present_agent = true && this.isSetAgent();
      boolean that_present_agent = true && that.isSetAgent();
      if (this_present_agent || that_present_agent) {
        if (!(this_present_agent && that_present_agent))
          return false;
        if (!this.agent.equals(that.agent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateAgent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateAgent_args typedOther = (updateAgent_args)other;

      lastComparison = Boolean.valueOf(isSetAgent()).compareTo(typedOther.isSetAgent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agent, typedOther.agent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAgent_args(");
      boolean first = true;

      sb.append("agent:");
      if (this.agent == null) {
        sb.append("null");
      } else {
        sb.append(this.agent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAgent_argsStandardSchemeFactory implements SchemeFactory {
      public updateAgent_argsStandardScheme getScheme() {
        return new updateAgent_argsStandardScheme();
      }
    }

    private static class updateAgent_argsStandardScheme extends StandardScheme<updateAgent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAgent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AGENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.agent = new PatientAgent();
                struct.agent.read(iprot);
                struct.setAgentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAgent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.agent != null) {
          oprot.writeFieldBegin(AGENT_FIELD_DESC);
          struct.agent.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAgent_argsTupleSchemeFactory implements SchemeFactory {
      public updateAgent_argsTupleScheme getScheme() {
        return new updateAgent_argsTupleScheme();
      }
    }

    private static class updateAgent_argsTupleScheme extends TupleScheme<updateAgent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAgent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAgent()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAgent()) {
          struct.agent.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAgent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.agent = new PatientAgent();
          struct.agent.read(iprot);
          struct.setAgentIsSet(true);
        }
      }
    }

  }

  public static class updateAgent_result implements org.apache.thrift.TBase<updateAgent_result, updateAgent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAgent_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAgent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAgent_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAgent_result.class, metaDataMap);
    }

    public updateAgent_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAgent_result(updateAgent_result other) {
    }

    public updateAgent_result deepCopy() {
      return new updateAgent_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAgent_result)
        return this.equals((updateAgent_result)that);
      return false;
    }

    public boolean equals(updateAgent_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateAgent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateAgent_result typedOther = (updateAgent_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAgent_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAgent_resultStandardSchemeFactory implements SchemeFactory {
      public updateAgent_resultStandardScheme getScheme() {
        return new updateAgent_resultStandardScheme();
      }
    }

    private static class updateAgent_resultStandardScheme extends StandardScheme<updateAgent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAgent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAgent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAgent_resultTupleSchemeFactory implements SchemeFactory {
      public updateAgent_resultTupleScheme getScheme() {
        return new updateAgent_resultTupleScheme();
      }
    }

    private static class updateAgent_resultTupleScheme extends TupleScheme<updateAgent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAgent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAgent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateSign_args implements org.apache.thrift.TBase<updateSign_args, updateSign_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSign_args");

    private static final org.apache.thrift.protocol.TField SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("sign", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSign_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSign_argsTupleSchemeFactory());
    }

    public PatientSign sign; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIGN((short)1, "sign");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIGN
            return SIGN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIGN, new org.apache.thrift.meta_data.FieldMetaData("sign", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientSign.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSign_args.class, metaDataMap);
    }

    public updateSign_args() {
    }

    public updateSign_args(
      PatientSign sign)
    {
      this();
      this.sign = sign;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSign_args(updateSign_args other) {
      if (other.isSetSign()) {
        this.sign = new PatientSign(other.sign);
      }
    }

    public updateSign_args deepCopy() {
      return new updateSign_args(this);
    }

    @Override
    public void clear() {
      this.sign = null;
    }

    public PatientSign getSign() {
      return this.sign;
    }

    public updateSign_args setSign(PatientSign sign) {
      this.sign = sign;
      return this;
    }

    public void unsetSign() {
      this.sign = null;
    }

    /** Returns true if field sign is set (has been assigned a value) and false otherwise */
    public boolean isSetSign() {
      return this.sign != null;
    }

    public void setSignIsSet(boolean value) {
      if (!value) {
        this.sign = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIGN:
        if (value == null) {
          unsetSign();
        } else {
          setSign((PatientSign)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIGN:
        return getSign();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIGN:
        return isSetSign();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSign_args)
        return this.equals((updateSign_args)that);
      return false;
    }

    public boolean equals(updateSign_args that) {
      if (that == null)
        return false;

      boolean this_present_sign = true && this.isSetSign();
      boolean that_present_sign = true && that.isSetSign();
      if (this_present_sign || that_present_sign) {
        if (!(this_present_sign && that_present_sign))
          return false;
        if (!this.sign.equals(that.sign))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateSign_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateSign_args typedOther = (updateSign_args)other;

      lastComparison = Boolean.valueOf(isSetSign()).compareTo(typedOther.isSetSign());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSign()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sign, typedOther.sign);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSign_args(");
      boolean first = true;

      sb.append("sign:");
      if (this.sign == null) {
        sb.append("null");
      } else {
        sb.append(this.sign);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSign_argsStandardSchemeFactory implements SchemeFactory {
      public updateSign_argsStandardScheme getScheme() {
        return new updateSign_argsStandardScheme();
      }
    }

    private static class updateSign_argsStandardScheme extends StandardScheme<updateSign_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIGN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sign = new PatientSign();
                struct.sign.read(iprot);
                struct.setSignIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSign_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sign != null) {
          oprot.writeFieldBegin(SIGN_FIELD_DESC);
          struct.sign.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSign_argsTupleSchemeFactory implements SchemeFactory {
      public updateSign_argsTupleScheme getScheme() {
        return new updateSign_argsTupleScheme();
      }
    }

    private static class updateSign_argsTupleScheme extends TupleScheme<updateSign_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSign()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSign()) {
          struct.sign.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sign = new PatientSign();
          struct.sign.read(iprot);
          struct.setSignIsSet(true);
        }
      }
    }

  }

  public static class updateSign_result implements org.apache.thrift.TBase<updateSign_result, updateSign_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSign_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSign_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSign_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSign_result.class, metaDataMap);
    }

    public updateSign_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSign_result(updateSign_result other) {
    }

    public updateSign_result deepCopy() {
      return new updateSign_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSign_result)
        return this.equals((updateSign_result)that);
      return false;
    }

    public boolean equals(updateSign_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateSign_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateSign_result typedOther = (updateSign_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSign_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSign_resultStandardSchemeFactory implements SchemeFactory {
      public updateSign_resultStandardScheme getScheme() {
        return new updateSign_resultStandardScheme();
      }
    }

    private static class updateSign_resultStandardScheme extends StandardScheme<updateSign_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSign_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSign_resultTupleSchemeFactory implements SchemeFactory {
      public updateSign_resultTupleScheme getScheme() {
        return new updateSign_resultTupleScheme();
      }
    }

    private static class updateSign_resultTupleScheme extends TupleScheme<updateSign_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateJalob_args implements org.apache.thrift.TBase<updateJalob_args, updateJalob_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateJalob_args");

    private static final org.apache.thrift.protocol.TField JALOB_FIELD_DESC = new org.apache.thrift.protocol.TField("jalob", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateJalob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateJalob_argsTupleSchemeFactory());
    }

    public PatientJalob jalob; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JALOB((short)1, "jalob");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JALOB
            return JALOB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JALOB, new org.apache.thrift.meta_data.FieldMetaData("jalob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientJalob.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateJalob_args.class, metaDataMap);
    }

    public updateJalob_args() {
    }

    public updateJalob_args(
      PatientJalob jalob)
    {
      this();
      this.jalob = jalob;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateJalob_args(updateJalob_args other) {
      if (other.isSetJalob()) {
        this.jalob = new PatientJalob(other.jalob);
      }
    }

    public updateJalob_args deepCopy() {
      return new updateJalob_args(this);
    }

    @Override
    public void clear() {
      this.jalob = null;
    }

    public PatientJalob getJalob() {
      return this.jalob;
    }

    public updateJalob_args setJalob(PatientJalob jalob) {
      this.jalob = jalob;
      return this;
    }

    public void unsetJalob() {
      this.jalob = null;
    }

    /** Returns true if field jalob is set (has been assigned a value) and false otherwise */
    public boolean isSetJalob() {
      return this.jalob != null;
    }

    public void setJalobIsSet(boolean value) {
      if (!value) {
        this.jalob = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JALOB:
        if (value == null) {
          unsetJalob();
        } else {
          setJalob((PatientJalob)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JALOB:
        return getJalob();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JALOB:
        return isSetJalob();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateJalob_args)
        return this.equals((updateJalob_args)that);
      return false;
    }

    public boolean equals(updateJalob_args that) {
      if (that == null)
        return false;

      boolean this_present_jalob = true && this.isSetJalob();
      boolean that_present_jalob = true && that.isSetJalob();
      if (this_present_jalob || that_present_jalob) {
        if (!(this_present_jalob && that_present_jalob))
          return false;
        if (!this.jalob.equals(that.jalob))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateJalob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateJalob_args typedOther = (updateJalob_args)other;

      lastComparison = Boolean.valueOf(isSetJalob()).compareTo(typedOther.isSetJalob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJalob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jalob, typedOther.jalob);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateJalob_args(");
      boolean first = true;

      sb.append("jalob:");
      if (this.jalob == null) {
        sb.append("null");
      } else {
        sb.append(this.jalob);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateJalob_argsStandardSchemeFactory implements SchemeFactory {
      public updateJalob_argsStandardScheme getScheme() {
        return new updateJalob_argsStandardScheme();
      }
    }

    private static class updateJalob_argsStandardScheme extends StandardScheme<updateJalob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateJalob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JALOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jalob = new PatientJalob();
                struct.jalob.read(iprot);
                struct.setJalobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateJalob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jalob != null) {
          oprot.writeFieldBegin(JALOB_FIELD_DESC);
          struct.jalob.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateJalob_argsTupleSchemeFactory implements SchemeFactory {
      public updateJalob_argsTupleScheme getScheme() {
        return new updateJalob_argsTupleScheme();
      }
    }

    private static class updateJalob_argsTupleScheme extends TupleScheme<updateJalob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateJalob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJalob()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJalob()) {
          struct.jalob.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateJalob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jalob = new PatientJalob();
          struct.jalob.read(iprot);
          struct.setJalobIsSet(true);
        }
      }
    }

  }

  public static class updateJalob_result implements org.apache.thrift.TBase<updateJalob_result, updateJalob_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateJalob_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateJalob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateJalob_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateJalob_result.class, metaDataMap);
    }

    public updateJalob_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateJalob_result(updateJalob_result other) {
    }

    public updateJalob_result deepCopy() {
      return new updateJalob_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateJalob_result)
        return this.equals((updateJalob_result)that);
      return false;
    }

    public boolean equals(updateJalob_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateJalob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateJalob_result typedOther = (updateJalob_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateJalob_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateJalob_resultStandardSchemeFactory implements SchemeFactory {
      public updateJalob_resultStandardScheme getScheme() {
        return new updateJalob_resultStandardScheme();
      }
    }

    private static class updateJalob_resultStandardScheme extends StandardScheme<updateJalob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateJalob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateJalob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateJalob_resultTupleSchemeFactory implements SchemeFactory {
      public updateJalob_resultTupleScheme getScheme() {
        return new updateJalob_resultTupleScheme();
      }
    }

    private static class updateJalob_resultTupleScheme extends TupleScheme<updateJalob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateJalob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateJalob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateGosp_args implements org.apache.thrift.TBase<updateGosp_args, updateGosp_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGosp_args");

    private static final org.apache.thrift.protocol.TField GOSP_FIELD_DESC = new org.apache.thrift.protocol.TField("gosp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGosp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGosp_argsTupleSchemeFactory());
    }

    public PatientGosp gosp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GOSP((short)1, "gosp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GOSP
            return GOSP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GOSP, new org.apache.thrift.meta_data.FieldMetaData("gosp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatientGosp.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGosp_args.class, metaDataMap);
    }

    public updateGosp_args() {
    }

    public updateGosp_args(
      PatientGosp gosp)
    {
      this();
      this.gosp = gosp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGosp_args(updateGosp_args other) {
      if (other.isSetGosp()) {
        this.gosp = new PatientGosp(other.gosp);
      }
    }

    public updateGosp_args deepCopy() {
      return new updateGosp_args(this);
    }

    @Override
    public void clear() {
      this.gosp = null;
    }

    public PatientGosp getGosp() {
      return this.gosp;
    }

    public updateGosp_args setGosp(PatientGosp gosp) {
      this.gosp = gosp;
      return this;
    }

    public void unsetGosp() {
      this.gosp = null;
    }

    /** Returns true if field gosp is set (has been assigned a value) and false otherwise */
    public boolean isSetGosp() {
      return this.gosp != null;
    }

    public void setGospIsSet(boolean value) {
      if (!value) {
        this.gosp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GOSP:
        if (value == null) {
          unsetGosp();
        } else {
          setGosp((PatientGosp)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GOSP:
        return getGosp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GOSP:
        return isSetGosp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGosp_args)
        return this.equals((updateGosp_args)that);
      return false;
    }

    public boolean equals(updateGosp_args that) {
      if (that == null)
        return false;

      boolean this_present_gosp = true && this.isSetGosp();
      boolean that_present_gosp = true && that.isSetGosp();
      if (this_present_gosp || that_present_gosp) {
        if (!(this_present_gosp && that_present_gosp))
          return false;
        if (!this.gosp.equals(that.gosp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateGosp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateGosp_args typedOther = (updateGosp_args)other;

      lastComparison = Boolean.valueOf(isSetGosp()).compareTo(typedOther.isSetGosp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGosp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gosp, typedOther.gosp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGosp_args(");
      boolean first = true;

      sb.append("gosp:");
      if (this.gosp == null) {
        sb.append("null");
      } else {
        sb.append(this.gosp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGosp_argsStandardSchemeFactory implements SchemeFactory {
      public updateGosp_argsStandardScheme getScheme() {
        return new updateGosp_argsStandardScheme();
      }
    }

    private static class updateGosp_argsStandardScheme extends StandardScheme<updateGosp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGosp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GOSP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.gosp = new PatientGosp();
                struct.gosp.read(iprot);
                struct.setGospIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGosp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gosp != null) {
          oprot.writeFieldBegin(GOSP_FIELD_DESC);
          struct.gosp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGosp_argsTupleSchemeFactory implements SchemeFactory {
      public updateGosp_argsTupleScheme getScheme() {
        return new updateGosp_argsTupleScheme();
      }
    }

    private static class updateGosp_argsTupleScheme extends TupleScheme<updateGosp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGosp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGosp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGosp()) {
          struct.gosp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGosp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.gosp = new PatientGosp();
          struct.gosp.read(iprot);
          struct.setGospIsSet(true);
        }
      }
    }

  }

  public static class updateGosp_result implements org.apache.thrift.TBase<updateGosp_result, updateGosp_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGosp_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGosp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGosp_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGosp_result.class, metaDataMap);
    }

    public updateGosp_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGosp_result(updateGosp_result other) {
    }

    public updateGosp_result deepCopy() {
      return new updateGosp_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGosp_result)
        return this.equals((updateGosp_result)that);
      return false;
    }

    public boolean equals(updateGosp_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateGosp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateGosp_result typedOther = (updateGosp_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGosp_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGosp_resultStandardSchemeFactory implements SchemeFactory {
      public updateGosp_resultStandardScheme getScheme() {
        return new updateGosp_resultStandardScheme();
      }
    }

    private static class updateGosp_resultStandardScheme extends StandardScheme<updateGosp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGosp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGosp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGosp_resultTupleSchemeFactory implements SchemeFactory {
      public updateGosp_resultTupleScheme getScheme() {
        return new updateGosp_resultTupleScheme();
      }
    }

    private static class updateGosp_resultTupleScheme extends TupleScheme<updateGosp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGosp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGosp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
