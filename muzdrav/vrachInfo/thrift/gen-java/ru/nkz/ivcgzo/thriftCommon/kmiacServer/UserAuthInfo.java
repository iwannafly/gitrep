/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftCommon.kmiacServer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Информация о вошедшем в систему пользователе.
 */
public class UserAuthInfo implements org.apache.thrift.TBase<UserAuthInfo, UserAuthInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserAuthInfo");

  private static final org.apache.thrift.protocol.TField PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("pcod", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CLPU_FIELD_DESC = new org.apache.thrift.protocol.TField("clpu", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CPODR_FIELD_DESC = new org.apache.thrift.protocol.TField("cpodr", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PDOST_FIELD_DESC = new org.apache.thrift.protocol.TField("pdost", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CDOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cdol", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CDOL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cdol_name", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField NAME_SHORT_FIELD_DESC = new org.apache.thrift.protocol.TField("name_short", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CPODR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cpodr_name", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CLPU_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clpu_name", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CSLU_FIELD_DESC = new org.apache.thrift.protocol.TField("cslu", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CSLU_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cslu_name", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserAuthInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserAuthInfoTupleSchemeFactory());
  }

  public int pcod; // required
  public int clpu; // required
  public int cpodr; // required
  public String pdost; // required
  public String name; // required
  public int user_id; // required
  public String config; // required
  public String cdol; // required
  public String cdol_name; // required
  public String name_short; // required
  public String cpodr_name; // required
  public String clpu_name; // required
  public int cslu; // required
  public String cslu_name; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PCOD((short)1, "pcod"),
    CLPU((short)2, "clpu"),
    CPODR((short)3, "cpodr"),
    PDOST((short)4, "pdost"),
    NAME((short)5, "name"),
    USER_ID((short)6, "user_id"),
    CONFIG((short)7, "config"),
    CDOL((short)8, "cdol"),
    CDOL_NAME((short)9, "cdol_name"),
    NAME_SHORT((short)10, "name_short"),
    CPODR_NAME((short)11, "cpodr_name"),
    CLPU_NAME((short)12, "clpu_name"),
    CSLU((short)13, "cslu"),
    CSLU_NAME((short)14, "cslu_name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PCOD
          return PCOD;
        case 2: // CLPU
          return CLPU;
        case 3: // CPODR
          return CPODR;
        case 4: // PDOST
          return PDOST;
        case 5: // NAME
          return NAME;
        case 6: // USER_ID
          return USER_ID;
        case 7: // CONFIG
          return CONFIG;
        case 8: // CDOL
          return CDOL;
        case 9: // CDOL_NAME
          return CDOL_NAME;
        case 10: // NAME_SHORT
          return NAME_SHORT;
        case 11: // CPODR_NAME
          return CPODR_NAME;
        case 12: // CLPU_NAME
          return CLPU_NAME;
        case 13: // CSLU
          return CSLU;
        case 14: // CSLU_NAME
          return CSLU_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PCOD_ISSET_ID = 0;
  private static final int __CLPU_ISSET_ID = 1;
  private static final int __CPODR_ISSET_ID = 2;
  private static final int __USER_ID_ISSET_ID = 3;
  private static final int __CSLU_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PCOD, new org.apache.thrift.meta_data.FieldMetaData("pcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLPU, new org.apache.thrift.meta_data.FieldMetaData("clpu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CPODR, new org.apache.thrift.meta_data.FieldMetaData("cpodr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PDOST, new org.apache.thrift.meta_data.FieldMetaData("pdost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CDOL, new org.apache.thrift.meta_data.FieldMetaData("cdol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CDOL_NAME, new org.apache.thrift.meta_data.FieldMetaData("cdol_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_SHORT, new org.apache.thrift.meta_data.FieldMetaData("name_short", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPODR_NAME, new org.apache.thrift.meta_data.FieldMetaData("cpodr_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLPU_NAME, new org.apache.thrift.meta_data.FieldMetaData("clpu_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CSLU, new org.apache.thrift.meta_data.FieldMetaData("cslu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CSLU_NAME, new org.apache.thrift.meta_data.FieldMetaData("cslu_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserAuthInfo.class, metaDataMap);
  }

  public UserAuthInfo() {
  }

  public UserAuthInfo(
    int pcod,
    int clpu,
    int cpodr,
    String pdost,
    String name,
    int user_id,
    String config,
    String cdol,
    String cdol_name,
    String name_short,
    String cpodr_name,
    String clpu_name,
    int cslu,
    String cslu_name)
  {
    this();
    this.pcod = pcod;
    setPcodIsSet(true);
    this.clpu = clpu;
    setClpuIsSet(true);
    this.cpodr = cpodr;
    setCpodrIsSet(true);
    this.pdost = pdost;
    this.name = name;
    this.user_id = user_id;
    setUser_idIsSet(true);
    this.config = config;
    this.cdol = cdol;
    this.cdol_name = cdol_name;
    this.name_short = name_short;
    this.cpodr_name = cpodr_name;
    this.clpu_name = clpu_name;
    this.cslu = cslu;
    setCsluIsSet(true);
    this.cslu_name = cslu_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserAuthInfo(UserAuthInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.pcod = other.pcod;
    this.clpu = other.clpu;
    this.cpodr = other.cpodr;
    if (other.isSetPdost()) {
      this.pdost = other.pdost;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.user_id = other.user_id;
    if (other.isSetConfig()) {
      this.config = other.config;
    }
    if (other.isSetCdol()) {
      this.cdol = other.cdol;
    }
    if (other.isSetCdol_name()) {
      this.cdol_name = other.cdol_name;
    }
    if (other.isSetName_short()) {
      this.name_short = other.name_short;
    }
    if (other.isSetCpodr_name()) {
      this.cpodr_name = other.cpodr_name;
    }
    if (other.isSetClpu_name()) {
      this.clpu_name = other.clpu_name;
    }
    this.cslu = other.cslu;
    if (other.isSetCslu_name()) {
      this.cslu_name = other.cslu_name;
    }
  }

  public UserAuthInfo deepCopy() {
    return new UserAuthInfo(this);
  }

  @Override
  public void clear() {
    setPcodIsSet(false);
    this.pcod = 0;
    setClpuIsSet(false);
    this.clpu = 0;
    setCpodrIsSet(false);
    this.cpodr = 0;
    this.pdost = null;
    this.name = null;
    setUser_idIsSet(false);
    this.user_id = 0;
    this.config = null;
    this.cdol = null;
    this.cdol_name = null;
    this.name_short = null;
    this.cpodr_name = null;
    this.clpu_name = null;
    setCsluIsSet(false);
    this.cslu = 0;
    this.cslu_name = null;
  }

  public int getPcod() {
    return this.pcod;
  }

  public UserAuthInfo setPcod(int pcod) {
    this.pcod = pcod;
    setPcodIsSet(true);
    return this;
  }

  public void unsetPcod() {
    __isset_bit_vector.clear(__PCOD_ISSET_ID);
  }

  /** Returns true if field pcod is set (has been assigned a value) and false otherwise */
  public boolean isSetPcod() {
    return __isset_bit_vector.get(__PCOD_ISSET_ID);
  }

  public void setPcodIsSet(boolean value) {
    __isset_bit_vector.set(__PCOD_ISSET_ID, value);
  }

  public int getClpu() {
    return this.clpu;
  }

  public UserAuthInfo setClpu(int clpu) {
    this.clpu = clpu;
    setClpuIsSet(true);
    return this;
  }

  public void unsetClpu() {
    __isset_bit_vector.clear(__CLPU_ISSET_ID);
  }

  /** Returns true if field clpu is set (has been assigned a value) and false otherwise */
  public boolean isSetClpu() {
    return __isset_bit_vector.get(__CLPU_ISSET_ID);
  }

  public void setClpuIsSet(boolean value) {
    __isset_bit_vector.set(__CLPU_ISSET_ID, value);
  }

  public int getCpodr() {
    return this.cpodr;
  }

  public UserAuthInfo setCpodr(int cpodr) {
    this.cpodr = cpodr;
    setCpodrIsSet(true);
    return this;
  }

  public void unsetCpodr() {
    __isset_bit_vector.clear(__CPODR_ISSET_ID);
  }

  /** Returns true if field cpodr is set (has been assigned a value) and false otherwise */
  public boolean isSetCpodr() {
    return __isset_bit_vector.get(__CPODR_ISSET_ID);
  }

  public void setCpodrIsSet(boolean value) {
    __isset_bit_vector.set(__CPODR_ISSET_ID, value);
  }

  public String getPdost() {
    return this.pdost;
  }

  public UserAuthInfo setPdost(String pdost) {
    this.pdost = pdost;
    return this;
  }

  public void unsetPdost() {
    this.pdost = null;
  }

  /** Returns true if field pdost is set (has been assigned a value) and false otherwise */
  public boolean isSetPdost() {
    return this.pdost != null;
  }

  public void setPdostIsSet(boolean value) {
    if (!value) {
      this.pdost = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public UserAuthInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getUser_id() {
    return this.user_id;
  }

  public UserAuthInfo setUser_id(int user_id) {
    this.user_id = user_id;
    setUser_idIsSet(true);
    return this;
  }

  public void unsetUser_id() {
    __isset_bit_vector.clear(__USER_ID_ISSET_ID);
  }

  /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_id() {
    return __isset_bit_vector.get(__USER_ID_ISSET_ID);
  }

  public void setUser_idIsSet(boolean value) {
    __isset_bit_vector.set(__USER_ID_ISSET_ID, value);
  }

  public String getConfig() {
    return this.config;
  }

  public UserAuthInfo setConfig(String config) {
    this.config = config;
    return this;
  }

  public void unsetConfig() {
    this.config = null;
  }

  /** Returns true if field config is set (has been assigned a value) and false otherwise */
  public boolean isSetConfig() {
    return this.config != null;
  }

  public void setConfigIsSet(boolean value) {
    if (!value) {
      this.config = null;
    }
  }

  public String getCdol() {
    return this.cdol;
  }

  public UserAuthInfo setCdol(String cdol) {
    this.cdol = cdol;
    return this;
  }

  public void unsetCdol() {
    this.cdol = null;
  }

  /** Returns true if field cdol is set (has been assigned a value) and false otherwise */
  public boolean isSetCdol() {
    return this.cdol != null;
  }

  public void setCdolIsSet(boolean value) {
    if (!value) {
      this.cdol = null;
    }
  }

  public String getCdol_name() {
    return this.cdol_name;
  }

  public UserAuthInfo setCdol_name(String cdol_name) {
    this.cdol_name = cdol_name;
    return this;
  }

  public void unsetCdol_name() {
    this.cdol_name = null;
  }

  /** Returns true if field cdol_name is set (has been assigned a value) and false otherwise */
  public boolean isSetCdol_name() {
    return this.cdol_name != null;
  }

  public void setCdol_nameIsSet(boolean value) {
    if (!value) {
      this.cdol_name = null;
    }
  }

  public String getName_short() {
    return this.name_short;
  }

  public UserAuthInfo setName_short(String name_short) {
    this.name_short = name_short;
    return this;
  }

  public void unsetName_short() {
    this.name_short = null;
  }

  /** Returns true if field name_short is set (has been assigned a value) and false otherwise */
  public boolean isSetName_short() {
    return this.name_short != null;
  }

  public void setName_shortIsSet(boolean value) {
    if (!value) {
      this.name_short = null;
    }
  }

  public String getCpodr_name() {
    return this.cpodr_name;
  }

  public UserAuthInfo setCpodr_name(String cpodr_name) {
    this.cpodr_name = cpodr_name;
    return this;
  }

  public void unsetCpodr_name() {
    this.cpodr_name = null;
  }

  /** Returns true if field cpodr_name is set (has been assigned a value) and false otherwise */
  public boolean isSetCpodr_name() {
    return this.cpodr_name != null;
  }

  public void setCpodr_nameIsSet(boolean value) {
    if (!value) {
      this.cpodr_name = null;
    }
  }

  public String getClpu_name() {
    return this.clpu_name;
  }

  public UserAuthInfo setClpu_name(String clpu_name) {
    this.clpu_name = clpu_name;
    return this;
  }

  public void unsetClpu_name() {
    this.clpu_name = null;
  }

  /** Returns true if field clpu_name is set (has been assigned a value) and false otherwise */
  public boolean isSetClpu_name() {
    return this.clpu_name != null;
  }

  public void setClpu_nameIsSet(boolean value) {
    if (!value) {
      this.clpu_name = null;
    }
  }

  public int getCslu() {
    return this.cslu;
  }

  public UserAuthInfo setCslu(int cslu) {
    this.cslu = cslu;
    setCsluIsSet(true);
    return this;
  }

  public void unsetCslu() {
    __isset_bit_vector.clear(__CSLU_ISSET_ID);
  }

  /** Returns true if field cslu is set (has been assigned a value) and false otherwise */
  public boolean isSetCslu() {
    return __isset_bit_vector.get(__CSLU_ISSET_ID);
  }

  public void setCsluIsSet(boolean value) {
    __isset_bit_vector.set(__CSLU_ISSET_ID, value);
  }

  public String getCslu_name() {
    return this.cslu_name;
  }

  public UserAuthInfo setCslu_name(String cslu_name) {
    this.cslu_name = cslu_name;
    return this;
  }

  public void unsetCslu_name() {
    this.cslu_name = null;
  }

  /** Returns true if field cslu_name is set (has been assigned a value) and false otherwise */
  public boolean isSetCslu_name() {
    return this.cslu_name != null;
  }

  public void setCslu_nameIsSet(boolean value) {
    if (!value) {
      this.cslu_name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PCOD:
      if (value == null) {
        unsetPcod();
      } else {
        setPcod((Integer)value);
      }
      break;

    case CLPU:
      if (value == null) {
        unsetClpu();
      } else {
        setClpu((Integer)value);
      }
      break;

    case CPODR:
      if (value == null) {
        unsetCpodr();
      } else {
        setCpodr((Integer)value);
      }
      break;

    case PDOST:
      if (value == null) {
        unsetPdost();
      } else {
        setPdost((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUser_id();
      } else {
        setUser_id((Integer)value);
      }
      break;

    case CONFIG:
      if (value == null) {
        unsetConfig();
      } else {
        setConfig((String)value);
      }
      break;

    case CDOL:
      if (value == null) {
        unsetCdol();
      } else {
        setCdol((String)value);
      }
      break;

    case CDOL_NAME:
      if (value == null) {
        unsetCdol_name();
      } else {
        setCdol_name((String)value);
      }
      break;

    case NAME_SHORT:
      if (value == null) {
        unsetName_short();
      } else {
        setName_short((String)value);
      }
      break;

    case CPODR_NAME:
      if (value == null) {
        unsetCpodr_name();
      } else {
        setCpodr_name((String)value);
      }
      break;

    case CLPU_NAME:
      if (value == null) {
        unsetClpu_name();
      } else {
        setClpu_name((String)value);
      }
      break;

    case CSLU:
      if (value == null) {
        unsetCslu();
      } else {
        setCslu((Integer)value);
      }
      break;

    case CSLU_NAME:
      if (value == null) {
        unsetCslu_name();
      } else {
        setCslu_name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PCOD:
      return Integer.valueOf(getPcod());

    case CLPU:
      return Integer.valueOf(getClpu());

    case CPODR:
      return Integer.valueOf(getCpodr());

    case PDOST:
      return getPdost();

    case NAME:
      return getName();

    case USER_ID:
      return Integer.valueOf(getUser_id());

    case CONFIG:
      return getConfig();

    case CDOL:
      return getCdol();

    case CDOL_NAME:
      return getCdol_name();

    case NAME_SHORT:
      return getName_short();

    case CPODR_NAME:
      return getCpodr_name();

    case CLPU_NAME:
      return getClpu_name();

    case CSLU:
      return Integer.valueOf(getCslu());

    case CSLU_NAME:
      return getCslu_name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PCOD:
      return isSetPcod();
    case CLPU:
      return isSetClpu();
    case CPODR:
      return isSetCpodr();
    case PDOST:
      return isSetPdost();
    case NAME:
      return isSetName();
    case USER_ID:
      return isSetUser_id();
    case CONFIG:
      return isSetConfig();
    case CDOL:
      return isSetCdol();
    case CDOL_NAME:
      return isSetCdol_name();
    case NAME_SHORT:
      return isSetName_short();
    case CPODR_NAME:
      return isSetCpodr_name();
    case CLPU_NAME:
      return isSetClpu_name();
    case CSLU:
      return isSetCslu();
    case CSLU_NAME:
      return isSetCslu_name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserAuthInfo)
      return this.equals((UserAuthInfo)that);
    return false;
  }

  public boolean equals(UserAuthInfo that) {
    if (that == null)
      return false;

    boolean this_present_pcod = true;
    boolean that_present_pcod = true;
    if (this_present_pcod || that_present_pcod) {
      if (!(this_present_pcod && that_present_pcod))
        return false;
      if (this.pcod != that.pcod)
        return false;
    }

    boolean this_present_clpu = true;
    boolean that_present_clpu = true;
    if (this_present_clpu || that_present_clpu) {
      if (!(this_present_clpu && that_present_clpu))
        return false;
      if (this.clpu != that.clpu)
        return false;
    }

    boolean this_present_cpodr = true;
    boolean that_present_cpodr = true;
    if (this_present_cpodr || that_present_cpodr) {
      if (!(this_present_cpodr && that_present_cpodr))
        return false;
      if (this.cpodr != that.cpodr)
        return false;
    }

    boolean this_present_pdost = true && this.isSetPdost();
    boolean that_present_pdost = true && that.isSetPdost();
    if (this_present_pdost || that_present_pdost) {
      if (!(this_present_pdost && that_present_pdost))
        return false;
      if (!this.pdost.equals(that.pdost))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_user_id = true;
    boolean that_present_user_id = true;
    if (this_present_user_id || that_present_user_id) {
      if (!(this_present_user_id && that_present_user_id))
        return false;
      if (this.user_id != that.user_id)
        return false;
    }

    boolean this_present_config = true && this.isSetConfig();
    boolean that_present_config = true && that.isSetConfig();
    if (this_present_config || that_present_config) {
      if (!(this_present_config && that_present_config))
        return false;
      if (!this.config.equals(that.config))
        return false;
    }

    boolean this_present_cdol = true && this.isSetCdol();
    boolean that_present_cdol = true && that.isSetCdol();
    if (this_present_cdol || that_present_cdol) {
      if (!(this_present_cdol && that_present_cdol))
        return false;
      if (!this.cdol.equals(that.cdol))
        return false;
    }

    boolean this_present_cdol_name = true && this.isSetCdol_name();
    boolean that_present_cdol_name = true && that.isSetCdol_name();
    if (this_present_cdol_name || that_present_cdol_name) {
      if (!(this_present_cdol_name && that_present_cdol_name))
        return false;
      if (!this.cdol_name.equals(that.cdol_name))
        return false;
    }

    boolean this_present_name_short = true && this.isSetName_short();
    boolean that_present_name_short = true && that.isSetName_short();
    if (this_present_name_short || that_present_name_short) {
      if (!(this_present_name_short && that_present_name_short))
        return false;
      if (!this.name_short.equals(that.name_short))
        return false;
    }

    boolean this_present_cpodr_name = true && this.isSetCpodr_name();
    boolean that_present_cpodr_name = true && that.isSetCpodr_name();
    if (this_present_cpodr_name || that_present_cpodr_name) {
      if (!(this_present_cpodr_name && that_present_cpodr_name))
        return false;
      if (!this.cpodr_name.equals(that.cpodr_name))
        return false;
    }

    boolean this_present_clpu_name = true && this.isSetClpu_name();
    boolean that_present_clpu_name = true && that.isSetClpu_name();
    if (this_present_clpu_name || that_present_clpu_name) {
      if (!(this_present_clpu_name && that_present_clpu_name))
        return false;
      if (!this.clpu_name.equals(that.clpu_name))
        return false;
    }

    boolean this_present_cslu = true;
    boolean that_present_cslu = true;
    if (this_present_cslu || that_present_cslu) {
      if (!(this_present_cslu && that_present_cslu))
        return false;
      if (this.cslu != that.cslu)
        return false;
    }

    boolean this_present_cslu_name = true && this.isSetCslu_name();
    boolean that_present_cslu_name = true && that.isSetCslu_name();
    if (this_present_cslu_name || that_present_cslu_name) {
      if (!(this_present_cslu_name && that_present_cslu_name))
        return false;
      if (!this.cslu_name.equals(that.cslu_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UserAuthInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UserAuthInfo typedOther = (UserAuthInfo)other;

    lastComparison = Boolean.valueOf(isSetPcod()).compareTo(typedOther.isSetPcod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPcod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcod, typedOther.pcod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClpu()).compareTo(typedOther.isSetClpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clpu, typedOther.clpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpodr()).compareTo(typedOther.isSetCpodr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpodr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpodr, typedOther.cpodr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPdost()).compareTo(typedOther.isSetPdost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPdost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pdost, typedOther.pdost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfig()).compareTo(typedOther.isSetConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, typedOther.config);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCdol()).compareTo(typedOther.isSetCdol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCdol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdol, typedOther.cdol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCdol_name()).compareTo(typedOther.isSetCdol_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCdol_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdol_name, typedOther.cdol_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName_short()).compareTo(typedOther.isSetName_short());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName_short()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name_short, typedOther.name_short);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpodr_name()).compareTo(typedOther.isSetCpodr_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpodr_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpodr_name, typedOther.cpodr_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClpu_name()).compareTo(typedOther.isSetClpu_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClpu_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clpu_name, typedOther.clpu_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCslu()).compareTo(typedOther.isSetCslu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCslu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cslu, typedOther.cslu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCslu_name()).compareTo(typedOther.isSetCslu_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCslu_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cslu_name, typedOther.cslu_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserAuthInfo(");
    boolean first = true;

    sb.append("pcod:");
    sb.append(this.pcod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clpu:");
    sb.append(this.clpu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpodr:");
    sb.append(this.cpodr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pdost:");
    if (this.pdost == null) {
      sb.append("null");
    } else {
      sb.append(this.pdost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_id:");
    sb.append(this.user_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("config:");
    if (this.config == null) {
      sb.append("null");
    } else {
      sb.append(this.config);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cdol:");
    if (this.cdol == null) {
      sb.append("null");
    } else {
      sb.append(this.cdol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cdol_name:");
    if (this.cdol_name == null) {
      sb.append("null");
    } else {
      sb.append(this.cdol_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name_short:");
    if (this.name_short == null) {
      sb.append("null");
    } else {
      sb.append(this.name_short);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpodr_name:");
    if (this.cpodr_name == null) {
      sb.append("null");
    } else {
      sb.append(this.cpodr_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clpu_name:");
    if (this.clpu_name == null) {
      sb.append("null");
    } else {
      sb.append(this.clpu_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cslu:");
    sb.append(this.cslu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cslu_name:");
    if (this.cslu_name == null) {
      sb.append("null");
    } else {
      sb.append(this.cslu_name);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserAuthInfoStandardSchemeFactory implements SchemeFactory {
    public UserAuthInfoStandardScheme getScheme() {
      return new UserAuthInfoStandardScheme();
    }
  }

  private static class UserAuthInfoStandardScheme extends StandardScheme<UserAuthInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserAuthInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PCOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pcod = iprot.readI32();
              struct.setPcodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.clpu = iprot.readI32();
              struct.setClpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CPODR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpodr = iprot.readI32();
              struct.setCpodrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PDOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pdost = iprot.readString();
              struct.setPdostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.user_id = iprot.readI32();
              struct.setUser_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.config = iprot.readString();
              struct.setConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CDOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cdol = iprot.readString();
              struct.setCdolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CDOL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cdol_name = iprot.readString();
              struct.setCdol_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NAME_SHORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name_short = iprot.readString();
              struct.setName_shortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CPODR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpodr_name = iprot.readString();
              struct.setCpodr_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CLPU_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clpu_name = iprot.readString();
              struct.setClpu_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CSLU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cslu = iprot.readI32();
              struct.setCsluIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CSLU_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cslu_name = iprot.readString();
              struct.setCslu_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserAuthInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PCOD_FIELD_DESC);
      oprot.writeI32(struct.pcod);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLPU_FIELD_DESC);
      oprot.writeI32(struct.clpu);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CPODR_FIELD_DESC);
      oprot.writeI32(struct.cpodr);
      oprot.writeFieldEnd();
      if (struct.pdost != null) {
        oprot.writeFieldBegin(PDOST_FIELD_DESC);
        oprot.writeString(struct.pdost);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.user_id);
      oprot.writeFieldEnd();
      if (struct.config != null) {
        oprot.writeFieldBegin(CONFIG_FIELD_DESC);
        oprot.writeString(struct.config);
        oprot.writeFieldEnd();
      }
      if (struct.cdol != null) {
        oprot.writeFieldBegin(CDOL_FIELD_DESC);
        oprot.writeString(struct.cdol);
        oprot.writeFieldEnd();
      }
      if (struct.cdol_name != null) {
        oprot.writeFieldBegin(CDOL_NAME_FIELD_DESC);
        oprot.writeString(struct.cdol_name);
        oprot.writeFieldEnd();
      }
      if (struct.name_short != null) {
        oprot.writeFieldBegin(NAME_SHORT_FIELD_DESC);
        oprot.writeString(struct.name_short);
        oprot.writeFieldEnd();
      }
      if (struct.cpodr_name != null) {
        oprot.writeFieldBegin(CPODR_NAME_FIELD_DESC);
        oprot.writeString(struct.cpodr_name);
        oprot.writeFieldEnd();
      }
      if (struct.clpu_name != null) {
        oprot.writeFieldBegin(CLPU_NAME_FIELD_DESC);
        oprot.writeString(struct.clpu_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CSLU_FIELD_DESC);
      oprot.writeI32(struct.cslu);
      oprot.writeFieldEnd();
      if (struct.cslu_name != null) {
        oprot.writeFieldBegin(CSLU_NAME_FIELD_DESC);
        oprot.writeString(struct.cslu_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserAuthInfoTupleSchemeFactory implements SchemeFactory {
    public UserAuthInfoTupleScheme getScheme() {
      return new UserAuthInfoTupleScheme();
    }
  }

  private static class UserAuthInfoTupleScheme extends TupleScheme<UserAuthInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserAuthInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPcod()) {
        optionals.set(0);
      }
      if (struct.isSetClpu()) {
        optionals.set(1);
      }
      if (struct.isSetCpodr()) {
        optionals.set(2);
      }
      if (struct.isSetPdost()) {
        optionals.set(3);
      }
      if (struct.isSetName()) {
        optionals.set(4);
      }
      if (struct.isSetUser_id()) {
        optionals.set(5);
      }
      if (struct.isSetConfig()) {
        optionals.set(6);
      }
      if (struct.isSetCdol()) {
        optionals.set(7);
      }
      if (struct.isSetCdol_name()) {
        optionals.set(8);
      }
      if (struct.isSetName_short()) {
        optionals.set(9);
      }
      if (struct.isSetCpodr_name()) {
        optionals.set(10);
      }
      if (struct.isSetClpu_name()) {
        optionals.set(11);
      }
      if (struct.isSetCslu()) {
        optionals.set(12);
      }
      if (struct.isSetCslu_name()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetPcod()) {
        oprot.writeI32(struct.pcod);
      }
      if (struct.isSetClpu()) {
        oprot.writeI32(struct.clpu);
      }
      if (struct.isSetCpodr()) {
        oprot.writeI32(struct.cpodr);
      }
      if (struct.isSetPdost()) {
        oprot.writeString(struct.pdost);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetUser_id()) {
        oprot.writeI32(struct.user_id);
      }
      if (struct.isSetConfig()) {
        oprot.writeString(struct.config);
      }
      if (struct.isSetCdol()) {
        oprot.writeString(struct.cdol);
      }
      if (struct.isSetCdol_name()) {
        oprot.writeString(struct.cdol_name);
      }
      if (struct.isSetName_short()) {
        oprot.writeString(struct.name_short);
      }
      if (struct.isSetCpodr_name()) {
        oprot.writeString(struct.cpodr_name);
      }
      if (struct.isSetClpu_name()) {
        oprot.writeString(struct.clpu_name);
      }
      if (struct.isSetCslu()) {
        oprot.writeI32(struct.cslu);
      }
      if (struct.isSetCslu_name()) {
        oprot.writeString(struct.cslu_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserAuthInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.pcod = iprot.readI32();
        struct.setPcodIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clpu = iprot.readI32();
        struct.setClpuIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cpodr = iprot.readI32();
        struct.setCpodrIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pdost = iprot.readString();
        struct.setPdostIsSet(true);
      }
      if (incoming.get(4)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.user_id = iprot.readI32();
        struct.setUser_idIsSet(true);
      }
      if (incoming.get(6)) {
        struct.config = iprot.readString();
        struct.setConfigIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cdol = iprot.readString();
        struct.setCdolIsSet(true);
      }
      if (incoming.get(8)) {
        struct.cdol_name = iprot.readString();
        struct.setCdol_nameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.name_short = iprot.readString();
        struct.setName_shortIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cpodr_name = iprot.readString();
        struct.setCpodr_nameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.clpu_name = iprot.readString();
        struct.setClpu_nameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.cslu = iprot.readI32();
        struct.setCsluIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cslu_name = iprot.readString();
        struct.setCslu_nameIsSet(true);
      }
    }
  }

}

