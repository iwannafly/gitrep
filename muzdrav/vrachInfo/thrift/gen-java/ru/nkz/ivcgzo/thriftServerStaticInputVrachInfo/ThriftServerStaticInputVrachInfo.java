/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftServerStaticInputVrachInfo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftServerStaticInputVrachInfo {

  public interface Iface extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Iface {

    /**
     * Список всех врачей для данного лпу.
     */
    public List<VrachInfo> GetVrachList() throws org.apache.thrift.TException;

    /**
     * Информация на конкретного врача по его коду.
     * 
     * @param pcod
     */
    public VrachInfo GetVrach(int pcod) throws VrachNotFoundException, org.apache.thrift.TException;

    /**
     * Добавление врача.
     * 
     * @param vr
     */
    public int AddVrach(VrachInfo vr) throws VrachExistsException, org.apache.thrift.TException;

    /**
     * Обновление информации о враче.
     * 
     * @param vr
     */
    public void UpdVrach(VrachInfo vr) throws VrachExistsException, org.apache.thrift.TException;

    /**
     * Удаление врача.
     * 
     * @param pcod
     */
    public void DelVrach(int pcod) throws org.apache.thrift.TException;

    /**
     * Список всех мест работ для данного врача.
     * 
     * @param vrPcod
     */
    public List<MestoRab> GetMrabList(int vrPcod) throws org.apache.thrift.TException;

    /**
     * Информация о конкретном месте работы по его коду.
     * 
     * @param id
     */
    public MestoRab GetMrab(int id) throws MestoRabNotFoundException, org.apache.thrift.TException;

    /**
     * Добавление места работы.
     * 
     * @param mr
     */
    public int AddMrab(MestoRab mr) throws MestoRabExistsException, org.apache.thrift.TException;

    /**
     * Обновление информации о месте работы.
     * 
     * @param mr
     */
    public void UpdMrab(MestoRab mr) throws MestoRabExistsException, org.apache.thrift.TException;

    /**
     * Удаление места работы.
     * 
     * @param id
     */
    public void DelMrab(int id) throws org.apache.thrift.TException;

    /**
     * Удаление всех мест работы конкретного врача.
     * 
     * @param vrPcod
     */
    public void ClearVrachMrab(int vrPcod) throws org.apache.thrift.TException;

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getPrizndList() throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer .AsyncIface {

    public void GetVrachList(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetVrachList_call> resultHandler) throws org.apache.thrift.TException;

    public void GetVrach(int pcod, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetVrach_call> resultHandler) throws org.apache.thrift.TException;

    public void AddVrach(VrachInfo vr, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddVrach_call> resultHandler) throws org.apache.thrift.TException;

    public void UpdVrach(VrachInfo vr, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.UpdVrach_call> resultHandler) throws org.apache.thrift.TException;

    public void DelVrach(int pcod, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.DelVrach_call> resultHandler) throws org.apache.thrift.TException;

    public void GetMrabList(int vrPcod, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetMrabList_call> resultHandler) throws org.apache.thrift.TException;

    public void GetMrab(int id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetMrab_call> resultHandler) throws org.apache.thrift.TException;

    public void AddMrab(MestoRab mr, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddMrab_call> resultHandler) throws org.apache.thrift.TException;

    public void UpdMrab(MestoRab mr, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.UpdMrab_call> resultHandler) throws org.apache.thrift.TException;

    public void DelMrab(int id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.DelMrab_call> resultHandler) throws org.apache.thrift.TException;

    public void ClearVrachMrab(int vrPcod, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ClearVrachMrab_call> resultHandler) throws org.apache.thrift.TException;

    public void getPrizndList(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPrizndList_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<VrachInfo> GetVrachList() throws org.apache.thrift.TException
    {
      send_GetVrachList();
      return recv_GetVrachList();
    }

    public void send_GetVrachList() throws org.apache.thrift.TException
    {
      GetVrachList_args args = new GetVrachList_args();
      sendBase("GetVrachList", args);
    }

    public List<VrachInfo> recv_GetVrachList() throws org.apache.thrift.TException
    {
      GetVrachList_result result = new GetVrachList_result();
      receiveBase(result, "GetVrachList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetVrachList failed: unknown result");
    }

    public VrachInfo GetVrach(int pcod) throws VrachNotFoundException, org.apache.thrift.TException
    {
      send_GetVrach(pcod);
      return recv_GetVrach();
    }

    public void send_GetVrach(int pcod) throws org.apache.thrift.TException
    {
      GetVrach_args args = new GetVrach_args();
      args.setPcod(pcod);
      sendBase("GetVrach", args);
    }

    public VrachInfo recv_GetVrach() throws VrachNotFoundException, org.apache.thrift.TException
    {
      GetVrach_result result = new GetVrach_result();
      receiveBase(result, "GetVrach");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.vne != null) {
        throw result.vne;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetVrach failed: unknown result");
    }

    public int AddVrach(VrachInfo vr) throws VrachExistsException, org.apache.thrift.TException
    {
      send_AddVrach(vr);
      return recv_AddVrach();
    }

    public void send_AddVrach(VrachInfo vr) throws org.apache.thrift.TException
    {
      AddVrach_args args = new AddVrach_args();
      args.setVr(vr);
      sendBase("AddVrach", args);
    }

    public int recv_AddVrach() throws VrachExistsException, org.apache.thrift.TException
    {
      AddVrach_result result = new AddVrach_result();
      receiveBase(result, "AddVrach");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.vee != null) {
        throw result.vee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddVrach failed: unknown result");
    }

    public void UpdVrach(VrachInfo vr) throws VrachExistsException, org.apache.thrift.TException
    {
      send_UpdVrach(vr);
      recv_UpdVrach();
    }

    public void send_UpdVrach(VrachInfo vr) throws org.apache.thrift.TException
    {
      UpdVrach_args args = new UpdVrach_args();
      args.setVr(vr);
      sendBase("UpdVrach", args);
    }

    public void recv_UpdVrach() throws VrachExistsException, org.apache.thrift.TException
    {
      UpdVrach_result result = new UpdVrach_result();
      receiveBase(result, "UpdVrach");
      if (result.vee != null) {
        throw result.vee;
      }
      return;
    }

    public void DelVrach(int pcod) throws org.apache.thrift.TException
    {
      send_DelVrach(pcod);
      recv_DelVrach();
    }

    public void send_DelVrach(int pcod) throws org.apache.thrift.TException
    {
      DelVrach_args args = new DelVrach_args();
      args.setPcod(pcod);
      sendBase("DelVrach", args);
    }

    public void recv_DelVrach() throws org.apache.thrift.TException
    {
      DelVrach_result result = new DelVrach_result();
      receiveBase(result, "DelVrach");
      return;
    }

    public List<MestoRab> GetMrabList(int vrPcod) throws org.apache.thrift.TException
    {
      send_GetMrabList(vrPcod);
      return recv_GetMrabList();
    }

    public void send_GetMrabList(int vrPcod) throws org.apache.thrift.TException
    {
      GetMrabList_args args = new GetMrabList_args();
      args.setVrPcod(vrPcod);
      sendBase("GetMrabList", args);
    }

    public List<MestoRab> recv_GetMrabList() throws org.apache.thrift.TException
    {
      GetMrabList_result result = new GetMrabList_result();
      receiveBase(result, "GetMrabList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetMrabList failed: unknown result");
    }

    public MestoRab GetMrab(int id) throws MestoRabNotFoundException, org.apache.thrift.TException
    {
      send_GetMrab(id);
      return recv_GetMrab();
    }

    public void send_GetMrab(int id) throws org.apache.thrift.TException
    {
      GetMrab_args args = new GetMrab_args();
      args.setId(id);
      sendBase("GetMrab", args);
    }

    public MestoRab recv_GetMrab() throws MestoRabNotFoundException, org.apache.thrift.TException
    {
      GetMrab_result result = new GetMrab_result();
      receiveBase(result, "GetMrab");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.mne != null) {
        throw result.mne;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetMrab failed: unknown result");
    }

    public int AddMrab(MestoRab mr) throws MestoRabExistsException, org.apache.thrift.TException
    {
      send_AddMrab(mr);
      return recv_AddMrab();
    }

    public void send_AddMrab(MestoRab mr) throws org.apache.thrift.TException
    {
      AddMrab_args args = new AddMrab_args();
      args.setMr(mr);
      sendBase("AddMrab", args);
    }

    public int recv_AddMrab() throws MestoRabExistsException, org.apache.thrift.TException
    {
      AddMrab_result result = new AddMrab_result();
      receiveBase(result, "AddMrab");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.mee != null) {
        throw result.mee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddMrab failed: unknown result");
    }

    public void UpdMrab(MestoRab mr) throws MestoRabExistsException, org.apache.thrift.TException
    {
      send_UpdMrab(mr);
      recv_UpdMrab();
    }

    public void send_UpdMrab(MestoRab mr) throws org.apache.thrift.TException
    {
      UpdMrab_args args = new UpdMrab_args();
      args.setMr(mr);
      sendBase("UpdMrab", args);
    }

    public void recv_UpdMrab() throws MestoRabExistsException, org.apache.thrift.TException
    {
      UpdMrab_result result = new UpdMrab_result();
      receiveBase(result, "UpdMrab");
      if (result.mee != null) {
        throw result.mee;
      }
      return;
    }

    public void DelMrab(int id) throws org.apache.thrift.TException
    {
      send_DelMrab(id);
      recv_DelMrab();
    }

    public void send_DelMrab(int id) throws org.apache.thrift.TException
    {
      DelMrab_args args = new DelMrab_args();
      args.setId(id);
      sendBase("DelMrab", args);
    }

    public void recv_DelMrab() throws org.apache.thrift.TException
    {
      DelMrab_result result = new DelMrab_result();
      receiveBase(result, "DelMrab");
      return;
    }

    public void ClearVrachMrab(int vrPcod) throws org.apache.thrift.TException
    {
      send_ClearVrachMrab(vrPcod);
      recv_ClearVrachMrab();
    }

    public void send_ClearVrachMrab(int vrPcod) throws org.apache.thrift.TException
    {
      ClearVrachMrab_args args = new ClearVrachMrab_args();
      args.setVrPcod(vrPcod);
      sendBase("ClearVrachMrab", args);
    }

    public void recv_ClearVrachMrab() throws org.apache.thrift.TException
    {
      ClearVrachMrab_result result = new ClearVrachMrab_result();
      receiveBase(result, "ClearVrachMrab");
      return;
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getPrizndList() throws org.apache.thrift.TException
    {
      send_getPrizndList();
      return recv_getPrizndList();
    }

    public void send_getPrizndList() throws org.apache.thrift.TException
    {
      getPrizndList_args args = new getPrizndList_args();
      sendBase("getPrizndList", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> recv_getPrizndList() throws org.apache.thrift.TException
    {
      getPrizndList_result result = new getPrizndList_result();
      receiveBase(result, "getPrizndList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPrizndList failed: unknown result");
    }

  }
  public static class AsyncClient extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void GetVrachList(org.apache.thrift.async.AsyncMethodCallback<GetVrachList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetVrachList_call method_call = new GetVrachList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetVrachList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetVrachList_call(org.apache.thrift.async.AsyncMethodCallback<GetVrachList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetVrachList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetVrachList_args args = new GetVrachList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<VrachInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetVrachList();
      }
    }

    public void GetVrach(int pcod, org.apache.thrift.async.AsyncMethodCallback<GetVrach_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetVrach_call method_call = new GetVrach_call(pcod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetVrach_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pcod;
      public GetVrach_call(int pcod, org.apache.thrift.async.AsyncMethodCallback<GetVrach_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pcod = pcod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetVrach", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetVrach_args args = new GetVrach_args();
        args.setPcod(pcod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public VrachInfo getResult() throws VrachNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetVrach();
      }
    }

    public void AddVrach(VrachInfo vr, org.apache.thrift.async.AsyncMethodCallback<AddVrach_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddVrach_call method_call = new AddVrach_call(vr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddVrach_call extends org.apache.thrift.async.TAsyncMethodCall {
      private VrachInfo vr;
      public AddVrach_call(VrachInfo vr, org.apache.thrift.async.AsyncMethodCallback<AddVrach_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vr = vr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddVrach", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddVrach_args args = new AddVrach_args();
        args.setVr(vr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws VrachExistsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddVrach();
      }
    }

    public void UpdVrach(VrachInfo vr, org.apache.thrift.async.AsyncMethodCallback<UpdVrach_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdVrach_call method_call = new UpdVrach_call(vr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdVrach_call extends org.apache.thrift.async.TAsyncMethodCall {
      private VrachInfo vr;
      public UpdVrach_call(VrachInfo vr, org.apache.thrift.async.AsyncMethodCallback<UpdVrach_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vr = vr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdVrach", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdVrach_args args = new UpdVrach_args();
        args.setVr(vr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws VrachExistsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdVrach();
      }
    }

    public void DelVrach(int pcod, org.apache.thrift.async.AsyncMethodCallback<DelVrach_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DelVrach_call method_call = new DelVrach_call(pcod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DelVrach_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pcod;
      public DelVrach_call(int pcod, org.apache.thrift.async.AsyncMethodCallback<DelVrach_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pcod = pcod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DelVrach", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DelVrach_args args = new DelVrach_args();
        args.setPcod(pcod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DelVrach();
      }
    }

    public void GetMrabList(int vrPcod, org.apache.thrift.async.AsyncMethodCallback<GetMrabList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetMrabList_call method_call = new GetMrabList_call(vrPcod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetMrabList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vrPcod;
      public GetMrabList_call(int vrPcod, org.apache.thrift.async.AsyncMethodCallback<GetMrabList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vrPcod = vrPcod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetMrabList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetMrabList_args args = new GetMrabList_args();
        args.setVrPcod(vrPcod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<MestoRab> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetMrabList();
      }
    }

    public void GetMrab(int id, org.apache.thrift.async.AsyncMethodCallback<GetMrab_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetMrab_call method_call = new GetMrab_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetMrab_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public GetMrab_call(int id, org.apache.thrift.async.AsyncMethodCallback<GetMrab_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetMrab", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetMrab_args args = new GetMrab_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MestoRab getResult() throws MestoRabNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetMrab();
      }
    }

    public void AddMrab(MestoRab mr, org.apache.thrift.async.AsyncMethodCallback<AddMrab_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddMrab_call method_call = new AddMrab_call(mr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddMrab_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MestoRab mr;
      public AddMrab_call(MestoRab mr, org.apache.thrift.async.AsyncMethodCallback<AddMrab_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mr = mr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddMrab", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddMrab_args args = new AddMrab_args();
        args.setMr(mr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws MestoRabExistsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddMrab();
      }
    }

    public void UpdMrab(MestoRab mr, org.apache.thrift.async.AsyncMethodCallback<UpdMrab_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdMrab_call method_call = new UpdMrab_call(mr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdMrab_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MestoRab mr;
      public UpdMrab_call(MestoRab mr, org.apache.thrift.async.AsyncMethodCallback<UpdMrab_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mr = mr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdMrab", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdMrab_args args = new UpdMrab_args();
        args.setMr(mr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws MestoRabExistsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdMrab();
      }
    }

    public void DelMrab(int id, org.apache.thrift.async.AsyncMethodCallback<DelMrab_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DelMrab_call method_call = new DelMrab_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DelMrab_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public DelMrab_call(int id, org.apache.thrift.async.AsyncMethodCallback<DelMrab_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DelMrab", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DelMrab_args args = new DelMrab_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DelMrab();
      }
    }

    public void ClearVrachMrab(int vrPcod, org.apache.thrift.async.AsyncMethodCallback<ClearVrachMrab_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ClearVrachMrab_call method_call = new ClearVrachMrab_call(vrPcod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ClearVrachMrab_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vrPcod;
      public ClearVrachMrab_call(int vrPcod, org.apache.thrift.async.AsyncMethodCallback<ClearVrachMrab_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vrPcod = vrPcod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ClearVrachMrab", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ClearVrachMrab_args args = new ClearVrachMrab_args();
        args.setVrPcod(vrPcod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ClearVrachMrab();
      }
    }

    public void getPrizndList(org.apache.thrift.async.AsyncMethodCallback<getPrizndList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPrizndList_call method_call = new getPrizndList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPrizndList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getPrizndList_call(org.apache.thrift.async.AsyncMethodCallback<getPrizndList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPrizndList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPrizndList_args args = new getPrizndList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPrizndList();
      }
    }

  }

  public static class Processor<I extends Iface> extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("GetVrachList", new GetVrachList());
      processMap.put("GetVrach", new GetVrach());
      processMap.put("AddVrach", new AddVrach());
      processMap.put("UpdVrach", new UpdVrach());
      processMap.put("DelVrach", new DelVrach());
      processMap.put("GetMrabList", new GetMrabList());
      processMap.put("GetMrab", new GetMrab());
      processMap.put("AddMrab", new AddMrab());
      processMap.put("UpdMrab", new UpdMrab());
      processMap.put("DelMrab", new DelMrab());
      processMap.put("ClearVrachMrab", new ClearVrachMrab());
      processMap.put("getPrizndList", new getPrizndList());
      return processMap;
    }

    private static class GetVrachList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetVrachList_args> {
      public GetVrachList() {
        super("GetVrachList");
      }

      protected GetVrachList_args getEmptyArgsInstance() {
        return new GetVrachList_args();
      }

      protected GetVrachList_result getResult(I iface, GetVrachList_args args) throws org.apache.thrift.TException {
        GetVrachList_result result = new GetVrachList_result();
        result.success = iface.GetVrachList();
        return result;
      }
    }

    private static class GetVrach<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetVrach_args> {
      public GetVrach() {
        super("GetVrach");
      }

      protected GetVrach_args getEmptyArgsInstance() {
        return new GetVrach_args();
      }

      protected GetVrach_result getResult(I iface, GetVrach_args args) throws org.apache.thrift.TException {
        GetVrach_result result = new GetVrach_result();
        try {
          result.success = iface.GetVrach(args.pcod);
        } catch (VrachNotFoundException vne) {
          result.vne = vne;
        }
        return result;
      }
    }

    private static class AddVrach<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddVrach_args> {
      public AddVrach() {
        super("AddVrach");
      }

      protected AddVrach_args getEmptyArgsInstance() {
        return new AddVrach_args();
      }

      protected AddVrach_result getResult(I iface, AddVrach_args args) throws org.apache.thrift.TException {
        AddVrach_result result = new AddVrach_result();
        try {
          result.success = iface.AddVrach(args.vr);
          result.setSuccessIsSet(true);
        } catch (VrachExistsException vee) {
          result.vee = vee;
        }
        return result;
      }
    }

    private static class UpdVrach<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdVrach_args> {
      public UpdVrach() {
        super("UpdVrach");
      }

      protected UpdVrach_args getEmptyArgsInstance() {
        return new UpdVrach_args();
      }

      protected UpdVrach_result getResult(I iface, UpdVrach_args args) throws org.apache.thrift.TException {
        UpdVrach_result result = new UpdVrach_result();
        try {
          iface.UpdVrach(args.vr);
        } catch (VrachExistsException vee) {
          result.vee = vee;
        }
        return result;
      }
    }

    private static class DelVrach<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DelVrach_args> {
      public DelVrach() {
        super("DelVrach");
      }

      protected DelVrach_args getEmptyArgsInstance() {
        return new DelVrach_args();
      }

      protected DelVrach_result getResult(I iface, DelVrach_args args) throws org.apache.thrift.TException {
        DelVrach_result result = new DelVrach_result();
        iface.DelVrach(args.pcod);
        return result;
      }
    }

    private static class GetMrabList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetMrabList_args> {
      public GetMrabList() {
        super("GetMrabList");
      }

      protected GetMrabList_args getEmptyArgsInstance() {
        return new GetMrabList_args();
      }

      protected GetMrabList_result getResult(I iface, GetMrabList_args args) throws org.apache.thrift.TException {
        GetMrabList_result result = new GetMrabList_result();
        result.success = iface.GetMrabList(args.vrPcod);
        return result;
      }
    }

    private static class GetMrab<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetMrab_args> {
      public GetMrab() {
        super("GetMrab");
      }

      protected GetMrab_args getEmptyArgsInstance() {
        return new GetMrab_args();
      }

      protected GetMrab_result getResult(I iface, GetMrab_args args) throws org.apache.thrift.TException {
        GetMrab_result result = new GetMrab_result();
        try {
          result.success = iface.GetMrab(args.id);
        } catch (MestoRabNotFoundException mne) {
          result.mne = mne;
        }
        return result;
      }
    }

    private static class AddMrab<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddMrab_args> {
      public AddMrab() {
        super("AddMrab");
      }

      protected AddMrab_args getEmptyArgsInstance() {
        return new AddMrab_args();
      }

      protected AddMrab_result getResult(I iface, AddMrab_args args) throws org.apache.thrift.TException {
        AddMrab_result result = new AddMrab_result();
        try {
          result.success = iface.AddMrab(args.mr);
          result.setSuccessIsSet(true);
        } catch (MestoRabExistsException mee) {
          result.mee = mee;
        }
        return result;
      }
    }

    private static class UpdMrab<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdMrab_args> {
      public UpdMrab() {
        super("UpdMrab");
      }

      protected UpdMrab_args getEmptyArgsInstance() {
        return new UpdMrab_args();
      }

      protected UpdMrab_result getResult(I iface, UpdMrab_args args) throws org.apache.thrift.TException {
        UpdMrab_result result = new UpdMrab_result();
        try {
          iface.UpdMrab(args.mr);
        } catch (MestoRabExistsException mee) {
          result.mee = mee;
        }
        return result;
      }
    }

    private static class DelMrab<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DelMrab_args> {
      public DelMrab() {
        super("DelMrab");
      }

      protected DelMrab_args getEmptyArgsInstance() {
        return new DelMrab_args();
      }

      protected DelMrab_result getResult(I iface, DelMrab_args args) throws org.apache.thrift.TException {
        DelMrab_result result = new DelMrab_result();
        iface.DelMrab(args.id);
        return result;
      }
    }

    private static class ClearVrachMrab<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ClearVrachMrab_args> {
      public ClearVrachMrab() {
        super("ClearVrachMrab");
      }

      protected ClearVrachMrab_args getEmptyArgsInstance() {
        return new ClearVrachMrab_args();
      }

      protected ClearVrachMrab_result getResult(I iface, ClearVrachMrab_args args) throws org.apache.thrift.TException {
        ClearVrachMrab_result result = new ClearVrachMrab_result();
        iface.ClearVrachMrab(args.vrPcod);
        return result;
      }
    }

    private static class getPrizndList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPrizndList_args> {
      public getPrizndList() {
        super("getPrizndList");
      }

      protected getPrizndList_args getEmptyArgsInstance() {
        return new getPrizndList_args();
      }

      protected getPrizndList_result getResult(I iface, getPrizndList_args args) throws org.apache.thrift.TException {
        getPrizndList_result result = new getPrizndList_result();
        result.success = iface.getPrizndList();
        return result;
      }
    }

  }

  public static class GetVrachList_args implements org.apache.thrift.TBase<GetVrachList_args, GetVrachList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVrachList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetVrachList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVrachList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVrachList_args.class, metaDataMap);
    }

    public GetVrachList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVrachList_args(GetVrachList_args other) {
    }

    public GetVrachList_args deepCopy() {
      return new GetVrachList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVrachList_args)
        return this.equals((GetVrachList_args)that);
      return false;
    }

    public boolean equals(GetVrachList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetVrachList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetVrachList_args typedOther = (GetVrachList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetVrachList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVrachList_argsStandardSchemeFactory implements SchemeFactory {
      public GetVrachList_argsStandardScheme getScheme() {
        return new GetVrachList_argsStandardScheme();
      }
    }

    private static class GetVrachList_argsStandardScheme extends StandardScheme<GetVrachList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVrachList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVrachList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVrachList_argsTupleSchemeFactory implements SchemeFactory {
      public GetVrachList_argsTupleScheme getScheme() {
        return new GetVrachList_argsTupleScheme();
      }
    }

    private static class GetVrachList_argsTupleScheme extends TupleScheme<GetVrachList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVrachList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVrachList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetVrachList_result implements org.apache.thrift.TBase<GetVrachList_result, GetVrachList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVrachList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetVrachList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVrachList_resultTupleSchemeFactory());
    }

    public List<VrachInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VrachInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVrachList_result.class, metaDataMap);
    }

    public GetVrachList_result() {
    }

    public GetVrachList_result(
      List<VrachInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVrachList_result(GetVrachList_result other) {
      if (other.isSetSuccess()) {
        List<VrachInfo> __this__success = new ArrayList<VrachInfo>();
        for (VrachInfo other_element : other.success) {
          __this__success.add(new VrachInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetVrachList_result deepCopy() {
      return new GetVrachList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<VrachInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(VrachInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<VrachInfo>();
      }
      this.success.add(elem);
    }

    public List<VrachInfo> getSuccess() {
      return this.success;
    }

    public GetVrachList_result setSuccess(List<VrachInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<VrachInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVrachList_result)
        return this.equals((GetVrachList_result)that);
      return false;
    }

    public boolean equals(GetVrachList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetVrachList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetVrachList_result typedOther = (GetVrachList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetVrachList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVrachList_resultStandardSchemeFactory implements SchemeFactory {
      public GetVrachList_resultStandardScheme getScheme() {
        return new GetVrachList_resultStandardScheme();
      }
    }

    private static class GetVrachList_resultStandardScheme extends StandardScheme<GetVrachList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVrachList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<VrachInfo>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    VrachInfo _elem2; // required
                    _elem2 = new VrachInfo();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVrachList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (VrachInfo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVrachList_resultTupleSchemeFactory implements SchemeFactory {
      public GetVrachList_resultTupleScheme getScheme() {
        return new GetVrachList_resultTupleScheme();
      }
    }

    private static class GetVrachList_resultTupleScheme extends TupleScheme<GetVrachList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVrachList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (VrachInfo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVrachList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<VrachInfo>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              VrachInfo _elem7; // required
              _elem7 = new VrachInfo();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetVrach_args implements org.apache.thrift.TBase<GetVrach_args, GetVrach_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVrach_args");

    private static final org.apache.thrift.protocol.TField PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("pcod", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetVrach_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVrach_argsTupleSchemeFactory());
    }

    public int pcod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PCOD((short)1, "pcod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PCOD
            return PCOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PCOD_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PCOD, new org.apache.thrift.meta_data.FieldMetaData("pcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVrach_args.class, metaDataMap);
    }

    public GetVrach_args() {
    }

    public GetVrach_args(
      int pcod)
    {
      this();
      this.pcod = pcod;
      setPcodIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVrach_args(GetVrach_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.pcod = other.pcod;
    }

    public GetVrach_args deepCopy() {
      return new GetVrach_args(this);
    }

    @Override
    public void clear() {
      setPcodIsSet(false);
      this.pcod = 0;
    }

    public int getPcod() {
      return this.pcod;
    }

    public GetVrach_args setPcod(int pcod) {
      this.pcod = pcod;
      setPcodIsSet(true);
      return this;
    }

    public void unsetPcod() {
      __isset_bit_vector.clear(__PCOD_ISSET_ID);
    }

    /** Returns true if field pcod is set (has been assigned a value) and false otherwise */
    public boolean isSetPcod() {
      return __isset_bit_vector.get(__PCOD_ISSET_ID);
    }

    public void setPcodIsSet(boolean value) {
      __isset_bit_vector.set(__PCOD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PCOD:
        if (value == null) {
          unsetPcod();
        } else {
          setPcod((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PCOD:
        return Integer.valueOf(getPcod());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PCOD:
        return isSetPcod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVrach_args)
        return this.equals((GetVrach_args)that);
      return false;
    }

    public boolean equals(GetVrach_args that) {
      if (that == null)
        return false;

      boolean this_present_pcod = true;
      boolean that_present_pcod = true;
      if (this_present_pcod || that_present_pcod) {
        if (!(this_present_pcod && that_present_pcod))
          return false;
        if (this.pcod != that.pcod)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetVrach_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetVrach_args typedOther = (GetVrach_args)other;

      lastComparison = Boolean.valueOf(isSetPcod()).compareTo(typedOther.isSetPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcod, typedOther.pcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetVrach_args(");
      boolean first = true;

      sb.append("pcod:");
      sb.append(this.pcod);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVrach_argsStandardSchemeFactory implements SchemeFactory {
      public GetVrach_argsStandardScheme getScheme() {
        return new GetVrach_argsStandardScheme();
      }
    }

    private static class GetVrach_argsStandardScheme extends StandardScheme<GetVrach_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVrach_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pcod = iprot.readI32();
                struct.setPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVrach_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PCOD_FIELD_DESC);
        oprot.writeI32(struct.pcod);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVrach_argsTupleSchemeFactory implements SchemeFactory {
      public GetVrach_argsTupleScheme getScheme() {
        return new GetVrach_argsTupleScheme();
      }
    }

    private static class GetVrach_argsTupleScheme extends TupleScheme<GetVrach_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPcod()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPcod()) {
          oprot.writeI32(struct.pcod);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pcod = iprot.readI32();
          struct.setPcodIsSet(true);
        }
      }
    }

  }

  public static class GetVrach_result implements org.apache.thrift.TBase<GetVrach_result, GetVrach_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVrach_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField VNE_FIELD_DESC = new org.apache.thrift.protocol.TField("vne", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetVrach_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVrach_resultTupleSchemeFactory());
    }

    public VrachInfo success; // required
    public VrachNotFoundException vne; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      VNE((short)1, "vne");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // VNE
            return VNE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VrachInfo.class)));
      tmpMap.put(_Fields.VNE, new org.apache.thrift.meta_data.FieldMetaData("vne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVrach_result.class, metaDataMap);
    }

    public GetVrach_result() {
    }

    public GetVrach_result(
      VrachInfo success,
      VrachNotFoundException vne)
    {
      this();
      this.success = success;
      this.vne = vne;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVrach_result(GetVrach_result other) {
      if (other.isSetSuccess()) {
        this.success = new VrachInfo(other.success);
      }
      if (other.isSetVne()) {
        this.vne = new VrachNotFoundException(other.vne);
      }
    }

    public GetVrach_result deepCopy() {
      return new GetVrach_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.vne = null;
    }

    public VrachInfo getSuccess() {
      return this.success;
    }

    public GetVrach_result setSuccess(VrachInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public VrachNotFoundException getVne() {
      return this.vne;
    }

    public GetVrach_result setVne(VrachNotFoundException vne) {
      this.vne = vne;
      return this;
    }

    public void unsetVne() {
      this.vne = null;
    }

    /** Returns true if field vne is set (has been assigned a value) and false otherwise */
    public boolean isSetVne() {
      return this.vne != null;
    }

    public void setVneIsSet(boolean value) {
      if (!value) {
        this.vne = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((VrachInfo)value);
        }
        break;

      case VNE:
        if (value == null) {
          unsetVne();
        } else {
          setVne((VrachNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case VNE:
        return getVne();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case VNE:
        return isSetVne();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVrach_result)
        return this.equals((GetVrach_result)that);
      return false;
    }

    public boolean equals(GetVrach_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_vne = true && this.isSetVne();
      boolean that_present_vne = true && that.isSetVne();
      if (this_present_vne || that_present_vne) {
        if (!(this_present_vne && that_present_vne))
          return false;
        if (!this.vne.equals(that.vne))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetVrach_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetVrach_result typedOther = (GetVrach_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVne()).compareTo(typedOther.isSetVne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vne, typedOther.vne);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetVrach_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vne:");
      if (this.vne == null) {
        sb.append("null");
      } else {
        sb.append(this.vne);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVrach_resultStandardSchemeFactory implements SchemeFactory {
      public GetVrach_resultStandardScheme getScheme() {
        return new GetVrach_resultStandardScheme();
      }
    }

    private static class GetVrach_resultStandardScheme extends StandardScheme<GetVrach_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVrach_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new VrachInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // VNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vne = new VrachNotFoundException();
                struct.vne.read(iprot);
                struct.setVneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVrach_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.vne != null) {
          oprot.writeFieldBegin(VNE_FIELD_DESC);
          struct.vne.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVrach_resultTupleSchemeFactory implements SchemeFactory {
      public GetVrach_resultTupleScheme getScheme() {
        return new GetVrach_resultTupleScheme();
      }
    }

    private static class GetVrach_resultTupleScheme extends TupleScheme<GetVrach_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetVne()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetVne()) {
          struct.vne.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new VrachInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vne = new VrachNotFoundException();
          struct.vne.read(iprot);
          struct.setVneIsSet(true);
        }
      }
    }

  }

  public static class AddVrach_args implements org.apache.thrift.TBase<AddVrach_args, AddVrach_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddVrach_args");

    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddVrach_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddVrach_argsTupleSchemeFactory());
    }

    public VrachInfo vr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VR((short)1, "vr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VR
            return VR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VrachInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddVrach_args.class, metaDataMap);
    }

    public AddVrach_args() {
    }

    public AddVrach_args(
      VrachInfo vr)
    {
      this();
      this.vr = vr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddVrach_args(AddVrach_args other) {
      if (other.isSetVr()) {
        this.vr = new VrachInfo(other.vr);
      }
    }

    public AddVrach_args deepCopy() {
      return new AddVrach_args(this);
    }

    @Override
    public void clear() {
      this.vr = null;
    }

    public VrachInfo getVr() {
      return this.vr;
    }

    public AddVrach_args setVr(VrachInfo vr) {
      this.vr = vr;
      return this;
    }

    public void unsetVr() {
      this.vr = null;
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return this.vr != null;
    }

    public void setVrIsSet(boolean value) {
      if (!value) {
        this.vr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((VrachInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VR:
        return getVr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VR:
        return isSetVr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddVrach_args)
        return this.equals((AddVrach_args)that);
      return false;
    }

    public boolean equals(AddVrach_args that) {
      if (that == null)
        return false;

      boolean this_present_vr = true && this.isSetVr();
      boolean that_present_vr = true && that.isSetVr();
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (!this.vr.equals(that.vr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddVrach_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddVrach_args typedOther = (AddVrach_args)other;

      lastComparison = Boolean.valueOf(isSetVr()).compareTo(typedOther.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, typedOther.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddVrach_args(");
      boolean first = true;

      sb.append("vr:");
      if (this.vr == null) {
        sb.append("null");
      } else {
        sb.append(this.vr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddVrach_argsStandardSchemeFactory implements SchemeFactory {
      public AddVrach_argsStandardScheme getScheme() {
        return new AddVrach_argsStandardScheme();
      }
    }

    private static class AddVrach_argsStandardScheme extends StandardScheme<AddVrach_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddVrach_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vr = new VrachInfo();
                struct.vr.read(iprot);
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddVrach_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vr != null) {
          oprot.writeFieldBegin(VR_FIELD_DESC);
          struct.vr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddVrach_argsTupleSchemeFactory implements SchemeFactory {
      public AddVrach_argsTupleScheme getScheme() {
        return new AddVrach_argsTupleScheme();
      }
    }

    private static class AddVrach_argsTupleScheme extends TupleScheme<AddVrach_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVr()) {
          struct.vr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vr = new VrachInfo();
          struct.vr.read(iprot);
          struct.setVrIsSet(true);
        }
      }
    }

  }

  public static class AddVrach_result implements org.apache.thrift.TBase<AddVrach_result, AddVrach_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddVrach_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField VEE_FIELD_DESC = new org.apache.thrift.protocol.TField("vee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddVrach_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddVrach_resultTupleSchemeFactory());
    }

    public int success; // required
    public VrachExistsException vee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      VEE((short)1, "vee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // VEE
            return VEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VEE, new org.apache.thrift.meta_data.FieldMetaData("vee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddVrach_result.class, metaDataMap);
    }

    public AddVrach_result() {
    }

    public AddVrach_result(
      int success,
      VrachExistsException vee)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.vee = vee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddVrach_result(AddVrach_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetVee()) {
        this.vee = new VrachExistsException(other.vee);
      }
    }

    public AddVrach_result deepCopy() {
      return new AddVrach_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.vee = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public AddVrach_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public VrachExistsException getVee() {
      return this.vee;
    }

    public AddVrach_result setVee(VrachExistsException vee) {
      this.vee = vee;
      return this;
    }

    public void unsetVee() {
      this.vee = null;
    }

    /** Returns true if field vee is set (has been assigned a value) and false otherwise */
    public boolean isSetVee() {
      return this.vee != null;
    }

    public void setVeeIsSet(boolean value) {
      if (!value) {
        this.vee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case VEE:
        if (value == null) {
          unsetVee();
        } else {
          setVee((VrachExistsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case VEE:
        return getVee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case VEE:
        return isSetVee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddVrach_result)
        return this.equals((AddVrach_result)that);
      return false;
    }

    public boolean equals(AddVrach_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_vee = true && this.isSetVee();
      boolean that_present_vee = true && that.isSetVee();
      if (this_present_vee || that_present_vee) {
        if (!(this_present_vee && that_present_vee))
          return false;
        if (!this.vee.equals(that.vee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddVrach_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddVrach_result typedOther = (AddVrach_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVee()).compareTo(typedOther.isSetVee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vee, typedOther.vee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddVrach_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vee:");
      if (this.vee == null) {
        sb.append("null");
      } else {
        sb.append(this.vee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddVrach_resultStandardSchemeFactory implements SchemeFactory {
      public AddVrach_resultStandardScheme getScheme() {
        return new AddVrach_resultStandardScheme();
      }
    }

    private static class AddVrach_resultStandardScheme extends StandardScheme<AddVrach_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddVrach_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // VEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vee = new VrachExistsException();
                struct.vee.read(iprot);
                struct.setVeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddVrach_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.vee != null) {
          oprot.writeFieldBegin(VEE_FIELD_DESC);
          struct.vee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddVrach_resultTupleSchemeFactory implements SchemeFactory {
      public AddVrach_resultTupleScheme getScheme() {
        return new AddVrach_resultTupleScheme();
      }
    }

    private static class AddVrach_resultTupleScheme extends TupleScheme<AddVrach_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetVee()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetVee()) {
          struct.vee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vee = new VrachExistsException();
          struct.vee.read(iprot);
          struct.setVeeIsSet(true);
        }
      }
    }

  }

  public static class UpdVrach_args implements org.apache.thrift.TBase<UpdVrach_args, UpdVrach_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdVrach_args");

    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdVrach_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdVrach_argsTupleSchemeFactory());
    }

    public VrachInfo vr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VR((short)1, "vr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VR
            return VR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VrachInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdVrach_args.class, metaDataMap);
    }

    public UpdVrach_args() {
    }

    public UpdVrach_args(
      VrachInfo vr)
    {
      this();
      this.vr = vr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdVrach_args(UpdVrach_args other) {
      if (other.isSetVr()) {
        this.vr = new VrachInfo(other.vr);
      }
    }

    public UpdVrach_args deepCopy() {
      return new UpdVrach_args(this);
    }

    @Override
    public void clear() {
      this.vr = null;
    }

    public VrachInfo getVr() {
      return this.vr;
    }

    public UpdVrach_args setVr(VrachInfo vr) {
      this.vr = vr;
      return this;
    }

    public void unsetVr() {
      this.vr = null;
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return this.vr != null;
    }

    public void setVrIsSet(boolean value) {
      if (!value) {
        this.vr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((VrachInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VR:
        return getVr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VR:
        return isSetVr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdVrach_args)
        return this.equals((UpdVrach_args)that);
      return false;
    }

    public boolean equals(UpdVrach_args that) {
      if (that == null)
        return false;

      boolean this_present_vr = true && this.isSetVr();
      boolean that_present_vr = true && that.isSetVr();
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (!this.vr.equals(that.vr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdVrach_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdVrach_args typedOther = (UpdVrach_args)other;

      lastComparison = Boolean.valueOf(isSetVr()).compareTo(typedOther.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, typedOther.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdVrach_args(");
      boolean first = true;

      sb.append("vr:");
      if (this.vr == null) {
        sb.append("null");
      } else {
        sb.append(this.vr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdVrach_argsStandardSchemeFactory implements SchemeFactory {
      public UpdVrach_argsStandardScheme getScheme() {
        return new UpdVrach_argsStandardScheme();
      }
    }

    private static class UpdVrach_argsStandardScheme extends StandardScheme<UpdVrach_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdVrach_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vr = new VrachInfo();
                struct.vr.read(iprot);
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdVrach_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vr != null) {
          oprot.writeFieldBegin(VR_FIELD_DESC);
          struct.vr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdVrach_argsTupleSchemeFactory implements SchemeFactory {
      public UpdVrach_argsTupleScheme getScheme() {
        return new UpdVrach_argsTupleScheme();
      }
    }

    private static class UpdVrach_argsTupleScheme extends TupleScheme<UpdVrach_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVr()) {
          struct.vr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vr = new VrachInfo();
          struct.vr.read(iprot);
          struct.setVrIsSet(true);
        }
      }
    }

  }

  public static class UpdVrach_result implements org.apache.thrift.TBase<UpdVrach_result, UpdVrach_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdVrach_result");

    private static final org.apache.thrift.protocol.TField VEE_FIELD_DESC = new org.apache.thrift.protocol.TField("vee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdVrach_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdVrach_resultTupleSchemeFactory());
    }

    public VrachExistsException vee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VEE((short)1, "vee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VEE
            return VEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VEE, new org.apache.thrift.meta_data.FieldMetaData("vee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdVrach_result.class, metaDataMap);
    }

    public UpdVrach_result() {
    }

    public UpdVrach_result(
      VrachExistsException vee)
    {
      this();
      this.vee = vee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdVrach_result(UpdVrach_result other) {
      if (other.isSetVee()) {
        this.vee = new VrachExistsException(other.vee);
      }
    }

    public UpdVrach_result deepCopy() {
      return new UpdVrach_result(this);
    }

    @Override
    public void clear() {
      this.vee = null;
    }

    public VrachExistsException getVee() {
      return this.vee;
    }

    public UpdVrach_result setVee(VrachExistsException vee) {
      this.vee = vee;
      return this;
    }

    public void unsetVee() {
      this.vee = null;
    }

    /** Returns true if field vee is set (has been assigned a value) and false otherwise */
    public boolean isSetVee() {
      return this.vee != null;
    }

    public void setVeeIsSet(boolean value) {
      if (!value) {
        this.vee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VEE:
        if (value == null) {
          unsetVee();
        } else {
          setVee((VrachExistsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VEE:
        return getVee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VEE:
        return isSetVee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdVrach_result)
        return this.equals((UpdVrach_result)that);
      return false;
    }

    public boolean equals(UpdVrach_result that) {
      if (that == null)
        return false;

      boolean this_present_vee = true && this.isSetVee();
      boolean that_present_vee = true && that.isSetVee();
      if (this_present_vee || that_present_vee) {
        if (!(this_present_vee && that_present_vee))
          return false;
        if (!this.vee.equals(that.vee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdVrach_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdVrach_result typedOther = (UpdVrach_result)other;

      lastComparison = Boolean.valueOf(isSetVee()).compareTo(typedOther.isSetVee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vee, typedOther.vee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdVrach_result(");
      boolean first = true;

      sb.append("vee:");
      if (this.vee == null) {
        sb.append("null");
      } else {
        sb.append(this.vee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdVrach_resultStandardSchemeFactory implements SchemeFactory {
      public UpdVrach_resultStandardScheme getScheme() {
        return new UpdVrach_resultStandardScheme();
      }
    }

    private static class UpdVrach_resultStandardScheme extends StandardScheme<UpdVrach_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdVrach_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vee = new VrachExistsException();
                struct.vee.read(iprot);
                struct.setVeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdVrach_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vee != null) {
          oprot.writeFieldBegin(VEE_FIELD_DESC);
          struct.vee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdVrach_resultTupleSchemeFactory implements SchemeFactory {
      public UpdVrach_resultTupleScheme getScheme() {
        return new UpdVrach_resultTupleScheme();
      }
    }

    private static class UpdVrach_resultTupleScheme extends TupleScheme<UpdVrach_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVee()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVee()) {
          struct.vee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vee = new VrachExistsException();
          struct.vee.read(iprot);
          struct.setVeeIsSet(true);
        }
      }
    }

  }

  public static class DelVrach_args implements org.apache.thrift.TBase<DelVrach_args, DelVrach_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelVrach_args");

    private static final org.apache.thrift.protocol.TField PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("pcod", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DelVrach_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DelVrach_argsTupleSchemeFactory());
    }

    public int pcod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PCOD((short)1, "pcod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PCOD
            return PCOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PCOD_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PCOD, new org.apache.thrift.meta_data.FieldMetaData("pcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelVrach_args.class, metaDataMap);
    }

    public DelVrach_args() {
    }

    public DelVrach_args(
      int pcod)
    {
      this();
      this.pcod = pcod;
      setPcodIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelVrach_args(DelVrach_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.pcod = other.pcod;
    }

    public DelVrach_args deepCopy() {
      return new DelVrach_args(this);
    }

    @Override
    public void clear() {
      setPcodIsSet(false);
      this.pcod = 0;
    }

    public int getPcod() {
      return this.pcod;
    }

    public DelVrach_args setPcod(int pcod) {
      this.pcod = pcod;
      setPcodIsSet(true);
      return this;
    }

    public void unsetPcod() {
      __isset_bit_vector.clear(__PCOD_ISSET_ID);
    }

    /** Returns true if field pcod is set (has been assigned a value) and false otherwise */
    public boolean isSetPcod() {
      return __isset_bit_vector.get(__PCOD_ISSET_ID);
    }

    public void setPcodIsSet(boolean value) {
      __isset_bit_vector.set(__PCOD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PCOD:
        if (value == null) {
          unsetPcod();
        } else {
          setPcod((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PCOD:
        return Integer.valueOf(getPcod());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PCOD:
        return isSetPcod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DelVrach_args)
        return this.equals((DelVrach_args)that);
      return false;
    }

    public boolean equals(DelVrach_args that) {
      if (that == null)
        return false;

      boolean this_present_pcod = true;
      boolean that_present_pcod = true;
      if (this_present_pcod || that_present_pcod) {
        if (!(this_present_pcod && that_present_pcod))
          return false;
        if (this.pcod != that.pcod)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DelVrach_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DelVrach_args typedOther = (DelVrach_args)other;

      lastComparison = Boolean.valueOf(isSetPcod()).compareTo(typedOther.isSetPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcod, typedOther.pcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DelVrach_args(");
      boolean first = true;

      sb.append("pcod:");
      sb.append(this.pcod);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelVrach_argsStandardSchemeFactory implements SchemeFactory {
      public DelVrach_argsStandardScheme getScheme() {
        return new DelVrach_argsStandardScheme();
      }
    }

    private static class DelVrach_argsStandardScheme extends StandardScheme<DelVrach_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelVrach_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pcod = iprot.readI32();
                struct.setPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelVrach_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PCOD_FIELD_DESC);
        oprot.writeI32(struct.pcod);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelVrach_argsTupleSchemeFactory implements SchemeFactory {
      public DelVrach_argsTupleScheme getScheme() {
        return new DelVrach_argsTupleScheme();
      }
    }

    private static class DelVrach_argsTupleScheme extends TupleScheme<DelVrach_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPcod()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPcod()) {
          oprot.writeI32(struct.pcod);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pcod = iprot.readI32();
          struct.setPcodIsSet(true);
        }
      }
    }

  }

  public static class DelVrach_result implements org.apache.thrift.TBase<DelVrach_result, DelVrach_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelVrach_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DelVrach_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DelVrach_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelVrach_result.class, metaDataMap);
    }

    public DelVrach_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelVrach_result(DelVrach_result other) {
    }

    public DelVrach_result deepCopy() {
      return new DelVrach_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DelVrach_result)
        return this.equals((DelVrach_result)that);
      return false;
    }

    public boolean equals(DelVrach_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DelVrach_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DelVrach_result typedOther = (DelVrach_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DelVrach_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelVrach_resultStandardSchemeFactory implements SchemeFactory {
      public DelVrach_resultStandardScheme getScheme() {
        return new DelVrach_resultStandardScheme();
      }
    }

    private static class DelVrach_resultStandardScheme extends StandardScheme<DelVrach_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelVrach_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelVrach_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelVrach_resultTupleSchemeFactory implements SchemeFactory {
      public DelVrach_resultTupleScheme getScheme() {
        return new DelVrach_resultTupleScheme();
      }
    }

    private static class DelVrach_resultTupleScheme extends TupleScheme<DelVrach_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetMrabList_args implements org.apache.thrift.TBase<GetMrabList_args, GetMrabList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMrabList_args");

    private static final org.apache.thrift.protocol.TField VR_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("vrPcod", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetMrabList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetMrabList_argsTupleSchemeFactory());
    }

    public int vrPcod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VR_PCOD((short)1, "vrPcod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VR_PCOD
            return VR_PCOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VRPCOD_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VR_PCOD, new org.apache.thrift.meta_data.FieldMetaData("vrPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMrabList_args.class, metaDataMap);
    }

    public GetMrabList_args() {
    }

    public GetMrabList_args(
      int vrPcod)
    {
      this();
      this.vrPcod = vrPcod;
      setVrPcodIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetMrabList_args(GetMrabList_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.vrPcod = other.vrPcod;
    }

    public GetMrabList_args deepCopy() {
      return new GetMrabList_args(this);
    }

    @Override
    public void clear() {
      setVrPcodIsSet(false);
      this.vrPcod = 0;
    }

    public int getVrPcod() {
      return this.vrPcod;
    }

    public GetMrabList_args setVrPcod(int vrPcod) {
      this.vrPcod = vrPcod;
      setVrPcodIsSet(true);
      return this;
    }

    public void unsetVrPcod() {
      __isset_bit_vector.clear(__VRPCOD_ISSET_ID);
    }

    /** Returns true if field vrPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetVrPcod() {
      return __isset_bit_vector.get(__VRPCOD_ISSET_ID);
    }

    public void setVrPcodIsSet(boolean value) {
      __isset_bit_vector.set(__VRPCOD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VR_PCOD:
        if (value == null) {
          unsetVrPcod();
        } else {
          setVrPcod((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VR_PCOD:
        return Integer.valueOf(getVrPcod());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VR_PCOD:
        return isSetVrPcod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetMrabList_args)
        return this.equals((GetMrabList_args)that);
      return false;
    }

    public boolean equals(GetMrabList_args that) {
      if (that == null)
        return false;

      boolean this_present_vrPcod = true;
      boolean that_present_vrPcod = true;
      if (this_present_vrPcod || that_present_vrPcod) {
        if (!(this_present_vrPcod && that_present_vrPcod))
          return false;
        if (this.vrPcod != that.vrPcod)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetMrabList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetMrabList_args typedOther = (GetMrabList_args)other;

      lastComparison = Boolean.valueOf(isSetVrPcod()).compareTo(typedOther.isSetVrPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVrPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vrPcod, typedOther.vrPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetMrabList_args(");
      boolean first = true;

      sb.append("vrPcod:");
      sb.append(this.vrPcod);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetMrabList_argsStandardSchemeFactory implements SchemeFactory {
      public GetMrabList_argsStandardScheme getScheme() {
        return new GetMrabList_argsStandardScheme();
      }
    }

    private static class GetMrabList_argsStandardScheme extends StandardScheme<GetMrabList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetMrabList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VR_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vrPcod = iprot.readI32();
                struct.setVrPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetMrabList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VR_PCOD_FIELD_DESC);
        oprot.writeI32(struct.vrPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetMrabList_argsTupleSchemeFactory implements SchemeFactory {
      public GetMrabList_argsTupleScheme getScheme() {
        return new GetMrabList_argsTupleScheme();
      }
    }

    private static class GetMrabList_argsTupleScheme extends TupleScheme<GetMrabList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetMrabList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVrPcod()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVrPcod()) {
          oprot.writeI32(struct.vrPcod);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetMrabList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vrPcod = iprot.readI32();
          struct.setVrPcodIsSet(true);
        }
      }
    }

  }

  public static class GetMrabList_result implements org.apache.thrift.TBase<GetMrabList_result, GetMrabList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMrabList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetMrabList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetMrabList_resultTupleSchemeFactory());
    }

    public List<MestoRab> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MestoRab.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMrabList_result.class, metaDataMap);
    }

    public GetMrabList_result() {
    }

    public GetMrabList_result(
      List<MestoRab> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetMrabList_result(GetMrabList_result other) {
      if (other.isSetSuccess()) {
        List<MestoRab> __this__success = new ArrayList<MestoRab>();
        for (MestoRab other_element : other.success) {
          __this__success.add(new MestoRab(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetMrabList_result deepCopy() {
      return new GetMrabList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<MestoRab> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MestoRab elem) {
      if (this.success == null) {
        this.success = new ArrayList<MestoRab>();
      }
      this.success.add(elem);
    }

    public List<MestoRab> getSuccess() {
      return this.success;
    }

    public GetMrabList_result setSuccess(List<MestoRab> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<MestoRab>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetMrabList_result)
        return this.equals((GetMrabList_result)that);
      return false;
    }

    public boolean equals(GetMrabList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetMrabList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetMrabList_result typedOther = (GetMrabList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetMrabList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetMrabList_resultStandardSchemeFactory implements SchemeFactory {
      public GetMrabList_resultStandardScheme getScheme() {
        return new GetMrabList_resultStandardScheme();
      }
    }

    private static class GetMrabList_resultStandardScheme extends StandardScheme<GetMrabList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetMrabList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<MestoRab>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    MestoRab _elem10; // required
                    _elem10 = new MestoRab();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetMrabList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MestoRab _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetMrabList_resultTupleSchemeFactory implements SchemeFactory {
      public GetMrabList_resultTupleScheme getScheme() {
        return new GetMrabList_resultTupleScheme();
      }
    }

    private static class GetMrabList_resultTupleScheme extends TupleScheme<GetMrabList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetMrabList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MestoRab _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetMrabList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<MestoRab>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              MestoRab _elem15; // required
              _elem15 = new MestoRab();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetMrab_args implements org.apache.thrift.TBase<GetMrab_args, GetMrab_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMrab_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetMrab_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetMrab_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMrab_args.class, metaDataMap);
    }

    public GetMrab_args() {
    }

    public GetMrab_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetMrab_args(GetMrab_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.id = other.id;
    }

    public GetMrab_args deepCopy() {
      return new GetMrab_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public GetMrab_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bit_vector.clear(__ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return __isset_bit_vector.get(__ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bit_vector.set(__ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetMrab_args)
        return this.equals((GetMrab_args)that);
      return false;
    }

    public boolean equals(GetMrab_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetMrab_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetMrab_args typedOther = (GetMrab_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetMrab_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetMrab_argsStandardSchemeFactory implements SchemeFactory {
      public GetMrab_argsStandardScheme getScheme() {
        return new GetMrab_argsStandardScheme();
      }
    }

    private static class GetMrab_argsStandardScheme extends StandardScheme<GetMrab_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetMrab_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetMrab_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetMrab_argsTupleSchemeFactory implements SchemeFactory {
      public GetMrab_argsTupleScheme getScheme() {
        return new GetMrab_argsTupleScheme();
      }
    }

    private static class GetMrab_argsTupleScheme extends TupleScheme<GetMrab_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class GetMrab_result implements org.apache.thrift.TBase<GetMrab_result, GetMrab_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMrab_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MNE_FIELD_DESC = new org.apache.thrift.protocol.TField("mne", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetMrab_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetMrab_resultTupleSchemeFactory());
    }

    public MestoRab success; // required
    public MestoRabNotFoundException mne; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MNE((short)1, "mne");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MNE
            return MNE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MestoRab.class)));
      tmpMap.put(_Fields.MNE, new org.apache.thrift.meta_data.FieldMetaData("mne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMrab_result.class, metaDataMap);
    }

    public GetMrab_result() {
    }

    public GetMrab_result(
      MestoRab success,
      MestoRabNotFoundException mne)
    {
      this();
      this.success = success;
      this.mne = mne;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetMrab_result(GetMrab_result other) {
      if (other.isSetSuccess()) {
        this.success = new MestoRab(other.success);
      }
      if (other.isSetMne()) {
        this.mne = new MestoRabNotFoundException(other.mne);
      }
    }

    public GetMrab_result deepCopy() {
      return new GetMrab_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.mne = null;
    }

    public MestoRab getSuccess() {
      return this.success;
    }

    public GetMrab_result setSuccess(MestoRab success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MestoRabNotFoundException getMne() {
      return this.mne;
    }

    public GetMrab_result setMne(MestoRabNotFoundException mne) {
      this.mne = mne;
      return this;
    }

    public void unsetMne() {
      this.mne = null;
    }

    /** Returns true if field mne is set (has been assigned a value) and false otherwise */
    public boolean isSetMne() {
      return this.mne != null;
    }

    public void setMneIsSet(boolean value) {
      if (!value) {
        this.mne = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MestoRab)value);
        }
        break;

      case MNE:
        if (value == null) {
          unsetMne();
        } else {
          setMne((MestoRabNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MNE:
        return getMne();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MNE:
        return isSetMne();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetMrab_result)
        return this.equals((GetMrab_result)that);
      return false;
    }

    public boolean equals(GetMrab_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_mne = true && this.isSetMne();
      boolean that_present_mne = true && that.isSetMne();
      if (this_present_mne || that_present_mne) {
        if (!(this_present_mne && that_present_mne))
          return false;
        if (!this.mne.equals(that.mne))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetMrab_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetMrab_result typedOther = (GetMrab_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMne()).compareTo(typedOther.isSetMne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mne, typedOther.mne);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetMrab_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mne:");
      if (this.mne == null) {
        sb.append("null");
      } else {
        sb.append(this.mne);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetMrab_resultStandardSchemeFactory implements SchemeFactory {
      public GetMrab_resultStandardScheme getScheme() {
        return new GetMrab_resultStandardScheme();
      }
    }

    private static class GetMrab_resultStandardScheme extends StandardScheme<GetMrab_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetMrab_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MestoRab();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mne = new MestoRabNotFoundException();
                struct.mne.read(iprot);
                struct.setMneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetMrab_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mne != null) {
          oprot.writeFieldBegin(MNE_FIELD_DESC);
          struct.mne.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetMrab_resultTupleSchemeFactory implements SchemeFactory {
      public GetMrab_resultTupleScheme getScheme() {
        return new GetMrab_resultTupleScheme();
      }
    }

    private static class GetMrab_resultTupleScheme extends TupleScheme<GetMrab_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMne()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMne()) {
          struct.mne.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new MestoRab();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mne = new MestoRabNotFoundException();
          struct.mne.read(iprot);
          struct.setMneIsSet(true);
        }
      }
    }

  }

  public static class AddMrab_args implements org.apache.thrift.TBase<AddMrab_args, AddMrab_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddMrab_args");

    private static final org.apache.thrift.protocol.TField MR_FIELD_DESC = new org.apache.thrift.protocol.TField("mr", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddMrab_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddMrab_argsTupleSchemeFactory());
    }

    public MestoRab mr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MR((short)1, "mr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MR
            return MR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MR, new org.apache.thrift.meta_data.FieldMetaData("mr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MestoRab.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddMrab_args.class, metaDataMap);
    }

    public AddMrab_args() {
    }

    public AddMrab_args(
      MestoRab mr)
    {
      this();
      this.mr = mr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddMrab_args(AddMrab_args other) {
      if (other.isSetMr()) {
        this.mr = new MestoRab(other.mr);
      }
    }

    public AddMrab_args deepCopy() {
      return new AddMrab_args(this);
    }

    @Override
    public void clear() {
      this.mr = null;
    }

    public MestoRab getMr() {
      return this.mr;
    }

    public AddMrab_args setMr(MestoRab mr) {
      this.mr = mr;
      return this;
    }

    public void unsetMr() {
      this.mr = null;
    }

    /** Returns true if field mr is set (has been assigned a value) and false otherwise */
    public boolean isSetMr() {
      return this.mr != null;
    }

    public void setMrIsSet(boolean value) {
      if (!value) {
        this.mr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MR:
        if (value == null) {
          unsetMr();
        } else {
          setMr((MestoRab)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MR:
        return getMr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MR:
        return isSetMr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddMrab_args)
        return this.equals((AddMrab_args)that);
      return false;
    }

    public boolean equals(AddMrab_args that) {
      if (that == null)
        return false;

      boolean this_present_mr = true && this.isSetMr();
      boolean that_present_mr = true && that.isSetMr();
      if (this_present_mr || that_present_mr) {
        if (!(this_present_mr && that_present_mr))
          return false;
        if (!this.mr.equals(that.mr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddMrab_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddMrab_args typedOther = (AddMrab_args)other;

      lastComparison = Boolean.valueOf(isSetMr()).compareTo(typedOther.isSetMr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mr, typedOther.mr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddMrab_args(");
      boolean first = true;

      sb.append("mr:");
      if (this.mr == null) {
        sb.append("null");
      } else {
        sb.append(this.mr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddMrab_argsStandardSchemeFactory implements SchemeFactory {
      public AddMrab_argsStandardScheme getScheme() {
        return new AddMrab_argsStandardScheme();
      }
    }

    private static class AddMrab_argsStandardScheme extends StandardScheme<AddMrab_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddMrab_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mr = new MestoRab();
                struct.mr.read(iprot);
                struct.setMrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddMrab_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mr != null) {
          oprot.writeFieldBegin(MR_FIELD_DESC);
          struct.mr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddMrab_argsTupleSchemeFactory implements SchemeFactory {
      public AddMrab_argsTupleScheme getScheme() {
        return new AddMrab_argsTupleScheme();
      }
    }

    private static class AddMrab_argsTupleScheme extends TupleScheme<AddMrab_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMr()) {
          struct.mr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mr = new MestoRab();
          struct.mr.read(iprot);
          struct.setMrIsSet(true);
        }
      }
    }

  }

  public static class AddMrab_result implements org.apache.thrift.TBase<AddMrab_result, AddMrab_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddMrab_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField MEE_FIELD_DESC = new org.apache.thrift.protocol.TField("mee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddMrab_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddMrab_resultTupleSchemeFactory());
    }

    public int success; // required
    public MestoRabExistsException mee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MEE((short)1, "mee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MEE
            return MEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MEE, new org.apache.thrift.meta_data.FieldMetaData("mee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddMrab_result.class, metaDataMap);
    }

    public AddMrab_result() {
    }

    public AddMrab_result(
      int success,
      MestoRabExistsException mee)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.mee = mee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddMrab_result(AddMrab_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetMee()) {
        this.mee = new MestoRabExistsException(other.mee);
      }
    }

    public AddMrab_result deepCopy() {
      return new AddMrab_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.mee = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public AddMrab_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public MestoRabExistsException getMee() {
      return this.mee;
    }

    public AddMrab_result setMee(MestoRabExistsException mee) {
      this.mee = mee;
      return this;
    }

    public void unsetMee() {
      this.mee = null;
    }

    /** Returns true if field mee is set (has been assigned a value) and false otherwise */
    public boolean isSetMee() {
      return this.mee != null;
    }

    public void setMeeIsSet(boolean value) {
      if (!value) {
        this.mee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case MEE:
        if (value == null) {
          unsetMee();
        } else {
          setMee((MestoRabExistsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case MEE:
        return getMee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MEE:
        return isSetMee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddMrab_result)
        return this.equals((AddMrab_result)that);
      return false;
    }

    public boolean equals(AddMrab_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_mee = true && this.isSetMee();
      boolean that_present_mee = true && that.isSetMee();
      if (this_present_mee || that_present_mee) {
        if (!(this_present_mee && that_present_mee))
          return false;
        if (!this.mee.equals(that.mee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddMrab_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddMrab_result typedOther = (AddMrab_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMee()).compareTo(typedOther.isSetMee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mee, typedOther.mee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddMrab_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mee:");
      if (this.mee == null) {
        sb.append("null");
      } else {
        sb.append(this.mee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddMrab_resultStandardSchemeFactory implements SchemeFactory {
      public AddMrab_resultStandardScheme getScheme() {
        return new AddMrab_resultStandardScheme();
      }
    }

    private static class AddMrab_resultStandardScheme extends StandardScheme<AddMrab_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddMrab_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mee = new MestoRabExistsException();
                struct.mee.read(iprot);
                struct.setMeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddMrab_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.mee != null) {
          oprot.writeFieldBegin(MEE_FIELD_DESC);
          struct.mee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddMrab_resultTupleSchemeFactory implements SchemeFactory {
      public AddMrab_resultTupleScheme getScheme() {
        return new AddMrab_resultTupleScheme();
      }
    }

    private static class AddMrab_resultTupleScheme extends TupleScheme<AddMrab_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMee()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetMee()) {
          struct.mee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mee = new MestoRabExistsException();
          struct.mee.read(iprot);
          struct.setMeeIsSet(true);
        }
      }
    }

  }

  public static class UpdMrab_args implements org.apache.thrift.TBase<UpdMrab_args, UpdMrab_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdMrab_args");

    private static final org.apache.thrift.protocol.TField MR_FIELD_DESC = new org.apache.thrift.protocol.TField("mr", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdMrab_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdMrab_argsTupleSchemeFactory());
    }

    public MestoRab mr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MR((short)1, "mr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MR
            return MR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MR, new org.apache.thrift.meta_data.FieldMetaData("mr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MestoRab.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdMrab_args.class, metaDataMap);
    }

    public UpdMrab_args() {
    }

    public UpdMrab_args(
      MestoRab mr)
    {
      this();
      this.mr = mr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdMrab_args(UpdMrab_args other) {
      if (other.isSetMr()) {
        this.mr = new MestoRab(other.mr);
      }
    }

    public UpdMrab_args deepCopy() {
      return new UpdMrab_args(this);
    }

    @Override
    public void clear() {
      this.mr = null;
    }

    public MestoRab getMr() {
      return this.mr;
    }

    public UpdMrab_args setMr(MestoRab mr) {
      this.mr = mr;
      return this;
    }

    public void unsetMr() {
      this.mr = null;
    }

    /** Returns true if field mr is set (has been assigned a value) and false otherwise */
    public boolean isSetMr() {
      return this.mr != null;
    }

    public void setMrIsSet(boolean value) {
      if (!value) {
        this.mr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MR:
        if (value == null) {
          unsetMr();
        } else {
          setMr((MestoRab)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MR:
        return getMr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MR:
        return isSetMr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdMrab_args)
        return this.equals((UpdMrab_args)that);
      return false;
    }

    public boolean equals(UpdMrab_args that) {
      if (that == null)
        return false;

      boolean this_present_mr = true && this.isSetMr();
      boolean that_present_mr = true && that.isSetMr();
      if (this_present_mr || that_present_mr) {
        if (!(this_present_mr && that_present_mr))
          return false;
        if (!this.mr.equals(that.mr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdMrab_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdMrab_args typedOther = (UpdMrab_args)other;

      lastComparison = Boolean.valueOf(isSetMr()).compareTo(typedOther.isSetMr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mr, typedOther.mr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdMrab_args(");
      boolean first = true;

      sb.append("mr:");
      if (this.mr == null) {
        sb.append("null");
      } else {
        sb.append(this.mr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdMrab_argsStandardSchemeFactory implements SchemeFactory {
      public UpdMrab_argsStandardScheme getScheme() {
        return new UpdMrab_argsStandardScheme();
      }
    }

    private static class UpdMrab_argsStandardScheme extends StandardScheme<UpdMrab_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdMrab_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mr = new MestoRab();
                struct.mr.read(iprot);
                struct.setMrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdMrab_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mr != null) {
          oprot.writeFieldBegin(MR_FIELD_DESC);
          struct.mr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdMrab_argsTupleSchemeFactory implements SchemeFactory {
      public UpdMrab_argsTupleScheme getScheme() {
        return new UpdMrab_argsTupleScheme();
      }
    }

    private static class UpdMrab_argsTupleScheme extends TupleScheme<UpdMrab_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMr()) {
          struct.mr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mr = new MestoRab();
          struct.mr.read(iprot);
          struct.setMrIsSet(true);
        }
      }
    }

  }

  public static class UpdMrab_result implements org.apache.thrift.TBase<UpdMrab_result, UpdMrab_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdMrab_result");

    private static final org.apache.thrift.protocol.TField MEE_FIELD_DESC = new org.apache.thrift.protocol.TField("mee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdMrab_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdMrab_resultTupleSchemeFactory());
    }

    public MestoRabExistsException mee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEE((short)1, "mee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEE
            return MEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEE, new org.apache.thrift.meta_data.FieldMetaData("mee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdMrab_result.class, metaDataMap);
    }

    public UpdMrab_result() {
    }

    public UpdMrab_result(
      MestoRabExistsException mee)
    {
      this();
      this.mee = mee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdMrab_result(UpdMrab_result other) {
      if (other.isSetMee()) {
        this.mee = new MestoRabExistsException(other.mee);
      }
    }

    public UpdMrab_result deepCopy() {
      return new UpdMrab_result(this);
    }

    @Override
    public void clear() {
      this.mee = null;
    }

    public MestoRabExistsException getMee() {
      return this.mee;
    }

    public UpdMrab_result setMee(MestoRabExistsException mee) {
      this.mee = mee;
      return this;
    }

    public void unsetMee() {
      this.mee = null;
    }

    /** Returns true if field mee is set (has been assigned a value) and false otherwise */
    public boolean isSetMee() {
      return this.mee != null;
    }

    public void setMeeIsSet(boolean value) {
      if (!value) {
        this.mee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEE:
        if (value == null) {
          unsetMee();
        } else {
          setMee((MestoRabExistsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEE:
        return getMee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEE:
        return isSetMee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdMrab_result)
        return this.equals((UpdMrab_result)that);
      return false;
    }

    public boolean equals(UpdMrab_result that) {
      if (that == null)
        return false;

      boolean this_present_mee = true && this.isSetMee();
      boolean that_present_mee = true && that.isSetMee();
      if (this_present_mee || that_present_mee) {
        if (!(this_present_mee && that_present_mee))
          return false;
        if (!this.mee.equals(that.mee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdMrab_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdMrab_result typedOther = (UpdMrab_result)other;

      lastComparison = Boolean.valueOf(isSetMee()).compareTo(typedOther.isSetMee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mee, typedOther.mee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdMrab_result(");
      boolean first = true;

      sb.append("mee:");
      if (this.mee == null) {
        sb.append("null");
      } else {
        sb.append(this.mee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdMrab_resultStandardSchemeFactory implements SchemeFactory {
      public UpdMrab_resultStandardScheme getScheme() {
        return new UpdMrab_resultStandardScheme();
      }
    }

    private static class UpdMrab_resultStandardScheme extends StandardScheme<UpdMrab_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdMrab_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mee = new MestoRabExistsException();
                struct.mee.read(iprot);
                struct.setMeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdMrab_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mee != null) {
          oprot.writeFieldBegin(MEE_FIELD_DESC);
          struct.mee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdMrab_resultTupleSchemeFactory implements SchemeFactory {
      public UpdMrab_resultTupleScheme getScheme() {
        return new UpdMrab_resultTupleScheme();
      }
    }

    private static class UpdMrab_resultTupleScheme extends TupleScheme<UpdMrab_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMee()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMee()) {
          struct.mee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mee = new MestoRabExistsException();
          struct.mee.read(iprot);
          struct.setMeeIsSet(true);
        }
      }
    }

  }

  public static class DelMrab_args implements org.apache.thrift.TBase<DelMrab_args, DelMrab_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelMrab_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DelMrab_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DelMrab_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelMrab_args.class, metaDataMap);
    }

    public DelMrab_args() {
    }

    public DelMrab_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelMrab_args(DelMrab_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.id = other.id;
    }

    public DelMrab_args deepCopy() {
      return new DelMrab_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public DelMrab_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bit_vector.clear(__ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return __isset_bit_vector.get(__ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bit_vector.set(__ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DelMrab_args)
        return this.equals((DelMrab_args)that);
      return false;
    }

    public boolean equals(DelMrab_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DelMrab_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DelMrab_args typedOther = (DelMrab_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DelMrab_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelMrab_argsStandardSchemeFactory implements SchemeFactory {
      public DelMrab_argsStandardScheme getScheme() {
        return new DelMrab_argsStandardScheme();
      }
    }

    private static class DelMrab_argsStandardScheme extends StandardScheme<DelMrab_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelMrab_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelMrab_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelMrab_argsTupleSchemeFactory implements SchemeFactory {
      public DelMrab_argsTupleScheme getScheme() {
        return new DelMrab_argsTupleScheme();
      }
    }

    private static class DelMrab_argsTupleScheme extends TupleScheme<DelMrab_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class DelMrab_result implements org.apache.thrift.TBase<DelMrab_result, DelMrab_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelMrab_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DelMrab_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DelMrab_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelMrab_result.class, metaDataMap);
    }

    public DelMrab_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelMrab_result(DelMrab_result other) {
    }

    public DelMrab_result deepCopy() {
      return new DelMrab_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DelMrab_result)
        return this.equals((DelMrab_result)that);
      return false;
    }

    public boolean equals(DelMrab_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DelMrab_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DelMrab_result typedOther = (DelMrab_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DelMrab_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelMrab_resultStandardSchemeFactory implements SchemeFactory {
      public DelMrab_resultStandardScheme getScheme() {
        return new DelMrab_resultStandardScheme();
      }
    }

    private static class DelMrab_resultStandardScheme extends StandardScheme<DelMrab_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelMrab_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelMrab_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelMrab_resultTupleSchemeFactory implements SchemeFactory {
      public DelMrab_resultTupleScheme getScheme() {
        return new DelMrab_resultTupleScheme();
      }
    }

    private static class DelMrab_resultTupleScheme extends TupleScheme<DelMrab_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ClearVrachMrab_args implements org.apache.thrift.TBase<ClearVrachMrab_args, ClearVrachMrab_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClearVrachMrab_args");

    private static final org.apache.thrift.protocol.TField VR_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("vrPcod", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ClearVrachMrab_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ClearVrachMrab_argsTupleSchemeFactory());
    }

    public int vrPcod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VR_PCOD((short)1, "vrPcod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VR_PCOD
            return VR_PCOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VRPCOD_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VR_PCOD, new org.apache.thrift.meta_data.FieldMetaData("vrPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClearVrachMrab_args.class, metaDataMap);
    }

    public ClearVrachMrab_args() {
    }

    public ClearVrachMrab_args(
      int vrPcod)
    {
      this();
      this.vrPcod = vrPcod;
      setVrPcodIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ClearVrachMrab_args(ClearVrachMrab_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.vrPcod = other.vrPcod;
    }

    public ClearVrachMrab_args deepCopy() {
      return new ClearVrachMrab_args(this);
    }

    @Override
    public void clear() {
      setVrPcodIsSet(false);
      this.vrPcod = 0;
    }

    public int getVrPcod() {
      return this.vrPcod;
    }

    public ClearVrachMrab_args setVrPcod(int vrPcod) {
      this.vrPcod = vrPcod;
      setVrPcodIsSet(true);
      return this;
    }

    public void unsetVrPcod() {
      __isset_bit_vector.clear(__VRPCOD_ISSET_ID);
    }

    /** Returns true if field vrPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetVrPcod() {
      return __isset_bit_vector.get(__VRPCOD_ISSET_ID);
    }

    public void setVrPcodIsSet(boolean value) {
      __isset_bit_vector.set(__VRPCOD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VR_PCOD:
        if (value == null) {
          unsetVrPcod();
        } else {
          setVrPcod((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VR_PCOD:
        return Integer.valueOf(getVrPcod());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VR_PCOD:
        return isSetVrPcod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ClearVrachMrab_args)
        return this.equals((ClearVrachMrab_args)that);
      return false;
    }

    public boolean equals(ClearVrachMrab_args that) {
      if (that == null)
        return false;

      boolean this_present_vrPcod = true;
      boolean that_present_vrPcod = true;
      if (this_present_vrPcod || that_present_vrPcod) {
        if (!(this_present_vrPcod && that_present_vrPcod))
          return false;
        if (this.vrPcod != that.vrPcod)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ClearVrachMrab_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ClearVrachMrab_args typedOther = (ClearVrachMrab_args)other;

      lastComparison = Boolean.valueOf(isSetVrPcod()).compareTo(typedOther.isSetVrPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVrPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vrPcod, typedOther.vrPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ClearVrachMrab_args(");
      boolean first = true;

      sb.append("vrPcod:");
      sb.append(this.vrPcod);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ClearVrachMrab_argsStandardSchemeFactory implements SchemeFactory {
      public ClearVrachMrab_argsStandardScheme getScheme() {
        return new ClearVrachMrab_argsStandardScheme();
      }
    }

    private static class ClearVrachMrab_argsStandardScheme extends StandardScheme<ClearVrachMrab_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ClearVrachMrab_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VR_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vrPcod = iprot.readI32();
                struct.setVrPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ClearVrachMrab_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VR_PCOD_FIELD_DESC);
        oprot.writeI32(struct.vrPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ClearVrachMrab_argsTupleSchemeFactory implements SchemeFactory {
      public ClearVrachMrab_argsTupleScheme getScheme() {
        return new ClearVrachMrab_argsTupleScheme();
      }
    }

    private static class ClearVrachMrab_argsTupleScheme extends TupleScheme<ClearVrachMrab_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ClearVrachMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVrPcod()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVrPcod()) {
          oprot.writeI32(struct.vrPcod);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ClearVrachMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vrPcod = iprot.readI32();
          struct.setVrPcodIsSet(true);
        }
      }
    }

  }

  public static class ClearVrachMrab_result implements org.apache.thrift.TBase<ClearVrachMrab_result, ClearVrachMrab_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClearVrachMrab_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ClearVrachMrab_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ClearVrachMrab_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClearVrachMrab_result.class, metaDataMap);
    }

    public ClearVrachMrab_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ClearVrachMrab_result(ClearVrachMrab_result other) {
    }

    public ClearVrachMrab_result deepCopy() {
      return new ClearVrachMrab_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ClearVrachMrab_result)
        return this.equals((ClearVrachMrab_result)that);
      return false;
    }

    public boolean equals(ClearVrachMrab_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ClearVrachMrab_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ClearVrachMrab_result typedOther = (ClearVrachMrab_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ClearVrachMrab_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ClearVrachMrab_resultStandardSchemeFactory implements SchemeFactory {
      public ClearVrachMrab_resultStandardScheme getScheme() {
        return new ClearVrachMrab_resultStandardScheme();
      }
    }

    private static class ClearVrachMrab_resultStandardScheme extends StandardScheme<ClearVrachMrab_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ClearVrachMrab_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ClearVrachMrab_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ClearVrachMrab_resultTupleSchemeFactory implements SchemeFactory {
      public ClearVrachMrab_resultTupleScheme getScheme() {
        return new ClearVrachMrab_resultTupleScheme();
      }
    }

    private static class ClearVrachMrab_resultTupleScheme extends TupleScheme<ClearVrachMrab_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ClearVrachMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ClearVrachMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getPrizndList_args implements org.apache.thrift.TBase<getPrizndList_args, getPrizndList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrizndList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPrizndList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPrizndList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrizndList_args.class, metaDataMap);
    }

    public getPrizndList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrizndList_args(getPrizndList_args other) {
    }

    public getPrizndList_args deepCopy() {
      return new getPrizndList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrizndList_args)
        return this.equals((getPrizndList_args)that);
      return false;
    }

    public boolean equals(getPrizndList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPrizndList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPrizndList_args typedOther = (getPrizndList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPrizndList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPrizndList_argsStandardSchemeFactory implements SchemeFactory {
      public getPrizndList_argsStandardScheme getScheme() {
        return new getPrizndList_argsStandardScheme();
      }
    }

    private static class getPrizndList_argsStandardScheme extends StandardScheme<getPrizndList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPrizndList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPrizndList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPrizndList_argsTupleSchemeFactory implements SchemeFactory {
      public getPrizndList_argsTupleScheme getScheme() {
        return new getPrizndList_argsTupleScheme();
      }
    }

    private static class getPrizndList_argsTupleScheme extends TupleScheme<getPrizndList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPrizndList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPrizndList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getPrizndList_result implements org.apache.thrift.TBase<getPrizndList_result, getPrizndList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrizndList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPrizndList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPrizndList_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrizndList_result.class, metaDataMap);
    }

    public getPrizndList_result() {
    }

    public getPrizndList_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrizndList_result(getPrizndList_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPrizndList_result deepCopy() {
      return new getPrizndList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccess() {
      return this.success;
    }

    public getPrizndList_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrizndList_result)
        return this.equals((getPrizndList_result)that);
      return false;
    }

    public boolean equals(getPrizndList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPrizndList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPrizndList_result typedOther = (getPrizndList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPrizndList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPrizndList_resultStandardSchemeFactory implements SchemeFactory {
      public getPrizndList_resultStandardScheme getScheme() {
        return new getPrizndList_resultStandardScheme();
      }
    }

    private static class getPrizndList_resultStandardScheme extends StandardScheme<getPrizndList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPrizndList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem18; // required
                    _elem18 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPrizndList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPrizndList_resultTupleSchemeFactory implements SchemeFactory {
      public getPrizndList_resultTupleScheme getScheme() {
        return new getPrizndList_resultTupleScheme();
      }
    }

    private static class getPrizndList_resultTupleScheme extends TupleScheme<getPrizndList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPrizndList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPrizndList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem23; // required
              _elem23 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
