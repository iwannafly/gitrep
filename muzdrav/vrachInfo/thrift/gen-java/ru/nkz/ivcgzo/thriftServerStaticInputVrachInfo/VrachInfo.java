/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftServerStaticInputVrachInfo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class VrachInfo implements org.apache.thrift.TBase<VrachInfo, VrachInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VrachInfo");

  private static final org.apache.thrift.protocol.TField PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("pcod", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FAM_FIELD_DESC = new org.apache.thrift.protocol.TField("fam", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IM_FIELD_DESC = new org.apache.thrift.protocol.TField("im", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OT_FIELD_DESC = new org.apache.thrift.protocol.TField("ot", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField POL_FIELD_DESC = new org.apache.thrift.protocol.TField("pol", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField DATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("datar", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField OBR_FIELD_DESC = new org.apache.thrift.protocol.TField("obr", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField SNILS_FIELD_DESC = new org.apache.thrift.protocol.TField("snils", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField IDV_FIELD_DESC = new org.apache.thrift.protocol.TField("idv", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VrachInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VrachInfoTupleSchemeFactory());
  }

  public int pcod; // required
  public String fam; // required
  public String im; // required
  public String ot; // required
  public short pol; // required
  public long datar; // required
  public short obr; // required
  public String snils; // required
  public String idv; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PCOD((short)1, "pcod"),
    FAM((short)2, "fam"),
    IM((short)3, "im"),
    OT((short)4, "ot"),
    POL((short)5, "pol"),
    DATAR((short)6, "datar"),
    OBR((short)7, "obr"),
    SNILS((short)8, "snils"),
    IDV((short)9, "idv");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PCOD
          return PCOD;
        case 2: // FAM
          return FAM;
        case 3: // IM
          return IM;
        case 4: // OT
          return OT;
        case 5: // POL
          return POL;
        case 6: // DATAR
          return DATAR;
        case 7: // OBR
          return OBR;
        case 8: // SNILS
          return SNILS;
        case 9: // IDV
          return IDV;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PCOD_ISSET_ID = 0;
  private static final int __POL_ISSET_ID = 1;
  private static final int __DATAR_ISSET_ID = 2;
  private static final int __OBR_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PCOD, new org.apache.thrift.meta_data.FieldMetaData("pcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAM, new org.apache.thrift.meta_data.FieldMetaData("fam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IM, new org.apache.thrift.meta_data.FieldMetaData("im", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OT, new org.apache.thrift.meta_data.FieldMetaData("ot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POL, new org.apache.thrift.meta_data.FieldMetaData("pol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DATAR, new org.apache.thrift.meta_data.FieldMetaData("datar", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OBR, new org.apache.thrift.meta_data.FieldMetaData("obr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SNILS, new org.apache.thrift.meta_data.FieldMetaData("snils", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDV, new org.apache.thrift.meta_data.FieldMetaData("idv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VrachInfo.class, metaDataMap);
  }

  public VrachInfo() {
  }

  public VrachInfo(
    int pcod,
    String fam,
    String im,
    String ot,
    short pol,
    long datar,
    short obr,
    String snils,
    String idv)
  {
    this();
    this.pcod = pcod;
    setPcodIsSet(true);
    this.fam = fam;
    this.im = im;
    this.ot = ot;
    this.pol = pol;
    setPolIsSet(true);
    this.datar = datar;
    setDatarIsSet(true);
    this.obr = obr;
    setObrIsSet(true);
    this.snils = snils;
    this.idv = idv;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VrachInfo(VrachInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.pcod = other.pcod;
    if (other.isSetFam()) {
      this.fam = other.fam;
    }
    if (other.isSetIm()) {
      this.im = other.im;
    }
    if (other.isSetOt()) {
      this.ot = other.ot;
    }
    this.pol = other.pol;
    this.datar = other.datar;
    this.obr = other.obr;
    if (other.isSetSnils()) {
      this.snils = other.snils;
    }
    if (other.isSetIdv()) {
      this.idv = other.idv;
    }
  }

  public VrachInfo deepCopy() {
    return new VrachInfo(this);
  }

  @Override
  public void clear() {
    setPcodIsSet(false);
    this.pcod = 0;
    this.fam = null;
    this.im = null;
    this.ot = null;
    setPolIsSet(false);
    this.pol = 0;
    setDatarIsSet(false);
    this.datar = 0;
    setObrIsSet(false);
    this.obr = 0;
    this.snils = null;
    this.idv = null;
  }

  public int getPcod() {
    return this.pcod;
  }

  public VrachInfo setPcod(int pcod) {
    this.pcod = pcod;
    setPcodIsSet(true);
    return this;
  }

  public void unsetPcod() {
    __isset_bit_vector.clear(__PCOD_ISSET_ID);
  }

  /** Returns true if field pcod is set (has been assigned a value) and false otherwise */
  public boolean isSetPcod() {
    return __isset_bit_vector.get(__PCOD_ISSET_ID);
  }

  public void setPcodIsSet(boolean value) {
    __isset_bit_vector.set(__PCOD_ISSET_ID, value);
  }

  public String getFam() {
    return this.fam;
  }

  public VrachInfo setFam(String fam) {
    this.fam = fam;
    return this;
  }

  public void unsetFam() {
    this.fam = null;
  }

  /** Returns true if field fam is set (has been assigned a value) and false otherwise */
  public boolean isSetFam() {
    return this.fam != null;
  }

  public void setFamIsSet(boolean value) {
    if (!value) {
      this.fam = null;
    }
  }

  public String getIm() {
    return this.im;
  }

  public VrachInfo setIm(String im) {
    this.im = im;
    return this;
  }

  public void unsetIm() {
    this.im = null;
  }

  /** Returns true if field im is set (has been assigned a value) and false otherwise */
  public boolean isSetIm() {
    return this.im != null;
  }

  public void setImIsSet(boolean value) {
    if (!value) {
      this.im = null;
    }
  }

  public String getOt() {
    return this.ot;
  }

  public VrachInfo setOt(String ot) {
    this.ot = ot;
    return this;
  }

  public void unsetOt() {
    this.ot = null;
  }

  /** Returns true if field ot is set (has been assigned a value) and false otherwise */
  public boolean isSetOt() {
    return this.ot != null;
  }

  public void setOtIsSet(boolean value) {
    if (!value) {
      this.ot = null;
    }
  }

  public short getPol() {
    return this.pol;
  }

  public VrachInfo setPol(short pol) {
    this.pol = pol;
    setPolIsSet(true);
    return this;
  }

  public void unsetPol() {
    __isset_bit_vector.clear(__POL_ISSET_ID);
  }

  /** Returns true if field pol is set (has been assigned a value) and false otherwise */
  public boolean isSetPol() {
    return __isset_bit_vector.get(__POL_ISSET_ID);
  }

  public void setPolIsSet(boolean value) {
    __isset_bit_vector.set(__POL_ISSET_ID, value);
  }

  public long getDatar() {
    return this.datar;
  }

  public VrachInfo setDatar(long datar) {
    this.datar = datar;
    setDatarIsSet(true);
    return this;
  }

  public void unsetDatar() {
    __isset_bit_vector.clear(__DATAR_ISSET_ID);
  }

  /** Returns true if field datar is set (has been assigned a value) and false otherwise */
  public boolean isSetDatar() {
    return __isset_bit_vector.get(__DATAR_ISSET_ID);
  }

  public void setDatarIsSet(boolean value) {
    __isset_bit_vector.set(__DATAR_ISSET_ID, value);
  }

  public short getObr() {
    return this.obr;
  }

  public VrachInfo setObr(short obr) {
    this.obr = obr;
    setObrIsSet(true);
    return this;
  }

  public void unsetObr() {
    __isset_bit_vector.clear(__OBR_ISSET_ID);
  }

  /** Returns true if field obr is set (has been assigned a value) and false otherwise */
  public boolean isSetObr() {
    return __isset_bit_vector.get(__OBR_ISSET_ID);
  }

  public void setObrIsSet(boolean value) {
    __isset_bit_vector.set(__OBR_ISSET_ID, value);
  }

  public String getSnils() {
    return this.snils;
  }

  public VrachInfo setSnils(String snils) {
    this.snils = snils;
    return this;
  }

  public void unsetSnils() {
    this.snils = null;
  }

  /** Returns true if field snils is set (has been assigned a value) and false otherwise */
  public boolean isSetSnils() {
    return this.snils != null;
  }

  public void setSnilsIsSet(boolean value) {
    if (!value) {
      this.snils = null;
    }
  }

  public String getIdv() {
    return this.idv;
  }

  public VrachInfo setIdv(String idv) {
    this.idv = idv;
    return this;
  }

  public void unsetIdv() {
    this.idv = null;
  }

  /** Returns true if field idv is set (has been assigned a value) and false otherwise */
  public boolean isSetIdv() {
    return this.idv != null;
  }

  public void setIdvIsSet(boolean value) {
    if (!value) {
      this.idv = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PCOD:
      if (value == null) {
        unsetPcod();
      } else {
        setPcod((Integer)value);
      }
      break;

    case FAM:
      if (value == null) {
        unsetFam();
      } else {
        setFam((String)value);
      }
      break;

    case IM:
      if (value == null) {
        unsetIm();
      } else {
        setIm((String)value);
      }
      break;

    case OT:
      if (value == null) {
        unsetOt();
      } else {
        setOt((String)value);
      }
      break;

    case POL:
      if (value == null) {
        unsetPol();
      } else {
        setPol((Short)value);
      }
      break;

    case DATAR:
      if (value == null) {
        unsetDatar();
      } else {
        setDatar((Long)value);
      }
      break;

    case OBR:
      if (value == null) {
        unsetObr();
      } else {
        setObr((Short)value);
      }
      break;

    case SNILS:
      if (value == null) {
        unsetSnils();
      } else {
        setSnils((String)value);
      }
      break;

    case IDV:
      if (value == null) {
        unsetIdv();
      } else {
        setIdv((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PCOD:
      return Integer.valueOf(getPcod());

    case FAM:
      return getFam();

    case IM:
      return getIm();

    case OT:
      return getOt();

    case POL:
      return Short.valueOf(getPol());

    case DATAR:
      return Long.valueOf(getDatar());

    case OBR:
      return Short.valueOf(getObr());

    case SNILS:
      return getSnils();

    case IDV:
      return getIdv();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PCOD:
      return isSetPcod();
    case FAM:
      return isSetFam();
    case IM:
      return isSetIm();
    case OT:
      return isSetOt();
    case POL:
      return isSetPol();
    case DATAR:
      return isSetDatar();
    case OBR:
      return isSetObr();
    case SNILS:
      return isSetSnils();
    case IDV:
      return isSetIdv();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VrachInfo)
      return this.equals((VrachInfo)that);
    return false;
  }

  public boolean equals(VrachInfo that) {
    if (that == null)
      return false;

    boolean this_present_pcod = true;
    boolean that_present_pcod = true;
    if (this_present_pcod || that_present_pcod) {
      if (!(this_present_pcod && that_present_pcod))
        return false;
      if (this.pcod != that.pcod)
        return false;
    }

    boolean this_present_fam = true && this.isSetFam();
    boolean that_present_fam = true && that.isSetFam();
    if (this_present_fam || that_present_fam) {
      if (!(this_present_fam && that_present_fam))
        return false;
      if (!this.fam.equals(that.fam))
        return false;
    }

    boolean this_present_im = true && this.isSetIm();
    boolean that_present_im = true && that.isSetIm();
    if (this_present_im || that_present_im) {
      if (!(this_present_im && that_present_im))
        return false;
      if (!this.im.equals(that.im))
        return false;
    }

    boolean this_present_ot = true && this.isSetOt();
    boolean that_present_ot = true && that.isSetOt();
    if (this_present_ot || that_present_ot) {
      if (!(this_present_ot && that_present_ot))
        return false;
      if (!this.ot.equals(that.ot))
        return false;
    }

    boolean this_present_pol = true;
    boolean that_present_pol = true;
    if (this_present_pol || that_present_pol) {
      if (!(this_present_pol && that_present_pol))
        return false;
      if (this.pol != that.pol)
        return false;
    }

    boolean this_present_datar = true;
    boolean that_present_datar = true;
    if (this_present_datar || that_present_datar) {
      if (!(this_present_datar && that_present_datar))
        return false;
      if (this.datar != that.datar)
        return false;
    }

    boolean this_present_obr = true;
    boolean that_present_obr = true;
    if (this_present_obr || that_present_obr) {
      if (!(this_present_obr && that_present_obr))
        return false;
      if (this.obr != that.obr)
        return false;
    }

    boolean this_present_snils = true && this.isSetSnils();
    boolean that_present_snils = true && that.isSetSnils();
    if (this_present_snils || that_present_snils) {
      if (!(this_present_snils && that_present_snils))
        return false;
      if (!this.snils.equals(that.snils))
        return false;
    }

    boolean this_present_idv = true && this.isSetIdv();
    boolean that_present_idv = true && that.isSetIdv();
    if (this_present_idv || that_present_idv) {
      if (!(this_present_idv && that_present_idv))
        return false;
      if (!this.idv.equals(that.idv))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(VrachInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    VrachInfo typedOther = (VrachInfo)other;

    lastComparison = Boolean.valueOf(isSetPcod()).compareTo(typedOther.isSetPcod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPcod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcod, typedOther.pcod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFam()).compareTo(typedOther.isSetFam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fam, typedOther.fam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIm()).compareTo(typedOther.isSetIm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.im, typedOther.im);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOt()).compareTo(typedOther.isSetOt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ot, typedOther.ot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPol()).compareTo(typedOther.isSetPol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pol, typedOther.pol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatar()).compareTo(typedOther.isSetDatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datar, typedOther.datar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObr()).compareTo(typedOther.isSetObr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obr, typedOther.obr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnils()).compareTo(typedOther.isSetSnils());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnils()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snils, typedOther.snils);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdv()).compareTo(typedOther.isSetIdv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idv, typedOther.idv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VrachInfo(");
    boolean first = true;

    sb.append("pcod:");
    sb.append(this.pcod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fam:");
    if (this.fam == null) {
      sb.append("null");
    } else {
      sb.append(this.fam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("im:");
    if (this.im == null) {
      sb.append("null");
    } else {
      sb.append(this.im);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ot:");
    if (this.ot == null) {
      sb.append("null");
    } else {
      sb.append(this.ot);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pol:");
    sb.append(this.pol);
    first = false;
    if (!first) sb.append(", ");
    sb.append("datar:");
    sb.append(this.datar);
    first = false;
    if (!first) sb.append(", ");
    sb.append("obr:");
    sb.append(this.obr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("snils:");
    if (this.snils == null) {
      sb.append("null");
    } else {
      sb.append(this.snils);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idv:");
    if (this.idv == null) {
      sb.append("null");
    } else {
      sb.append(this.idv);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VrachInfoStandardSchemeFactory implements SchemeFactory {
    public VrachInfoStandardScheme getScheme() {
      return new VrachInfoStandardScheme();
    }
  }

  private static class VrachInfoStandardScheme extends StandardScheme<VrachInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VrachInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PCOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pcod = iprot.readI32();
              struct.setPcodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fam = iprot.readString();
              struct.setFamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.im = iprot.readString();
              struct.setImIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ot = iprot.readString();
              struct.setOtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.pol = iprot.readI16();
              struct.setPolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datar = iprot.readI64();
              struct.setDatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OBR
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.obr = iprot.readI16();
              struct.setObrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SNILS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.snils = iprot.readString();
              struct.setSnilsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IDV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idv = iprot.readString();
              struct.setIdvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VrachInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PCOD_FIELD_DESC);
      oprot.writeI32(struct.pcod);
      oprot.writeFieldEnd();
      if (struct.fam != null) {
        oprot.writeFieldBegin(FAM_FIELD_DESC);
        oprot.writeString(struct.fam);
        oprot.writeFieldEnd();
      }
      if (struct.im != null) {
        oprot.writeFieldBegin(IM_FIELD_DESC);
        oprot.writeString(struct.im);
        oprot.writeFieldEnd();
      }
      if (struct.ot != null) {
        oprot.writeFieldBegin(OT_FIELD_DESC);
        oprot.writeString(struct.ot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POL_FIELD_DESC);
      oprot.writeI16(struct.pol);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATAR_FIELD_DESC);
      oprot.writeI64(struct.datar);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OBR_FIELD_DESC);
      oprot.writeI16(struct.obr);
      oprot.writeFieldEnd();
      if (struct.snils != null) {
        oprot.writeFieldBegin(SNILS_FIELD_DESC);
        oprot.writeString(struct.snils);
        oprot.writeFieldEnd();
      }
      if (struct.idv != null) {
        oprot.writeFieldBegin(IDV_FIELD_DESC);
        oprot.writeString(struct.idv);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VrachInfoTupleSchemeFactory implements SchemeFactory {
    public VrachInfoTupleScheme getScheme() {
      return new VrachInfoTupleScheme();
    }
  }

  private static class VrachInfoTupleScheme extends TupleScheme<VrachInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VrachInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPcod()) {
        optionals.set(0);
      }
      if (struct.isSetFam()) {
        optionals.set(1);
      }
      if (struct.isSetIm()) {
        optionals.set(2);
      }
      if (struct.isSetOt()) {
        optionals.set(3);
      }
      if (struct.isSetPol()) {
        optionals.set(4);
      }
      if (struct.isSetDatar()) {
        optionals.set(5);
      }
      if (struct.isSetObr()) {
        optionals.set(6);
      }
      if (struct.isSetSnils()) {
        optionals.set(7);
      }
      if (struct.isSetIdv()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPcod()) {
        oprot.writeI32(struct.pcod);
      }
      if (struct.isSetFam()) {
        oprot.writeString(struct.fam);
      }
      if (struct.isSetIm()) {
        oprot.writeString(struct.im);
      }
      if (struct.isSetOt()) {
        oprot.writeString(struct.ot);
      }
      if (struct.isSetPol()) {
        oprot.writeI16(struct.pol);
      }
      if (struct.isSetDatar()) {
        oprot.writeI64(struct.datar);
      }
      if (struct.isSetObr()) {
        oprot.writeI16(struct.obr);
      }
      if (struct.isSetSnils()) {
        oprot.writeString(struct.snils);
      }
      if (struct.isSetIdv()) {
        oprot.writeString(struct.idv);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VrachInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.pcod = iprot.readI32();
        struct.setPcodIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fam = iprot.readString();
        struct.setFamIsSet(true);
      }
      if (incoming.get(2)) {
        struct.im = iprot.readString();
        struct.setImIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ot = iprot.readString();
        struct.setOtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pol = iprot.readI16();
        struct.setPolIsSet(true);
      }
      if (incoming.get(5)) {
        struct.datar = iprot.readI64();
        struct.setDatarIsSet(true);
      }
      if (incoming.get(6)) {
        struct.obr = iprot.readI16();
        struct.setObrIsSet(true);
      }
      if (incoming.get(7)) {
        struct.snils = iprot.readString();
        struct.setSnilsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.idv = iprot.readString();
        struct.setIdvIsSet(true);
      }
    }
  }

}

