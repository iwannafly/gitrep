/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftServerStaticInputVrachInfoAdmin;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftServerStaticInputVrachInfoAdmin {

  public interface Iface extends ru.nkz.ivcgzo.thriftServerStaticInputVrachInfo.ThriftServerStaticInputVrachInfo.Iface {

    /**
     * Получает логин пользователя.
     * 
     * @param vrachPcod
     * @param lpuPcod
     * @param podrPcod
     */
    public String getLogin(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException;

    /**
     * Устанавливает пароль для пользователя, открывая ему доступ к системе.
     * 
     * @param vrachPcod
     * @param lpuPcod
     * @param podrPcod
     * @param login
     */
    public String setPassword(int vrachPcod, int lpuPcod, int podrPcod, String login) throws org.apache.thrift.TException;

    /**
     * Очищает пароль пользователя, закрывая ему доступ к системе.
     * 
     * @param vrachPcod
     * @param lpuPcod
     * @param podrPcod
     */
    public void remPassword(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException;

    /**
     * Получает разрешения пользователя, то есть, к каким частям системы у него есть доступ.
     * 
     * @param vrachPcod
     * @param lpuPcod
     * @param podrPcod
     */
    public String getPermissions(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException;

    /**
     * Устанавливает разрешения пользователя.
     * 
     * @param vrachPcod
     * @param lpuPcod
     * @param podrPcod
     * @param pdost
     */
    public void setPermissions(int vrachPcod, int lpuPcod, int podrPcod, String pdost) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends ru.nkz.ivcgzo.thriftServerStaticInputVrachInfo.ThriftServerStaticInputVrachInfo .AsyncIface {

    public void getLogin(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getLogin_call> resultHandler) throws org.apache.thrift.TException;

    public void setPassword(int vrachPcod, int lpuPcod, int podrPcod, String login, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setPassword_call> resultHandler) throws org.apache.thrift.TException;

    public void remPassword(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.remPassword_call> resultHandler) throws org.apache.thrift.TException;

    public void getPermissions(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPermissions_call> resultHandler) throws org.apache.thrift.TException;

    public void setPermissions(int vrachPcod, int lpuPcod, int podrPcod, String pdost, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setPermissions_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ru.nkz.ivcgzo.thriftServerStaticInputVrachInfo.ThriftServerStaticInputVrachInfo.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getLogin(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException
    {
      send_getLogin(vrachPcod, lpuPcod, podrPcod);
      return recv_getLogin();
    }

    public void send_getLogin(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException
    {
      getLogin_args args = new getLogin_args();
      args.setVrachPcod(vrachPcod);
      args.setLpuPcod(lpuPcod);
      args.setPodrPcod(podrPcod);
      sendBase("getLogin", args);
    }

    public String recv_getLogin() throws org.apache.thrift.TException
    {
      getLogin_result result = new getLogin_result();
      receiveBase(result, "getLogin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLogin failed: unknown result");
    }

    public String setPassword(int vrachPcod, int lpuPcod, int podrPcod, String login) throws org.apache.thrift.TException
    {
      send_setPassword(vrachPcod, lpuPcod, podrPcod, login);
      return recv_setPassword();
    }

    public void send_setPassword(int vrachPcod, int lpuPcod, int podrPcod, String login) throws org.apache.thrift.TException
    {
      setPassword_args args = new setPassword_args();
      args.setVrachPcod(vrachPcod);
      args.setLpuPcod(lpuPcod);
      args.setPodrPcod(podrPcod);
      args.setLogin(login);
      sendBase("setPassword", args);
    }

    public String recv_setPassword() throws org.apache.thrift.TException
    {
      setPassword_result result = new setPassword_result();
      receiveBase(result, "setPassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setPassword failed: unknown result");
    }

    public void remPassword(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException
    {
      send_remPassword(vrachPcod, lpuPcod, podrPcod);
      recv_remPassword();
    }

    public void send_remPassword(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException
    {
      remPassword_args args = new remPassword_args();
      args.setVrachPcod(vrachPcod);
      args.setLpuPcod(lpuPcod);
      args.setPodrPcod(podrPcod);
      sendBase("remPassword", args);
    }

    public void recv_remPassword() throws org.apache.thrift.TException
    {
      remPassword_result result = new remPassword_result();
      receiveBase(result, "remPassword");
      return;
    }

    public String getPermissions(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException
    {
      send_getPermissions(vrachPcod, lpuPcod, podrPcod);
      return recv_getPermissions();
    }

    public void send_getPermissions(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException
    {
      getPermissions_args args = new getPermissions_args();
      args.setVrachPcod(vrachPcod);
      args.setLpuPcod(lpuPcod);
      args.setPodrPcod(podrPcod);
      sendBase("getPermissions", args);
    }

    public String recv_getPermissions() throws org.apache.thrift.TException
    {
      getPermissions_result result = new getPermissions_result();
      receiveBase(result, "getPermissions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPermissions failed: unknown result");
    }

    public void setPermissions(int vrachPcod, int lpuPcod, int podrPcod, String pdost) throws org.apache.thrift.TException
    {
      send_setPermissions(vrachPcod, lpuPcod, podrPcod, pdost);
      recv_setPermissions();
    }

    public void send_setPermissions(int vrachPcod, int lpuPcod, int podrPcod, String pdost) throws org.apache.thrift.TException
    {
      setPermissions_args args = new setPermissions_args();
      args.setVrachPcod(vrachPcod);
      args.setLpuPcod(lpuPcod);
      args.setPodrPcod(podrPcod);
      args.setPdost(pdost);
      sendBase("setPermissions", args);
    }

    public void recv_setPermissions() throws org.apache.thrift.TException
    {
      setPermissions_result result = new setPermissions_result();
      receiveBase(result, "setPermissions");
      return;
    }

  }
  public static class AsyncClient extends ru.nkz.ivcgzo.thriftServerStaticInputVrachInfo.ThriftServerStaticInputVrachInfo.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getLogin(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<getLogin_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLogin_call method_call = new getLogin_call(vrachPcod, lpuPcod, podrPcod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLogin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vrachPcod;
      private int lpuPcod;
      private int podrPcod;
      public getLogin_call(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<getLogin_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vrachPcod = vrachPcod;
        this.lpuPcod = lpuPcod;
        this.podrPcod = podrPcod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLogin_args args = new getLogin_args();
        args.setVrachPcod(vrachPcod);
        args.setLpuPcod(lpuPcod);
        args.setPodrPcod(podrPcod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLogin();
      }
    }

    public void setPassword(int vrachPcod, int lpuPcod, int podrPcod, String login, org.apache.thrift.async.AsyncMethodCallback<setPassword_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPassword_call method_call = new setPassword_call(vrachPcod, lpuPcod, podrPcod, login, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vrachPcod;
      private int lpuPcod;
      private int podrPcod;
      private String login;
      public setPassword_call(int vrachPcod, int lpuPcod, int podrPcod, String login, org.apache.thrift.async.AsyncMethodCallback<setPassword_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vrachPcod = vrachPcod;
        this.lpuPcod = lpuPcod;
        this.podrPcod = podrPcod;
        this.login = login;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPassword_args args = new setPassword_args();
        args.setVrachPcod(vrachPcod);
        args.setLpuPcod(lpuPcod);
        args.setPodrPcod(podrPcod);
        args.setLogin(login);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setPassword();
      }
    }

    public void remPassword(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<remPassword_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      remPassword_call method_call = new remPassword_call(vrachPcod, lpuPcod, podrPcod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class remPassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vrachPcod;
      private int lpuPcod;
      private int podrPcod;
      public remPassword_call(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<remPassword_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vrachPcod = vrachPcod;
        this.lpuPcod = lpuPcod;
        this.podrPcod = podrPcod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        remPassword_args args = new remPassword_args();
        args.setVrachPcod(vrachPcod);
        args.setLpuPcod(lpuPcod);
        args.setPodrPcod(podrPcod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_remPassword();
      }
    }

    public void getPermissions(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<getPermissions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPermissions_call method_call = new getPermissions_call(vrachPcod, lpuPcod, podrPcod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPermissions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vrachPcod;
      private int lpuPcod;
      private int podrPcod;
      public getPermissions_call(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<getPermissions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vrachPcod = vrachPcod;
        this.lpuPcod = lpuPcod;
        this.podrPcod = podrPcod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPermissions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPermissions_args args = new getPermissions_args();
        args.setVrachPcod(vrachPcod);
        args.setLpuPcod(lpuPcod);
        args.setPodrPcod(podrPcod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPermissions();
      }
    }

    public void setPermissions(int vrachPcod, int lpuPcod, int podrPcod, String pdost, org.apache.thrift.async.AsyncMethodCallback<setPermissions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPermissions_call method_call = new setPermissions_call(vrachPcod, lpuPcod, podrPcod, pdost, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPermissions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vrachPcod;
      private int lpuPcod;
      private int podrPcod;
      private String pdost;
      public setPermissions_call(int vrachPcod, int lpuPcod, int podrPcod, String pdost, org.apache.thrift.async.AsyncMethodCallback<setPermissions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vrachPcod = vrachPcod;
        this.lpuPcod = lpuPcod;
        this.podrPcod = podrPcod;
        this.pdost = pdost;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPermissions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPermissions_args args = new setPermissions_args();
        args.setVrachPcod(vrachPcod);
        args.setLpuPcod(lpuPcod);
        args.setPodrPcod(podrPcod);
        args.setPdost(pdost);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setPermissions();
      }
    }

  }

  public static class Processor<I extends Iface> extends ru.nkz.ivcgzo.thriftServerStaticInputVrachInfo.ThriftServerStaticInputVrachInfo.Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getLogin", new getLogin());
      processMap.put("setPassword", new setPassword());
      processMap.put("remPassword", new remPassword());
      processMap.put("getPermissions", new getPermissions());
      processMap.put("setPermissions", new setPermissions());
      return processMap;
    }

    private static class getLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLogin_args> {
      public getLogin() {
        super("getLogin");
      }

      protected getLogin_args getEmptyArgsInstance() {
        return new getLogin_args();
      }

      protected getLogin_result getResult(I iface, getLogin_args args) throws org.apache.thrift.TException {
        getLogin_result result = new getLogin_result();
        result.success = iface.getLogin(args.vrachPcod, args.lpuPcod, args.podrPcod);
        return result;
      }
    }

    private static class setPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPassword_args> {
      public setPassword() {
        super("setPassword");
      }

      protected setPassword_args getEmptyArgsInstance() {
        return new setPassword_args();
      }

      protected setPassword_result getResult(I iface, setPassword_args args) throws org.apache.thrift.TException {
        setPassword_result result = new setPassword_result();
        result.success = iface.setPassword(args.vrachPcod, args.lpuPcod, args.podrPcod, args.login);
        return result;
      }
    }

    private static class remPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, remPassword_args> {
      public remPassword() {
        super("remPassword");
      }

      protected remPassword_args getEmptyArgsInstance() {
        return new remPassword_args();
      }

      protected remPassword_result getResult(I iface, remPassword_args args) throws org.apache.thrift.TException {
        remPassword_result result = new remPassword_result();
        iface.remPassword(args.vrachPcod, args.lpuPcod, args.podrPcod);
        return result;
      }
    }

    private static class getPermissions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPermissions_args> {
      public getPermissions() {
        super("getPermissions");
      }

      protected getPermissions_args getEmptyArgsInstance() {
        return new getPermissions_args();
      }

      protected getPermissions_result getResult(I iface, getPermissions_args args) throws org.apache.thrift.TException {
        getPermissions_result result = new getPermissions_result();
        result.success = iface.getPermissions(args.vrachPcod, args.lpuPcod, args.podrPcod);
        return result;
      }
    }

    private static class setPermissions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPermissions_args> {
      public setPermissions() {
        super("setPermissions");
      }

      protected setPermissions_args getEmptyArgsInstance() {
        return new setPermissions_args();
      }

      protected setPermissions_result getResult(I iface, setPermissions_args args) throws org.apache.thrift.TException {
        setPermissions_result result = new setPermissions_result();
        iface.setPermissions(args.vrachPcod, args.lpuPcod, args.podrPcod, args.pdost);
        return result;
      }
    }

  }

  public static class getLogin_args implements org.apache.thrift.TBase<getLogin_args, getLogin_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLogin_args");

    private static final org.apache.thrift.protocol.TField VRACH_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("vrachPcod", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LPU_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("lpuPcod", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PODR_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("podrPcod", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLogin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLogin_argsTupleSchemeFactory());
    }

    public int vrachPcod; // required
    public int lpuPcod; // required
    public int podrPcod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VRACH_PCOD((short)1, "vrachPcod"),
      LPU_PCOD((short)2, "lpuPcod"),
      PODR_PCOD((short)3, "podrPcod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VRACH_PCOD
            return VRACH_PCOD;
          case 2: // LPU_PCOD
            return LPU_PCOD;
          case 3: // PODR_PCOD
            return PODR_PCOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VRACHPCOD_ISSET_ID = 0;
    private static final int __LPUPCOD_ISSET_ID = 1;
    private static final int __PODRPCOD_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VRACH_PCOD, new org.apache.thrift.meta_data.FieldMetaData("vrachPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LPU_PCOD, new org.apache.thrift.meta_data.FieldMetaData("lpuPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PODR_PCOD, new org.apache.thrift.meta_data.FieldMetaData("podrPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogin_args.class, metaDataMap);
    }

    public getLogin_args() {
    }

    public getLogin_args(
      int vrachPcod,
      int lpuPcod,
      int podrPcod)
    {
      this();
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogin_args(getLogin_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.vrachPcod = other.vrachPcod;
      this.lpuPcod = other.lpuPcod;
      this.podrPcod = other.podrPcod;
    }

    public getLogin_args deepCopy() {
      return new getLogin_args(this);
    }

    @Override
    public void clear() {
      setVrachPcodIsSet(false);
      this.vrachPcod = 0;
      setLpuPcodIsSet(false);
      this.lpuPcod = 0;
      setPodrPcodIsSet(false);
      this.podrPcod = 0;
    }

    public int getVrachPcod() {
      return this.vrachPcod;
    }

    public getLogin_args setVrachPcod(int vrachPcod) {
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      return this;
    }

    public void unsetVrachPcod() {
      __isset_bit_vector.clear(__VRACHPCOD_ISSET_ID);
    }

    /** Returns true if field vrachPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetVrachPcod() {
      return __isset_bit_vector.get(__VRACHPCOD_ISSET_ID);
    }

    public void setVrachPcodIsSet(boolean value) {
      __isset_bit_vector.set(__VRACHPCOD_ISSET_ID, value);
    }

    public int getLpuPcod() {
      return this.lpuPcod;
    }

    public getLogin_args setLpuPcod(int lpuPcod) {
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      return this;
    }

    public void unsetLpuPcod() {
      __isset_bit_vector.clear(__LPUPCOD_ISSET_ID);
    }

    /** Returns true if field lpuPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetLpuPcod() {
      return __isset_bit_vector.get(__LPUPCOD_ISSET_ID);
    }

    public void setLpuPcodIsSet(boolean value) {
      __isset_bit_vector.set(__LPUPCOD_ISSET_ID, value);
    }

    public int getPodrPcod() {
      return this.podrPcod;
    }

    public getLogin_args setPodrPcod(int podrPcod) {
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
      return this;
    }

    public void unsetPodrPcod() {
      __isset_bit_vector.clear(__PODRPCOD_ISSET_ID);
    }

    /** Returns true if field podrPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetPodrPcod() {
      return __isset_bit_vector.get(__PODRPCOD_ISSET_ID);
    }

    public void setPodrPcodIsSet(boolean value) {
      __isset_bit_vector.set(__PODRPCOD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VRACH_PCOD:
        if (value == null) {
          unsetVrachPcod();
        } else {
          setVrachPcod((Integer)value);
        }
        break;

      case LPU_PCOD:
        if (value == null) {
          unsetLpuPcod();
        } else {
          setLpuPcod((Integer)value);
        }
        break;

      case PODR_PCOD:
        if (value == null) {
          unsetPodrPcod();
        } else {
          setPodrPcod((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VRACH_PCOD:
        return Integer.valueOf(getVrachPcod());

      case LPU_PCOD:
        return Integer.valueOf(getLpuPcod());

      case PODR_PCOD:
        return Integer.valueOf(getPodrPcod());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VRACH_PCOD:
        return isSetVrachPcod();
      case LPU_PCOD:
        return isSetLpuPcod();
      case PODR_PCOD:
        return isSetPodrPcod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogin_args)
        return this.equals((getLogin_args)that);
      return false;
    }

    public boolean equals(getLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_vrachPcod = true;
      boolean that_present_vrachPcod = true;
      if (this_present_vrachPcod || that_present_vrachPcod) {
        if (!(this_present_vrachPcod && that_present_vrachPcod))
          return false;
        if (this.vrachPcod != that.vrachPcod)
          return false;
      }

      boolean this_present_lpuPcod = true;
      boolean that_present_lpuPcod = true;
      if (this_present_lpuPcod || that_present_lpuPcod) {
        if (!(this_present_lpuPcod && that_present_lpuPcod))
          return false;
        if (this.lpuPcod != that.lpuPcod)
          return false;
      }

      boolean this_present_podrPcod = true;
      boolean that_present_podrPcod = true;
      if (this_present_podrPcod || that_present_podrPcod) {
        if (!(this_present_podrPcod && that_present_podrPcod))
          return false;
        if (this.podrPcod != that.podrPcod)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLogin_args typedOther = (getLogin_args)other;

      lastComparison = Boolean.valueOf(isSetVrachPcod()).compareTo(typedOther.isSetVrachPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVrachPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vrachPcod, typedOther.vrachPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLpuPcod()).compareTo(typedOther.isSetLpuPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLpuPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lpuPcod, typedOther.lpuPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPodrPcod()).compareTo(typedOther.isSetPodrPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPodrPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.podrPcod, typedOther.podrPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogin_args(");
      boolean first = true;

      sb.append("vrachPcod:");
      sb.append(this.vrachPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lpuPcod:");
      sb.append(this.lpuPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("podrPcod:");
      sb.append(this.podrPcod);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLogin_argsStandardSchemeFactory implements SchemeFactory {
      public getLogin_argsStandardScheme getScheme() {
        return new getLogin_argsStandardScheme();
      }
    }

    private static class getLogin_argsStandardScheme extends StandardScheme<getLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VRACH_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vrachPcod = iprot.readI32();
                struct.setVrachPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LPU_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lpuPcod = iprot.readI32();
                struct.setLpuPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PODR_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.podrPcod = iprot.readI32();
                struct.setPodrPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VRACH_PCOD_FIELD_DESC);
        oprot.writeI32(struct.vrachPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LPU_PCOD_FIELD_DESC);
        oprot.writeI32(struct.lpuPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PODR_PCOD_FIELD_DESC);
        oprot.writeI32(struct.podrPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLogin_argsTupleSchemeFactory implements SchemeFactory {
      public getLogin_argsTupleScheme getScheme() {
        return new getLogin_argsTupleScheme();
      }
    }

    private static class getLogin_argsTupleScheme extends TupleScheme<getLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVrachPcod()) {
          optionals.set(0);
        }
        if (struct.isSetLpuPcod()) {
          optionals.set(1);
        }
        if (struct.isSetPodrPcod()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVrachPcod()) {
          oprot.writeI32(struct.vrachPcod);
        }
        if (struct.isSetLpuPcod()) {
          oprot.writeI32(struct.lpuPcod);
        }
        if (struct.isSetPodrPcod()) {
          oprot.writeI32(struct.podrPcod);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.vrachPcod = iprot.readI32();
          struct.setVrachPcodIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lpuPcod = iprot.readI32();
          struct.setLpuPcodIsSet(true);
        }
        if (incoming.get(2)) {
          struct.podrPcod = iprot.readI32();
          struct.setPodrPcodIsSet(true);
        }
      }
    }

  }

  public static class getLogin_result implements org.apache.thrift.TBase<getLogin_result, getLogin_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLogin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLogin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLogin_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogin_result.class, metaDataMap);
    }

    public getLogin_result() {
    }

    public getLogin_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogin_result(getLogin_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getLogin_result deepCopy() {
      return new getLogin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getLogin_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogin_result)
        return this.equals((getLogin_result)that);
      return false;
    }

    public boolean equals(getLogin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLogin_result typedOther = (getLogin_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLogin_resultStandardSchemeFactory implements SchemeFactory {
      public getLogin_resultStandardScheme getScheme() {
        return new getLogin_resultStandardScheme();
      }
    }

    private static class getLogin_resultStandardScheme extends StandardScheme<getLogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLogin_resultTupleSchemeFactory implements SchemeFactory {
      public getLogin_resultTupleScheme getScheme() {
        return new getLogin_resultTupleScheme();
      }
    }

    private static class getLogin_resultTupleScheme extends TupleScheme<getLogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setPassword_args implements org.apache.thrift.TBase<setPassword_args, setPassword_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPassword_args");

    private static final org.apache.thrift.protocol.TField VRACH_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("vrachPcod", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LPU_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("lpuPcod", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PODR_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("podrPcod", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("login", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPassword_argsTupleSchemeFactory());
    }

    public int vrachPcod; // required
    public int lpuPcod; // required
    public int podrPcod; // required
    public String login; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VRACH_PCOD((short)1, "vrachPcod"),
      LPU_PCOD((short)2, "lpuPcod"),
      PODR_PCOD((short)3, "podrPcod"),
      LOGIN((short)4, "login");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VRACH_PCOD
            return VRACH_PCOD;
          case 2: // LPU_PCOD
            return LPU_PCOD;
          case 3: // PODR_PCOD
            return PODR_PCOD;
          case 4: // LOGIN
            return LOGIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VRACHPCOD_ISSET_ID = 0;
    private static final int __LPUPCOD_ISSET_ID = 1;
    private static final int __PODRPCOD_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VRACH_PCOD, new org.apache.thrift.meta_data.FieldMetaData("vrachPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LPU_PCOD, new org.apache.thrift.meta_data.FieldMetaData("lpuPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PODR_PCOD, new org.apache.thrift.meta_data.FieldMetaData("podrPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOGIN, new org.apache.thrift.meta_data.FieldMetaData("login", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPassword_args.class, metaDataMap);
    }

    public setPassword_args() {
    }

    public setPassword_args(
      int vrachPcod,
      int lpuPcod,
      int podrPcod,
      String login)
    {
      this();
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
      this.login = login;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPassword_args(setPassword_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.vrachPcod = other.vrachPcod;
      this.lpuPcod = other.lpuPcod;
      this.podrPcod = other.podrPcod;
      if (other.isSetLogin()) {
        this.login = other.login;
      }
    }

    public setPassword_args deepCopy() {
      return new setPassword_args(this);
    }

    @Override
    public void clear() {
      setVrachPcodIsSet(false);
      this.vrachPcod = 0;
      setLpuPcodIsSet(false);
      this.lpuPcod = 0;
      setPodrPcodIsSet(false);
      this.podrPcod = 0;
      this.login = null;
    }

    public int getVrachPcod() {
      return this.vrachPcod;
    }

    public setPassword_args setVrachPcod(int vrachPcod) {
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      return this;
    }

    public void unsetVrachPcod() {
      __isset_bit_vector.clear(__VRACHPCOD_ISSET_ID);
    }

    /** Returns true if field vrachPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetVrachPcod() {
      return __isset_bit_vector.get(__VRACHPCOD_ISSET_ID);
    }

    public void setVrachPcodIsSet(boolean value) {
      __isset_bit_vector.set(__VRACHPCOD_ISSET_ID, value);
    }

    public int getLpuPcod() {
      return this.lpuPcod;
    }

    public setPassword_args setLpuPcod(int lpuPcod) {
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      return this;
    }

    public void unsetLpuPcod() {
      __isset_bit_vector.clear(__LPUPCOD_ISSET_ID);
    }

    /** Returns true if field lpuPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetLpuPcod() {
      return __isset_bit_vector.get(__LPUPCOD_ISSET_ID);
    }

    public void setLpuPcodIsSet(boolean value) {
      __isset_bit_vector.set(__LPUPCOD_ISSET_ID, value);
    }

    public int getPodrPcod() {
      return this.podrPcod;
    }

    public setPassword_args setPodrPcod(int podrPcod) {
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
      return this;
    }

    public void unsetPodrPcod() {
      __isset_bit_vector.clear(__PODRPCOD_ISSET_ID);
    }

    /** Returns true if field podrPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetPodrPcod() {
      return __isset_bit_vector.get(__PODRPCOD_ISSET_ID);
    }

    public void setPodrPcodIsSet(boolean value) {
      __isset_bit_vector.set(__PODRPCOD_ISSET_ID, value);
    }

    public String getLogin() {
      return this.login;
    }

    public setPassword_args setLogin(String login) {
      this.login = login;
      return this;
    }

    public void unsetLogin() {
      this.login = null;
    }

    /** Returns true if field login is set (has been assigned a value) and false otherwise */
    public boolean isSetLogin() {
      return this.login != null;
    }

    public void setLoginIsSet(boolean value) {
      if (!value) {
        this.login = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VRACH_PCOD:
        if (value == null) {
          unsetVrachPcod();
        } else {
          setVrachPcod((Integer)value);
        }
        break;

      case LPU_PCOD:
        if (value == null) {
          unsetLpuPcod();
        } else {
          setLpuPcod((Integer)value);
        }
        break;

      case PODR_PCOD:
        if (value == null) {
          unsetPodrPcod();
        } else {
          setPodrPcod((Integer)value);
        }
        break;

      case LOGIN:
        if (value == null) {
          unsetLogin();
        } else {
          setLogin((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VRACH_PCOD:
        return Integer.valueOf(getVrachPcod());

      case LPU_PCOD:
        return Integer.valueOf(getLpuPcod());

      case PODR_PCOD:
        return Integer.valueOf(getPodrPcod());

      case LOGIN:
        return getLogin();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VRACH_PCOD:
        return isSetVrachPcod();
      case LPU_PCOD:
        return isSetLpuPcod();
      case PODR_PCOD:
        return isSetPodrPcod();
      case LOGIN:
        return isSetLogin();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPassword_args)
        return this.equals((setPassword_args)that);
      return false;
    }

    public boolean equals(setPassword_args that) {
      if (that == null)
        return false;

      boolean this_present_vrachPcod = true;
      boolean that_present_vrachPcod = true;
      if (this_present_vrachPcod || that_present_vrachPcod) {
        if (!(this_present_vrachPcod && that_present_vrachPcod))
          return false;
        if (this.vrachPcod != that.vrachPcod)
          return false;
      }

      boolean this_present_lpuPcod = true;
      boolean that_present_lpuPcod = true;
      if (this_present_lpuPcod || that_present_lpuPcod) {
        if (!(this_present_lpuPcod && that_present_lpuPcod))
          return false;
        if (this.lpuPcod != that.lpuPcod)
          return false;
      }

      boolean this_present_podrPcod = true;
      boolean that_present_podrPcod = true;
      if (this_present_podrPcod || that_present_podrPcod) {
        if (!(this_present_podrPcod && that_present_podrPcod))
          return false;
        if (this.podrPcod != that.podrPcod)
          return false;
      }

      boolean this_present_login = true && this.isSetLogin();
      boolean that_present_login = true && that.isSetLogin();
      if (this_present_login || that_present_login) {
        if (!(this_present_login && that_present_login))
          return false;
        if (!this.login.equals(that.login))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setPassword_args typedOther = (setPassword_args)other;

      lastComparison = Boolean.valueOf(isSetVrachPcod()).compareTo(typedOther.isSetVrachPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVrachPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vrachPcod, typedOther.vrachPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLpuPcod()).compareTo(typedOther.isSetLpuPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLpuPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lpuPcod, typedOther.lpuPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPodrPcod()).compareTo(typedOther.isSetPodrPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPodrPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.podrPcod, typedOther.podrPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLogin()).compareTo(typedOther.isSetLogin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.login, typedOther.login);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPassword_args(");
      boolean first = true;

      sb.append("vrachPcod:");
      sb.append(this.vrachPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lpuPcod:");
      sb.append(this.lpuPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("podrPcod:");
      sb.append(this.podrPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("login:");
      if (this.login == null) {
        sb.append("null");
      } else {
        sb.append(this.login);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPassword_argsStandardSchemeFactory implements SchemeFactory {
      public setPassword_argsStandardScheme getScheme() {
        return new setPassword_argsStandardScheme();
      }
    }

    private static class setPassword_argsStandardScheme extends StandardScheme<setPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VRACH_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vrachPcod = iprot.readI32();
                struct.setVrachPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LPU_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lpuPcod = iprot.readI32();
                struct.setLpuPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PODR_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.podrPcod = iprot.readI32();
                struct.setPodrPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LOGIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.login = iprot.readString();
                struct.setLoginIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VRACH_PCOD_FIELD_DESC);
        oprot.writeI32(struct.vrachPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LPU_PCOD_FIELD_DESC);
        oprot.writeI32(struct.lpuPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PODR_PCOD_FIELD_DESC);
        oprot.writeI32(struct.podrPcod);
        oprot.writeFieldEnd();
        if (struct.login != null) {
          oprot.writeFieldBegin(LOGIN_FIELD_DESC);
          oprot.writeString(struct.login);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPassword_argsTupleSchemeFactory implements SchemeFactory {
      public setPassword_argsTupleScheme getScheme() {
        return new setPassword_argsTupleScheme();
      }
    }

    private static class setPassword_argsTupleScheme extends TupleScheme<setPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVrachPcod()) {
          optionals.set(0);
        }
        if (struct.isSetLpuPcod()) {
          optionals.set(1);
        }
        if (struct.isSetPodrPcod()) {
          optionals.set(2);
        }
        if (struct.isSetLogin()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetVrachPcod()) {
          oprot.writeI32(struct.vrachPcod);
        }
        if (struct.isSetLpuPcod()) {
          oprot.writeI32(struct.lpuPcod);
        }
        if (struct.isSetPodrPcod()) {
          oprot.writeI32(struct.podrPcod);
        }
        if (struct.isSetLogin()) {
          oprot.writeString(struct.login);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.vrachPcod = iprot.readI32();
          struct.setVrachPcodIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lpuPcod = iprot.readI32();
          struct.setLpuPcodIsSet(true);
        }
        if (incoming.get(2)) {
          struct.podrPcod = iprot.readI32();
          struct.setPodrPcodIsSet(true);
        }
        if (incoming.get(3)) {
          struct.login = iprot.readString();
          struct.setLoginIsSet(true);
        }
      }
    }

  }

  public static class setPassword_result implements org.apache.thrift.TBase<setPassword_result, setPassword_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPassword_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPassword_result.class, metaDataMap);
    }

    public setPassword_result() {
    }

    public setPassword_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPassword_result(setPassword_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public setPassword_result deepCopy() {
      return new setPassword_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public setPassword_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPassword_result)
        return this.equals((setPassword_result)that);
      return false;
    }

    public boolean equals(setPassword_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setPassword_result typedOther = (setPassword_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPassword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPassword_resultStandardSchemeFactory implements SchemeFactory {
      public setPassword_resultStandardScheme getScheme() {
        return new setPassword_resultStandardScheme();
      }
    }

    private static class setPassword_resultStandardScheme extends StandardScheme<setPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPassword_resultTupleSchemeFactory implements SchemeFactory {
      public setPassword_resultTupleScheme getScheme() {
        return new setPassword_resultTupleScheme();
      }
    }

    private static class setPassword_resultTupleScheme extends TupleScheme<setPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class remPassword_args implements org.apache.thrift.TBase<remPassword_args, remPassword_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remPassword_args");

    private static final org.apache.thrift.protocol.TField VRACH_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("vrachPcod", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LPU_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("lpuPcod", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PODR_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("podrPcod", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new remPassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new remPassword_argsTupleSchemeFactory());
    }

    public int vrachPcod; // required
    public int lpuPcod; // required
    public int podrPcod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VRACH_PCOD((short)1, "vrachPcod"),
      LPU_PCOD((short)2, "lpuPcod"),
      PODR_PCOD((short)3, "podrPcod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VRACH_PCOD
            return VRACH_PCOD;
          case 2: // LPU_PCOD
            return LPU_PCOD;
          case 3: // PODR_PCOD
            return PODR_PCOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VRACHPCOD_ISSET_ID = 0;
    private static final int __LPUPCOD_ISSET_ID = 1;
    private static final int __PODRPCOD_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VRACH_PCOD, new org.apache.thrift.meta_data.FieldMetaData("vrachPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LPU_PCOD, new org.apache.thrift.meta_data.FieldMetaData("lpuPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PODR_PCOD, new org.apache.thrift.meta_data.FieldMetaData("podrPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remPassword_args.class, metaDataMap);
    }

    public remPassword_args() {
    }

    public remPassword_args(
      int vrachPcod,
      int lpuPcod,
      int podrPcod)
    {
      this();
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public remPassword_args(remPassword_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.vrachPcod = other.vrachPcod;
      this.lpuPcod = other.lpuPcod;
      this.podrPcod = other.podrPcod;
    }

    public remPassword_args deepCopy() {
      return new remPassword_args(this);
    }

    @Override
    public void clear() {
      setVrachPcodIsSet(false);
      this.vrachPcod = 0;
      setLpuPcodIsSet(false);
      this.lpuPcod = 0;
      setPodrPcodIsSet(false);
      this.podrPcod = 0;
    }

    public int getVrachPcod() {
      return this.vrachPcod;
    }

    public remPassword_args setVrachPcod(int vrachPcod) {
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      return this;
    }

    public void unsetVrachPcod() {
      __isset_bit_vector.clear(__VRACHPCOD_ISSET_ID);
    }

    /** Returns true if field vrachPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetVrachPcod() {
      return __isset_bit_vector.get(__VRACHPCOD_ISSET_ID);
    }

    public void setVrachPcodIsSet(boolean value) {
      __isset_bit_vector.set(__VRACHPCOD_ISSET_ID, value);
    }

    public int getLpuPcod() {
      return this.lpuPcod;
    }

    public remPassword_args setLpuPcod(int lpuPcod) {
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      return this;
    }

    public void unsetLpuPcod() {
      __isset_bit_vector.clear(__LPUPCOD_ISSET_ID);
    }

    /** Returns true if field lpuPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetLpuPcod() {
      return __isset_bit_vector.get(__LPUPCOD_ISSET_ID);
    }

    public void setLpuPcodIsSet(boolean value) {
      __isset_bit_vector.set(__LPUPCOD_ISSET_ID, value);
    }

    public int getPodrPcod() {
      return this.podrPcod;
    }

    public remPassword_args setPodrPcod(int podrPcod) {
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
      return this;
    }

    public void unsetPodrPcod() {
      __isset_bit_vector.clear(__PODRPCOD_ISSET_ID);
    }

    /** Returns true if field podrPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetPodrPcod() {
      return __isset_bit_vector.get(__PODRPCOD_ISSET_ID);
    }

    public void setPodrPcodIsSet(boolean value) {
      __isset_bit_vector.set(__PODRPCOD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VRACH_PCOD:
        if (value == null) {
          unsetVrachPcod();
        } else {
          setVrachPcod((Integer)value);
        }
        break;

      case LPU_PCOD:
        if (value == null) {
          unsetLpuPcod();
        } else {
          setLpuPcod((Integer)value);
        }
        break;

      case PODR_PCOD:
        if (value == null) {
          unsetPodrPcod();
        } else {
          setPodrPcod((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VRACH_PCOD:
        return Integer.valueOf(getVrachPcod());

      case LPU_PCOD:
        return Integer.valueOf(getLpuPcod());

      case PODR_PCOD:
        return Integer.valueOf(getPodrPcod());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VRACH_PCOD:
        return isSetVrachPcod();
      case LPU_PCOD:
        return isSetLpuPcod();
      case PODR_PCOD:
        return isSetPodrPcod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof remPassword_args)
        return this.equals((remPassword_args)that);
      return false;
    }

    public boolean equals(remPassword_args that) {
      if (that == null)
        return false;

      boolean this_present_vrachPcod = true;
      boolean that_present_vrachPcod = true;
      if (this_present_vrachPcod || that_present_vrachPcod) {
        if (!(this_present_vrachPcod && that_present_vrachPcod))
          return false;
        if (this.vrachPcod != that.vrachPcod)
          return false;
      }

      boolean this_present_lpuPcod = true;
      boolean that_present_lpuPcod = true;
      if (this_present_lpuPcod || that_present_lpuPcod) {
        if (!(this_present_lpuPcod && that_present_lpuPcod))
          return false;
        if (this.lpuPcod != that.lpuPcod)
          return false;
      }

      boolean this_present_podrPcod = true;
      boolean that_present_podrPcod = true;
      if (this_present_podrPcod || that_present_podrPcod) {
        if (!(this_present_podrPcod && that_present_podrPcod))
          return false;
        if (this.podrPcod != that.podrPcod)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(remPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      remPassword_args typedOther = (remPassword_args)other;

      lastComparison = Boolean.valueOf(isSetVrachPcod()).compareTo(typedOther.isSetVrachPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVrachPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vrachPcod, typedOther.vrachPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLpuPcod()).compareTo(typedOther.isSetLpuPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLpuPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lpuPcod, typedOther.lpuPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPodrPcod()).compareTo(typedOther.isSetPodrPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPodrPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.podrPcod, typedOther.podrPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("remPassword_args(");
      boolean first = true;

      sb.append("vrachPcod:");
      sb.append(this.vrachPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lpuPcod:");
      sb.append(this.lpuPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("podrPcod:");
      sb.append(this.podrPcod);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class remPassword_argsStandardSchemeFactory implements SchemeFactory {
      public remPassword_argsStandardScheme getScheme() {
        return new remPassword_argsStandardScheme();
      }
    }

    private static class remPassword_argsStandardScheme extends StandardScheme<remPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, remPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VRACH_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vrachPcod = iprot.readI32();
                struct.setVrachPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LPU_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lpuPcod = iprot.readI32();
                struct.setLpuPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PODR_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.podrPcod = iprot.readI32();
                struct.setPodrPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, remPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VRACH_PCOD_FIELD_DESC);
        oprot.writeI32(struct.vrachPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LPU_PCOD_FIELD_DESC);
        oprot.writeI32(struct.lpuPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PODR_PCOD_FIELD_DESC);
        oprot.writeI32(struct.podrPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class remPassword_argsTupleSchemeFactory implements SchemeFactory {
      public remPassword_argsTupleScheme getScheme() {
        return new remPassword_argsTupleScheme();
      }
    }

    private static class remPassword_argsTupleScheme extends TupleScheme<remPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, remPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVrachPcod()) {
          optionals.set(0);
        }
        if (struct.isSetLpuPcod()) {
          optionals.set(1);
        }
        if (struct.isSetPodrPcod()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVrachPcod()) {
          oprot.writeI32(struct.vrachPcod);
        }
        if (struct.isSetLpuPcod()) {
          oprot.writeI32(struct.lpuPcod);
        }
        if (struct.isSetPodrPcod()) {
          oprot.writeI32(struct.podrPcod);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, remPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.vrachPcod = iprot.readI32();
          struct.setVrachPcodIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lpuPcod = iprot.readI32();
          struct.setLpuPcodIsSet(true);
        }
        if (incoming.get(2)) {
          struct.podrPcod = iprot.readI32();
          struct.setPodrPcodIsSet(true);
        }
      }
    }

  }

  public static class remPassword_result implements org.apache.thrift.TBase<remPassword_result, remPassword_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remPassword_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new remPassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new remPassword_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remPassword_result.class, metaDataMap);
    }

    public remPassword_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public remPassword_result(remPassword_result other) {
    }

    public remPassword_result deepCopy() {
      return new remPassword_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof remPassword_result)
        return this.equals((remPassword_result)that);
      return false;
    }

    public boolean equals(remPassword_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(remPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      remPassword_result typedOther = (remPassword_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("remPassword_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class remPassword_resultStandardSchemeFactory implements SchemeFactory {
      public remPassword_resultStandardScheme getScheme() {
        return new remPassword_resultStandardScheme();
      }
    }

    private static class remPassword_resultStandardScheme extends StandardScheme<remPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, remPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, remPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class remPassword_resultTupleSchemeFactory implements SchemeFactory {
      public remPassword_resultTupleScheme getScheme() {
        return new remPassword_resultTupleScheme();
      }
    }

    private static class remPassword_resultTupleScheme extends TupleScheme<remPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, remPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, remPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getPermissions_args implements org.apache.thrift.TBase<getPermissions_args, getPermissions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPermissions_args");

    private static final org.apache.thrift.protocol.TField VRACH_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("vrachPcod", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LPU_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("lpuPcod", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PODR_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("podrPcod", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPermissions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPermissions_argsTupleSchemeFactory());
    }

    public int vrachPcod; // required
    public int lpuPcod; // required
    public int podrPcod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VRACH_PCOD((short)1, "vrachPcod"),
      LPU_PCOD((short)2, "lpuPcod"),
      PODR_PCOD((short)3, "podrPcod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VRACH_PCOD
            return VRACH_PCOD;
          case 2: // LPU_PCOD
            return LPU_PCOD;
          case 3: // PODR_PCOD
            return PODR_PCOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VRACHPCOD_ISSET_ID = 0;
    private static final int __LPUPCOD_ISSET_ID = 1;
    private static final int __PODRPCOD_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VRACH_PCOD, new org.apache.thrift.meta_data.FieldMetaData("vrachPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LPU_PCOD, new org.apache.thrift.meta_data.FieldMetaData("lpuPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PODR_PCOD, new org.apache.thrift.meta_data.FieldMetaData("podrPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPermissions_args.class, metaDataMap);
    }

    public getPermissions_args() {
    }

    public getPermissions_args(
      int vrachPcod,
      int lpuPcod,
      int podrPcod)
    {
      this();
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPermissions_args(getPermissions_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.vrachPcod = other.vrachPcod;
      this.lpuPcod = other.lpuPcod;
      this.podrPcod = other.podrPcod;
    }

    public getPermissions_args deepCopy() {
      return new getPermissions_args(this);
    }

    @Override
    public void clear() {
      setVrachPcodIsSet(false);
      this.vrachPcod = 0;
      setLpuPcodIsSet(false);
      this.lpuPcod = 0;
      setPodrPcodIsSet(false);
      this.podrPcod = 0;
    }

    public int getVrachPcod() {
      return this.vrachPcod;
    }

    public getPermissions_args setVrachPcod(int vrachPcod) {
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      return this;
    }

    public void unsetVrachPcod() {
      __isset_bit_vector.clear(__VRACHPCOD_ISSET_ID);
    }

    /** Returns true if field vrachPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetVrachPcod() {
      return __isset_bit_vector.get(__VRACHPCOD_ISSET_ID);
    }

    public void setVrachPcodIsSet(boolean value) {
      __isset_bit_vector.set(__VRACHPCOD_ISSET_ID, value);
    }

    public int getLpuPcod() {
      return this.lpuPcod;
    }

    public getPermissions_args setLpuPcod(int lpuPcod) {
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      return this;
    }

    public void unsetLpuPcod() {
      __isset_bit_vector.clear(__LPUPCOD_ISSET_ID);
    }

    /** Returns true if field lpuPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetLpuPcod() {
      return __isset_bit_vector.get(__LPUPCOD_ISSET_ID);
    }

    public void setLpuPcodIsSet(boolean value) {
      __isset_bit_vector.set(__LPUPCOD_ISSET_ID, value);
    }

    public int getPodrPcod() {
      return this.podrPcod;
    }

    public getPermissions_args setPodrPcod(int podrPcod) {
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
      return this;
    }

    public void unsetPodrPcod() {
      __isset_bit_vector.clear(__PODRPCOD_ISSET_ID);
    }

    /** Returns true if field podrPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetPodrPcod() {
      return __isset_bit_vector.get(__PODRPCOD_ISSET_ID);
    }

    public void setPodrPcodIsSet(boolean value) {
      __isset_bit_vector.set(__PODRPCOD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VRACH_PCOD:
        if (value == null) {
          unsetVrachPcod();
        } else {
          setVrachPcod((Integer)value);
        }
        break;

      case LPU_PCOD:
        if (value == null) {
          unsetLpuPcod();
        } else {
          setLpuPcod((Integer)value);
        }
        break;

      case PODR_PCOD:
        if (value == null) {
          unsetPodrPcod();
        } else {
          setPodrPcod((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VRACH_PCOD:
        return Integer.valueOf(getVrachPcod());

      case LPU_PCOD:
        return Integer.valueOf(getLpuPcod());

      case PODR_PCOD:
        return Integer.valueOf(getPodrPcod());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VRACH_PCOD:
        return isSetVrachPcod();
      case LPU_PCOD:
        return isSetLpuPcod();
      case PODR_PCOD:
        return isSetPodrPcod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPermissions_args)
        return this.equals((getPermissions_args)that);
      return false;
    }

    public boolean equals(getPermissions_args that) {
      if (that == null)
        return false;

      boolean this_present_vrachPcod = true;
      boolean that_present_vrachPcod = true;
      if (this_present_vrachPcod || that_present_vrachPcod) {
        if (!(this_present_vrachPcod && that_present_vrachPcod))
          return false;
        if (this.vrachPcod != that.vrachPcod)
          return false;
      }

      boolean this_present_lpuPcod = true;
      boolean that_present_lpuPcod = true;
      if (this_present_lpuPcod || that_present_lpuPcod) {
        if (!(this_present_lpuPcod && that_present_lpuPcod))
          return false;
        if (this.lpuPcod != that.lpuPcod)
          return false;
      }

      boolean this_present_podrPcod = true;
      boolean that_present_podrPcod = true;
      if (this_present_podrPcod || that_present_podrPcod) {
        if (!(this_present_podrPcod && that_present_podrPcod))
          return false;
        if (this.podrPcod != that.podrPcod)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPermissions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPermissions_args typedOther = (getPermissions_args)other;

      lastComparison = Boolean.valueOf(isSetVrachPcod()).compareTo(typedOther.isSetVrachPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVrachPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vrachPcod, typedOther.vrachPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLpuPcod()).compareTo(typedOther.isSetLpuPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLpuPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lpuPcod, typedOther.lpuPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPodrPcod()).compareTo(typedOther.isSetPodrPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPodrPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.podrPcod, typedOther.podrPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPermissions_args(");
      boolean first = true;

      sb.append("vrachPcod:");
      sb.append(this.vrachPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lpuPcod:");
      sb.append(this.lpuPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("podrPcod:");
      sb.append(this.podrPcod);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPermissions_argsStandardSchemeFactory implements SchemeFactory {
      public getPermissions_argsStandardScheme getScheme() {
        return new getPermissions_argsStandardScheme();
      }
    }

    private static class getPermissions_argsStandardScheme extends StandardScheme<getPermissions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPermissions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VRACH_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vrachPcod = iprot.readI32();
                struct.setVrachPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LPU_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lpuPcod = iprot.readI32();
                struct.setLpuPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PODR_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.podrPcod = iprot.readI32();
                struct.setPodrPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPermissions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VRACH_PCOD_FIELD_DESC);
        oprot.writeI32(struct.vrachPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LPU_PCOD_FIELD_DESC);
        oprot.writeI32(struct.lpuPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PODR_PCOD_FIELD_DESC);
        oprot.writeI32(struct.podrPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPermissions_argsTupleSchemeFactory implements SchemeFactory {
      public getPermissions_argsTupleScheme getScheme() {
        return new getPermissions_argsTupleScheme();
      }
    }

    private static class getPermissions_argsTupleScheme extends TupleScheme<getPermissions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPermissions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVrachPcod()) {
          optionals.set(0);
        }
        if (struct.isSetLpuPcod()) {
          optionals.set(1);
        }
        if (struct.isSetPodrPcod()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVrachPcod()) {
          oprot.writeI32(struct.vrachPcod);
        }
        if (struct.isSetLpuPcod()) {
          oprot.writeI32(struct.lpuPcod);
        }
        if (struct.isSetPodrPcod()) {
          oprot.writeI32(struct.podrPcod);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPermissions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.vrachPcod = iprot.readI32();
          struct.setVrachPcodIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lpuPcod = iprot.readI32();
          struct.setLpuPcodIsSet(true);
        }
        if (incoming.get(2)) {
          struct.podrPcod = iprot.readI32();
          struct.setPodrPcodIsSet(true);
        }
      }
    }

  }

  public static class getPermissions_result implements org.apache.thrift.TBase<getPermissions_result, getPermissions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPermissions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPermissions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPermissions_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPermissions_result.class, metaDataMap);
    }

    public getPermissions_result() {
    }

    public getPermissions_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPermissions_result(getPermissions_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getPermissions_result deepCopy() {
      return new getPermissions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getPermissions_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPermissions_result)
        return this.equals((getPermissions_result)that);
      return false;
    }

    public boolean equals(getPermissions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPermissions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPermissions_result typedOther = (getPermissions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPermissions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPermissions_resultStandardSchemeFactory implements SchemeFactory {
      public getPermissions_resultStandardScheme getScheme() {
        return new getPermissions_resultStandardScheme();
      }
    }

    private static class getPermissions_resultStandardScheme extends StandardScheme<getPermissions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPermissions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPermissions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPermissions_resultTupleSchemeFactory implements SchemeFactory {
      public getPermissions_resultTupleScheme getScheme() {
        return new getPermissions_resultTupleScheme();
      }
    }

    private static class getPermissions_resultTupleScheme extends TupleScheme<getPermissions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPermissions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPermissions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setPermissions_args implements org.apache.thrift.TBase<setPermissions_args, setPermissions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPermissions_args");

    private static final org.apache.thrift.protocol.TField VRACH_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("vrachPcod", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LPU_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("lpuPcod", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PODR_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("podrPcod", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PDOST_FIELD_DESC = new org.apache.thrift.protocol.TField("pdost", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPermissions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPermissions_argsTupleSchemeFactory());
    }

    public int vrachPcod; // required
    public int lpuPcod; // required
    public int podrPcod; // required
    public String pdost; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VRACH_PCOD((short)1, "vrachPcod"),
      LPU_PCOD((short)2, "lpuPcod"),
      PODR_PCOD((short)3, "podrPcod"),
      PDOST((short)4, "pdost");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VRACH_PCOD
            return VRACH_PCOD;
          case 2: // LPU_PCOD
            return LPU_PCOD;
          case 3: // PODR_PCOD
            return PODR_PCOD;
          case 4: // PDOST
            return PDOST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VRACHPCOD_ISSET_ID = 0;
    private static final int __LPUPCOD_ISSET_ID = 1;
    private static final int __PODRPCOD_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VRACH_PCOD, new org.apache.thrift.meta_data.FieldMetaData("vrachPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LPU_PCOD, new org.apache.thrift.meta_data.FieldMetaData("lpuPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PODR_PCOD, new org.apache.thrift.meta_data.FieldMetaData("podrPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PDOST, new org.apache.thrift.meta_data.FieldMetaData("pdost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPermissions_args.class, metaDataMap);
    }

    public setPermissions_args() {
    }

    public setPermissions_args(
      int vrachPcod,
      int lpuPcod,
      int podrPcod,
      String pdost)
    {
      this();
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
      this.pdost = pdost;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPermissions_args(setPermissions_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.vrachPcod = other.vrachPcod;
      this.lpuPcod = other.lpuPcod;
      this.podrPcod = other.podrPcod;
      if (other.isSetPdost()) {
        this.pdost = other.pdost;
      }
    }

    public setPermissions_args deepCopy() {
      return new setPermissions_args(this);
    }

    @Override
    public void clear() {
      setVrachPcodIsSet(false);
      this.vrachPcod = 0;
      setLpuPcodIsSet(false);
      this.lpuPcod = 0;
      setPodrPcodIsSet(false);
      this.podrPcod = 0;
      this.pdost = null;
    }

    public int getVrachPcod() {
      return this.vrachPcod;
    }

    public setPermissions_args setVrachPcod(int vrachPcod) {
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      return this;
    }

    public void unsetVrachPcod() {
      __isset_bit_vector.clear(__VRACHPCOD_ISSET_ID);
    }

    /** Returns true if field vrachPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetVrachPcod() {
      return __isset_bit_vector.get(__VRACHPCOD_ISSET_ID);
    }

    public void setVrachPcodIsSet(boolean value) {
      __isset_bit_vector.set(__VRACHPCOD_ISSET_ID, value);
    }

    public int getLpuPcod() {
      return this.lpuPcod;
    }

    public setPermissions_args setLpuPcod(int lpuPcod) {
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      return this;
    }

    public void unsetLpuPcod() {
      __isset_bit_vector.clear(__LPUPCOD_ISSET_ID);
    }

    /** Returns true if field lpuPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetLpuPcod() {
      return __isset_bit_vector.get(__LPUPCOD_ISSET_ID);
    }

    public void setLpuPcodIsSet(boolean value) {
      __isset_bit_vector.set(__LPUPCOD_ISSET_ID, value);
    }

    public int getPodrPcod() {
      return this.podrPcod;
    }

    public setPermissions_args setPodrPcod(int podrPcod) {
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
      return this;
    }

    public void unsetPodrPcod() {
      __isset_bit_vector.clear(__PODRPCOD_ISSET_ID);
    }

    /** Returns true if field podrPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetPodrPcod() {
      return __isset_bit_vector.get(__PODRPCOD_ISSET_ID);
    }

    public void setPodrPcodIsSet(boolean value) {
      __isset_bit_vector.set(__PODRPCOD_ISSET_ID, value);
    }

    public String getPdost() {
      return this.pdost;
    }

    public setPermissions_args setPdost(String pdost) {
      this.pdost = pdost;
      return this;
    }

    public void unsetPdost() {
      this.pdost = null;
    }

    /** Returns true if field pdost is set (has been assigned a value) and false otherwise */
    public boolean isSetPdost() {
      return this.pdost != null;
    }

    public void setPdostIsSet(boolean value) {
      if (!value) {
        this.pdost = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VRACH_PCOD:
        if (value == null) {
          unsetVrachPcod();
        } else {
          setVrachPcod((Integer)value);
        }
        break;

      case LPU_PCOD:
        if (value == null) {
          unsetLpuPcod();
        } else {
          setLpuPcod((Integer)value);
        }
        break;

      case PODR_PCOD:
        if (value == null) {
          unsetPodrPcod();
        } else {
          setPodrPcod((Integer)value);
        }
        break;

      case PDOST:
        if (value == null) {
          unsetPdost();
        } else {
          setPdost((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VRACH_PCOD:
        return Integer.valueOf(getVrachPcod());

      case LPU_PCOD:
        return Integer.valueOf(getLpuPcod());

      case PODR_PCOD:
        return Integer.valueOf(getPodrPcod());

      case PDOST:
        return getPdost();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VRACH_PCOD:
        return isSetVrachPcod();
      case LPU_PCOD:
        return isSetLpuPcod();
      case PODR_PCOD:
        return isSetPodrPcod();
      case PDOST:
        return isSetPdost();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPermissions_args)
        return this.equals((setPermissions_args)that);
      return false;
    }

    public boolean equals(setPermissions_args that) {
      if (that == null)
        return false;

      boolean this_present_vrachPcod = true;
      boolean that_present_vrachPcod = true;
      if (this_present_vrachPcod || that_present_vrachPcod) {
        if (!(this_present_vrachPcod && that_present_vrachPcod))
          return false;
        if (this.vrachPcod != that.vrachPcod)
          return false;
      }

      boolean this_present_lpuPcod = true;
      boolean that_present_lpuPcod = true;
      if (this_present_lpuPcod || that_present_lpuPcod) {
        if (!(this_present_lpuPcod && that_present_lpuPcod))
          return false;
        if (this.lpuPcod != that.lpuPcod)
          return false;
      }

      boolean this_present_podrPcod = true;
      boolean that_present_podrPcod = true;
      if (this_present_podrPcod || that_present_podrPcod) {
        if (!(this_present_podrPcod && that_present_podrPcod))
          return false;
        if (this.podrPcod != that.podrPcod)
          return false;
      }

      boolean this_present_pdost = true && this.isSetPdost();
      boolean that_present_pdost = true && that.isSetPdost();
      if (this_present_pdost || that_present_pdost) {
        if (!(this_present_pdost && that_present_pdost))
          return false;
        if (!this.pdost.equals(that.pdost))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setPermissions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setPermissions_args typedOther = (setPermissions_args)other;

      lastComparison = Boolean.valueOf(isSetVrachPcod()).compareTo(typedOther.isSetVrachPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVrachPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vrachPcod, typedOther.vrachPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLpuPcod()).compareTo(typedOther.isSetLpuPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLpuPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lpuPcod, typedOther.lpuPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPodrPcod()).compareTo(typedOther.isSetPodrPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPodrPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.podrPcod, typedOther.podrPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPdost()).compareTo(typedOther.isSetPdost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPdost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pdost, typedOther.pdost);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPermissions_args(");
      boolean first = true;

      sb.append("vrachPcod:");
      sb.append(this.vrachPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lpuPcod:");
      sb.append(this.lpuPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("podrPcod:");
      sb.append(this.podrPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pdost:");
      if (this.pdost == null) {
        sb.append("null");
      } else {
        sb.append(this.pdost);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPermissions_argsStandardSchemeFactory implements SchemeFactory {
      public setPermissions_argsStandardScheme getScheme() {
        return new setPermissions_argsStandardScheme();
      }
    }

    private static class setPermissions_argsStandardScheme extends StandardScheme<setPermissions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPermissions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VRACH_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vrachPcod = iprot.readI32();
                struct.setVrachPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LPU_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lpuPcod = iprot.readI32();
                struct.setLpuPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PODR_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.podrPcod = iprot.readI32();
                struct.setPodrPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PDOST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pdost = iprot.readString();
                struct.setPdostIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPermissions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VRACH_PCOD_FIELD_DESC);
        oprot.writeI32(struct.vrachPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LPU_PCOD_FIELD_DESC);
        oprot.writeI32(struct.lpuPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PODR_PCOD_FIELD_DESC);
        oprot.writeI32(struct.podrPcod);
        oprot.writeFieldEnd();
        if (struct.pdost != null) {
          oprot.writeFieldBegin(PDOST_FIELD_DESC);
          oprot.writeString(struct.pdost);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPermissions_argsTupleSchemeFactory implements SchemeFactory {
      public setPermissions_argsTupleScheme getScheme() {
        return new setPermissions_argsTupleScheme();
      }
    }

    private static class setPermissions_argsTupleScheme extends TupleScheme<setPermissions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPermissions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVrachPcod()) {
          optionals.set(0);
        }
        if (struct.isSetLpuPcod()) {
          optionals.set(1);
        }
        if (struct.isSetPodrPcod()) {
          optionals.set(2);
        }
        if (struct.isSetPdost()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetVrachPcod()) {
          oprot.writeI32(struct.vrachPcod);
        }
        if (struct.isSetLpuPcod()) {
          oprot.writeI32(struct.lpuPcod);
        }
        if (struct.isSetPodrPcod()) {
          oprot.writeI32(struct.podrPcod);
        }
        if (struct.isSetPdost()) {
          oprot.writeString(struct.pdost);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPermissions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.vrachPcod = iprot.readI32();
          struct.setVrachPcodIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lpuPcod = iprot.readI32();
          struct.setLpuPcodIsSet(true);
        }
        if (incoming.get(2)) {
          struct.podrPcod = iprot.readI32();
          struct.setPodrPcodIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pdost = iprot.readString();
          struct.setPdostIsSet(true);
        }
      }
    }

  }

  public static class setPermissions_result implements org.apache.thrift.TBase<setPermissions_result, setPermissions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPermissions_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPermissions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPermissions_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPermissions_result.class, metaDataMap);
    }

    public setPermissions_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPermissions_result(setPermissions_result other) {
    }

    public setPermissions_result deepCopy() {
      return new setPermissions_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPermissions_result)
        return this.equals((setPermissions_result)that);
      return false;
    }

    public boolean equals(setPermissions_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setPermissions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setPermissions_result typedOther = (setPermissions_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPermissions_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPermissions_resultStandardSchemeFactory implements SchemeFactory {
      public setPermissions_resultStandardScheme getScheme() {
        return new setPermissions_resultStandardScheme();
      }
    }

    private static class setPermissions_resultStandardScheme extends StandardScheme<setPermissions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPermissions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPermissions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPermissions_resultTupleSchemeFactory implements SchemeFactory {
      public setPermissions_resultTupleScheme getScheme() {
        return new setPermissions_resultTupleScheme();
      }
    }

    private static class setPermissions_resultTupleScheme extends TupleScheme<setPermissions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPermissions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPermissions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
