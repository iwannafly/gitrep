/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftServerVrachInfo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MestoRab implements org.apache.thrift.TBase<MestoRab, MestoRab._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MestoRab");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("pcod", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CLPU_FIELD_DESC = new org.apache.thrift.protocol.TField("clpu", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CSLU_FIELD_DESC = new org.apache.thrift.protocol.TField("cslu", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CPODR_FIELD_DESC = new org.apache.thrift.protocol.TField("cpodr", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CDOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cdol", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DATAU_FIELD_DESC = new org.apache.thrift.protocol.TField("datau", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField PRIZND_FIELD_DESC = new org.apache.thrift.protocol.TField("priznd", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MestoRabStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MestoRabTupleSchemeFactory());
  }

  public int id; // required
  public int pcod; // required
  public int clpu; // required
  public int cslu; // optional
  public int cpodr; // optional
  public String cdol; // optional
  public long datau; // optional
  public int priznd; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PCOD((short)2, "pcod"),
    CLPU((short)3, "clpu"),
    CSLU((short)4, "cslu"),
    CPODR((short)5, "cpodr"),
    CDOL((short)6, "cdol"),
    DATAU((short)7, "datau"),
    PRIZND((short)8, "priznd");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PCOD
          return PCOD;
        case 3: // CLPU
          return CLPU;
        case 4: // CSLU
          return CSLU;
        case 5: // CPODR
          return CPODR;
        case 6: // CDOL
          return CDOL;
        case 7: // DATAU
          return DATAU;
        case 8: // PRIZND
          return PRIZND;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PCOD_ISSET_ID = 1;
  private static final int __CLPU_ISSET_ID = 2;
  private static final int __CSLU_ISSET_ID = 3;
  private static final int __CPODR_ISSET_ID = 4;
  private static final int __DATAU_ISSET_ID = 5;
  private static final int __PRIZND_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);
  private _Fields optionals[] = {_Fields.CSLU,_Fields.CPODR,_Fields.CDOL,_Fields.DATAU,_Fields.PRIZND};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PCOD, new org.apache.thrift.meta_data.FieldMetaData("pcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLPU, new org.apache.thrift.meta_data.FieldMetaData("clpu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CSLU, new org.apache.thrift.meta_data.FieldMetaData("cslu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CPODR, new org.apache.thrift.meta_data.FieldMetaData("cpodr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CDOL, new org.apache.thrift.meta_data.FieldMetaData("cdol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATAU, new org.apache.thrift.meta_data.FieldMetaData("datau", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRIZND, new org.apache.thrift.meta_data.FieldMetaData("priznd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MestoRab.class, metaDataMap);
  }

  public MestoRab() {
  }

  public MestoRab(
    int id,
    int pcod,
    int clpu)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.pcod = pcod;
    setPcodIsSet(true);
    this.clpu = clpu;
    setClpuIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MestoRab(MestoRab other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    this.pcod = other.pcod;
    this.clpu = other.clpu;
    this.cslu = other.cslu;
    this.cpodr = other.cpodr;
    if (other.isSetCdol()) {
      this.cdol = other.cdol;
    }
    this.datau = other.datau;
    this.priznd = other.priznd;
  }

  public MestoRab deepCopy() {
    return new MestoRab(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setPcodIsSet(false);
    this.pcod = 0;
    setClpuIsSet(false);
    this.clpu = 0;
    setCsluIsSet(false);
    this.cslu = 0;
    setCpodrIsSet(false);
    this.cpodr = 0;
    this.cdol = null;
    setDatauIsSet(false);
    this.datau = 0;
    setPrizndIsSet(false);
    this.priznd = 0;
  }

  public int getId() {
    return this.id;
  }

  public MestoRab setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public int getPcod() {
    return this.pcod;
  }

  public MestoRab setPcod(int pcod) {
    this.pcod = pcod;
    setPcodIsSet(true);
    return this;
  }

  public void unsetPcod() {
    __isset_bit_vector.clear(__PCOD_ISSET_ID);
  }

  /** Returns true if field pcod is set (has been assigned a value) and false otherwise */
  public boolean isSetPcod() {
    return __isset_bit_vector.get(__PCOD_ISSET_ID);
  }

  public void setPcodIsSet(boolean value) {
    __isset_bit_vector.set(__PCOD_ISSET_ID, value);
  }

  public int getClpu() {
    return this.clpu;
  }

  public MestoRab setClpu(int clpu) {
    this.clpu = clpu;
    setClpuIsSet(true);
    return this;
  }

  public void unsetClpu() {
    __isset_bit_vector.clear(__CLPU_ISSET_ID);
  }

  /** Returns true if field clpu is set (has been assigned a value) and false otherwise */
  public boolean isSetClpu() {
    return __isset_bit_vector.get(__CLPU_ISSET_ID);
  }

  public void setClpuIsSet(boolean value) {
    __isset_bit_vector.set(__CLPU_ISSET_ID, value);
  }

  public int getCslu() {
    return this.cslu;
  }

  public MestoRab setCslu(int cslu) {
    this.cslu = cslu;
    setCsluIsSet(true);
    return this;
  }

  public void unsetCslu() {
    __isset_bit_vector.clear(__CSLU_ISSET_ID);
  }

  /** Returns true if field cslu is set (has been assigned a value) and false otherwise */
  public boolean isSetCslu() {
    return __isset_bit_vector.get(__CSLU_ISSET_ID);
  }

  public void setCsluIsSet(boolean value) {
    __isset_bit_vector.set(__CSLU_ISSET_ID, value);
  }

  public int getCpodr() {
    return this.cpodr;
  }

  public MestoRab setCpodr(int cpodr) {
    this.cpodr = cpodr;
    setCpodrIsSet(true);
    return this;
  }

  public void unsetCpodr() {
    __isset_bit_vector.clear(__CPODR_ISSET_ID);
  }

  /** Returns true if field cpodr is set (has been assigned a value) and false otherwise */
  public boolean isSetCpodr() {
    return __isset_bit_vector.get(__CPODR_ISSET_ID);
  }

  public void setCpodrIsSet(boolean value) {
    __isset_bit_vector.set(__CPODR_ISSET_ID, value);
  }

  public String getCdol() {
    return this.cdol;
  }

  public MestoRab setCdol(String cdol) {
    this.cdol = cdol;
    return this;
  }

  public void unsetCdol() {
    this.cdol = null;
  }

  /** Returns true if field cdol is set (has been assigned a value) and false otherwise */
  public boolean isSetCdol() {
    return this.cdol != null;
  }

  public void setCdolIsSet(boolean value) {
    if (!value) {
      this.cdol = null;
    }
  }

  public long getDatau() {
    return this.datau;
  }

  public MestoRab setDatau(long datau) {
    this.datau = datau;
    setDatauIsSet(true);
    return this;
  }

  public void unsetDatau() {
    __isset_bit_vector.clear(__DATAU_ISSET_ID);
  }

  /** Returns true if field datau is set (has been assigned a value) and false otherwise */
  public boolean isSetDatau() {
    return __isset_bit_vector.get(__DATAU_ISSET_ID);
  }

  public void setDatauIsSet(boolean value) {
    __isset_bit_vector.set(__DATAU_ISSET_ID, value);
  }

  public int getPriznd() {
    return this.priznd;
  }

  public MestoRab setPriznd(int priznd) {
    this.priznd = priznd;
    setPrizndIsSet(true);
    return this;
  }

  public void unsetPriznd() {
    __isset_bit_vector.clear(__PRIZND_ISSET_ID);
  }

  /** Returns true if field priznd is set (has been assigned a value) and false otherwise */
  public boolean isSetPriznd() {
    return __isset_bit_vector.get(__PRIZND_ISSET_ID);
  }

  public void setPrizndIsSet(boolean value) {
    __isset_bit_vector.set(__PRIZND_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PCOD:
      if (value == null) {
        unsetPcod();
      } else {
        setPcod((Integer)value);
      }
      break;

    case CLPU:
      if (value == null) {
        unsetClpu();
      } else {
        setClpu((Integer)value);
      }
      break;

    case CSLU:
      if (value == null) {
        unsetCslu();
      } else {
        setCslu((Integer)value);
      }
      break;

    case CPODR:
      if (value == null) {
        unsetCpodr();
      } else {
        setCpodr((Integer)value);
      }
      break;

    case CDOL:
      if (value == null) {
        unsetCdol();
      } else {
        setCdol((String)value);
      }
      break;

    case DATAU:
      if (value == null) {
        unsetDatau();
      } else {
        setDatau((Long)value);
      }
      break;

    case PRIZND:
      if (value == null) {
        unsetPriznd();
      } else {
        setPriznd((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case PCOD:
      return Integer.valueOf(getPcod());

    case CLPU:
      return Integer.valueOf(getClpu());

    case CSLU:
      return Integer.valueOf(getCslu());

    case CPODR:
      return Integer.valueOf(getCpodr());

    case CDOL:
      return getCdol();

    case DATAU:
      return Long.valueOf(getDatau());

    case PRIZND:
      return Integer.valueOf(getPriznd());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PCOD:
      return isSetPcod();
    case CLPU:
      return isSetClpu();
    case CSLU:
      return isSetCslu();
    case CPODR:
      return isSetCpodr();
    case CDOL:
      return isSetCdol();
    case DATAU:
      return isSetDatau();
    case PRIZND:
      return isSetPriznd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MestoRab)
      return this.equals((MestoRab)that);
    return false;
  }

  public boolean equals(MestoRab that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_pcod = true;
    boolean that_present_pcod = true;
    if (this_present_pcod || that_present_pcod) {
      if (!(this_present_pcod && that_present_pcod))
        return false;
      if (this.pcod != that.pcod)
        return false;
    }

    boolean this_present_clpu = true;
    boolean that_present_clpu = true;
    if (this_present_clpu || that_present_clpu) {
      if (!(this_present_clpu && that_present_clpu))
        return false;
      if (this.clpu != that.clpu)
        return false;
    }

    boolean this_present_cslu = true && this.isSetCslu();
    boolean that_present_cslu = true && that.isSetCslu();
    if (this_present_cslu || that_present_cslu) {
      if (!(this_present_cslu && that_present_cslu))
        return false;
      if (this.cslu != that.cslu)
        return false;
    }

    boolean this_present_cpodr = true && this.isSetCpodr();
    boolean that_present_cpodr = true && that.isSetCpodr();
    if (this_present_cpodr || that_present_cpodr) {
      if (!(this_present_cpodr && that_present_cpodr))
        return false;
      if (this.cpodr != that.cpodr)
        return false;
    }

    boolean this_present_cdol = true && this.isSetCdol();
    boolean that_present_cdol = true && that.isSetCdol();
    if (this_present_cdol || that_present_cdol) {
      if (!(this_present_cdol && that_present_cdol))
        return false;
      if (!this.cdol.equals(that.cdol))
        return false;
    }

    boolean this_present_datau = true && this.isSetDatau();
    boolean that_present_datau = true && that.isSetDatau();
    if (this_present_datau || that_present_datau) {
      if (!(this_present_datau && that_present_datau))
        return false;
      if (this.datau != that.datau)
        return false;
    }

    boolean this_present_priznd = true && this.isSetPriznd();
    boolean that_present_priznd = true && that.isSetPriznd();
    if (this_present_priznd || that_present_priznd) {
      if (!(this_present_priznd && that_present_priznd))
        return false;
      if (this.priznd != that.priznd)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MestoRab other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MestoRab typedOther = (MestoRab)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPcod()).compareTo(typedOther.isSetPcod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPcod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcod, typedOther.pcod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClpu()).compareTo(typedOther.isSetClpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clpu, typedOther.clpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCslu()).compareTo(typedOther.isSetCslu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCslu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cslu, typedOther.cslu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpodr()).compareTo(typedOther.isSetCpodr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpodr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpodr, typedOther.cpodr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCdol()).compareTo(typedOther.isSetCdol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCdol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdol, typedOther.cdol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatau()).compareTo(typedOther.isSetDatau());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatau()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datau, typedOther.datau);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriznd()).compareTo(typedOther.isSetPriznd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriznd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priznd, typedOther.priznd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MestoRab(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pcod:");
    sb.append(this.pcod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clpu:");
    sb.append(this.clpu);
    first = false;
    if (isSetCslu()) {
      if (!first) sb.append(", ");
      sb.append("cslu:");
      sb.append(this.cslu);
      first = false;
    }
    if (isSetCpodr()) {
      if (!first) sb.append(", ");
      sb.append("cpodr:");
      sb.append(this.cpodr);
      first = false;
    }
    if (isSetCdol()) {
      if (!first) sb.append(", ");
      sb.append("cdol:");
      if (this.cdol == null) {
        sb.append("null");
      } else {
        sb.append(this.cdol);
      }
      first = false;
    }
    if (isSetDatau()) {
      if (!first) sb.append(", ");
      sb.append("datau:");
      sb.append(this.datau);
      first = false;
    }
    if (isSetPriznd()) {
      if (!first) sb.append(", ");
      sb.append("priznd:");
      sb.append(this.priznd);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MestoRabStandardSchemeFactory implements SchemeFactory {
    public MestoRabStandardScheme getScheme() {
      return new MestoRabStandardScheme();
    }
  }

  private static class MestoRabStandardScheme extends StandardScheme<MestoRab> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MestoRab struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PCOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pcod = iprot.readI32();
              struct.setPcodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.clpu = iprot.readI32();
              struct.setClpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CSLU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cslu = iprot.readI32();
              struct.setCsluIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CPODR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpodr = iprot.readI32();
              struct.setCpodrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CDOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cdol = iprot.readString();
              struct.setCdolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATAU
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datau = iprot.readI64();
              struct.setDatauIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRIZND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priznd = iprot.readI32();
              struct.setPrizndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MestoRab struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PCOD_FIELD_DESC);
      oprot.writeI32(struct.pcod);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLPU_FIELD_DESC);
      oprot.writeI32(struct.clpu);
      oprot.writeFieldEnd();
      if (struct.isSetCslu()) {
        oprot.writeFieldBegin(CSLU_FIELD_DESC);
        oprot.writeI32(struct.cslu);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCpodr()) {
        oprot.writeFieldBegin(CPODR_FIELD_DESC);
        oprot.writeI32(struct.cpodr);
        oprot.writeFieldEnd();
      }
      if (struct.cdol != null) {
        if (struct.isSetCdol()) {
          oprot.writeFieldBegin(CDOL_FIELD_DESC);
          oprot.writeString(struct.cdol);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDatau()) {
        oprot.writeFieldBegin(DATAU_FIELD_DESC);
        oprot.writeI64(struct.datau);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPriznd()) {
        oprot.writeFieldBegin(PRIZND_FIELD_DESC);
        oprot.writeI32(struct.priznd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MestoRabTupleSchemeFactory implements SchemeFactory {
    public MestoRabTupleScheme getScheme() {
      return new MestoRabTupleScheme();
    }
  }

  private static class MestoRabTupleScheme extends TupleScheme<MestoRab> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MestoRab struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPcod()) {
        optionals.set(1);
      }
      if (struct.isSetClpu()) {
        optionals.set(2);
      }
      if (struct.isSetCslu()) {
        optionals.set(3);
      }
      if (struct.isSetCpodr()) {
        optionals.set(4);
      }
      if (struct.isSetCdol()) {
        optionals.set(5);
      }
      if (struct.isSetDatau()) {
        optionals.set(6);
      }
      if (struct.isSetPriznd()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetPcod()) {
        oprot.writeI32(struct.pcod);
      }
      if (struct.isSetClpu()) {
        oprot.writeI32(struct.clpu);
      }
      if (struct.isSetCslu()) {
        oprot.writeI32(struct.cslu);
      }
      if (struct.isSetCpodr()) {
        oprot.writeI32(struct.cpodr);
      }
      if (struct.isSetCdol()) {
        oprot.writeString(struct.cdol);
      }
      if (struct.isSetDatau()) {
        oprot.writeI64(struct.datau);
      }
      if (struct.isSetPriznd()) {
        oprot.writeI32(struct.priznd);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MestoRab struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pcod = iprot.readI32();
        struct.setPcodIsSet(true);
      }
      if (incoming.get(2)) {
        struct.clpu = iprot.readI32();
        struct.setClpuIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cslu = iprot.readI32();
        struct.setCsluIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cpodr = iprot.readI32();
        struct.setCpodrIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cdol = iprot.readString();
        struct.setCdolIsSet(true);
      }
      if (incoming.get(6)) {
        struct.datau = iprot.readI64();
        struct.setDatauIsSet(true);
      }
      if (incoming.get(7)) {
        struct.priznd = iprot.readI32();
        struct.setPrizndIsSet(true);
      }
    }
  }

}

