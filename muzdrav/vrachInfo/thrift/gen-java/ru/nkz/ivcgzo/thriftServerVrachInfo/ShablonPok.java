/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftServerVrachInfo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ShablonPok implements org.apache.thrift.TBase<ShablonPok, ShablonPok._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShablonPok");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ID_RAZD_FIELD_DESC = new org.apache.thrift.protocol.TField("id_razd", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHECKED_FIELD_DESC = new org.apache.thrift.protocol.TField("checked", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ShablonPokStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ShablonPokTupleSchemeFactory());
  }

  public int id; // required
  public int id_razd; // required
  public String name; // required
  public boolean checked; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ID_RAZD((short)2, "id_razd"),
    NAME((short)3, "name"),
    CHECKED((short)4, "checked");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ID_RAZD
          return ID_RAZD;
        case 3: // NAME
          return NAME;
        case 4: // CHECKED
          return CHECKED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ID_RAZD_ISSET_ID = 1;
  private static final int __CHECKED_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID_RAZD, new org.apache.thrift.meta_data.FieldMetaData("id_razd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECKED, new org.apache.thrift.meta_data.FieldMetaData("checked", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShablonPok.class, metaDataMap);
  }

  public ShablonPok() {
  }

  public ShablonPok(
    int id,
    int id_razd,
    String name,
    boolean checked)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.id_razd = id_razd;
    setId_razdIsSet(true);
    this.name = name;
    this.checked = checked;
    setCheckedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ShablonPok(ShablonPok other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    this.id_razd = other.id_razd;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.checked = other.checked;
  }

  public ShablonPok deepCopy() {
    return new ShablonPok(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setId_razdIsSet(false);
    this.id_razd = 0;
    this.name = null;
    setCheckedIsSet(false);
    this.checked = false;
  }

  public int getId() {
    return this.id;
  }

  public ShablonPok setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public int getId_razd() {
    return this.id_razd;
  }

  public ShablonPok setId_razd(int id_razd) {
    this.id_razd = id_razd;
    setId_razdIsSet(true);
    return this;
  }

  public void unsetId_razd() {
    __isset_bit_vector.clear(__ID_RAZD_ISSET_ID);
  }

  /** Returns true if field id_razd is set (has been assigned a value) and false otherwise */
  public boolean isSetId_razd() {
    return __isset_bit_vector.get(__ID_RAZD_ISSET_ID);
  }

  public void setId_razdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_RAZD_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public ShablonPok setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public boolean isChecked() {
    return this.checked;
  }

  public ShablonPok setChecked(boolean checked) {
    this.checked = checked;
    setCheckedIsSet(true);
    return this;
  }

  public void unsetChecked() {
    __isset_bit_vector.clear(__CHECKED_ISSET_ID);
  }

  /** Returns true if field checked is set (has been assigned a value) and false otherwise */
  public boolean isSetChecked() {
    return __isset_bit_vector.get(__CHECKED_ISSET_ID);
  }

  public void setCheckedIsSet(boolean value) {
    __isset_bit_vector.set(__CHECKED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ID_RAZD:
      if (value == null) {
        unsetId_razd();
      } else {
        setId_razd((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CHECKED:
      if (value == null) {
        unsetChecked();
      } else {
        setChecked((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case ID_RAZD:
      return Integer.valueOf(getId_razd());

    case NAME:
      return getName();

    case CHECKED:
      return Boolean.valueOf(isChecked());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ID_RAZD:
      return isSetId_razd();
    case NAME:
      return isSetName();
    case CHECKED:
      return isSetChecked();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ShablonPok)
      return this.equals((ShablonPok)that);
    return false;
  }

  public boolean equals(ShablonPok that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_id_razd = true;
    boolean that_present_id_razd = true;
    if (this_present_id_razd || that_present_id_razd) {
      if (!(this_present_id_razd && that_present_id_razd))
        return false;
      if (this.id_razd != that.id_razd)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_checked = true;
    boolean that_present_checked = true;
    if (this_present_checked || that_present_checked) {
      if (!(this_present_checked && that_present_checked))
        return false;
      if (this.checked != that.checked)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ShablonPok other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ShablonPok typedOther = (ShablonPok)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId_razd()).compareTo(typedOther.isSetId_razd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId_razd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_razd, typedOther.id_razd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChecked()).compareTo(typedOther.isSetChecked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChecked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checked, typedOther.checked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ShablonPok(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id_razd:");
    sb.append(this.id_razd);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checked:");
    sb.append(this.checked);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ShablonPokStandardSchemeFactory implements SchemeFactory {
    public ShablonPokStandardScheme getScheme() {
      return new ShablonPokStandardScheme();
    }
  }

  private static class ShablonPokStandardScheme extends StandardScheme<ShablonPok> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ShablonPok struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID_RAZD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id_razd = iprot.readI32();
              struct.setId_razdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHECKED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.checked = iprot.readBool();
              struct.setCheckedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ShablonPok struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_RAZD_FIELD_DESC);
      oprot.writeI32(struct.id_razd);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHECKED_FIELD_DESC);
      oprot.writeBool(struct.checked);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ShablonPokTupleSchemeFactory implements SchemeFactory {
    public ShablonPokTupleScheme getScheme() {
      return new ShablonPokTupleScheme();
    }
  }

  private static class ShablonPokTupleScheme extends TupleScheme<ShablonPok> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ShablonPok struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetId_razd()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetChecked()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetId_razd()) {
        oprot.writeI32(struct.id_razd);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetChecked()) {
        oprot.writeBool(struct.checked);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ShablonPok struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id_razd = iprot.readI32();
        struct.setId_razdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.checked = iprot.readBool();
        struct.setCheckedIsSet(true);
      }
    }
  }

}

