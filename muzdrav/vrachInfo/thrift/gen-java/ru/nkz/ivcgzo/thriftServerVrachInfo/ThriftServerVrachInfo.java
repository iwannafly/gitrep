/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.nkz.ivcgzo.thriftServerVrachInfo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftServerVrachInfo {

  public interface Iface extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Iface {

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getPrizndList() throws org.apache.thrift.TException;

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> get_n_s00() throws org.apache.thrift.TException;

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> get_n_p0s13() throws org.apache.thrift.TException;

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> get_n_o00(int clpu) throws org.apache.thrift.TException;

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> get_n_n00(int clpu) throws org.apache.thrift.TException;

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> get_n_lds(int clpu) throws org.apache.thrift.TException;

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> get_n_z00() throws org.apache.thrift.TException;

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> get_n_z30() throws org.apache.thrift.TException;

    /**
     * Список всех врачей для данного лпу.
     */
    public List<VrachInfo> GetVrachList() throws org.apache.thrift.TException;

    /**
     * Информация на конкретного врача по его коду.
     * 
     * @param pcod
     */
    public VrachInfo GetVrach(int pcod) throws VrachNotFoundException, org.apache.thrift.TException;

    /**
     * Добавление врача.
     * 
     * @param vr
     */
    public int AddVrach(VrachInfo vr) throws VrachExistsException, org.apache.thrift.TException;

    /**
     * Обновление информации о враче.
     * 
     * @param vr
     */
    public void UpdVrach(VrachInfo vr) throws VrachExistsException, org.apache.thrift.TException;

    /**
     * Удаление врача.
     * 
     * @param pcod
     */
    public void DelVrach(int pcod) throws org.apache.thrift.TException;

    /**
     * Список всех мест работ для данного врача.
     * 
     * @param vrPcod
     */
    public List<MestoRab> GetMrabList(int vrPcod) throws org.apache.thrift.TException;

    /**
     * Информация о конкретном месте работы по его коду.
     * 
     * @param id
     */
    public MestoRab GetMrab(int id) throws MestoRabNotFoundException, org.apache.thrift.TException;

    /**
     * Добавление места работы.
     * 
     * @param mr
     */
    public int AddMrab(MestoRab mr) throws MestoRabExistsException, org.apache.thrift.TException;

    /**
     * Обновление информации о месте работы.
     * 
     * @param mr
     */
    public void UpdMrab(MestoRab mr) throws MestoRabExistsException, org.apache.thrift.TException;

    /**
     * Удаление места работы.
     * 
     * @param mr
     */
    public void DelMrab(MestoRab mr) throws org.apache.thrift.TException;

    /**
     * Получает логин пользователя.
     * 
     * @param vrachPcod
     * @param lpuPcod
     * @param podrPcod
     */
    public String getLogin(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException;

    /**
     * Устанавливает пароль для пользователя, открывая ему доступ к системе.
     * 
     * @param vrachPcod
     * @param lpuPcod
     * @param podrPcod
     * @param login
     */
    public UserIdPassword setPassword(int vrachPcod, int lpuPcod, int podrPcod, String login) throws org.apache.thrift.TException;

    /**
     * Очищает пароль пользователя, закрывая ему доступ к системе.
     * 
     * @param vrachPcod
     * @param lpuPcod
     * @param podrPcod
     */
    public void remPassword(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException;

    /**
     * Получает разрешения пользователя, то есть, к каким частям системы у него есть доступ.
     * 
     * @param vrachPcod
     * @param lpuPcod
     * @param podrPcod
     */
    public String getPermissions(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException;

    /**
     * Устанавливает разрешения пользователя.
     * 
     * @param vrachPcod
     * @param lpuPcod
     * @param podrPcod
     * @param pdost
     */
    public void setPermissions(int vrachPcod, int lpuPcod, int podrPcod, String pdost) throws org.apache.thrift.TException;

    /**
     * Получает список разделов шаблонов.
     */
    public List<ShablonRazd> getShabRazd() throws org.apache.thrift.TException;

    /**
     * Получает список показателей шаблонов.
     * 
     * @param id_razd
     * @param cdol
     */
    public List<ShablonPok> getShabPok(int id_razd, String cdol) throws org.apache.thrift.TException;

    /**
     * Устанавливает доступность показателя шаблона для кода должности.
     * 
     * @param shPok
     * @param cdol
     */
    public void setShabPok(ShablonPok shPok, String cdol) throws org.apache.thrift.TException;

    /**
     * Устанавливает доступность показателей для всего раздела.
     * 
     * @param shRazd
     * @param cdol
     * @param value
     */
    public void setShabPokGrup(ShablonRazd shRazd, String cdol, boolean value) throws org.apache.thrift.TException;

    /**
     * Получает тексты шаблонов для показателя шаблона и кода должности в независимости от доступности.
     * 
     * @param shPok
     * @param cdol
     */
    public List<ShablonText> getShablonTextsEdit(ShablonPok shPok, String cdol) throws org.apache.thrift.TException;

    /**
     * Получает тексты шаблонов для показателя шаблона и кода должности.
     * 
     * @param shPok
     * @param cdol
     */
    public List<ShablonText> getShablonTexts(ShablonPok shPok, String cdol) throws org.apache.thrift.TException;

    /**
     * Добавляет шаблон.
     * 
     * @param shText
     */
    public int addShablonText(ShablonText shText) throws org.apache.thrift.TException;

    /**
     * Обновляет шаблон.
     * 
     * @param shText
     */
    public void updateShablonText(ShablonText shText) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer .AsyncIface {

    public void getPrizndList(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPrizndList_call> resultHandler) throws org.apache.thrift.TException;

    public void get_n_s00(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_n_s00_call> resultHandler) throws org.apache.thrift.TException;

    public void get_n_p0s13(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_n_p0s13_call> resultHandler) throws org.apache.thrift.TException;

    public void get_n_o00(int clpu, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_n_o00_call> resultHandler) throws org.apache.thrift.TException;

    public void get_n_n00(int clpu, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_n_n00_call> resultHandler) throws org.apache.thrift.TException;

    public void get_n_lds(int clpu, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_n_lds_call> resultHandler) throws org.apache.thrift.TException;

    public void get_n_z00(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_n_z00_call> resultHandler) throws org.apache.thrift.TException;

    public void get_n_z30(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_n_z30_call> resultHandler) throws org.apache.thrift.TException;

    public void GetVrachList(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetVrachList_call> resultHandler) throws org.apache.thrift.TException;

    public void GetVrach(int pcod, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetVrach_call> resultHandler) throws org.apache.thrift.TException;

    public void AddVrach(VrachInfo vr, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddVrach_call> resultHandler) throws org.apache.thrift.TException;

    public void UpdVrach(VrachInfo vr, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.UpdVrach_call> resultHandler) throws org.apache.thrift.TException;

    public void DelVrach(int pcod, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.DelVrach_call> resultHandler) throws org.apache.thrift.TException;

    public void GetMrabList(int vrPcod, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetMrabList_call> resultHandler) throws org.apache.thrift.TException;

    public void GetMrab(int id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetMrab_call> resultHandler) throws org.apache.thrift.TException;

    public void AddMrab(MestoRab mr, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.AddMrab_call> resultHandler) throws org.apache.thrift.TException;

    public void UpdMrab(MestoRab mr, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.UpdMrab_call> resultHandler) throws org.apache.thrift.TException;

    public void DelMrab(MestoRab mr, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.DelMrab_call> resultHandler) throws org.apache.thrift.TException;

    public void getLogin(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getLogin_call> resultHandler) throws org.apache.thrift.TException;

    public void setPassword(int vrachPcod, int lpuPcod, int podrPcod, String login, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setPassword_call> resultHandler) throws org.apache.thrift.TException;

    public void remPassword(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.remPassword_call> resultHandler) throws org.apache.thrift.TException;

    public void getPermissions(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPermissions_call> resultHandler) throws org.apache.thrift.TException;

    public void setPermissions(int vrachPcod, int lpuPcod, int podrPcod, String pdost, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setPermissions_call> resultHandler) throws org.apache.thrift.TException;

    public void getShabRazd(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getShabRazd_call> resultHandler) throws org.apache.thrift.TException;

    public void getShabPok(int id_razd, String cdol, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getShabPok_call> resultHandler) throws org.apache.thrift.TException;

    public void setShabPok(ShablonPok shPok, String cdol, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setShabPok_call> resultHandler) throws org.apache.thrift.TException;

    public void setShabPokGrup(ShablonRazd shRazd, String cdol, boolean value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setShabPokGrup_call> resultHandler) throws org.apache.thrift.TException;

    public void getShablonTextsEdit(ShablonPok shPok, String cdol, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getShablonTextsEdit_call> resultHandler) throws org.apache.thrift.TException;

    public void getShablonTexts(ShablonPok shPok, String cdol, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getShablonTexts_call> resultHandler) throws org.apache.thrift.TException;

    public void addShablonText(ShablonText shText, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addShablonText_call> resultHandler) throws org.apache.thrift.TException;

    public void updateShablonText(ShablonText shText, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateShablonText_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getPrizndList() throws org.apache.thrift.TException
    {
      send_getPrizndList();
      return recv_getPrizndList();
    }

    public void send_getPrizndList() throws org.apache.thrift.TException
    {
      getPrizndList_args args = new getPrizndList_args();
      sendBase("getPrizndList", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> recv_getPrizndList() throws org.apache.thrift.TException
    {
      getPrizndList_result result = new getPrizndList_result();
      receiveBase(result, "getPrizndList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPrizndList failed: unknown result");
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> get_n_s00() throws org.apache.thrift.TException
    {
      send_get_n_s00();
      return recv_get_n_s00();
    }

    public void send_get_n_s00() throws org.apache.thrift.TException
    {
      get_n_s00_args args = new get_n_s00_args();
      sendBase("get_n_s00", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> recv_get_n_s00() throws org.apache.thrift.TException
    {
      get_n_s00_result result = new get_n_s00_result();
      receiveBase(result, "get_n_s00");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_n_s00 failed: unknown result");
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> get_n_p0s13() throws org.apache.thrift.TException
    {
      send_get_n_p0s13();
      return recv_get_n_p0s13();
    }

    public void send_get_n_p0s13() throws org.apache.thrift.TException
    {
      get_n_p0s13_args args = new get_n_p0s13_args();
      sendBase("get_n_p0s13", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> recv_get_n_p0s13() throws org.apache.thrift.TException
    {
      get_n_p0s13_result result = new get_n_p0s13_result();
      receiveBase(result, "get_n_p0s13");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_n_p0s13 failed: unknown result");
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> get_n_o00(int clpu) throws org.apache.thrift.TException
    {
      send_get_n_o00(clpu);
      return recv_get_n_o00();
    }

    public void send_get_n_o00(int clpu) throws org.apache.thrift.TException
    {
      get_n_o00_args args = new get_n_o00_args();
      args.setClpu(clpu);
      sendBase("get_n_o00", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> recv_get_n_o00() throws org.apache.thrift.TException
    {
      get_n_o00_result result = new get_n_o00_result();
      receiveBase(result, "get_n_o00");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_n_o00 failed: unknown result");
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> get_n_n00(int clpu) throws org.apache.thrift.TException
    {
      send_get_n_n00(clpu);
      return recv_get_n_n00();
    }

    public void send_get_n_n00(int clpu) throws org.apache.thrift.TException
    {
      get_n_n00_args args = new get_n_n00_args();
      args.setClpu(clpu);
      sendBase("get_n_n00", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> recv_get_n_n00() throws org.apache.thrift.TException
    {
      get_n_n00_result result = new get_n_n00_result();
      receiveBase(result, "get_n_n00");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_n_n00 failed: unknown result");
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> get_n_lds(int clpu) throws org.apache.thrift.TException
    {
      send_get_n_lds(clpu);
      return recv_get_n_lds();
    }

    public void send_get_n_lds(int clpu) throws org.apache.thrift.TException
    {
      get_n_lds_args args = new get_n_lds_args();
      args.setClpu(clpu);
      sendBase("get_n_lds", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> recv_get_n_lds() throws org.apache.thrift.TException
    {
      get_n_lds_result result = new get_n_lds_result();
      receiveBase(result, "get_n_lds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_n_lds failed: unknown result");
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> get_n_z00() throws org.apache.thrift.TException
    {
      send_get_n_z00();
      return recv_get_n_z00();
    }

    public void send_get_n_z00() throws org.apache.thrift.TException
    {
      get_n_z00_args args = new get_n_z00_args();
      sendBase("get_n_z00", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> recv_get_n_z00() throws org.apache.thrift.TException
    {
      get_n_z00_result result = new get_n_z00_result();
      receiveBase(result, "get_n_z00");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_n_z00 failed: unknown result");
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> get_n_z30() throws org.apache.thrift.TException
    {
      send_get_n_z30();
      return recv_get_n_z30();
    }

    public void send_get_n_z30() throws org.apache.thrift.TException
    {
      get_n_z30_args args = new get_n_z30_args();
      sendBase("get_n_z30", args);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> recv_get_n_z30() throws org.apache.thrift.TException
    {
      get_n_z30_result result = new get_n_z30_result();
      receiveBase(result, "get_n_z30");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_n_z30 failed: unknown result");
    }

    public List<VrachInfo> GetVrachList() throws org.apache.thrift.TException
    {
      send_GetVrachList();
      return recv_GetVrachList();
    }

    public void send_GetVrachList() throws org.apache.thrift.TException
    {
      GetVrachList_args args = new GetVrachList_args();
      sendBase("GetVrachList", args);
    }

    public List<VrachInfo> recv_GetVrachList() throws org.apache.thrift.TException
    {
      GetVrachList_result result = new GetVrachList_result();
      receiveBase(result, "GetVrachList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetVrachList failed: unknown result");
    }

    public VrachInfo GetVrach(int pcod) throws VrachNotFoundException, org.apache.thrift.TException
    {
      send_GetVrach(pcod);
      return recv_GetVrach();
    }

    public void send_GetVrach(int pcod) throws org.apache.thrift.TException
    {
      GetVrach_args args = new GetVrach_args();
      args.setPcod(pcod);
      sendBase("GetVrach", args);
    }

    public VrachInfo recv_GetVrach() throws VrachNotFoundException, org.apache.thrift.TException
    {
      GetVrach_result result = new GetVrach_result();
      receiveBase(result, "GetVrach");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.vne != null) {
        throw result.vne;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetVrach failed: unknown result");
    }

    public int AddVrach(VrachInfo vr) throws VrachExistsException, org.apache.thrift.TException
    {
      send_AddVrach(vr);
      return recv_AddVrach();
    }

    public void send_AddVrach(VrachInfo vr) throws org.apache.thrift.TException
    {
      AddVrach_args args = new AddVrach_args();
      args.setVr(vr);
      sendBase("AddVrach", args);
    }

    public int recv_AddVrach() throws VrachExistsException, org.apache.thrift.TException
    {
      AddVrach_result result = new AddVrach_result();
      receiveBase(result, "AddVrach");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.vee != null) {
        throw result.vee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddVrach failed: unknown result");
    }

    public void UpdVrach(VrachInfo vr) throws VrachExistsException, org.apache.thrift.TException
    {
      send_UpdVrach(vr);
      recv_UpdVrach();
    }

    public void send_UpdVrach(VrachInfo vr) throws org.apache.thrift.TException
    {
      UpdVrach_args args = new UpdVrach_args();
      args.setVr(vr);
      sendBase("UpdVrach", args);
    }

    public void recv_UpdVrach() throws VrachExistsException, org.apache.thrift.TException
    {
      UpdVrach_result result = new UpdVrach_result();
      receiveBase(result, "UpdVrach");
      if (result.vee != null) {
        throw result.vee;
      }
      return;
    }

    public void DelVrach(int pcod) throws org.apache.thrift.TException
    {
      send_DelVrach(pcod);
      recv_DelVrach();
    }

    public void send_DelVrach(int pcod) throws org.apache.thrift.TException
    {
      DelVrach_args args = new DelVrach_args();
      args.setPcod(pcod);
      sendBase("DelVrach", args);
    }

    public void recv_DelVrach() throws org.apache.thrift.TException
    {
      DelVrach_result result = new DelVrach_result();
      receiveBase(result, "DelVrach");
      return;
    }

    public List<MestoRab> GetMrabList(int vrPcod) throws org.apache.thrift.TException
    {
      send_GetMrabList(vrPcod);
      return recv_GetMrabList();
    }

    public void send_GetMrabList(int vrPcod) throws org.apache.thrift.TException
    {
      GetMrabList_args args = new GetMrabList_args();
      args.setVrPcod(vrPcod);
      sendBase("GetMrabList", args);
    }

    public List<MestoRab> recv_GetMrabList() throws org.apache.thrift.TException
    {
      GetMrabList_result result = new GetMrabList_result();
      receiveBase(result, "GetMrabList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetMrabList failed: unknown result");
    }

    public MestoRab GetMrab(int id) throws MestoRabNotFoundException, org.apache.thrift.TException
    {
      send_GetMrab(id);
      return recv_GetMrab();
    }

    public void send_GetMrab(int id) throws org.apache.thrift.TException
    {
      GetMrab_args args = new GetMrab_args();
      args.setId(id);
      sendBase("GetMrab", args);
    }

    public MestoRab recv_GetMrab() throws MestoRabNotFoundException, org.apache.thrift.TException
    {
      GetMrab_result result = new GetMrab_result();
      receiveBase(result, "GetMrab");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.mne != null) {
        throw result.mne;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetMrab failed: unknown result");
    }

    public int AddMrab(MestoRab mr) throws MestoRabExistsException, org.apache.thrift.TException
    {
      send_AddMrab(mr);
      return recv_AddMrab();
    }

    public void send_AddMrab(MestoRab mr) throws org.apache.thrift.TException
    {
      AddMrab_args args = new AddMrab_args();
      args.setMr(mr);
      sendBase("AddMrab", args);
    }

    public int recv_AddMrab() throws MestoRabExistsException, org.apache.thrift.TException
    {
      AddMrab_result result = new AddMrab_result();
      receiveBase(result, "AddMrab");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.mee != null) {
        throw result.mee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddMrab failed: unknown result");
    }

    public void UpdMrab(MestoRab mr) throws MestoRabExistsException, org.apache.thrift.TException
    {
      send_UpdMrab(mr);
      recv_UpdMrab();
    }

    public void send_UpdMrab(MestoRab mr) throws org.apache.thrift.TException
    {
      UpdMrab_args args = new UpdMrab_args();
      args.setMr(mr);
      sendBase("UpdMrab", args);
    }

    public void recv_UpdMrab() throws MestoRabExistsException, org.apache.thrift.TException
    {
      UpdMrab_result result = new UpdMrab_result();
      receiveBase(result, "UpdMrab");
      if (result.mee != null) {
        throw result.mee;
      }
      return;
    }

    public void DelMrab(MestoRab mr) throws org.apache.thrift.TException
    {
      send_DelMrab(mr);
      recv_DelMrab();
    }

    public void send_DelMrab(MestoRab mr) throws org.apache.thrift.TException
    {
      DelMrab_args args = new DelMrab_args();
      args.setMr(mr);
      sendBase("DelMrab", args);
    }

    public void recv_DelMrab() throws org.apache.thrift.TException
    {
      DelMrab_result result = new DelMrab_result();
      receiveBase(result, "DelMrab");
      return;
    }

    public String getLogin(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException
    {
      send_getLogin(vrachPcod, lpuPcod, podrPcod);
      return recv_getLogin();
    }

    public void send_getLogin(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException
    {
      getLogin_args args = new getLogin_args();
      args.setVrachPcod(vrachPcod);
      args.setLpuPcod(lpuPcod);
      args.setPodrPcod(podrPcod);
      sendBase("getLogin", args);
    }

    public String recv_getLogin() throws org.apache.thrift.TException
    {
      getLogin_result result = new getLogin_result();
      receiveBase(result, "getLogin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLogin failed: unknown result");
    }

    public UserIdPassword setPassword(int vrachPcod, int lpuPcod, int podrPcod, String login) throws org.apache.thrift.TException
    {
      send_setPassword(vrachPcod, lpuPcod, podrPcod, login);
      return recv_setPassword();
    }

    public void send_setPassword(int vrachPcod, int lpuPcod, int podrPcod, String login) throws org.apache.thrift.TException
    {
      setPassword_args args = new setPassword_args();
      args.setVrachPcod(vrachPcod);
      args.setLpuPcod(lpuPcod);
      args.setPodrPcod(podrPcod);
      args.setLogin(login);
      sendBase("setPassword", args);
    }

    public UserIdPassword recv_setPassword() throws org.apache.thrift.TException
    {
      setPassword_result result = new setPassword_result();
      receiveBase(result, "setPassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setPassword failed: unknown result");
    }

    public void remPassword(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException
    {
      send_remPassword(vrachPcod, lpuPcod, podrPcod);
      recv_remPassword();
    }

    public void send_remPassword(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException
    {
      remPassword_args args = new remPassword_args();
      args.setVrachPcod(vrachPcod);
      args.setLpuPcod(lpuPcod);
      args.setPodrPcod(podrPcod);
      sendBase("remPassword", args);
    }

    public void recv_remPassword() throws org.apache.thrift.TException
    {
      remPassword_result result = new remPassword_result();
      receiveBase(result, "remPassword");
      return;
    }

    public String getPermissions(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException
    {
      send_getPermissions(vrachPcod, lpuPcod, podrPcod);
      return recv_getPermissions();
    }

    public void send_getPermissions(int vrachPcod, int lpuPcod, int podrPcod) throws org.apache.thrift.TException
    {
      getPermissions_args args = new getPermissions_args();
      args.setVrachPcod(vrachPcod);
      args.setLpuPcod(lpuPcod);
      args.setPodrPcod(podrPcod);
      sendBase("getPermissions", args);
    }

    public String recv_getPermissions() throws org.apache.thrift.TException
    {
      getPermissions_result result = new getPermissions_result();
      receiveBase(result, "getPermissions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPermissions failed: unknown result");
    }

    public void setPermissions(int vrachPcod, int lpuPcod, int podrPcod, String pdost) throws org.apache.thrift.TException
    {
      send_setPermissions(vrachPcod, lpuPcod, podrPcod, pdost);
      recv_setPermissions();
    }

    public void send_setPermissions(int vrachPcod, int lpuPcod, int podrPcod, String pdost) throws org.apache.thrift.TException
    {
      setPermissions_args args = new setPermissions_args();
      args.setVrachPcod(vrachPcod);
      args.setLpuPcod(lpuPcod);
      args.setPodrPcod(podrPcod);
      args.setPdost(pdost);
      sendBase("setPermissions", args);
    }

    public void recv_setPermissions() throws org.apache.thrift.TException
    {
      setPermissions_result result = new setPermissions_result();
      receiveBase(result, "setPermissions");
      return;
    }

    public List<ShablonRazd> getShabRazd() throws org.apache.thrift.TException
    {
      send_getShabRazd();
      return recv_getShabRazd();
    }

    public void send_getShabRazd() throws org.apache.thrift.TException
    {
      getShabRazd_args args = new getShabRazd_args();
      sendBase("getShabRazd", args);
    }

    public List<ShablonRazd> recv_getShabRazd() throws org.apache.thrift.TException
    {
      getShabRazd_result result = new getShabRazd_result();
      receiveBase(result, "getShabRazd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getShabRazd failed: unknown result");
    }

    public List<ShablonPok> getShabPok(int id_razd, String cdol) throws org.apache.thrift.TException
    {
      send_getShabPok(id_razd, cdol);
      return recv_getShabPok();
    }

    public void send_getShabPok(int id_razd, String cdol) throws org.apache.thrift.TException
    {
      getShabPok_args args = new getShabPok_args();
      args.setId_razd(id_razd);
      args.setCdol(cdol);
      sendBase("getShabPok", args);
    }

    public List<ShablonPok> recv_getShabPok() throws org.apache.thrift.TException
    {
      getShabPok_result result = new getShabPok_result();
      receiveBase(result, "getShabPok");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getShabPok failed: unknown result");
    }

    public void setShabPok(ShablonPok shPok, String cdol) throws org.apache.thrift.TException
    {
      send_setShabPok(shPok, cdol);
      recv_setShabPok();
    }

    public void send_setShabPok(ShablonPok shPok, String cdol) throws org.apache.thrift.TException
    {
      setShabPok_args args = new setShabPok_args();
      args.setShPok(shPok);
      args.setCdol(cdol);
      sendBase("setShabPok", args);
    }

    public void recv_setShabPok() throws org.apache.thrift.TException
    {
      setShabPok_result result = new setShabPok_result();
      receiveBase(result, "setShabPok");
      return;
    }

    public void setShabPokGrup(ShablonRazd shRazd, String cdol, boolean value) throws org.apache.thrift.TException
    {
      send_setShabPokGrup(shRazd, cdol, value);
      recv_setShabPokGrup();
    }

    public void send_setShabPokGrup(ShablonRazd shRazd, String cdol, boolean value) throws org.apache.thrift.TException
    {
      setShabPokGrup_args args = new setShabPokGrup_args();
      args.setShRazd(shRazd);
      args.setCdol(cdol);
      args.setValue(value);
      sendBase("setShabPokGrup", args);
    }

    public void recv_setShabPokGrup() throws org.apache.thrift.TException
    {
      setShabPokGrup_result result = new setShabPokGrup_result();
      receiveBase(result, "setShabPokGrup");
      return;
    }

    public List<ShablonText> getShablonTextsEdit(ShablonPok shPok, String cdol) throws org.apache.thrift.TException
    {
      send_getShablonTextsEdit(shPok, cdol);
      return recv_getShablonTextsEdit();
    }

    public void send_getShablonTextsEdit(ShablonPok shPok, String cdol) throws org.apache.thrift.TException
    {
      getShablonTextsEdit_args args = new getShablonTextsEdit_args();
      args.setShPok(shPok);
      args.setCdol(cdol);
      sendBase("getShablonTextsEdit", args);
    }

    public List<ShablonText> recv_getShablonTextsEdit() throws org.apache.thrift.TException
    {
      getShablonTextsEdit_result result = new getShablonTextsEdit_result();
      receiveBase(result, "getShablonTextsEdit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getShablonTextsEdit failed: unknown result");
    }

    public List<ShablonText> getShablonTexts(ShablonPok shPok, String cdol) throws org.apache.thrift.TException
    {
      send_getShablonTexts(shPok, cdol);
      return recv_getShablonTexts();
    }

    public void send_getShablonTexts(ShablonPok shPok, String cdol) throws org.apache.thrift.TException
    {
      getShablonTexts_args args = new getShablonTexts_args();
      args.setShPok(shPok);
      args.setCdol(cdol);
      sendBase("getShablonTexts", args);
    }

    public List<ShablonText> recv_getShablonTexts() throws org.apache.thrift.TException
    {
      getShablonTexts_result result = new getShablonTexts_result();
      receiveBase(result, "getShablonTexts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getShablonTexts failed: unknown result");
    }

    public int addShablonText(ShablonText shText) throws org.apache.thrift.TException
    {
      send_addShablonText(shText);
      return recv_addShablonText();
    }

    public void send_addShablonText(ShablonText shText) throws org.apache.thrift.TException
    {
      addShablonText_args args = new addShablonText_args();
      args.setShText(shText);
      sendBase("addShablonText", args);
    }

    public int recv_addShablonText() throws org.apache.thrift.TException
    {
      addShablonText_result result = new addShablonText_result();
      receiveBase(result, "addShablonText");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addShablonText failed: unknown result");
    }

    public void updateShablonText(ShablonText shText) throws org.apache.thrift.TException
    {
      send_updateShablonText(shText);
      recv_updateShablonText();
    }

    public void send_updateShablonText(ShablonText shText) throws org.apache.thrift.TException
    {
      updateShablonText_args args = new updateShablonText_args();
      args.setShText(shText);
      sendBase("updateShablonText", args);
    }

    public void recv_updateShablonText() throws org.apache.thrift.TException
    {
      updateShablonText_result result = new updateShablonText_result();
      receiveBase(result, "updateShablonText");
      return;
    }

  }
  public static class AsyncClient extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getPrizndList(org.apache.thrift.async.AsyncMethodCallback<getPrizndList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPrizndList_call method_call = new getPrizndList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPrizndList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getPrizndList_call(org.apache.thrift.async.AsyncMethodCallback<getPrizndList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPrizndList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPrizndList_args args = new getPrizndList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPrizndList();
      }
    }

    public void get_n_s00(org.apache.thrift.async.AsyncMethodCallback<get_n_s00_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_n_s00_call method_call = new get_n_s00_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_n_s00_call extends org.apache.thrift.async.TAsyncMethodCall {
      public get_n_s00_call(org.apache.thrift.async.AsyncMethodCallback<get_n_s00_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_n_s00", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_n_s00_args args = new get_n_s00_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_n_s00();
      }
    }

    public void get_n_p0s13(org.apache.thrift.async.AsyncMethodCallback<get_n_p0s13_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_n_p0s13_call method_call = new get_n_p0s13_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_n_p0s13_call extends org.apache.thrift.async.TAsyncMethodCall {
      public get_n_p0s13_call(org.apache.thrift.async.AsyncMethodCallback<get_n_p0s13_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_n_p0s13", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_n_p0s13_args args = new get_n_p0s13_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_n_p0s13();
      }
    }

    public void get_n_o00(int clpu, org.apache.thrift.async.AsyncMethodCallback<get_n_o00_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_n_o00_call method_call = new get_n_o00_call(clpu, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_n_o00_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int clpu;
      public get_n_o00_call(int clpu, org.apache.thrift.async.AsyncMethodCallback<get_n_o00_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clpu = clpu;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_n_o00", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_n_o00_args args = new get_n_o00_args();
        args.setClpu(clpu);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_n_o00();
      }
    }

    public void get_n_n00(int clpu, org.apache.thrift.async.AsyncMethodCallback<get_n_n00_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_n_n00_call method_call = new get_n_n00_call(clpu, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_n_n00_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int clpu;
      public get_n_n00_call(int clpu, org.apache.thrift.async.AsyncMethodCallback<get_n_n00_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clpu = clpu;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_n_n00", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_n_n00_args args = new get_n_n00_args();
        args.setClpu(clpu);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_n_n00();
      }
    }

    public void get_n_lds(int clpu, org.apache.thrift.async.AsyncMethodCallback<get_n_lds_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_n_lds_call method_call = new get_n_lds_call(clpu, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_n_lds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int clpu;
      public get_n_lds_call(int clpu, org.apache.thrift.async.AsyncMethodCallback<get_n_lds_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clpu = clpu;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_n_lds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_n_lds_args args = new get_n_lds_args();
        args.setClpu(clpu);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_n_lds();
      }
    }

    public void get_n_z00(org.apache.thrift.async.AsyncMethodCallback<get_n_z00_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_n_z00_call method_call = new get_n_z00_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_n_z00_call extends org.apache.thrift.async.TAsyncMethodCall {
      public get_n_z00_call(org.apache.thrift.async.AsyncMethodCallback<get_n_z00_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_n_z00", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_n_z00_args args = new get_n_z00_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_n_z00();
      }
    }

    public void get_n_z30(org.apache.thrift.async.AsyncMethodCallback<get_n_z30_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_n_z30_call method_call = new get_n_z30_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_n_z30_call extends org.apache.thrift.async.TAsyncMethodCall {
      public get_n_z30_call(org.apache.thrift.async.AsyncMethodCallback<get_n_z30_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_n_z30", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_n_z30_args args = new get_n_z30_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_n_z30();
      }
    }

    public void GetVrachList(org.apache.thrift.async.AsyncMethodCallback<GetVrachList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetVrachList_call method_call = new GetVrachList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetVrachList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetVrachList_call(org.apache.thrift.async.AsyncMethodCallback<GetVrachList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetVrachList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetVrachList_args args = new GetVrachList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<VrachInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetVrachList();
      }
    }

    public void GetVrach(int pcod, org.apache.thrift.async.AsyncMethodCallback<GetVrach_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetVrach_call method_call = new GetVrach_call(pcod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetVrach_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pcod;
      public GetVrach_call(int pcod, org.apache.thrift.async.AsyncMethodCallback<GetVrach_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pcod = pcod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetVrach", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetVrach_args args = new GetVrach_args();
        args.setPcod(pcod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public VrachInfo getResult() throws VrachNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetVrach();
      }
    }

    public void AddVrach(VrachInfo vr, org.apache.thrift.async.AsyncMethodCallback<AddVrach_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddVrach_call method_call = new AddVrach_call(vr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddVrach_call extends org.apache.thrift.async.TAsyncMethodCall {
      private VrachInfo vr;
      public AddVrach_call(VrachInfo vr, org.apache.thrift.async.AsyncMethodCallback<AddVrach_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vr = vr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddVrach", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddVrach_args args = new AddVrach_args();
        args.setVr(vr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws VrachExistsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddVrach();
      }
    }

    public void UpdVrach(VrachInfo vr, org.apache.thrift.async.AsyncMethodCallback<UpdVrach_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdVrach_call method_call = new UpdVrach_call(vr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdVrach_call extends org.apache.thrift.async.TAsyncMethodCall {
      private VrachInfo vr;
      public UpdVrach_call(VrachInfo vr, org.apache.thrift.async.AsyncMethodCallback<UpdVrach_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vr = vr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdVrach", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdVrach_args args = new UpdVrach_args();
        args.setVr(vr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws VrachExistsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdVrach();
      }
    }

    public void DelVrach(int pcod, org.apache.thrift.async.AsyncMethodCallback<DelVrach_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DelVrach_call method_call = new DelVrach_call(pcod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DelVrach_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pcod;
      public DelVrach_call(int pcod, org.apache.thrift.async.AsyncMethodCallback<DelVrach_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pcod = pcod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DelVrach", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DelVrach_args args = new DelVrach_args();
        args.setPcod(pcod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DelVrach();
      }
    }

    public void GetMrabList(int vrPcod, org.apache.thrift.async.AsyncMethodCallback<GetMrabList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetMrabList_call method_call = new GetMrabList_call(vrPcod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetMrabList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vrPcod;
      public GetMrabList_call(int vrPcod, org.apache.thrift.async.AsyncMethodCallback<GetMrabList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vrPcod = vrPcod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetMrabList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetMrabList_args args = new GetMrabList_args();
        args.setVrPcod(vrPcod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<MestoRab> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetMrabList();
      }
    }

    public void GetMrab(int id, org.apache.thrift.async.AsyncMethodCallback<GetMrab_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetMrab_call method_call = new GetMrab_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetMrab_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id;
      public GetMrab_call(int id, org.apache.thrift.async.AsyncMethodCallback<GetMrab_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetMrab", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetMrab_args args = new GetMrab_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MestoRab getResult() throws MestoRabNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetMrab();
      }
    }

    public void AddMrab(MestoRab mr, org.apache.thrift.async.AsyncMethodCallback<AddMrab_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddMrab_call method_call = new AddMrab_call(mr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddMrab_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MestoRab mr;
      public AddMrab_call(MestoRab mr, org.apache.thrift.async.AsyncMethodCallback<AddMrab_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mr = mr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddMrab", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddMrab_args args = new AddMrab_args();
        args.setMr(mr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws MestoRabExistsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddMrab();
      }
    }

    public void UpdMrab(MestoRab mr, org.apache.thrift.async.AsyncMethodCallback<UpdMrab_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdMrab_call method_call = new UpdMrab_call(mr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdMrab_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MestoRab mr;
      public UpdMrab_call(MestoRab mr, org.apache.thrift.async.AsyncMethodCallback<UpdMrab_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mr = mr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdMrab", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdMrab_args args = new UpdMrab_args();
        args.setMr(mr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws MestoRabExistsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdMrab();
      }
    }

    public void DelMrab(MestoRab mr, org.apache.thrift.async.AsyncMethodCallback<DelMrab_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DelMrab_call method_call = new DelMrab_call(mr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DelMrab_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MestoRab mr;
      public DelMrab_call(MestoRab mr, org.apache.thrift.async.AsyncMethodCallback<DelMrab_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mr = mr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DelMrab", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DelMrab_args args = new DelMrab_args();
        args.setMr(mr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DelMrab();
      }
    }

    public void getLogin(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<getLogin_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLogin_call method_call = new getLogin_call(vrachPcod, lpuPcod, podrPcod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLogin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vrachPcod;
      private int lpuPcod;
      private int podrPcod;
      public getLogin_call(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<getLogin_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vrachPcod = vrachPcod;
        this.lpuPcod = lpuPcod;
        this.podrPcod = podrPcod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLogin_args args = new getLogin_args();
        args.setVrachPcod(vrachPcod);
        args.setLpuPcod(lpuPcod);
        args.setPodrPcod(podrPcod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLogin();
      }
    }

    public void setPassword(int vrachPcod, int lpuPcod, int podrPcod, String login, org.apache.thrift.async.AsyncMethodCallback<setPassword_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPassword_call method_call = new setPassword_call(vrachPcod, lpuPcod, podrPcod, login, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vrachPcod;
      private int lpuPcod;
      private int podrPcod;
      private String login;
      public setPassword_call(int vrachPcod, int lpuPcod, int podrPcod, String login, org.apache.thrift.async.AsyncMethodCallback<setPassword_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vrachPcod = vrachPcod;
        this.lpuPcod = lpuPcod;
        this.podrPcod = podrPcod;
        this.login = login;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPassword_args args = new setPassword_args();
        args.setVrachPcod(vrachPcod);
        args.setLpuPcod(lpuPcod);
        args.setPodrPcod(podrPcod);
        args.setLogin(login);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserIdPassword getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setPassword();
      }
    }

    public void remPassword(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<remPassword_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      remPassword_call method_call = new remPassword_call(vrachPcod, lpuPcod, podrPcod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class remPassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vrachPcod;
      private int lpuPcod;
      private int podrPcod;
      public remPassword_call(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<remPassword_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vrachPcod = vrachPcod;
        this.lpuPcod = lpuPcod;
        this.podrPcod = podrPcod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        remPassword_args args = new remPassword_args();
        args.setVrachPcod(vrachPcod);
        args.setLpuPcod(lpuPcod);
        args.setPodrPcod(podrPcod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_remPassword();
      }
    }

    public void getPermissions(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<getPermissions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPermissions_call method_call = new getPermissions_call(vrachPcod, lpuPcod, podrPcod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPermissions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vrachPcod;
      private int lpuPcod;
      private int podrPcod;
      public getPermissions_call(int vrachPcod, int lpuPcod, int podrPcod, org.apache.thrift.async.AsyncMethodCallback<getPermissions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vrachPcod = vrachPcod;
        this.lpuPcod = lpuPcod;
        this.podrPcod = podrPcod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPermissions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPermissions_args args = new getPermissions_args();
        args.setVrachPcod(vrachPcod);
        args.setLpuPcod(lpuPcod);
        args.setPodrPcod(podrPcod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPermissions();
      }
    }

    public void setPermissions(int vrachPcod, int lpuPcod, int podrPcod, String pdost, org.apache.thrift.async.AsyncMethodCallback<setPermissions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPermissions_call method_call = new setPermissions_call(vrachPcod, lpuPcod, podrPcod, pdost, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPermissions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vrachPcod;
      private int lpuPcod;
      private int podrPcod;
      private String pdost;
      public setPermissions_call(int vrachPcod, int lpuPcod, int podrPcod, String pdost, org.apache.thrift.async.AsyncMethodCallback<setPermissions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vrachPcod = vrachPcod;
        this.lpuPcod = lpuPcod;
        this.podrPcod = podrPcod;
        this.pdost = pdost;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPermissions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPermissions_args args = new setPermissions_args();
        args.setVrachPcod(vrachPcod);
        args.setLpuPcod(lpuPcod);
        args.setPodrPcod(podrPcod);
        args.setPdost(pdost);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setPermissions();
      }
    }

    public void getShabRazd(org.apache.thrift.async.AsyncMethodCallback<getShabRazd_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getShabRazd_call method_call = new getShabRazd_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getShabRazd_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getShabRazd_call(org.apache.thrift.async.AsyncMethodCallback<getShabRazd_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getShabRazd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getShabRazd_args args = new getShabRazd_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ShablonRazd> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getShabRazd();
      }
    }

    public void getShabPok(int id_razd, String cdol, org.apache.thrift.async.AsyncMethodCallback<getShabPok_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getShabPok_call method_call = new getShabPok_call(id_razd, cdol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getShabPok_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int id_razd;
      private String cdol;
      public getShabPok_call(int id_razd, String cdol, org.apache.thrift.async.AsyncMethodCallback<getShabPok_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id_razd = id_razd;
        this.cdol = cdol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getShabPok", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getShabPok_args args = new getShabPok_args();
        args.setId_razd(id_razd);
        args.setCdol(cdol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ShablonPok> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getShabPok();
      }
    }

    public void setShabPok(ShablonPok shPok, String cdol, org.apache.thrift.async.AsyncMethodCallback<setShabPok_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setShabPok_call method_call = new setShabPok_call(shPok, cdol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setShabPok_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ShablonPok shPok;
      private String cdol;
      public setShabPok_call(ShablonPok shPok, String cdol, org.apache.thrift.async.AsyncMethodCallback<setShabPok_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shPok = shPok;
        this.cdol = cdol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setShabPok", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setShabPok_args args = new setShabPok_args();
        args.setShPok(shPok);
        args.setCdol(cdol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setShabPok();
      }
    }

    public void setShabPokGrup(ShablonRazd shRazd, String cdol, boolean value, org.apache.thrift.async.AsyncMethodCallback<setShabPokGrup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setShabPokGrup_call method_call = new setShabPokGrup_call(shRazd, cdol, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setShabPokGrup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ShablonRazd shRazd;
      private String cdol;
      private boolean value;
      public setShabPokGrup_call(ShablonRazd shRazd, String cdol, boolean value, org.apache.thrift.async.AsyncMethodCallback<setShabPokGrup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shRazd = shRazd;
        this.cdol = cdol;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setShabPokGrup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setShabPokGrup_args args = new setShabPokGrup_args();
        args.setShRazd(shRazd);
        args.setCdol(cdol);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setShabPokGrup();
      }
    }

    public void getShablonTextsEdit(ShablonPok shPok, String cdol, org.apache.thrift.async.AsyncMethodCallback<getShablonTextsEdit_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getShablonTextsEdit_call method_call = new getShablonTextsEdit_call(shPok, cdol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getShablonTextsEdit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ShablonPok shPok;
      private String cdol;
      public getShablonTextsEdit_call(ShablonPok shPok, String cdol, org.apache.thrift.async.AsyncMethodCallback<getShablonTextsEdit_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shPok = shPok;
        this.cdol = cdol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getShablonTextsEdit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getShablonTextsEdit_args args = new getShablonTextsEdit_args();
        args.setShPok(shPok);
        args.setCdol(cdol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ShablonText> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getShablonTextsEdit();
      }
    }

    public void getShablonTexts(ShablonPok shPok, String cdol, org.apache.thrift.async.AsyncMethodCallback<getShablonTexts_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getShablonTexts_call method_call = new getShablonTexts_call(shPok, cdol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getShablonTexts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ShablonPok shPok;
      private String cdol;
      public getShablonTexts_call(ShablonPok shPok, String cdol, org.apache.thrift.async.AsyncMethodCallback<getShablonTexts_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shPok = shPok;
        this.cdol = cdol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getShablonTexts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getShablonTexts_args args = new getShablonTexts_args();
        args.setShPok(shPok);
        args.setCdol(cdol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ShablonText> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getShablonTexts();
      }
    }

    public void addShablonText(ShablonText shText, org.apache.thrift.async.AsyncMethodCallback<addShablonText_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addShablonText_call method_call = new addShablonText_call(shText, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addShablonText_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ShablonText shText;
      public addShablonText_call(ShablonText shText, org.apache.thrift.async.AsyncMethodCallback<addShablonText_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shText = shText;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addShablonText", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addShablonText_args args = new addShablonText_args();
        args.setShText(shText);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addShablonText();
      }
    }

    public void updateShablonText(ShablonText shText, org.apache.thrift.async.AsyncMethodCallback<updateShablonText_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateShablonText_call method_call = new updateShablonText_call(shText, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateShablonText_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ShablonText shText;
      public updateShablonText_call(ShablonText shText, org.apache.thrift.async.AsyncMethodCallback<updateShablonText_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shText = shText;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateShablonText", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateShablonText_args args = new updateShablonText_args();
        args.setShText(shText);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateShablonText();
      }
    }

  }

  public static class Processor<I extends Iface> extends ru.nkz.ivcgzo.thriftCommon.kmiacServer.KmiacServer.Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getPrizndList", new getPrizndList());
      processMap.put("get_n_s00", new get_n_s00());
      processMap.put("get_n_p0s13", new get_n_p0s13());
      processMap.put("get_n_o00", new get_n_o00());
      processMap.put("get_n_n00", new get_n_n00());
      processMap.put("get_n_lds", new get_n_lds());
      processMap.put("get_n_z00", new get_n_z00());
      processMap.put("get_n_z30", new get_n_z30());
      processMap.put("GetVrachList", new GetVrachList());
      processMap.put("GetVrach", new GetVrach());
      processMap.put("AddVrach", new AddVrach());
      processMap.put("UpdVrach", new UpdVrach());
      processMap.put("DelVrach", new DelVrach());
      processMap.put("GetMrabList", new GetMrabList());
      processMap.put("GetMrab", new GetMrab());
      processMap.put("AddMrab", new AddMrab());
      processMap.put("UpdMrab", new UpdMrab());
      processMap.put("DelMrab", new DelMrab());
      processMap.put("getLogin", new getLogin());
      processMap.put("setPassword", new setPassword());
      processMap.put("remPassword", new remPassword());
      processMap.put("getPermissions", new getPermissions());
      processMap.put("setPermissions", new setPermissions());
      processMap.put("getShabRazd", new getShabRazd());
      processMap.put("getShabPok", new getShabPok());
      processMap.put("setShabPok", new setShabPok());
      processMap.put("setShabPokGrup", new setShabPokGrup());
      processMap.put("getShablonTextsEdit", new getShablonTextsEdit());
      processMap.put("getShablonTexts", new getShablonTexts());
      processMap.put("addShablonText", new addShablonText());
      processMap.put("updateShablonText", new updateShablonText());
      return processMap;
    }

    private static class getPrizndList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPrizndList_args> {
      public getPrizndList() {
        super("getPrizndList");
      }

      protected getPrizndList_args getEmptyArgsInstance() {
        return new getPrizndList_args();
      }

      protected getPrizndList_result getResult(I iface, getPrizndList_args args) throws org.apache.thrift.TException {
        getPrizndList_result result = new getPrizndList_result();
        result.success = iface.getPrizndList();
        return result;
      }
    }

    private static class get_n_s00<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_n_s00_args> {
      public get_n_s00() {
        super("get_n_s00");
      }

      protected get_n_s00_args getEmptyArgsInstance() {
        return new get_n_s00_args();
      }

      protected get_n_s00_result getResult(I iface, get_n_s00_args args) throws org.apache.thrift.TException {
        get_n_s00_result result = new get_n_s00_result();
        result.success = iface.get_n_s00();
        return result;
      }
    }

    private static class get_n_p0s13<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_n_p0s13_args> {
      public get_n_p0s13() {
        super("get_n_p0s13");
      }

      protected get_n_p0s13_args getEmptyArgsInstance() {
        return new get_n_p0s13_args();
      }

      protected get_n_p0s13_result getResult(I iface, get_n_p0s13_args args) throws org.apache.thrift.TException {
        get_n_p0s13_result result = new get_n_p0s13_result();
        result.success = iface.get_n_p0s13();
        return result;
      }
    }

    private static class get_n_o00<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_n_o00_args> {
      public get_n_o00() {
        super("get_n_o00");
      }

      protected get_n_o00_args getEmptyArgsInstance() {
        return new get_n_o00_args();
      }

      protected get_n_o00_result getResult(I iface, get_n_o00_args args) throws org.apache.thrift.TException {
        get_n_o00_result result = new get_n_o00_result();
        result.success = iface.get_n_o00(args.clpu);
        return result;
      }
    }

    private static class get_n_n00<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_n_n00_args> {
      public get_n_n00() {
        super("get_n_n00");
      }

      protected get_n_n00_args getEmptyArgsInstance() {
        return new get_n_n00_args();
      }

      protected get_n_n00_result getResult(I iface, get_n_n00_args args) throws org.apache.thrift.TException {
        get_n_n00_result result = new get_n_n00_result();
        result.success = iface.get_n_n00(args.clpu);
        return result;
      }
    }

    private static class get_n_lds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_n_lds_args> {
      public get_n_lds() {
        super("get_n_lds");
      }

      protected get_n_lds_args getEmptyArgsInstance() {
        return new get_n_lds_args();
      }

      protected get_n_lds_result getResult(I iface, get_n_lds_args args) throws org.apache.thrift.TException {
        get_n_lds_result result = new get_n_lds_result();
        result.success = iface.get_n_lds(args.clpu);
        return result;
      }
    }

    private static class get_n_z00<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_n_z00_args> {
      public get_n_z00() {
        super("get_n_z00");
      }

      protected get_n_z00_args getEmptyArgsInstance() {
        return new get_n_z00_args();
      }

      protected get_n_z00_result getResult(I iface, get_n_z00_args args) throws org.apache.thrift.TException {
        get_n_z00_result result = new get_n_z00_result();
        result.success = iface.get_n_z00();
        return result;
      }
    }

    private static class get_n_z30<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_n_z30_args> {
      public get_n_z30() {
        super("get_n_z30");
      }

      protected get_n_z30_args getEmptyArgsInstance() {
        return new get_n_z30_args();
      }

      protected get_n_z30_result getResult(I iface, get_n_z30_args args) throws org.apache.thrift.TException {
        get_n_z30_result result = new get_n_z30_result();
        result.success = iface.get_n_z30();
        return result;
      }
    }

    private static class GetVrachList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetVrachList_args> {
      public GetVrachList() {
        super("GetVrachList");
      }

      protected GetVrachList_args getEmptyArgsInstance() {
        return new GetVrachList_args();
      }

      protected GetVrachList_result getResult(I iface, GetVrachList_args args) throws org.apache.thrift.TException {
        GetVrachList_result result = new GetVrachList_result();
        result.success = iface.GetVrachList();
        return result;
      }
    }

    private static class GetVrach<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetVrach_args> {
      public GetVrach() {
        super("GetVrach");
      }

      protected GetVrach_args getEmptyArgsInstance() {
        return new GetVrach_args();
      }

      protected GetVrach_result getResult(I iface, GetVrach_args args) throws org.apache.thrift.TException {
        GetVrach_result result = new GetVrach_result();
        try {
          result.success = iface.GetVrach(args.pcod);
        } catch (VrachNotFoundException vne) {
          result.vne = vne;
        }
        return result;
      }
    }

    private static class AddVrach<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddVrach_args> {
      public AddVrach() {
        super("AddVrach");
      }

      protected AddVrach_args getEmptyArgsInstance() {
        return new AddVrach_args();
      }

      protected AddVrach_result getResult(I iface, AddVrach_args args) throws org.apache.thrift.TException {
        AddVrach_result result = new AddVrach_result();
        try {
          result.success = iface.AddVrach(args.vr);
          result.setSuccessIsSet(true);
        } catch (VrachExistsException vee) {
          result.vee = vee;
        }
        return result;
      }
    }

    private static class UpdVrach<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdVrach_args> {
      public UpdVrach() {
        super("UpdVrach");
      }

      protected UpdVrach_args getEmptyArgsInstance() {
        return new UpdVrach_args();
      }

      protected UpdVrach_result getResult(I iface, UpdVrach_args args) throws org.apache.thrift.TException {
        UpdVrach_result result = new UpdVrach_result();
        try {
          iface.UpdVrach(args.vr);
        } catch (VrachExistsException vee) {
          result.vee = vee;
        }
        return result;
      }
    }

    private static class DelVrach<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DelVrach_args> {
      public DelVrach() {
        super("DelVrach");
      }

      protected DelVrach_args getEmptyArgsInstance() {
        return new DelVrach_args();
      }

      protected DelVrach_result getResult(I iface, DelVrach_args args) throws org.apache.thrift.TException {
        DelVrach_result result = new DelVrach_result();
        iface.DelVrach(args.pcod);
        return result;
      }
    }

    private static class GetMrabList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetMrabList_args> {
      public GetMrabList() {
        super("GetMrabList");
      }

      protected GetMrabList_args getEmptyArgsInstance() {
        return new GetMrabList_args();
      }

      protected GetMrabList_result getResult(I iface, GetMrabList_args args) throws org.apache.thrift.TException {
        GetMrabList_result result = new GetMrabList_result();
        result.success = iface.GetMrabList(args.vrPcod);
        return result;
      }
    }

    private static class GetMrab<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetMrab_args> {
      public GetMrab() {
        super("GetMrab");
      }

      protected GetMrab_args getEmptyArgsInstance() {
        return new GetMrab_args();
      }

      protected GetMrab_result getResult(I iface, GetMrab_args args) throws org.apache.thrift.TException {
        GetMrab_result result = new GetMrab_result();
        try {
          result.success = iface.GetMrab(args.id);
        } catch (MestoRabNotFoundException mne) {
          result.mne = mne;
        }
        return result;
      }
    }

    private static class AddMrab<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddMrab_args> {
      public AddMrab() {
        super("AddMrab");
      }

      protected AddMrab_args getEmptyArgsInstance() {
        return new AddMrab_args();
      }

      protected AddMrab_result getResult(I iface, AddMrab_args args) throws org.apache.thrift.TException {
        AddMrab_result result = new AddMrab_result();
        try {
          result.success = iface.AddMrab(args.mr);
          result.setSuccessIsSet(true);
        } catch (MestoRabExistsException mee) {
          result.mee = mee;
        }
        return result;
      }
    }

    private static class UpdMrab<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdMrab_args> {
      public UpdMrab() {
        super("UpdMrab");
      }

      protected UpdMrab_args getEmptyArgsInstance() {
        return new UpdMrab_args();
      }

      protected UpdMrab_result getResult(I iface, UpdMrab_args args) throws org.apache.thrift.TException {
        UpdMrab_result result = new UpdMrab_result();
        try {
          iface.UpdMrab(args.mr);
        } catch (MestoRabExistsException mee) {
          result.mee = mee;
        }
        return result;
      }
    }

    private static class DelMrab<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DelMrab_args> {
      public DelMrab() {
        super("DelMrab");
      }

      protected DelMrab_args getEmptyArgsInstance() {
        return new DelMrab_args();
      }

      protected DelMrab_result getResult(I iface, DelMrab_args args) throws org.apache.thrift.TException {
        DelMrab_result result = new DelMrab_result();
        iface.DelMrab(args.mr);
        return result;
      }
    }

    private static class getLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLogin_args> {
      public getLogin() {
        super("getLogin");
      }

      protected getLogin_args getEmptyArgsInstance() {
        return new getLogin_args();
      }

      protected getLogin_result getResult(I iface, getLogin_args args) throws org.apache.thrift.TException {
        getLogin_result result = new getLogin_result();
        result.success = iface.getLogin(args.vrachPcod, args.lpuPcod, args.podrPcod);
        return result;
      }
    }

    private static class setPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPassword_args> {
      public setPassword() {
        super("setPassword");
      }

      protected setPassword_args getEmptyArgsInstance() {
        return new setPassword_args();
      }

      protected setPassword_result getResult(I iface, setPassword_args args) throws org.apache.thrift.TException {
        setPassword_result result = new setPassword_result();
        result.success = iface.setPassword(args.vrachPcod, args.lpuPcod, args.podrPcod, args.login);
        return result;
      }
    }

    private static class remPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, remPassword_args> {
      public remPassword() {
        super("remPassword");
      }

      protected remPassword_args getEmptyArgsInstance() {
        return new remPassword_args();
      }

      protected remPassword_result getResult(I iface, remPassword_args args) throws org.apache.thrift.TException {
        remPassword_result result = new remPassword_result();
        iface.remPassword(args.vrachPcod, args.lpuPcod, args.podrPcod);
        return result;
      }
    }

    private static class getPermissions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPermissions_args> {
      public getPermissions() {
        super("getPermissions");
      }

      protected getPermissions_args getEmptyArgsInstance() {
        return new getPermissions_args();
      }

      protected getPermissions_result getResult(I iface, getPermissions_args args) throws org.apache.thrift.TException {
        getPermissions_result result = new getPermissions_result();
        result.success = iface.getPermissions(args.vrachPcod, args.lpuPcod, args.podrPcod);
        return result;
      }
    }

    private static class setPermissions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPermissions_args> {
      public setPermissions() {
        super("setPermissions");
      }

      protected setPermissions_args getEmptyArgsInstance() {
        return new setPermissions_args();
      }

      protected setPermissions_result getResult(I iface, setPermissions_args args) throws org.apache.thrift.TException {
        setPermissions_result result = new setPermissions_result();
        iface.setPermissions(args.vrachPcod, args.lpuPcod, args.podrPcod, args.pdost);
        return result;
      }
    }

    private static class getShabRazd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getShabRazd_args> {
      public getShabRazd() {
        super("getShabRazd");
      }

      protected getShabRazd_args getEmptyArgsInstance() {
        return new getShabRazd_args();
      }

      protected getShabRazd_result getResult(I iface, getShabRazd_args args) throws org.apache.thrift.TException {
        getShabRazd_result result = new getShabRazd_result();
        result.success = iface.getShabRazd();
        return result;
      }
    }

    private static class getShabPok<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getShabPok_args> {
      public getShabPok() {
        super("getShabPok");
      }

      protected getShabPok_args getEmptyArgsInstance() {
        return new getShabPok_args();
      }

      protected getShabPok_result getResult(I iface, getShabPok_args args) throws org.apache.thrift.TException {
        getShabPok_result result = new getShabPok_result();
        result.success = iface.getShabPok(args.id_razd, args.cdol);
        return result;
      }
    }

    private static class setShabPok<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setShabPok_args> {
      public setShabPok() {
        super("setShabPok");
      }

      protected setShabPok_args getEmptyArgsInstance() {
        return new setShabPok_args();
      }

      protected setShabPok_result getResult(I iface, setShabPok_args args) throws org.apache.thrift.TException {
        setShabPok_result result = new setShabPok_result();
        iface.setShabPok(args.shPok, args.cdol);
        return result;
      }
    }

    private static class setShabPokGrup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setShabPokGrup_args> {
      public setShabPokGrup() {
        super("setShabPokGrup");
      }

      protected setShabPokGrup_args getEmptyArgsInstance() {
        return new setShabPokGrup_args();
      }

      protected setShabPokGrup_result getResult(I iface, setShabPokGrup_args args) throws org.apache.thrift.TException {
        setShabPokGrup_result result = new setShabPokGrup_result();
        iface.setShabPokGrup(args.shRazd, args.cdol, args.value);
        return result;
      }
    }

    private static class getShablonTextsEdit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getShablonTextsEdit_args> {
      public getShablonTextsEdit() {
        super("getShablonTextsEdit");
      }

      protected getShablonTextsEdit_args getEmptyArgsInstance() {
        return new getShablonTextsEdit_args();
      }

      protected getShablonTextsEdit_result getResult(I iface, getShablonTextsEdit_args args) throws org.apache.thrift.TException {
        getShablonTextsEdit_result result = new getShablonTextsEdit_result();
        result.success = iface.getShablonTextsEdit(args.shPok, args.cdol);
        return result;
      }
    }

    private static class getShablonTexts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getShablonTexts_args> {
      public getShablonTexts() {
        super("getShablonTexts");
      }

      protected getShablonTexts_args getEmptyArgsInstance() {
        return new getShablonTexts_args();
      }

      protected getShablonTexts_result getResult(I iface, getShablonTexts_args args) throws org.apache.thrift.TException {
        getShablonTexts_result result = new getShablonTexts_result();
        result.success = iface.getShablonTexts(args.shPok, args.cdol);
        return result;
      }
    }

    private static class addShablonText<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addShablonText_args> {
      public addShablonText() {
        super("addShablonText");
      }

      protected addShablonText_args getEmptyArgsInstance() {
        return new addShablonText_args();
      }

      protected addShablonText_result getResult(I iface, addShablonText_args args) throws org.apache.thrift.TException {
        addShablonText_result result = new addShablonText_result();
        result.success = iface.addShablonText(args.shText);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class updateShablonText<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateShablonText_args> {
      public updateShablonText() {
        super("updateShablonText");
      }

      protected updateShablonText_args getEmptyArgsInstance() {
        return new updateShablonText_args();
      }

      protected updateShablonText_result getResult(I iface, updateShablonText_args args) throws org.apache.thrift.TException {
        updateShablonText_result result = new updateShablonText_result();
        iface.updateShablonText(args.shText);
        return result;
      }
    }

  }

  public static class getPrizndList_args implements org.apache.thrift.TBase<getPrizndList_args, getPrizndList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrizndList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPrizndList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPrizndList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrizndList_args.class, metaDataMap);
    }

    public getPrizndList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrizndList_args(getPrizndList_args other) {
    }

    public getPrizndList_args deepCopy() {
      return new getPrizndList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrizndList_args)
        return this.equals((getPrizndList_args)that);
      return false;
    }

    public boolean equals(getPrizndList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPrizndList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPrizndList_args typedOther = (getPrizndList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPrizndList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPrizndList_argsStandardSchemeFactory implements SchemeFactory {
      public getPrizndList_argsStandardScheme getScheme() {
        return new getPrizndList_argsStandardScheme();
      }
    }

    private static class getPrizndList_argsStandardScheme extends StandardScheme<getPrizndList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPrizndList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPrizndList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPrizndList_argsTupleSchemeFactory implements SchemeFactory {
      public getPrizndList_argsTupleScheme getScheme() {
        return new getPrizndList_argsTupleScheme();
      }
    }

    private static class getPrizndList_argsTupleScheme extends TupleScheme<getPrizndList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPrizndList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPrizndList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getPrizndList_result implements org.apache.thrift.TBase<getPrizndList_result, getPrizndList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrizndList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPrizndList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPrizndList_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrizndList_result.class, metaDataMap);
    }

    public getPrizndList_result() {
    }

    public getPrizndList_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrizndList_result(getPrizndList_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPrizndList_result deepCopy() {
      return new getPrizndList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccess() {
      return this.success;
    }

    public getPrizndList_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrizndList_result)
        return this.equals((getPrizndList_result)that);
      return false;
    }

    public boolean equals(getPrizndList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPrizndList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPrizndList_result typedOther = (getPrizndList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPrizndList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPrizndList_resultStandardSchemeFactory implements SchemeFactory {
      public getPrizndList_resultStandardScheme getScheme() {
        return new getPrizndList_resultStandardScheme();
      }
    }

    private static class getPrizndList_resultStandardScheme extends StandardScheme<getPrizndList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPrizndList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem2; // required
                    _elem2 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPrizndList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPrizndList_resultTupleSchemeFactory implements SchemeFactory {
      public getPrizndList_resultTupleScheme getScheme() {
        return new getPrizndList_resultTupleScheme();
      }
    }

    private static class getPrizndList_resultTupleScheme extends TupleScheme<getPrizndList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPrizndList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPrizndList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem7; // required
              _elem7 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_n_s00_args implements org.apache.thrift.TBase<get_n_s00_args, get_n_s00_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_n_s00_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_n_s00_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_n_s00_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_n_s00_args.class, metaDataMap);
    }

    public get_n_s00_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_n_s00_args(get_n_s00_args other) {
    }

    public get_n_s00_args deepCopy() {
      return new get_n_s00_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_n_s00_args)
        return this.equals((get_n_s00_args)that);
      return false;
    }

    public boolean equals(get_n_s00_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_n_s00_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_n_s00_args typedOther = (get_n_s00_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_n_s00_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_n_s00_argsStandardSchemeFactory implements SchemeFactory {
      public get_n_s00_argsStandardScheme getScheme() {
        return new get_n_s00_argsStandardScheme();
      }
    }

    private static class get_n_s00_argsStandardScheme extends StandardScheme<get_n_s00_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_n_s00_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_n_s00_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_n_s00_argsTupleSchemeFactory implements SchemeFactory {
      public get_n_s00_argsTupleScheme getScheme() {
        return new get_n_s00_argsTupleScheme();
      }
    }

    private static class get_n_s00_argsTupleScheme extends TupleScheme<get_n_s00_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_n_s00_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_n_s00_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class get_n_s00_result implements org.apache.thrift.TBase<get_n_s00_result, get_n_s00_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_n_s00_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_n_s00_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_n_s00_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_n_s00_result.class, metaDataMap);
    }

    public get_n_s00_result() {
    }

    public get_n_s00_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_n_s00_result(get_n_s00_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier(other_element));
        }
        this.success = __this__success;
      }
    }

    public get_n_s00_result deepCopy() {
      return new get_n_s00_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> getSuccess() {
      return this.success;
    }

    public get_n_s00_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_n_s00_result)
        return this.equals((get_n_s00_result)that);
      return false;
    }

    public boolean equals(get_n_s00_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_n_s00_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_n_s00_result typedOther = (get_n_s00_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_n_s00_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_n_s00_resultStandardSchemeFactory implements SchemeFactory {
      public get_n_s00_resultStandardScheme getScheme() {
        return new get_n_s00_resultStandardScheme();
      }
    }

    private static class get_n_s00_resultStandardScheme extends StandardScheme<get_n_s00_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_n_s00_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier _elem10; // required
                    _elem10 = new ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_n_s00_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_n_s00_resultTupleSchemeFactory implements SchemeFactory {
      public get_n_s00_resultTupleScheme getScheme() {
        return new get_n_s00_resultTupleScheme();
      }
    }

    private static class get_n_s00_resultTupleScheme extends TupleScheme<get_n_s00_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_n_s00_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_n_s00_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier _elem15; // required
              _elem15 = new ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_n_p0s13_args implements org.apache.thrift.TBase<get_n_p0s13_args, get_n_p0s13_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_n_p0s13_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_n_p0s13_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_n_p0s13_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_n_p0s13_args.class, metaDataMap);
    }

    public get_n_p0s13_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_n_p0s13_args(get_n_p0s13_args other) {
    }

    public get_n_p0s13_args deepCopy() {
      return new get_n_p0s13_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_n_p0s13_args)
        return this.equals((get_n_p0s13_args)that);
      return false;
    }

    public boolean equals(get_n_p0s13_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_n_p0s13_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_n_p0s13_args typedOther = (get_n_p0s13_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_n_p0s13_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_n_p0s13_argsStandardSchemeFactory implements SchemeFactory {
      public get_n_p0s13_argsStandardScheme getScheme() {
        return new get_n_p0s13_argsStandardScheme();
      }
    }

    private static class get_n_p0s13_argsStandardScheme extends StandardScheme<get_n_p0s13_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_n_p0s13_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_n_p0s13_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_n_p0s13_argsTupleSchemeFactory implements SchemeFactory {
      public get_n_p0s13_argsTupleScheme getScheme() {
        return new get_n_p0s13_argsTupleScheme();
      }
    }

    private static class get_n_p0s13_argsTupleScheme extends TupleScheme<get_n_p0s13_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_n_p0s13_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_n_p0s13_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class get_n_p0s13_result implements org.apache.thrift.TBase<get_n_p0s13_result, get_n_p0s13_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_n_p0s13_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_n_p0s13_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_n_p0s13_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_n_p0s13_result.class, metaDataMap);
    }

    public get_n_p0s13_result() {
    }

    public get_n_p0s13_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_n_p0s13_result(get_n_p0s13_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier(other_element));
        }
        this.success = __this__success;
      }
    }

    public get_n_p0s13_result deepCopy() {
      return new get_n_p0s13_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccess() {
      return this.success;
    }

    public get_n_p0s13_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_n_p0s13_result)
        return this.equals((get_n_p0s13_result)that);
      return false;
    }

    public boolean equals(get_n_p0s13_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_n_p0s13_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_n_p0s13_result typedOther = (get_n_p0s13_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_n_p0s13_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_n_p0s13_resultStandardSchemeFactory implements SchemeFactory {
      public get_n_p0s13_resultStandardScheme getScheme() {
        return new get_n_p0s13_resultStandardScheme();
      }
    }

    private static class get_n_p0s13_resultStandardScheme extends StandardScheme<get_n_p0s13_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_n_p0s13_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem18; // required
                    _elem18 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_n_p0s13_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_n_p0s13_resultTupleSchemeFactory implements SchemeFactory {
      public get_n_p0s13_resultTupleScheme getScheme() {
        return new get_n_p0s13_resultTupleScheme();
      }
    }

    private static class get_n_p0s13_resultTupleScheme extends TupleScheme<get_n_p0s13_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_n_p0s13_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_n_p0s13_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem23; // required
              _elem23 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_n_o00_args implements org.apache.thrift.TBase<get_n_o00_args, get_n_o00_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_n_o00_args");

    private static final org.apache.thrift.protocol.TField CLPU_FIELD_DESC = new org.apache.thrift.protocol.TField("clpu", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_n_o00_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_n_o00_argsTupleSchemeFactory());
    }

    public int clpu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLPU((short)1, "clpu");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLPU
            return CLPU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CLPU_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLPU, new org.apache.thrift.meta_data.FieldMetaData("clpu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_n_o00_args.class, metaDataMap);
    }

    public get_n_o00_args() {
    }

    public get_n_o00_args(
      int clpu)
    {
      this();
      this.clpu = clpu;
      setClpuIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_n_o00_args(get_n_o00_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.clpu = other.clpu;
    }

    public get_n_o00_args deepCopy() {
      return new get_n_o00_args(this);
    }

    @Override
    public void clear() {
      setClpuIsSet(false);
      this.clpu = 0;
    }

    public int getClpu() {
      return this.clpu;
    }

    public get_n_o00_args setClpu(int clpu) {
      this.clpu = clpu;
      setClpuIsSet(true);
      return this;
    }

    public void unsetClpu() {
      __isset_bit_vector.clear(__CLPU_ISSET_ID);
    }

    /** Returns true if field clpu is set (has been assigned a value) and false otherwise */
    public boolean isSetClpu() {
      return __isset_bit_vector.get(__CLPU_ISSET_ID);
    }

    public void setClpuIsSet(boolean value) {
      __isset_bit_vector.set(__CLPU_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLPU:
        if (value == null) {
          unsetClpu();
        } else {
          setClpu((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLPU:
        return Integer.valueOf(getClpu());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLPU:
        return isSetClpu();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_n_o00_args)
        return this.equals((get_n_o00_args)that);
      return false;
    }

    public boolean equals(get_n_o00_args that) {
      if (that == null)
        return false;

      boolean this_present_clpu = true;
      boolean that_present_clpu = true;
      if (this_present_clpu || that_present_clpu) {
        if (!(this_present_clpu && that_present_clpu))
          return false;
        if (this.clpu != that.clpu)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_n_o00_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_n_o00_args typedOther = (get_n_o00_args)other;

      lastComparison = Boolean.valueOf(isSetClpu()).compareTo(typedOther.isSetClpu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClpu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clpu, typedOther.clpu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_n_o00_args(");
      boolean first = true;

      sb.append("clpu:");
      sb.append(this.clpu);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_n_o00_argsStandardSchemeFactory implements SchemeFactory {
      public get_n_o00_argsStandardScheme getScheme() {
        return new get_n_o00_argsStandardScheme();
      }
    }

    private static class get_n_o00_argsStandardScheme extends StandardScheme<get_n_o00_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_n_o00_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLPU
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.clpu = iprot.readI32();
                struct.setClpuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_n_o00_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CLPU_FIELD_DESC);
        oprot.writeI32(struct.clpu);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_n_o00_argsTupleSchemeFactory implements SchemeFactory {
      public get_n_o00_argsTupleScheme getScheme() {
        return new get_n_o00_argsTupleScheme();
      }
    }

    private static class get_n_o00_argsTupleScheme extends TupleScheme<get_n_o00_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_n_o00_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClpu()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClpu()) {
          oprot.writeI32(struct.clpu);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_n_o00_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clpu = iprot.readI32();
          struct.setClpuIsSet(true);
        }
      }
    }

  }

  public static class get_n_o00_result implements org.apache.thrift.TBase<get_n_o00_result, get_n_o00_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_n_o00_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_n_o00_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_n_o00_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_n_o00_result.class, metaDataMap);
    }

    public get_n_o00_result() {
    }

    public get_n_o00_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_n_o00_result(get_n_o00_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier(other_element));
        }
        this.success = __this__success;
      }
    }

    public get_n_o00_result deepCopy() {
      return new get_n_o00_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccess() {
      return this.success;
    }

    public get_n_o00_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_n_o00_result)
        return this.equals((get_n_o00_result)that);
      return false;
    }

    public boolean equals(get_n_o00_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_n_o00_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_n_o00_result typedOther = (get_n_o00_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_n_o00_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_n_o00_resultStandardSchemeFactory implements SchemeFactory {
      public get_n_o00_resultStandardScheme getScheme() {
        return new get_n_o00_resultStandardScheme();
      }
    }

    private static class get_n_o00_resultStandardScheme extends StandardScheme<get_n_o00_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_n_o00_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem26; // required
                    _elem26 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_n_o00_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_n_o00_resultTupleSchemeFactory implements SchemeFactory {
      public get_n_o00_resultTupleScheme getScheme() {
        return new get_n_o00_resultTupleScheme();
      }
    }

    private static class get_n_o00_resultTupleScheme extends TupleScheme<get_n_o00_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_n_o00_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_n_o00_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem31; // required
              _elem31 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_n_n00_args implements org.apache.thrift.TBase<get_n_n00_args, get_n_n00_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_n_n00_args");

    private static final org.apache.thrift.protocol.TField CLPU_FIELD_DESC = new org.apache.thrift.protocol.TField("clpu", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_n_n00_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_n_n00_argsTupleSchemeFactory());
    }

    public int clpu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLPU((short)1, "clpu");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLPU
            return CLPU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CLPU_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLPU, new org.apache.thrift.meta_data.FieldMetaData("clpu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_n_n00_args.class, metaDataMap);
    }

    public get_n_n00_args() {
    }

    public get_n_n00_args(
      int clpu)
    {
      this();
      this.clpu = clpu;
      setClpuIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_n_n00_args(get_n_n00_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.clpu = other.clpu;
    }

    public get_n_n00_args deepCopy() {
      return new get_n_n00_args(this);
    }

    @Override
    public void clear() {
      setClpuIsSet(false);
      this.clpu = 0;
    }

    public int getClpu() {
      return this.clpu;
    }

    public get_n_n00_args setClpu(int clpu) {
      this.clpu = clpu;
      setClpuIsSet(true);
      return this;
    }

    public void unsetClpu() {
      __isset_bit_vector.clear(__CLPU_ISSET_ID);
    }

    /** Returns true if field clpu is set (has been assigned a value) and false otherwise */
    public boolean isSetClpu() {
      return __isset_bit_vector.get(__CLPU_ISSET_ID);
    }

    public void setClpuIsSet(boolean value) {
      __isset_bit_vector.set(__CLPU_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLPU:
        if (value == null) {
          unsetClpu();
        } else {
          setClpu((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLPU:
        return Integer.valueOf(getClpu());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLPU:
        return isSetClpu();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_n_n00_args)
        return this.equals((get_n_n00_args)that);
      return false;
    }

    public boolean equals(get_n_n00_args that) {
      if (that == null)
        return false;

      boolean this_present_clpu = true;
      boolean that_present_clpu = true;
      if (this_present_clpu || that_present_clpu) {
        if (!(this_present_clpu && that_present_clpu))
          return false;
        if (this.clpu != that.clpu)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_n_n00_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_n_n00_args typedOther = (get_n_n00_args)other;

      lastComparison = Boolean.valueOf(isSetClpu()).compareTo(typedOther.isSetClpu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClpu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clpu, typedOther.clpu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_n_n00_args(");
      boolean first = true;

      sb.append("clpu:");
      sb.append(this.clpu);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_n_n00_argsStandardSchemeFactory implements SchemeFactory {
      public get_n_n00_argsStandardScheme getScheme() {
        return new get_n_n00_argsStandardScheme();
      }
    }

    private static class get_n_n00_argsStandardScheme extends StandardScheme<get_n_n00_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_n_n00_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLPU
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.clpu = iprot.readI32();
                struct.setClpuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_n_n00_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CLPU_FIELD_DESC);
        oprot.writeI32(struct.clpu);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_n_n00_argsTupleSchemeFactory implements SchemeFactory {
      public get_n_n00_argsTupleScheme getScheme() {
        return new get_n_n00_argsTupleScheme();
      }
    }

    private static class get_n_n00_argsTupleScheme extends TupleScheme<get_n_n00_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_n_n00_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClpu()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClpu()) {
          oprot.writeI32(struct.clpu);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_n_n00_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clpu = iprot.readI32();
          struct.setClpuIsSet(true);
        }
      }
    }

  }

  public static class get_n_n00_result implements org.apache.thrift.TBase<get_n_n00_result, get_n_n00_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_n_n00_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_n_n00_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_n_n00_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_n_n00_result.class, metaDataMap);
    }

    public get_n_n00_result() {
    }

    public get_n_n00_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_n_n00_result(get_n_n00_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier(other_element));
        }
        this.success = __this__success;
      }
    }

    public get_n_n00_result deepCopy() {
      return new get_n_n00_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccess() {
      return this.success;
    }

    public get_n_n00_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_n_n00_result)
        return this.equals((get_n_n00_result)that);
      return false;
    }

    public boolean equals(get_n_n00_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_n_n00_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_n_n00_result typedOther = (get_n_n00_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_n_n00_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_n_n00_resultStandardSchemeFactory implements SchemeFactory {
      public get_n_n00_resultStandardScheme getScheme() {
        return new get_n_n00_resultStandardScheme();
      }
    }

    private static class get_n_n00_resultStandardScheme extends StandardScheme<get_n_n00_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_n_n00_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem34; // required
                    _elem34 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_n_n00_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_n_n00_resultTupleSchemeFactory implements SchemeFactory {
      public get_n_n00_resultTupleScheme getScheme() {
        return new get_n_n00_resultTupleScheme();
      }
    }

    private static class get_n_n00_resultTupleScheme extends TupleScheme<get_n_n00_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_n_n00_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_n_n00_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem39; // required
              _elem39 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_n_lds_args implements org.apache.thrift.TBase<get_n_lds_args, get_n_lds_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_n_lds_args");

    private static final org.apache.thrift.protocol.TField CLPU_FIELD_DESC = new org.apache.thrift.protocol.TField("clpu", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_n_lds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_n_lds_argsTupleSchemeFactory());
    }

    public int clpu; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLPU((short)1, "clpu");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLPU
            return CLPU;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CLPU_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLPU, new org.apache.thrift.meta_data.FieldMetaData("clpu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_n_lds_args.class, metaDataMap);
    }

    public get_n_lds_args() {
    }

    public get_n_lds_args(
      int clpu)
    {
      this();
      this.clpu = clpu;
      setClpuIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_n_lds_args(get_n_lds_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.clpu = other.clpu;
    }

    public get_n_lds_args deepCopy() {
      return new get_n_lds_args(this);
    }

    @Override
    public void clear() {
      setClpuIsSet(false);
      this.clpu = 0;
    }

    public int getClpu() {
      return this.clpu;
    }

    public get_n_lds_args setClpu(int clpu) {
      this.clpu = clpu;
      setClpuIsSet(true);
      return this;
    }

    public void unsetClpu() {
      __isset_bit_vector.clear(__CLPU_ISSET_ID);
    }

    /** Returns true if field clpu is set (has been assigned a value) and false otherwise */
    public boolean isSetClpu() {
      return __isset_bit_vector.get(__CLPU_ISSET_ID);
    }

    public void setClpuIsSet(boolean value) {
      __isset_bit_vector.set(__CLPU_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLPU:
        if (value == null) {
          unsetClpu();
        } else {
          setClpu((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLPU:
        return Integer.valueOf(getClpu());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLPU:
        return isSetClpu();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_n_lds_args)
        return this.equals((get_n_lds_args)that);
      return false;
    }

    public boolean equals(get_n_lds_args that) {
      if (that == null)
        return false;

      boolean this_present_clpu = true;
      boolean that_present_clpu = true;
      if (this_present_clpu || that_present_clpu) {
        if (!(this_present_clpu && that_present_clpu))
          return false;
        if (this.clpu != that.clpu)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_n_lds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_n_lds_args typedOther = (get_n_lds_args)other;

      lastComparison = Boolean.valueOf(isSetClpu()).compareTo(typedOther.isSetClpu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClpu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clpu, typedOther.clpu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_n_lds_args(");
      boolean first = true;

      sb.append("clpu:");
      sb.append(this.clpu);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_n_lds_argsStandardSchemeFactory implements SchemeFactory {
      public get_n_lds_argsStandardScheme getScheme() {
        return new get_n_lds_argsStandardScheme();
      }
    }

    private static class get_n_lds_argsStandardScheme extends StandardScheme<get_n_lds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_n_lds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLPU
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.clpu = iprot.readI32();
                struct.setClpuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_n_lds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CLPU_FIELD_DESC);
        oprot.writeI32(struct.clpu);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_n_lds_argsTupleSchemeFactory implements SchemeFactory {
      public get_n_lds_argsTupleScheme getScheme() {
        return new get_n_lds_argsTupleScheme();
      }
    }

    private static class get_n_lds_argsTupleScheme extends TupleScheme<get_n_lds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_n_lds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClpu()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClpu()) {
          oprot.writeI32(struct.clpu);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_n_lds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clpu = iprot.readI32();
          struct.setClpuIsSet(true);
        }
      }
    }

  }

  public static class get_n_lds_result implements org.apache.thrift.TBase<get_n_lds_result, get_n_lds_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_n_lds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_n_lds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_n_lds_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_n_lds_result.class, metaDataMap);
    }

    public get_n_lds_result() {
    }

    public get_n_lds_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_n_lds_result(get_n_lds_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier(other_element));
        }
        this.success = __this__success;
      }
    }

    public get_n_lds_result deepCopy() {
      return new get_n_lds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccess() {
      return this.success;
    }

    public get_n_lds_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_n_lds_result)
        return this.equals((get_n_lds_result)that);
      return false;
    }

    public boolean equals(get_n_lds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_n_lds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_n_lds_result typedOther = (get_n_lds_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_n_lds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_n_lds_resultStandardSchemeFactory implements SchemeFactory {
      public get_n_lds_resultStandardScheme getScheme() {
        return new get_n_lds_resultStandardScheme();
      }
    }

    private static class get_n_lds_resultStandardScheme extends StandardScheme<get_n_lds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_n_lds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem42; // required
                    _elem42 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_n_lds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_n_lds_resultTupleSchemeFactory implements SchemeFactory {
      public get_n_lds_resultTupleScheme getScheme() {
        return new get_n_lds_resultTupleScheme();
      }
    }

    private static class get_n_lds_resultTupleScheme extends TupleScheme<get_n_lds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_n_lds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_n_lds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem47; // required
              _elem47 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_n_z00_args implements org.apache.thrift.TBase<get_n_z00_args, get_n_z00_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_n_z00_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_n_z00_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_n_z00_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_n_z00_args.class, metaDataMap);
    }

    public get_n_z00_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_n_z00_args(get_n_z00_args other) {
    }

    public get_n_z00_args deepCopy() {
      return new get_n_z00_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_n_z00_args)
        return this.equals((get_n_z00_args)that);
      return false;
    }

    public boolean equals(get_n_z00_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_n_z00_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_n_z00_args typedOther = (get_n_z00_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_n_z00_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_n_z00_argsStandardSchemeFactory implements SchemeFactory {
      public get_n_z00_argsStandardScheme getScheme() {
        return new get_n_z00_argsStandardScheme();
      }
    }

    private static class get_n_z00_argsStandardScheme extends StandardScheme<get_n_z00_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_n_z00_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_n_z00_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_n_z00_argsTupleSchemeFactory implements SchemeFactory {
      public get_n_z00_argsTupleScheme getScheme() {
        return new get_n_z00_argsTupleScheme();
      }
    }

    private static class get_n_z00_argsTupleScheme extends TupleScheme<get_n_z00_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_n_z00_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_n_z00_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class get_n_z00_result implements org.apache.thrift.TBase<get_n_z00_result, get_n_z00_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_n_z00_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_n_z00_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_n_z00_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_n_z00_result.class, metaDataMap);
    }

    public get_n_z00_result() {
    }

    public get_n_z00_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_n_z00_result(get_n_z00_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier(other_element));
        }
        this.success = __this__success;
      }
    }

    public get_n_z00_result deepCopy() {
      return new get_n_z00_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> getSuccess() {
      return this.success;
    }

    public get_n_z00_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_n_z00_result)
        return this.equals((get_n_z00_result)that);
      return false;
    }

    public boolean equals(get_n_z00_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_n_z00_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_n_z00_result typedOther = (get_n_z00_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_n_z00_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_n_z00_resultStandardSchemeFactory implements SchemeFactory {
      public get_n_z00_resultStandardScheme getScheme() {
        return new get_n_z00_resultStandardScheme();
      }
    }

    private static class get_n_z00_resultStandardScheme extends StandardScheme<get_n_z00_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_n_z00_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier _elem50; // required
                    _elem50 = new ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier();
                    _elem50.read(iprot);
                    struct.success.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_n_z00_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_n_z00_resultTupleSchemeFactory implements SchemeFactory {
      public get_n_z00_resultTupleScheme getScheme() {
        return new get_n_z00_resultTupleScheme();
      }
    }

    private static class get_n_z00_resultTupleScheme extends TupleScheme<get_n_z00_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_n_z00_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_n_z00_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier _elem55; // required
              _elem55 = new ru.nkz.ivcgzo.thriftCommon.classifier.StringClassifier();
              _elem55.read(iprot);
              struct.success.add(_elem55);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_n_z30_args implements org.apache.thrift.TBase<get_n_z30_args, get_n_z30_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_n_z30_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_n_z30_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_n_z30_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_n_z30_args.class, metaDataMap);
    }

    public get_n_z30_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_n_z30_args(get_n_z30_args other) {
    }

    public get_n_z30_args deepCopy() {
      return new get_n_z30_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_n_z30_args)
        return this.equals((get_n_z30_args)that);
      return false;
    }

    public boolean equals(get_n_z30_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_n_z30_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_n_z30_args typedOther = (get_n_z30_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_n_z30_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_n_z30_argsStandardSchemeFactory implements SchemeFactory {
      public get_n_z30_argsStandardScheme getScheme() {
        return new get_n_z30_argsStandardScheme();
      }
    }

    private static class get_n_z30_argsStandardScheme extends StandardScheme<get_n_z30_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_n_z30_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_n_z30_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_n_z30_argsTupleSchemeFactory implements SchemeFactory {
      public get_n_z30_argsTupleScheme getScheme() {
        return new get_n_z30_argsTupleScheme();
      }
    }

    private static class get_n_z30_argsTupleScheme extends TupleScheme<get_n_z30_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_n_z30_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_n_z30_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class get_n_z30_result implements org.apache.thrift.TBase<get_n_z30_result, get_n_z30_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_n_z30_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_n_z30_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_n_z30_resultTupleSchemeFactory());
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_n_z30_result.class, metaDataMap);
    }

    public get_n_z30_result() {
    }

    public get_n_z30_result(
      List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_n_z30_result(get_n_z30_result other) {
      if (other.isSetSuccess()) {
        List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> __this__success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
        for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier other_element : other.success) {
          __this__success.add(new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier(other_element));
        }
        this.success = __this__success;
      }
    }

    public get_n_z30_result deepCopy() {
      return new get_n_z30_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>();
      }
      this.success.add(elem);
    }

    public List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> getSuccess() {
      return this.success;
    }

    public get_n_z30_result setSuccess(List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_n_z30_result)
        return this.equals((get_n_z30_result)that);
      return false;
    }

    public boolean equals(get_n_z30_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_n_z30_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_n_z30_result typedOther = (get_n_z30_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_n_z30_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_n_z30_resultStandardSchemeFactory implements SchemeFactory {
      public get_n_z30_resultStandardScheme getScheme() {
        return new get_n_z30_resultStandardScheme();
      }
    }

    private static class get_n_z30_resultStandardScheme extends StandardScheme<get_n_z30_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_n_z30_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem58; // required
                    _elem58 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
                    _elem58.read(iprot);
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_n_z30_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_n_z30_resultTupleSchemeFactory implements SchemeFactory {
      public get_n_z30_resultTupleScheme getScheme() {
        return new get_n_z30_resultTupleScheme();
      }
    }

    private static class get_n_z30_resultTupleScheme extends TupleScheme<get_n_z30_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_n_z30_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_n_z30_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier _elem63; // required
              _elem63 = new ru.nkz.ivcgzo.thriftCommon.classifier.IntegerClassifier();
              _elem63.read(iprot);
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetVrachList_args implements org.apache.thrift.TBase<GetVrachList_args, GetVrachList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVrachList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetVrachList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVrachList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVrachList_args.class, metaDataMap);
    }

    public GetVrachList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVrachList_args(GetVrachList_args other) {
    }

    public GetVrachList_args deepCopy() {
      return new GetVrachList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVrachList_args)
        return this.equals((GetVrachList_args)that);
      return false;
    }

    public boolean equals(GetVrachList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetVrachList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetVrachList_args typedOther = (GetVrachList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetVrachList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVrachList_argsStandardSchemeFactory implements SchemeFactory {
      public GetVrachList_argsStandardScheme getScheme() {
        return new GetVrachList_argsStandardScheme();
      }
    }

    private static class GetVrachList_argsStandardScheme extends StandardScheme<GetVrachList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVrachList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVrachList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVrachList_argsTupleSchemeFactory implements SchemeFactory {
      public GetVrachList_argsTupleScheme getScheme() {
        return new GetVrachList_argsTupleScheme();
      }
    }

    private static class GetVrachList_argsTupleScheme extends TupleScheme<GetVrachList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVrachList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVrachList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetVrachList_result implements org.apache.thrift.TBase<GetVrachList_result, GetVrachList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVrachList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetVrachList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVrachList_resultTupleSchemeFactory());
    }

    public List<VrachInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VrachInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVrachList_result.class, metaDataMap);
    }

    public GetVrachList_result() {
    }

    public GetVrachList_result(
      List<VrachInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVrachList_result(GetVrachList_result other) {
      if (other.isSetSuccess()) {
        List<VrachInfo> __this__success = new ArrayList<VrachInfo>();
        for (VrachInfo other_element : other.success) {
          __this__success.add(new VrachInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetVrachList_result deepCopy() {
      return new GetVrachList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<VrachInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(VrachInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<VrachInfo>();
      }
      this.success.add(elem);
    }

    public List<VrachInfo> getSuccess() {
      return this.success;
    }

    public GetVrachList_result setSuccess(List<VrachInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<VrachInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVrachList_result)
        return this.equals((GetVrachList_result)that);
      return false;
    }

    public boolean equals(GetVrachList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetVrachList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetVrachList_result typedOther = (GetVrachList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetVrachList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVrachList_resultStandardSchemeFactory implements SchemeFactory {
      public GetVrachList_resultStandardScheme getScheme() {
        return new GetVrachList_resultStandardScheme();
      }
    }

    private static class GetVrachList_resultStandardScheme extends StandardScheme<GetVrachList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVrachList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<VrachInfo>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    VrachInfo _elem66; // required
                    _elem66 = new VrachInfo();
                    _elem66.read(iprot);
                    struct.success.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVrachList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (VrachInfo _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVrachList_resultTupleSchemeFactory implements SchemeFactory {
      public GetVrachList_resultTupleScheme getScheme() {
        return new GetVrachList_resultTupleScheme();
      }
    }

    private static class GetVrachList_resultTupleScheme extends TupleScheme<GetVrachList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVrachList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (VrachInfo _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVrachList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<VrachInfo>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              VrachInfo _elem71; // required
              _elem71 = new VrachInfo();
              _elem71.read(iprot);
              struct.success.add(_elem71);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetVrach_args implements org.apache.thrift.TBase<GetVrach_args, GetVrach_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVrach_args");

    private static final org.apache.thrift.protocol.TField PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("pcod", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetVrach_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVrach_argsTupleSchemeFactory());
    }

    public int pcod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PCOD((short)1, "pcod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PCOD
            return PCOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PCOD_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PCOD, new org.apache.thrift.meta_data.FieldMetaData("pcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVrach_args.class, metaDataMap);
    }

    public GetVrach_args() {
    }

    public GetVrach_args(
      int pcod)
    {
      this();
      this.pcod = pcod;
      setPcodIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVrach_args(GetVrach_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.pcod = other.pcod;
    }

    public GetVrach_args deepCopy() {
      return new GetVrach_args(this);
    }

    @Override
    public void clear() {
      setPcodIsSet(false);
      this.pcod = 0;
    }

    public int getPcod() {
      return this.pcod;
    }

    public GetVrach_args setPcod(int pcod) {
      this.pcod = pcod;
      setPcodIsSet(true);
      return this;
    }

    public void unsetPcod() {
      __isset_bit_vector.clear(__PCOD_ISSET_ID);
    }

    /** Returns true if field pcod is set (has been assigned a value) and false otherwise */
    public boolean isSetPcod() {
      return __isset_bit_vector.get(__PCOD_ISSET_ID);
    }

    public void setPcodIsSet(boolean value) {
      __isset_bit_vector.set(__PCOD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PCOD:
        if (value == null) {
          unsetPcod();
        } else {
          setPcod((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PCOD:
        return Integer.valueOf(getPcod());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PCOD:
        return isSetPcod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVrach_args)
        return this.equals((GetVrach_args)that);
      return false;
    }

    public boolean equals(GetVrach_args that) {
      if (that == null)
        return false;

      boolean this_present_pcod = true;
      boolean that_present_pcod = true;
      if (this_present_pcod || that_present_pcod) {
        if (!(this_present_pcod && that_present_pcod))
          return false;
        if (this.pcod != that.pcod)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetVrach_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetVrach_args typedOther = (GetVrach_args)other;

      lastComparison = Boolean.valueOf(isSetPcod()).compareTo(typedOther.isSetPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcod, typedOther.pcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetVrach_args(");
      boolean first = true;

      sb.append("pcod:");
      sb.append(this.pcod);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVrach_argsStandardSchemeFactory implements SchemeFactory {
      public GetVrach_argsStandardScheme getScheme() {
        return new GetVrach_argsStandardScheme();
      }
    }

    private static class GetVrach_argsStandardScheme extends StandardScheme<GetVrach_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVrach_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pcod = iprot.readI32();
                struct.setPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVrach_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PCOD_FIELD_DESC);
        oprot.writeI32(struct.pcod);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVrach_argsTupleSchemeFactory implements SchemeFactory {
      public GetVrach_argsTupleScheme getScheme() {
        return new GetVrach_argsTupleScheme();
      }
    }

    private static class GetVrach_argsTupleScheme extends TupleScheme<GetVrach_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPcod()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPcod()) {
          oprot.writeI32(struct.pcod);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pcod = iprot.readI32();
          struct.setPcodIsSet(true);
        }
      }
    }

  }

  public static class GetVrach_result implements org.apache.thrift.TBase<GetVrach_result, GetVrach_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVrach_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField VNE_FIELD_DESC = new org.apache.thrift.protocol.TField("vne", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetVrach_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVrach_resultTupleSchemeFactory());
    }

    public VrachInfo success; // required
    public VrachNotFoundException vne; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      VNE((short)1, "vne");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // VNE
            return VNE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VrachInfo.class)));
      tmpMap.put(_Fields.VNE, new org.apache.thrift.meta_data.FieldMetaData("vne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVrach_result.class, metaDataMap);
    }

    public GetVrach_result() {
    }

    public GetVrach_result(
      VrachInfo success,
      VrachNotFoundException vne)
    {
      this();
      this.success = success;
      this.vne = vne;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVrach_result(GetVrach_result other) {
      if (other.isSetSuccess()) {
        this.success = new VrachInfo(other.success);
      }
      if (other.isSetVne()) {
        this.vne = new VrachNotFoundException(other.vne);
      }
    }

    public GetVrach_result deepCopy() {
      return new GetVrach_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.vne = null;
    }

    public VrachInfo getSuccess() {
      return this.success;
    }

    public GetVrach_result setSuccess(VrachInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public VrachNotFoundException getVne() {
      return this.vne;
    }

    public GetVrach_result setVne(VrachNotFoundException vne) {
      this.vne = vne;
      return this;
    }

    public void unsetVne() {
      this.vne = null;
    }

    /** Returns true if field vne is set (has been assigned a value) and false otherwise */
    public boolean isSetVne() {
      return this.vne != null;
    }

    public void setVneIsSet(boolean value) {
      if (!value) {
        this.vne = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((VrachInfo)value);
        }
        break;

      case VNE:
        if (value == null) {
          unsetVne();
        } else {
          setVne((VrachNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case VNE:
        return getVne();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case VNE:
        return isSetVne();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVrach_result)
        return this.equals((GetVrach_result)that);
      return false;
    }

    public boolean equals(GetVrach_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_vne = true && this.isSetVne();
      boolean that_present_vne = true && that.isSetVne();
      if (this_present_vne || that_present_vne) {
        if (!(this_present_vne && that_present_vne))
          return false;
        if (!this.vne.equals(that.vne))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetVrach_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetVrach_result typedOther = (GetVrach_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVne()).compareTo(typedOther.isSetVne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vne, typedOther.vne);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetVrach_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vne:");
      if (this.vne == null) {
        sb.append("null");
      } else {
        sb.append(this.vne);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVrach_resultStandardSchemeFactory implements SchemeFactory {
      public GetVrach_resultStandardScheme getScheme() {
        return new GetVrach_resultStandardScheme();
      }
    }

    private static class GetVrach_resultStandardScheme extends StandardScheme<GetVrach_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVrach_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new VrachInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // VNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vne = new VrachNotFoundException();
                struct.vne.read(iprot);
                struct.setVneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVrach_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.vne != null) {
          oprot.writeFieldBegin(VNE_FIELD_DESC);
          struct.vne.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVrach_resultTupleSchemeFactory implements SchemeFactory {
      public GetVrach_resultTupleScheme getScheme() {
        return new GetVrach_resultTupleScheme();
      }
    }

    private static class GetVrach_resultTupleScheme extends TupleScheme<GetVrach_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetVne()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetVne()) {
          struct.vne.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new VrachInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vne = new VrachNotFoundException();
          struct.vne.read(iprot);
          struct.setVneIsSet(true);
        }
      }
    }

  }

  public static class AddVrach_args implements org.apache.thrift.TBase<AddVrach_args, AddVrach_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddVrach_args");

    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddVrach_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddVrach_argsTupleSchemeFactory());
    }

    public VrachInfo vr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VR((short)1, "vr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VR
            return VR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VrachInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddVrach_args.class, metaDataMap);
    }

    public AddVrach_args() {
    }

    public AddVrach_args(
      VrachInfo vr)
    {
      this();
      this.vr = vr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddVrach_args(AddVrach_args other) {
      if (other.isSetVr()) {
        this.vr = new VrachInfo(other.vr);
      }
    }

    public AddVrach_args deepCopy() {
      return new AddVrach_args(this);
    }

    @Override
    public void clear() {
      this.vr = null;
    }

    public VrachInfo getVr() {
      return this.vr;
    }

    public AddVrach_args setVr(VrachInfo vr) {
      this.vr = vr;
      return this;
    }

    public void unsetVr() {
      this.vr = null;
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return this.vr != null;
    }

    public void setVrIsSet(boolean value) {
      if (!value) {
        this.vr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((VrachInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VR:
        return getVr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VR:
        return isSetVr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddVrach_args)
        return this.equals((AddVrach_args)that);
      return false;
    }

    public boolean equals(AddVrach_args that) {
      if (that == null)
        return false;

      boolean this_present_vr = true && this.isSetVr();
      boolean that_present_vr = true && that.isSetVr();
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (!this.vr.equals(that.vr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddVrach_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddVrach_args typedOther = (AddVrach_args)other;

      lastComparison = Boolean.valueOf(isSetVr()).compareTo(typedOther.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, typedOther.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddVrach_args(");
      boolean first = true;

      sb.append("vr:");
      if (this.vr == null) {
        sb.append("null");
      } else {
        sb.append(this.vr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddVrach_argsStandardSchemeFactory implements SchemeFactory {
      public AddVrach_argsStandardScheme getScheme() {
        return new AddVrach_argsStandardScheme();
      }
    }

    private static class AddVrach_argsStandardScheme extends StandardScheme<AddVrach_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddVrach_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vr = new VrachInfo();
                struct.vr.read(iprot);
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddVrach_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vr != null) {
          oprot.writeFieldBegin(VR_FIELD_DESC);
          struct.vr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddVrach_argsTupleSchemeFactory implements SchemeFactory {
      public AddVrach_argsTupleScheme getScheme() {
        return new AddVrach_argsTupleScheme();
      }
    }

    private static class AddVrach_argsTupleScheme extends TupleScheme<AddVrach_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVr()) {
          struct.vr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vr = new VrachInfo();
          struct.vr.read(iprot);
          struct.setVrIsSet(true);
        }
      }
    }

  }

  public static class AddVrach_result implements org.apache.thrift.TBase<AddVrach_result, AddVrach_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddVrach_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField VEE_FIELD_DESC = new org.apache.thrift.protocol.TField("vee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddVrach_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddVrach_resultTupleSchemeFactory());
    }

    public int success; // required
    public VrachExistsException vee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      VEE((short)1, "vee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // VEE
            return VEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VEE, new org.apache.thrift.meta_data.FieldMetaData("vee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddVrach_result.class, metaDataMap);
    }

    public AddVrach_result() {
    }

    public AddVrach_result(
      int success,
      VrachExistsException vee)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.vee = vee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddVrach_result(AddVrach_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetVee()) {
        this.vee = new VrachExistsException(other.vee);
      }
    }

    public AddVrach_result deepCopy() {
      return new AddVrach_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.vee = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public AddVrach_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public VrachExistsException getVee() {
      return this.vee;
    }

    public AddVrach_result setVee(VrachExistsException vee) {
      this.vee = vee;
      return this;
    }

    public void unsetVee() {
      this.vee = null;
    }

    /** Returns true if field vee is set (has been assigned a value) and false otherwise */
    public boolean isSetVee() {
      return this.vee != null;
    }

    public void setVeeIsSet(boolean value) {
      if (!value) {
        this.vee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case VEE:
        if (value == null) {
          unsetVee();
        } else {
          setVee((VrachExistsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case VEE:
        return getVee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case VEE:
        return isSetVee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddVrach_result)
        return this.equals((AddVrach_result)that);
      return false;
    }

    public boolean equals(AddVrach_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_vee = true && this.isSetVee();
      boolean that_present_vee = true && that.isSetVee();
      if (this_present_vee || that_present_vee) {
        if (!(this_present_vee && that_present_vee))
          return false;
        if (!this.vee.equals(that.vee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddVrach_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddVrach_result typedOther = (AddVrach_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVee()).compareTo(typedOther.isSetVee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vee, typedOther.vee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddVrach_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vee:");
      if (this.vee == null) {
        sb.append("null");
      } else {
        sb.append(this.vee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddVrach_resultStandardSchemeFactory implements SchemeFactory {
      public AddVrach_resultStandardScheme getScheme() {
        return new AddVrach_resultStandardScheme();
      }
    }

    private static class AddVrach_resultStandardScheme extends StandardScheme<AddVrach_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddVrach_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // VEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vee = new VrachExistsException();
                struct.vee.read(iprot);
                struct.setVeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddVrach_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.vee != null) {
          oprot.writeFieldBegin(VEE_FIELD_DESC);
          struct.vee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddVrach_resultTupleSchemeFactory implements SchemeFactory {
      public AddVrach_resultTupleScheme getScheme() {
        return new AddVrach_resultTupleScheme();
      }
    }

    private static class AddVrach_resultTupleScheme extends TupleScheme<AddVrach_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetVee()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetVee()) {
          struct.vee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vee = new VrachExistsException();
          struct.vee.read(iprot);
          struct.setVeeIsSet(true);
        }
      }
    }

  }

  public static class UpdVrach_args implements org.apache.thrift.TBase<UpdVrach_args, UpdVrach_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdVrach_args");

    private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdVrach_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdVrach_argsTupleSchemeFactory());
    }

    public VrachInfo vr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VR((short)1, "vr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VR
            return VR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VrachInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdVrach_args.class, metaDataMap);
    }

    public UpdVrach_args() {
    }

    public UpdVrach_args(
      VrachInfo vr)
    {
      this();
      this.vr = vr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdVrach_args(UpdVrach_args other) {
      if (other.isSetVr()) {
        this.vr = new VrachInfo(other.vr);
      }
    }

    public UpdVrach_args deepCopy() {
      return new UpdVrach_args(this);
    }

    @Override
    public void clear() {
      this.vr = null;
    }

    public VrachInfo getVr() {
      return this.vr;
    }

    public UpdVrach_args setVr(VrachInfo vr) {
      this.vr = vr;
      return this;
    }

    public void unsetVr() {
      this.vr = null;
    }

    /** Returns true if field vr is set (has been assigned a value) and false otherwise */
    public boolean isSetVr() {
      return this.vr != null;
    }

    public void setVrIsSet(boolean value) {
      if (!value) {
        this.vr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VR:
        if (value == null) {
          unsetVr();
        } else {
          setVr((VrachInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VR:
        return getVr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VR:
        return isSetVr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdVrach_args)
        return this.equals((UpdVrach_args)that);
      return false;
    }

    public boolean equals(UpdVrach_args that) {
      if (that == null)
        return false;

      boolean this_present_vr = true && this.isSetVr();
      boolean that_present_vr = true && that.isSetVr();
      if (this_present_vr || that_present_vr) {
        if (!(this_present_vr && that_present_vr))
          return false;
        if (!this.vr.equals(that.vr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdVrach_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdVrach_args typedOther = (UpdVrach_args)other;

      lastComparison = Boolean.valueOf(isSetVr()).compareTo(typedOther.isSetVr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, typedOther.vr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdVrach_args(");
      boolean first = true;

      sb.append("vr:");
      if (this.vr == null) {
        sb.append("null");
      } else {
        sb.append(this.vr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdVrach_argsStandardSchemeFactory implements SchemeFactory {
      public UpdVrach_argsStandardScheme getScheme() {
        return new UpdVrach_argsStandardScheme();
      }
    }

    private static class UpdVrach_argsStandardScheme extends StandardScheme<UpdVrach_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdVrach_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vr = new VrachInfo();
                struct.vr.read(iprot);
                struct.setVrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdVrach_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vr != null) {
          oprot.writeFieldBegin(VR_FIELD_DESC);
          struct.vr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdVrach_argsTupleSchemeFactory implements SchemeFactory {
      public UpdVrach_argsTupleScheme getScheme() {
        return new UpdVrach_argsTupleScheme();
      }
    }

    private static class UpdVrach_argsTupleScheme extends TupleScheme<UpdVrach_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVr()) {
          struct.vr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vr = new VrachInfo();
          struct.vr.read(iprot);
          struct.setVrIsSet(true);
        }
      }
    }

  }

  public static class UpdVrach_result implements org.apache.thrift.TBase<UpdVrach_result, UpdVrach_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdVrach_result");

    private static final org.apache.thrift.protocol.TField VEE_FIELD_DESC = new org.apache.thrift.protocol.TField("vee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdVrach_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdVrach_resultTupleSchemeFactory());
    }

    public VrachExistsException vee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VEE((short)1, "vee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VEE
            return VEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VEE, new org.apache.thrift.meta_data.FieldMetaData("vee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdVrach_result.class, metaDataMap);
    }

    public UpdVrach_result() {
    }

    public UpdVrach_result(
      VrachExistsException vee)
    {
      this();
      this.vee = vee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdVrach_result(UpdVrach_result other) {
      if (other.isSetVee()) {
        this.vee = new VrachExistsException(other.vee);
      }
    }

    public UpdVrach_result deepCopy() {
      return new UpdVrach_result(this);
    }

    @Override
    public void clear() {
      this.vee = null;
    }

    public VrachExistsException getVee() {
      return this.vee;
    }

    public UpdVrach_result setVee(VrachExistsException vee) {
      this.vee = vee;
      return this;
    }

    public void unsetVee() {
      this.vee = null;
    }

    /** Returns true if field vee is set (has been assigned a value) and false otherwise */
    public boolean isSetVee() {
      return this.vee != null;
    }

    public void setVeeIsSet(boolean value) {
      if (!value) {
        this.vee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VEE:
        if (value == null) {
          unsetVee();
        } else {
          setVee((VrachExistsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VEE:
        return getVee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VEE:
        return isSetVee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdVrach_result)
        return this.equals((UpdVrach_result)that);
      return false;
    }

    public boolean equals(UpdVrach_result that) {
      if (that == null)
        return false;

      boolean this_present_vee = true && this.isSetVee();
      boolean that_present_vee = true && that.isSetVee();
      if (this_present_vee || that_present_vee) {
        if (!(this_present_vee && that_present_vee))
          return false;
        if (!this.vee.equals(that.vee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdVrach_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdVrach_result typedOther = (UpdVrach_result)other;

      lastComparison = Boolean.valueOf(isSetVee()).compareTo(typedOther.isSetVee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vee, typedOther.vee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdVrach_result(");
      boolean first = true;

      sb.append("vee:");
      if (this.vee == null) {
        sb.append("null");
      } else {
        sb.append(this.vee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdVrach_resultStandardSchemeFactory implements SchemeFactory {
      public UpdVrach_resultStandardScheme getScheme() {
        return new UpdVrach_resultStandardScheme();
      }
    }

    private static class UpdVrach_resultStandardScheme extends StandardScheme<UpdVrach_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdVrach_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vee = new VrachExistsException();
                struct.vee.read(iprot);
                struct.setVeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdVrach_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vee != null) {
          oprot.writeFieldBegin(VEE_FIELD_DESC);
          struct.vee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdVrach_resultTupleSchemeFactory implements SchemeFactory {
      public UpdVrach_resultTupleScheme getScheme() {
        return new UpdVrach_resultTupleScheme();
      }
    }

    private static class UpdVrach_resultTupleScheme extends TupleScheme<UpdVrach_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVee()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVee()) {
          struct.vee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vee = new VrachExistsException();
          struct.vee.read(iprot);
          struct.setVeeIsSet(true);
        }
      }
    }

  }

  public static class DelVrach_args implements org.apache.thrift.TBase<DelVrach_args, DelVrach_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelVrach_args");

    private static final org.apache.thrift.protocol.TField PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("pcod", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DelVrach_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DelVrach_argsTupleSchemeFactory());
    }

    public int pcod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PCOD((short)1, "pcod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PCOD
            return PCOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PCOD_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PCOD, new org.apache.thrift.meta_data.FieldMetaData("pcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelVrach_args.class, metaDataMap);
    }

    public DelVrach_args() {
    }

    public DelVrach_args(
      int pcod)
    {
      this();
      this.pcod = pcod;
      setPcodIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelVrach_args(DelVrach_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.pcod = other.pcod;
    }

    public DelVrach_args deepCopy() {
      return new DelVrach_args(this);
    }

    @Override
    public void clear() {
      setPcodIsSet(false);
      this.pcod = 0;
    }

    public int getPcod() {
      return this.pcod;
    }

    public DelVrach_args setPcod(int pcod) {
      this.pcod = pcod;
      setPcodIsSet(true);
      return this;
    }

    public void unsetPcod() {
      __isset_bit_vector.clear(__PCOD_ISSET_ID);
    }

    /** Returns true if field pcod is set (has been assigned a value) and false otherwise */
    public boolean isSetPcod() {
      return __isset_bit_vector.get(__PCOD_ISSET_ID);
    }

    public void setPcodIsSet(boolean value) {
      __isset_bit_vector.set(__PCOD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PCOD:
        if (value == null) {
          unsetPcod();
        } else {
          setPcod((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PCOD:
        return Integer.valueOf(getPcod());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PCOD:
        return isSetPcod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DelVrach_args)
        return this.equals((DelVrach_args)that);
      return false;
    }

    public boolean equals(DelVrach_args that) {
      if (that == null)
        return false;

      boolean this_present_pcod = true;
      boolean that_present_pcod = true;
      if (this_present_pcod || that_present_pcod) {
        if (!(this_present_pcod && that_present_pcod))
          return false;
        if (this.pcod != that.pcod)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DelVrach_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DelVrach_args typedOther = (DelVrach_args)other;

      lastComparison = Boolean.valueOf(isSetPcod()).compareTo(typedOther.isSetPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcod, typedOther.pcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DelVrach_args(");
      boolean first = true;

      sb.append("pcod:");
      sb.append(this.pcod);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelVrach_argsStandardSchemeFactory implements SchemeFactory {
      public DelVrach_argsStandardScheme getScheme() {
        return new DelVrach_argsStandardScheme();
      }
    }

    private static class DelVrach_argsStandardScheme extends StandardScheme<DelVrach_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelVrach_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pcod = iprot.readI32();
                struct.setPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelVrach_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PCOD_FIELD_DESC);
        oprot.writeI32(struct.pcod);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelVrach_argsTupleSchemeFactory implements SchemeFactory {
      public DelVrach_argsTupleScheme getScheme() {
        return new DelVrach_argsTupleScheme();
      }
    }

    private static class DelVrach_argsTupleScheme extends TupleScheme<DelVrach_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPcod()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPcod()) {
          oprot.writeI32(struct.pcod);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelVrach_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pcod = iprot.readI32();
          struct.setPcodIsSet(true);
        }
      }
    }

  }

  public static class DelVrach_result implements org.apache.thrift.TBase<DelVrach_result, DelVrach_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelVrach_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DelVrach_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DelVrach_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelVrach_result.class, metaDataMap);
    }

    public DelVrach_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelVrach_result(DelVrach_result other) {
    }

    public DelVrach_result deepCopy() {
      return new DelVrach_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DelVrach_result)
        return this.equals((DelVrach_result)that);
      return false;
    }

    public boolean equals(DelVrach_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DelVrach_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DelVrach_result typedOther = (DelVrach_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DelVrach_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelVrach_resultStandardSchemeFactory implements SchemeFactory {
      public DelVrach_resultStandardScheme getScheme() {
        return new DelVrach_resultStandardScheme();
      }
    }

    private static class DelVrach_resultStandardScheme extends StandardScheme<DelVrach_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelVrach_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelVrach_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelVrach_resultTupleSchemeFactory implements SchemeFactory {
      public DelVrach_resultTupleScheme getScheme() {
        return new DelVrach_resultTupleScheme();
      }
    }

    private static class DelVrach_resultTupleScheme extends TupleScheme<DelVrach_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelVrach_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetMrabList_args implements org.apache.thrift.TBase<GetMrabList_args, GetMrabList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMrabList_args");

    private static final org.apache.thrift.protocol.TField VR_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("vrPcod", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetMrabList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetMrabList_argsTupleSchemeFactory());
    }

    public int vrPcod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VR_PCOD((short)1, "vrPcod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VR_PCOD
            return VR_PCOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VRPCOD_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VR_PCOD, new org.apache.thrift.meta_data.FieldMetaData("vrPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMrabList_args.class, metaDataMap);
    }

    public GetMrabList_args() {
    }

    public GetMrabList_args(
      int vrPcod)
    {
      this();
      this.vrPcod = vrPcod;
      setVrPcodIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetMrabList_args(GetMrabList_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.vrPcod = other.vrPcod;
    }

    public GetMrabList_args deepCopy() {
      return new GetMrabList_args(this);
    }

    @Override
    public void clear() {
      setVrPcodIsSet(false);
      this.vrPcod = 0;
    }

    public int getVrPcod() {
      return this.vrPcod;
    }

    public GetMrabList_args setVrPcod(int vrPcod) {
      this.vrPcod = vrPcod;
      setVrPcodIsSet(true);
      return this;
    }

    public void unsetVrPcod() {
      __isset_bit_vector.clear(__VRPCOD_ISSET_ID);
    }

    /** Returns true if field vrPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetVrPcod() {
      return __isset_bit_vector.get(__VRPCOD_ISSET_ID);
    }

    public void setVrPcodIsSet(boolean value) {
      __isset_bit_vector.set(__VRPCOD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VR_PCOD:
        if (value == null) {
          unsetVrPcod();
        } else {
          setVrPcod((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VR_PCOD:
        return Integer.valueOf(getVrPcod());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VR_PCOD:
        return isSetVrPcod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetMrabList_args)
        return this.equals((GetMrabList_args)that);
      return false;
    }

    public boolean equals(GetMrabList_args that) {
      if (that == null)
        return false;

      boolean this_present_vrPcod = true;
      boolean that_present_vrPcod = true;
      if (this_present_vrPcod || that_present_vrPcod) {
        if (!(this_present_vrPcod && that_present_vrPcod))
          return false;
        if (this.vrPcod != that.vrPcod)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetMrabList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetMrabList_args typedOther = (GetMrabList_args)other;

      lastComparison = Boolean.valueOf(isSetVrPcod()).compareTo(typedOther.isSetVrPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVrPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vrPcod, typedOther.vrPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetMrabList_args(");
      boolean first = true;

      sb.append("vrPcod:");
      sb.append(this.vrPcod);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetMrabList_argsStandardSchemeFactory implements SchemeFactory {
      public GetMrabList_argsStandardScheme getScheme() {
        return new GetMrabList_argsStandardScheme();
      }
    }

    private static class GetMrabList_argsStandardScheme extends StandardScheme<GetMrabList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetMrabList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VR_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vrPcod = iprot.readI32();
                struct.setVrPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetMrabList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VR_PCOD_FIELD_DESC);
        oprot.writeI32(struct.vrPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetMrabList_argsTupleSchemeFactory implements SchemeFactory {
      public GetMrabList_argsTupleScheme getScheme() {
        return new GetMrabList_argsTupleScheme();
      }
    }

    private static class GetMrabList_argsTupleScheme extends TupleScheme<GetMrabList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetMrabList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVrPcod()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVrPcod()) {
          oprot.writeI32(struct.vrPcod);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetMrabList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vrPcod = iprot.readI32();
          struct.setVrPcodIsSet(true);
        }
      }
    }

  }

  public static class GetMrabList_result implements org.apache.thrift.TBase<GetMrabList_result, GetMrabList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMrabList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetMrabList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetMrabList_resultTupleSchemeFactory());
    }

    public List<MestoRab> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MestoRab.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMrabList_result.class, metaDataMap);
    }

    public GetMrabList_result() {
    }

    public GetMrabList_result(
      List<MestoRab> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetMrabList_result(GetMrabList_result other) {
      if (other.isSetSuccess()) {
        List<MestoRab> __this__success = new ArrayList<MestoRab>();
        for (MestoRab other_element : other.success) {
          __this__success.add(new MestoRab(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetMrabList_result deepCopy() {
      return new GetMrabList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<MestoRab> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MestoRab elem) {
      if (this.success == null) {
        this.success = new ArrayList<MestoRab>();
      }
      this.success.add(elem);
    }

    public List<MestoRab> getSuccess() {
      return this.success;
    }

    public GetMrabList_result setSuccess(List<MestoRab> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<MestoRab>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetMrabList_result)
        return this.equals((GetMrabList_result)that);
      return false;
    }

    public boolean equals(GetMrabList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetMrabList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetMrabList_result typedOther = (GetMrabList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetMrabList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetMrabList_resultStandardSchemeFactory implements SchemeFactory {
      public GetMrabList_resultStandardScheme getScheme() {
        return new GetMrabList_resultStandardScheme();
      }
    }

    private static class GetMrabList_resultStandardScheme extends StandardScheme<GetMrabList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetMrabList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<MestoRab>(_list72.size);
                  for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                  {
                    MestoRab _elem74; // required
                    _elem74 = new MestoRab();
                    _elem74.read(iprot);
                    struct.success.add(_elem74);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetMrabList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MestoRab _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetMrabList_resultTupleSchemeFactory implements SchemeFactory {
      public GetMrabList_resultTupleScheme getScheme() {
        return new GetMrabList_resultTupleScheme();
      }
    }

    private static class GetMrabList_resultTupleScheme extends TupleScheme<GetMrabList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetMrabList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MestoRab _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetMrabList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<MestoRab>(_list77.size);
            for (int _i78 = 0; _i78 < _list77.size; ++_i78)
            {
              MestoRab _elem79; // required
              _elem79 = new MestoRab();
              _elem79.read(iprot);
              struct.success.add(_elem79);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetMrab_args implements org.apache.thrift.TBase<GetMrab_args, GetMrab_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMrab_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetMrab_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetMrab_argsTupleSchemeFactory());
    }

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMrab_args.class, metaDataMap);
    }

    public GetMrab_args() {
    }

    public GetMrab_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetMrab_args(GetMrab_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.id = other.id;
    }

    public GetMrab_args deepCopy() {
      return new GetMrab_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public GetMrab_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bit_vector.clear(__ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return __isset_bit_vector.get(__ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bit_vector.set(__ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Integer.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetMrab_args)
        return this.equals((GetMrab_args)that);
      return false;
    }

    public boolean equals(GetMrab_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetMrab_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetMrab_args typedOther = (GetMrab_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetMrab_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetMrab_argsStandardSchemeFactory implements SchemeFactory {
      public GetMrab_argsStandardScheme getScheme() {
        return new GetMrab_argsStandardScheme();
      }
    }

    private static class GetMrab_argsStandardScheme extends StandardScheme<GetMrab_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetMrab_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetMrab_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetMrab_argsTupleSchemeFactory implements SchemeFactory {
      public GetMrab_argsTupleScheme getScheme() {
        return new GetMrab_argsTupleScheme();
      }
    }

    private static class GetMrab_argsTupleScheme extends TupleScheme<GetMrab_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class GetMrab_result implements org.apache.thrift.TBase<GetMrab_result, GetMrab_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMrab_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MNE_FIELD_DESC = new org.apache.thrift.protocol.TField("mne", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetMrab_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetMrab_resultTupleSchemeFactory());
    }

    public MestoRab success; // required
    public MestoRabNotFoundException mne; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MNE((short)1, "mne");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MNE
            return MNE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MestoRab.class)));
      tmpMap.put(_Fields.MNE, new org.apache.thrift.meta_data.FieldMetaData("mne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMrab_result.class, metaDataMap);
    }

    public GetMrab_result() {
    }

    public GetMrab_result(
      MestoRab success,
      MestoRabNotFoundException mne)
    {
      this();
      this.success = success;
      this.mne = mne;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetMrab_result(GetMrab_result other) {
      if (other.isSetSuccess()) {
        this.success = new MestoRab(other.success);
      }
      if (other.isSetMne()) {
        this.mne = new MestoRabNotFoundException(other.mne);
      }
    }

    public GetMrab_result deepCopy() {
      return new GetMrab_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.mne = null;
    }

    public MestoRab getSuccess() {
      return this.success;
    }

    public GetMrab_result setSuccess(MestoRab success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MestoRabNotFoundException getMne() {
      return this.mne;
    }

    public GetMrab_result setMne(MestoRabNotFoundException mne) {
      this.mne = mne;
      return this;
    }

    public void unsetMne() {
      this.mne = null;
    }

    /** Returns true if field mne is set (has been assigned a value) and false otherwise */
    public boolean isSetMne() {
      return this.mne != null;
    }

    public void setMneIsSet(boolean value) {
      if (!value) {
        this.mne = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MestoRab)value);
        }
        break;

      case MNE:
        if (value == null) {
          unsetMne();
        } else {
          setMne((MestoRabNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MNE:
        return getMne();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MNE:
        return isSetMne();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetMrab_result)
        return this.equals((GetMrab_result)that);
      return false;
    }

    public boolean equals(GetMrab_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_mne = true && this.isSetMne();
      boolean that_present_mne = true && that.isSetMne();
      if (this_present_mne || that_present_mne) {
        if (!(this_present_mne && that_present_mne))
          return false;
        if (!this.mne.equals(that.mne))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(GetMrab_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetMrab_result typedOther = (GetMrab_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMne()).compareTo(typedOther.isSetMne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMne()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mne, typedOther.mne);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetMrab_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mne:");
      if (this.mne == null) {
        sb.append("null");
      } else {
        sb.append(this.mne);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetMrab_resultStandardSchemeFactory implements SchemeFactory {
      public GetMrab_resultStandardScheme getScheme() {
        return new GetMrab_resultStandardScheme();
      }
    }

    private static class GetMrab_resultStandardScheme extends StandardScheme<GetMrab_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetMrab_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MestoRab();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MNE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mne = new MestoRabNotFoundException();
                struct.mne.read(iprot);
                struct.setMneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetMrab_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mne != null) {
          oprot.writeFieldBegin(MNE_FIELD_DESC);
          struct.mne.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetMrab_resultTupleSchemeFactory implements SchemeFactory {
      public GetMrab_resultTupleScheme getScheme() {
        return new GetMrab_resultTupleScheme();
      }
    }

    private static class GetMrab_resultTupleScheme extends TupleScheme<GetMrab_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMne()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMne()) {
          struct.mne.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new MestoRab();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mne = new MestoRabNotFoundException();
          struct.mne.read(iprot);
          struct.setMneIsSet(true);
        }
      }
    }

  }

  public static class AddMrab_args implements org.apache.thrift.TBase<AddMrab_args, AddMrab_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddMrab_args");

    private static final org.apache.thrift.protocol.TField MR_FIELD_DESC = new org.apache.thrift.protocol.TField("mr", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddMrab_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddMrab_argsTupleSchemeFactory());
    }

    public MestoRab mr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MR((short)1, "mr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MR
            return MR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MR, new org.apache.thrift.meta_data.FieldMetaData("mr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MestoRab.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddMrab_args.class, metaDataMap);
    }

    public AddMrab_args() {
    }

    public AddMrab_args(
      MestoRab mr)
    {
      this();
      this.mr = mr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddMrab_args(AddMrab_args other) {
      if (other.isSetMr()) {
        this.mr = new MestoRab(other.mr);
      }
    }

    public AddMrab_args deepCopy() {
      return new AddMrab_args(this);
    }

    @Override
    public void clear() {
      this.mr = null;
    }

    public MestoRab getMr() {
      return this.mr;
    }

    public AddMrab_args setMr(MestoRab mr) {
      this.mr = mr;
      return this;
    }

    public void unsetMr() {
      this.mr = null;
    }

    /** Returns true if field mr is set (has been assigned a value) and false otherwise */
    public boolean isSetMr() {
      return this.mr != null;
    }

    public void setMrIsSet(boolean value) {
      if (!value) {
        this.mr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MR:
        if (value == null) {
          unsetMr();
        } else {
          setMr((MestoRab)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MR:
        return getMr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MR:
        return isSetMr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddMrab_args)
        return this.equals((AddMrab_args)that);
      return false;
    }

    public boolean equals(AddMrab_args that) {
      if (that == null)
        return false;

      boolean this_present_mr = true && this.isSetMr();
      boolean that_present_mr = true && that.isSetMr();
      if (this_present_mr || that_present_mr) {
        if (!(this_present_mr && that_present_mr))
          return false;
        if (!this.mr.equals(that.mr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddMrab_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddMrab_args typedOther = (AddMrab_args)other;

      lastComparison = Boolean.valueOf(isSetMr()).compareTo(typedOther.isSetMr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mr, typedOther.mr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddMrab_args(");
      boolean first = true;

      sb.append("mr:");
      if (this.mr == null) {
        sb.append("null");
      } else {
        sb.append(this.mr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddMrab_argsStandardSchemeFactory implements SchemeFactory {
      public AddMrab_argsStandardScheme getScheme() {
        return new AddMrab_argsStandardScheme();
      }
    }

    private static class AddMrab_argsStandardScheme extends StandardScheme<AddMrab_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddMrab_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mr = new MestoRab();
                struct.mr.read(iprot);
                struct.setMrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddMrab_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mr != null) {
          oprot.writeFieldBegin(MR_FIELD_DESC);
          struct.mr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddMrab_argsTupleSchemeFactory implements SchemeFactory {
      public AddMrab_argsTupleScheme getScheme() {
        return new AddMrab_argsTupleScheme();
      }
    }

    private static class AddMrab_argsTupleScheme extends TupleScheme<AddMrab_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMr()) {
          struct.mr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mr = new MestoRab();
          struct.mr.read(iprot);
          struct.setMrIsSet(true);
        }
      }
    }

  }

  public static class AddMrab_result implements org.apache.thrift.TBase<AddMrab_result, AddMrab_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddMrab_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField MEE_FIELD_DESC = new org.apache.thrift.protocol.TField("mee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddMrab_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddMrab_resultTupleSchemeFactory());
    }

    public int success; // required
    public MestoRabExistsException mee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MEE((short)1, "mee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MEE
            return MEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MEE, new org.apache.thrift.meta_data.FieldMetaData("mee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddMrab_result.class, metaDataMap);
    }

    public AddMrab_result() {
    }

    public AddMrab_result(
      int success,
      MestoRabExistsException mee)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.mee = mee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddMrab_result(AddMrab_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetMee()) {
        this.mee = new MestoRabExistsException(other.mee);
      }
    }

    public AddMrab_result deepCopy() {
      return new AddMrab_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.mee = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public AddMrab_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public MestoRabExistsException getMee() {
      return this.mee;
    }

    public AddMrab_result setMee(MestoRabExistsException mee) {
      this.mee = mee;
      return this;
    }

    public void unsetMee() {
      this.mee = null;
    }

    /** Returns true if field mee is set (has been assigned a value) and false otherwise */
    public boolean isSetMee() {
      return this.mee != null;
    }

    public void setMeeIsSet(boolean value) {
      if (!value) {
        this.mee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case MEE:
        if (value == null) {
          unsetMee();
        } else {
          setMee((MestoRabExistsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case MEE:
        return getMee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MEE:
        return isSetMee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddMrab_result)
        return this.equals((AddMrab_result)that);
      return false;
    }

    public boolean equals(AddMrab_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_mee = true && this.isSetMee();
      boolean that_present_mee = true && that.isSetMee();
      if (this_present_mee || that_present_mee) {
        if (!(this_present_mee && that_present_mee))
          return false;
        if (!this.mee.equals(that.mee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(AddMrab_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      AddMrab_result typedOther = (AddMrab_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMee()).compareTo(typedOther.isSetMee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mee, typedOther.mee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddMrab_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mee:");
      if (this.mee == null) {
        sb.append("null");
      } else {
        sb.append(this.mee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddMrab_resultStandardSchemeFactory implements SchemeFactory {
      public AddMrab_resultStandardScheme getScheme() {
        return new AddMrab_resultStandardScheme();
      }
    }

    private static class AddMrab_resultStandardScheme extends StandardScheme<AddMrab_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddMrab_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mee = new MestoRabExistsException();
                struct.mee.read(iprot);
                struct.setMeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddMrab_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.mee != null) {
          oprot.writeFieldBegin(MEE_FIELD_DESC);
          struct.mee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddMrab_resultTupleSchemeFactory implements SchemeFactory {
      public AddMrab_resultTupleScheme getScheme() {
        return new AddMrab_resultTupleScheme();
      }
    }

    private static class AddMrab_resultTupleScheme extends TupleScheme<AddMrab_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMee()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetMee()) {
          struct.mee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mee = new MestoRabExistsException();
          struct.mee.read(iprot);
          struct.setMeeIsSet(true);
        }
      }
    }

  }

  public static class UpdMrab_args implements org.apache.thrift.TBase<UpdMrab_args, UpdMrab_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdMrab_args");

    private static final org.apache.thrift.protocol.TField MR_FIELD_DESC = new org.apache.thrift.protocol.TField("mr", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdMrab_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdMrab_argsTupleSchemeFactory());
    }

    public MestoRab mr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MR((short)1, "mr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MR
            return MR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MR, new org.apache.thrift.meta_data.FieldMetaData("mr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MestoRab.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdMrab_args.class, metaDataMap);
    }

    public UpdMrab_args() {
    }

    public UpdMrab_args(
      MestoRab mr)
    {
      this();
      this.mr = mr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdMrab_args(UpdMrab_args other) {
      if (other.isSetMr()) {
        this.mr = new MestoRab(other.mr);
      }
    }

    public UpdMrab_args deepCopy() {
      return new UpdMrab_args(this);
    }

    @Override
    public void clear() {
      this.mr = null;
    }

    public MestoRab getMr() {
      return this.mr;
    }

    public UpdMrab_args setMr(MestoRab mr) {
      this.mr = mr;
      return this;
    }

    public void unsetMr() {
      this.mr = null;
    }

    /** Returns true if field mr is set (has been assigned a value) and false otherwise */
    public boolean isSetMr() {
      return this.mr != null;
    }

    public void setMrIsSet(boolean value) {
      if (!value) {
        this.mr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MR:
        if (value == null) {
          unsetMr();
        } else {
          setMr((MestoRab)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MR:
        return getMr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MR:
        return isSetMr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdMrab_args)
        return this.equals((UpdMrab_args)that);
      return false;
    }

    public boolean equals(UpdMrab_args that) {
      if (that == null)
        return false;

      boolean this_present_mr = true && this.isSetMr();
      boolean that_present_mr = true && that.isSetMr();
      if (this_present_mr || that_present_mr) {
        if (!(this_present_mr && that_present_mr))
          return false;
        if (!this.mr.equals(that.mr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdMrab_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdMrab_args typedOther = (UpdMrab_args)other;

      lastComparison = Boolean.valueOf(isSetMr()).compareTo(typedOther.isSetMr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mr, typedOther.mr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdMrab_args(");
      boolean first = true;

      sb.append("mr:");
      if (this.mr == null) {
        sb.append("null");
      } else {
        sb.append(this.mr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdMrab_argsStandardSchemeFactory implements SchemeFactory {
      public UpdMrab_argsStandardScheme getScheme() {
        return new UpdMrab_argsStandardScheme();
      }
    }

    private static class UpdMrab_argsStandardScheme extends StandardScheme<UpdMrab_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdMrab_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mr = new MestoRab();
                struct.mr.read(iprot);
                struct.setMrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdMrab_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mr != null) {
          oprot.writeFieldBegin(MR_FIELD_DESC);
          struct.mr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdMrab_argsTupleSchemeFactory implements SchemeFactory {
      public UpdMrab_argsTupleScheme getScheme() {
        return new UpdMrab_argsTupleScheme();
      }
    }

    private static class UpdMrab_argsTupleScheme extends TupleScheme<UpdMrab_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMr()) {
          struct.mr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mr = new MestoRab();
          struct.mr.read(iprot);
          struct.setMrIsSet(true);
        }
      }
    }

  }

  public static class UpdMrab_result implements org.apache.thrift.TBase<UpdMrab_result, UpdMrab_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdMrab_result");

    private static final org.apache.thrift.protocol.TField MEE_FIELD_DESC = new org.apache.thrift.protocol.TField("mee", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdMrab_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdMrab_resultTupleSchemeFactory());
    }

    public MestoRabExistsException mee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEE((short)1, "mee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEE
            return MEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEE, new org.apache.thrift.meta_data.FieldMetaData("mee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdMrab_result.class, metaDataMap);
    }

    public UpdMrab_result() {
    }

    public UpdMrab_result(
      MestoRabExistsException mee)
    {
      this();
      this.mee = mee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdMrab_result(UpdMrab_result other) {
      if (other.isSetMee()) {
        this.mee = new MestoRabExistsException(other.mee);
      }
    }

    public UpdMrab_result deepCopy() {
      return new UpdMrab_result(this);
    }

    @Override
    public void clear() {
      this.mee = null;
    }

    public MestoRabExistsException getMee() {
      return this.mee;
    }

    public UpdMrab_result setMee(MestoRabExistsException mee) {
      this.mee = mee;
      return this;
    }

    public void unsetMee() {
      this.mee = null;
    }

    /** Returns true if field mee is set (has been assigned a value) and false otherwise */
    public boolean isSetMee() {
      return this.mee != null;
    }

    public void setMeeIsSet(boolean value) {
      if (!value) {
        this.mee = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEE:
        if (value == null) {
          unsetMee();
        } else {
          setMee((MestoRabExistsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEE:
        return getMee();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEE:
        return isSetMee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdMrab_result)
        return this.equals((UpdMrab_result)that);
      return false;
    }

    public boolean equals(UpdMrab_result that) {
      if (that == null)
        return false;

      boolean this_present_mee = true && this.isSetMee();
      boolean that_present_mee = true && that.isSetMee();
      if (this_present_mee || that_present_mee) {
        if (!(this_present_mee && that_present_mee))
          return false;
        if (!this.mee.equals(that.mee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdMrab_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdMrab_result typedOther = (UpdMrab_result)other;

      lastComparison = Boolean.valueOf(isSetMee()).compareTo(typedOther.isSetMee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mee, typedOther.mee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdMrab_result(");
      boolean first = true;

      sb.append("mee:");
      if (this.mee == null) {
        sb.append("null");
      } else {
        sb.append(this.mee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdMrab_resultStandardSchemeFactory implements SchemeFactory {
      public UpdMrab_resultStandardScheme getScheme() {
        return new UpdMrab_resultStandardScheme();
      }
    }

    private static class UpdMrab_resultStandardScheme extends StandardScheme<UpdMrab_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdMrab_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mee = new MestoRabExistsException();
                struct.mee.read(iprot);
                struct.setMeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdMrab_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mee != null) {
          oprot.writeFieldBegin(MEE_FIELD_DESC);
          struct.mee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdMrab_resultTupleSchemeFactory implements SchemeFactory {
      public UpdMrab_resultTupleScheme getScheme() {
        return new UpdMrab_resultTupleScheme();
      }
    }

    private static class UpdMrab_resultTupleScheme extends TupleScheme<UpdMrab_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMee()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMee()) {
          struct.mee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mee = new MestoRabExistsException();
          struct.mee.read(iprot);
          struct.setMeeIsSet(true);
        }
      }
    }

  }

  public static class DelMrab_args implements org.apache.thrift.TBase<DelMrab_args, DelMrab_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelMrab_args");

    private static final org.apache.thrift.protocol.TField MR_FIELD_DESC = new org.apache.thrift.protocol.TField("mr", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DelMrab_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DelMrab_argsTupleSchemeFactory());
    }

    public MestoRab mr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MR((short)1, "mr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MR
            return MR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MR, new org.apache.thrift.meta_data.FieldMetaData("mr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MestoRab.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelMrab_args.class, metaDataMap);
    }

    public DelMrab_args() {
    }

    public DelMrab_args(
      MestoRab mr)
    {
      this();
      this.mr = mr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelMrab_args(DelMrab_args other) {
      if (other.isSetMr()) {
        this.mr = new MestoRab(other.mr);
      }
    }

    public DelMrab_args deepCopy() {
      return new DelMrab_args(this);
    }

    @Override
    public void clear() {
      this.mr = null;
    }

    public MestoRab getMr() {
      return this.mr;
    }

    public DelMrab_args setMr(MestoRab mr) {
      this.mr = mr;
      return this;
    }

    public void unsetMr() {
      this.mr = null;
    }

    /** Returns true if field mr is set (has been assigned a value) and false otherwise */
    public boolean isSetMr() {
      return this.mr != null;
    }

    public void setMrIsSet(boolean value) {
      if (!value) {
        this.mr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MR:
        if (value == null) {
          unsetMr();
        } else {
          setMr((MestoRab)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MR:
        return getMr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MR:
        return isSetMr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DelMrab_args)
        return this.equals((DelMrab_args)that);
      return false;
    }

    public boolean equals(DelMrab_args that) {
      if (that == null)
        return false;

      boolean this_present_mr = true && this.isSetMr();
      boolean that_present_mr = true && that.isSetMr();
      if (this_present_mr || that_present_mr) {
        if (!(this_present_mr && that_present_mr))
          return false;
        if (!this.mr.equals(that.mr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DelMrab_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DelMrab_args typedOther = (DelMrab_args)other;

      lastComparison = Boolean.valueOf(isSetMr()).compareTo(typedOther.isSetMr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mr, typedOther.mr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DelMrab_args(");
      boolean first = true;

      sb.append("mr:");
      if (this.mr == null) {
        sb.append("null");
      } else {
        sb.append(this.mr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelMrab_argsStandardSchemeFactory implements SchemeFactory {
      public DelMrab_argsStandardScheme getScheme() {
        return new DelMrab_argsStandardScheme();
      }
    }

    private static class DelMrab_argsStandardScheme extends StandardScheme<DelMrab_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelMrab_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.mr = new MestoRab();
                struct.mr.read(iprot);
                struct.setMrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelMrab_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mr != null) {
          oprot.writeFieldBegin(MR_FIELD_DESC);
          struct.mr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelMrab_argsTupleSchemeFactory implements SchemeFactory {
      public DelMrab_argsTupleScheme getScheme() {
        return new DelMrab_argsTupleScheme();
      }
    }

    private static class DelMrab_argsTupleScheme extends TupleScheme<DelMrab_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMr()) {
          struct.mr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelMrab_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mr = new MestoRab();
          struct.mr.read(iprot);
          struct.setMrIsSet(true);
        }
      }
    }

  }

  public static class DelMrab_result implements org.apache.thrift.TBase<DelMrab_result, DelMrab_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelMrab_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DelMrab_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DelMrab_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelMrab_result.class, metaDataMap);
    }

    public DelMrab_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelMrab_result(DelMrab_result other) {
    }

    public DelMrab_result deepCopy() {
      return new DelMrab_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DelMrab_result)
        return this.equals((DelMrab_result)that);
      return false;
    }

    public boolean equals(DelMrab_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DelMrab_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DelMrab_result typedOther = (DelMrab_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DelMrab_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelMrab_resultStandardSchemeFactory implements SchemeFactory {
      public DelMrab_resultStandardScheme getScheme() {
        return new DelMrab_resultStandardScheme();
      }
    }

    private static class DelMrab_resultStandardScheme extends StandardScheme<DelMrab_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelMrab_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelMrab_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelMrab_resultTupleSchemeFactory implements SchemeFactory {
      public DelMrab_resultTupleScheme getScheme() {
        return new DelMrab_resultTupleScheme();
      }
    }

    private static class DelMrab_resultTupleScheme extends TupleScheme<DelMrab_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelMrab_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getLogin_args implements org.apache.thrift.TBase<getLogin_args, getLogin_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLogin_args");

    private static final org.apache.thrift.protocol.TField VRACH_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("vrachPcod", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LPU_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("lpuPcod", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PODR_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("podrPcod", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLogin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLogin_argsTupleSchemeFactory());
    }

    public int vrachPcod; // required
    public int lpuPcod; // required
    public int podrPcod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VRACH_PCOD((short)1, "vrachPcod"),
      LPU_PCOD((short)2, "lpuPcod"),
      PODR_PCOD((short)3, "podrPcod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VRACH_PCOD
            return VRACH_PCOD;
          case 2: // LPU_PCOD
            return LPU_PCOD;
          case 3: // PODR_PCOD
            return PODR_PCOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VRACHPCOD_ISSET_ID = 0;
    private static final int __LPUPCOD_ISSET_ID = 1;
    private static final int __PODRPCOD_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VRACH_PCOD, new org.apache.thrift.meta_data.FieldMetaData("vrachPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LPU_PCOD, new org.apache.thrift.meta_data.FieldMetaData("lpuPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PODR_PCOD, new org.apache.thrift.meta_data.FieldMetaData("podrPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogin_args.class, metaDataMap);
    }

    public getLogin_args() {
    }

    public getLogin_args(
      int vrachPcod,
      int lpuPcod,
      int podrPcod)
    {
      this();
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogin_args(getLogin_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.vrachPcod = other.vrachPcod;
      this.lpuPcod = other.lpuPcod;
      this.podrPcod = other.podrPcod;
    }

    public getLogin_args deepCopy() {
      return new getLogin_args(this);
    }

    @Override
    public void clear() {
      setVrachPcodIsSet(false);
      this.vrachPcod = 0;
      setLpuPcodIsSet(false);
      this.lpuPcod = 0;
      setPodrPcodIsSet(false);
      this.podrPcod = 0;
    }

    public int getVrachPcod() {
      return this.vrachPcod;
    }

    public getLogin_args setVrachPcod(int vrachPcod) {
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      return this;
    }

    public void unsetVrachPcod() {
      __isset_bit_vector.clear(__VRACHPCOD_ISSET_ID);
    }

    /** Returns true if field vrachPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetVrachPcod() {
      return __isset_bit_vector.get(__VRACHPCOD_ISSET_ID);
    }

    public void setVrachPcodIsSet(boolean value) {
      __isset_bit_vector.set(__VRACHPCOD_ISSET_ID, value);
    }

    public int getLpuPcod() {
      return this.lpuPcod;
    }

    public getLogin_args setLpuPcod(int lpuPcod) {
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      return this;
    }

    public void unsetLpuPcod() {
      __isset_bit_vector.clear(__LPUPCOD_ISSET_ID);
    }

    /** Returns true if field lpuPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetLpuPcod() {
      return __isset_bit_vector.get(__LPUPCOD_ISSET_ID);
    }

    public void setLpuPcodIsSet(boolean value) {
      __isset_bit_vector.set(__LPUPCOD_ISSET_ID, value);
    }

    public int getPodrPcod() {
      return this.podrPcod;
    }

    public getLogin_args setPodrPcod(int podrPcod) {
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
      return this;
    }

    public void unsetPodrPcod() {
      __isset_bit_vector.clear(__PODRPCOD_ISSET_ID);
    }

    /** Returns true if field podrPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetPodrPcod() {
      return __isset_bit_vector.get(__PODRPCOD_ISSET_ID);
    }

    public void setPodrPcodIsSet(boolean value) {
      __isset_bit_vector.set(__PODRPCOD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VRACH_PCOD:
        if (value == null) {
          unsetVrachPcod();
        } else {
          setVrachPcod((Integer)value);
        }
        break;

      case LPU_PCOD:
        if (value == null) {
          unsetLpuPcod();
        } else {
          setLpuPcod((Integer)value);
        }
        break;

      case PODR_PCOD:
        if (value == null) {
          unsetPodrPcod();
        } else {
          setPodrPcod((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VRACH_PCOD:
        return Integer.valueOf(getVrachPcod());

      case LPU_PCOD:
        return Integer.valueOf(getLpuPcod());

      case PODR_PCOD:
        return Integer.valueOf(getPodrPcod());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VRACH_PCOD:
        return isSetVrachPcod();
      case LPU_PCOD:
        return isSetLpuPcod();
      case PODR_PCOD:
        return isSetPodrPcod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogin_args)
        return this.equals((getLogin_args)that);
      return false;
    }

    public boolean equals(getLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_vrachPcod = true;
      boolean that_present_vrachPcod = true;
      if (this_present_vrachPcod || that_present_vrachPcod) {
        if (!(this_present_vrachPcod && that_present_vrachPcod))
          return false;
        if (this.vrachPcod != that.vrachPcod)
          return false;
      }

      boolean this_present_lpuPcod = true;
      boolean that_present_lpuPcod = true;
      if (this_present_lpuPcod || that_present_lpuPcod) {
        if (!(this_present_lpuPcod && that_present_lpuPcod))
          return false;
        if (this.lpuPcod != that.lpuPcod)
          return false;
      }

      boolean this_present_podrPcod = true;
      boolean that_present_podrPcod = true;
      if (this_present_podrPcod || that_present_podrPcod) {
        if (!(this_present_podrPcod && that_present_podrPcod))
          return false;
        if (this.podrPcod != that.podrPcod)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLogin_args typedOther = (getLogin_args)other;

      lastComparison = Boolean.valueOf(isSetVrachPcod()).compareTo(typedOther.isSetVrachPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVrachPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vrachPcod, typedOther.vrachPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLpuPcod()).compareTo(typedOther.isSetLpuPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLpuPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lpuPcod, typedOther.lpuPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPodrPcod()).compareTo(typedOther.isSetPodrPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPodrPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.podrPcod, typedOther.podrPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogin_args(");
      boolean first = true;

      sb.append("vrachPcod:");
      sb.append(this.vrachPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lpuPcod:");
      sb.append(this.lpuPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("podrPcod:");
      sb.append(this.podrPcod);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLogin_argsStandardSchemeFactory implements SchemeFactory {
      public getLogin_argsStandardScheme getScheme() {
        return new getLogin_argsStandardScheme();
      }
    }

    private static class getLogin_argsStandardScheme extends StandardScheme<getLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VRACH_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vrachPcod = iprot.readI32();
                struct.setVrachPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LPU_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lpuPcod = iprot.readI32();
                struct.setLpuPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PODR_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.podrPcod = iprot.readI32();
                struct.setPodrPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VRACH_PCOD_FIELD_DESC);
        oprot.writeI32(struct.vrachPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LPU_PCOD_FIELD_DESC);
        oprot.writeI32(struct.lpuPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PODR_PCOD_FIELD_DESC);
        oprot.writeI32(struct.podrPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLogin_argsTupleSchemeFactory implements SchemeFactory {
      public getLogin_argsTupleScheme getScheme() {
        return new getLogin_argsTupleScheme();
      }
    }

    private static class getLogin_argsTupleScheme extends TupleScheme<getLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVrachPcod()) {
          optionals.set(0);
        }
        if (struct.isSetLpuPcod()) {
          optionals.set(1);
        }
        if (struct.isSetPodrPcod()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVrachPcod()) {
          oprot.writeI32(struct.vrachPcod);
        }
        if (struct.isSetLpuPcod()) {
          oprot.writeI32(struct.lpuPcod);
        }
        if (struct.isSetPodrPcod()) {
          oprot.writeI32(struct.podrPcod);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.vrachPcod = iprot.readI32();
          struct.setVrachPcodIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lpuPcod = iprot.readI32();
          struct.setLpuPcodIsSet(true);
        }
        if (incoming.get(2)) {
          struct.podrPcod = iprot.readI32();
          struct.setPodrPcodIsSet(true);
        }
      }
    }

  }

  public static class getLogin_result implements org.apache.thrift.TBase<getLogin_result, getLogin_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLogin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLogin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLogin_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLogin_result.class, metaDataMap);
    }

    public getLogin_result() {
    }

    public getLogin_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogin_result(getLogin_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getLogin_result deepCopy() {
      return new getLogin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getLogin_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogin_result)
        return this.equals((getLogin_result)that);
      return false;
    }

    public boolean equals(getLogin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLogin_result typedOther = (getLogin_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLogin_resultStandardSchemeFactory implements SchemeFactory {
      public getLogin_resultStandardScheme getScheme() {
        return new getLogin_resultStandardScheme();
      }
    }

    private static class getLogin_resultStandardScheme extends StandardScheme<getLogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLogin_resultTupleSchemeFactory implements SchemeFactory {
      public getLogin_resultTupleScheme getScheme() {
        return new getLogin_resultTupleScheme();
      }
    }

    private static class getLogin_resultTupleScheme extends TupleScheme<getLogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setPassword_args implements org.apache.thrift.TBase<setPassword_args, setPassword_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPassword_args");

    private static final org.apache.thrift.protocol.TField VRACH_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("vrachPcod", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LPU_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("lpuPcod", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PODR_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("podrPcod", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("login", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPassword_argsTupleSchemeFactory());
    }

    public int vrachPcod; // required
    public int lpuPcod; // required
    public int podrPcod; // required
    public String login; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VRACH_PCOD((short)1, "vrachPcod"),
      LPU_PCOD((short)2, "lpuPcod"),
      PODR_PCOD((short)3, "podrPcod"),
      LOGIN((short)4, "login");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VRACH_PCOD
            return VRACH_PCOD;
          case 2: // LPU_PCOD
            return LPU_PCOD;
          case 3: // PODR_PCOD
            return PODR_PCOD;
          case 4: // LOGIN
            return LOGIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VRACHPCOD_ISSET_ID = 0;
    private static final int __LPUPCOD_ISSET_ID = 1;
    private static final int __PODRPCOD_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VRACH_PCOD, new org.apache.thrift.meta_data.FieldMetaData("vrachPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LPU_PCOD, new org.apache.thrift.meta_data.FieldMetaData("lpuPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PODR_PCOD, new org.apache.thrift.meta_data.FieldMetaData("podrPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOGIN, new org.apache.thrift.meta_data.FieldMetaData("login", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPassword_args.class, metaDataMap);
    }

    public setPassword_args() {
    }

    public setPassword_args(
      int vrachPcod,
      int lpuPcod,
      int podrPcod,
      String login)
    {
      this();
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
      this.login = login;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPassword_args(setPassword_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.vrachPcod = other.vrachPcod;
      this.lpuPcod = other.lpuPcod;
      this.podrPcod = other.podrPcod;
      if (other.isSetLogin()) {
        this.login = other.login;
      }
    }

    public setPassword_args deepCopy() {
      return new setPassword_args(this);
    }

    @Override
    public void clear() {
      setVrachPcodIsSet(false);
      this.vrachPcod = 0;
      setLpuPcodIsSet(false);
      this.lpuPcod = 0;
      setPodrPcodIsSet(false);
      this.podrPcod = 0;
      this.login = null;
    }

    public int getVrachPcod() {
      return this.vrachPcod;
    }

    public setPassword_args setVrachPcod(int vrachPcod) {
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      return this;
    }

    public void unsetVrachPcod() {
      __isset_bit_vector.clear(__VRACHPCOD_ISSET_ID);
    }

    /** Returns true if field vrachPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetVrachPcod() {
      return __isset_bit_vector.get(__VRACHPCOD_ISSET_ID);
    }

    public void setVrachPcodIsSet(boolean value) {
      __isset_bit_vector.set(__VRACHPCOD_ISSET_ID, value);
    }

    public int getLpuPcod() {
      return this.lpuPcod;
    }

    public setPassword_args setLpuPcod(int lpuPcod) {
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      return this;
    }

    public void unsetLpuPcod() {
      __isset_bit_vector.clear(__LPUPCOD_ISSET_ID);
    }

    /** Returns true if field lpuPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetLpuPcod() {
      return __isset_bit_vector.get(__LPUPCOD_ISSET_ID);
    }

    public void setLpuPcodIsSet(boolean value) {
      __isset_bit_vector.set(__LPUPCOD_ISSET_ID, value);
    }

    public int getPodrPcod() {
      return this.podrPcod;
    }

    public setPassword_args setPodrPcod(int podrPcod) {
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
      return this;
    }

    public void unsetPodrPcod() {
      __isset_bit_vector.clear(__PODRPCOD_ISSET_ID);
    }

    /** Returns true if field podrPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetPodrPcod() {
      return __isset_bit_vector.get(__PODRPCOD_ISSET_ID);
    }

    public void setPodrPcodIsSet(boolean value) {
      __isset_bit_vector.set(__PODRPCOD_ISSET_ID, value);
    }

    public String getLogin() {
      return this.login;
    }

    public setPassword_args setLogin(String login) {
      this.login = login;
      return this;
    }

    public void unsetLogin() {
      this.login = null;
    }

    /** Returns true if field login is set (has been assigned a value) and false otherwise */
    public boolean isSetLogin() {
      return this.login != null;
    }

    public void setLoginIsSet(boolean value) {
      if (!value) {
        this.login = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VRACH_PCOD:
        if (value == null) {
          unsetVrachPcod();
        } else {
          setVrachPcod((Integer)value);
        }
        break;

      case LPU_PCOD:
        if (value == null) {
          unsetLpuPcod();
        } else {
          setLpuPcod((Integer)value);
        }
        break;

      case PODR_PCOD:
        if (value == null) {
          unsetPodrPcod();
        } else {
          setPodrPcod((Integer)value);
        }
        break;

      case LOGIN:
        if (value == null) {
          unsetLogin();
        } else {
          setLogin((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VRACH_PCOD:
        return Integer.valueOf(getVrachPcod());

      case LPU_PCOD:
        return Integer.valueOf(getLpuPcod());

      case PODR_PCOD:
        return Integer.valueOf(getPodrPcod());

      case LOGIN:
        return getLogin();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VRACH_PCOD:
        return isSetVrachPcod();
      case LPU_PCOD:
        return isSetLpuPcod();
      case PODR_PCOD:
        return isSetPodrPcod();
      case LOGIN:
        return isSetLogin();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPassword_args)
        return this.equals((setPassword_args)that);
      return false;
    }

    public boolean equals(setPassword_args that) {
      if (that == null)
        return false;

      boolean this_present_vrachPcod = true;
      boolean that_present_vrachPcod = true;
      if (this_present_vrachPcod || that_present_vrachPcod) {
        if (!(this_present_vrachPcod && that_present_vrachPcod))
          return false;
        if (this.vrachPcod != that.vrachPcod)
          return false;
      }

      boolean this_present_lpuPcod = true;
      boolean that_present_lpuPcod = true;
      if (this_present_lpuPcod || that_present_lpuPcod) {
        if (!(this_present_lpuPcod && that_present_lpuPcod))
          return false;
        if (this.lpuPcod != that.lpuPcod)
          return false;
      }

      boolean this_present_podrPcod = true;
      boolean that_present_podrPcod = true;
      if (this_present_podrPcod || that_present_podrPcod) {
        if (!(this_present_podrPcod && that_present_podrPcod))
          return false;
        if (this.podrPcod != that.podrPcod)
          return false;
      }

      boolean this_present_login = true && this.isSetLogin();
      boolean that_present_login = true && that.isSetLogin();
      if (this_present_login || that_present_login) {
        if (!(this_present_login && that_present_login))
          return false;
        if (!this.login.equals(that.login))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setPassword_args typedOther = (setPassword_args)other;

      lastComparison = Boolean.valueOf(isSetVrachPcod()).compareTo(typedOther.isSetVrachPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVrachPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vrachPcod, typedOther.vrachPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLpuPcod()).compareTo(typedOther.isSetLpuPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLpuPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lpuPcod, typedOther.lpuPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPodrPcod()).compareTo(typedOther.isSetPodrPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPodrPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.podrPcod, typedOther.podrPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLogin()).compareTo(typedOther.isSetLogin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.login, typedOther.login);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPassword_args(");
      boolean first = true;

      sb.append("vrachPcod:");
      sb.append(this.vrachPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lpuPcod:");
      sb.append(this.lpuPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("podrPcod:");
      sb.append(this.podrPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("login:");
      if (this.login == null) {
        sb.append("null");
      } else {
        sb.append(this.login);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPassword_argsStandardSchemeFactory implements SchemeFactory {
      public setPassword_argsStandardScheme getScheme() {
        return new setPassword_argsStandardScheme();
      }
    }

    private static class setPassword_argsStandardScheme extends StandardScheme<setPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VRACH_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vrachPcod = iprot.readI32();
                struct.setVrachPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LPU_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lpuPcod = iprot.readI32();
                struct.setLpuPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PODR_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.podrPcod = iprot.readI32();
                struct.setPodrPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LOGIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.login = iprot.readString();
                struct.setLoginIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VRACH_PCOD_FIELD_DESC);
        oprot.writeI32(struct.vrachPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LPU_PCOD_FIELD_DESC);
        oprot.writeI32(struct.lpuPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PODR_PCOD_FIELD_DESC);
        oprot.writeI32(struct.podrPcod);
        oprot.writeFieldEnd();
        if (struct.login != null) {
          oprot.writeFieldBegin(LOGIN_FIELD_DESC);
          oprot.writeString(struct.login);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPassword_argsTupleSchemeFactory implements SchemeFactory {
      public setPassword_argsTupleScheme getScheme() {
        return new setPassword_argsTupleScheme();
      }
    }

    private static class setPassword_argsTupleScheme extends TupleScheme<setPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVrachPcod()) {
          optionals.set(0);
        }
        if (struct.isSetLpuPcod()) {
          optionals.set(1);
        }
        if (struct.isSetPodrPcod()) {
          optionals.set(2);
        }
        if (struct.isSetLogin()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetVrachPcod()) {
          oprot.writeI32(struct.vrachPcod);
        }
        if (struct.isSetLpuPcod()) {
          oprot.writeI32(struct.lpuPcod);
        }
        if (struct.isSetPodrPcod()) {
          oprot.writeI32(struct.podrPcod);
        }
        if (struct.isSetLogin()) {
          oprot.writeString(struct.login);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.vrachPcod = iprot.readI32();
          struct.setVrachPcodIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lpuPcod = iprot.readI32();
          struct.setLpuPcodIsSet(true);
        }
        if (incoming.get(2)) {
          struct.podrPcod = iprot.readI32();
          struct.setPodrPcodIsSet(true);
        }
        if (incoming.get(3)) {
          struct.login = iprot.readString();
          struct.setLoginIsSet(true);
        }
      }
    }

  }

  public static class setPassword_result implements org.apache.thrift.TBase<setPassword_result, setPassword_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPassword_resultTupleSchemeFactory());
    }

    public UserIdPassword success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserIdPassword.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPassword_result.class, metaDataMap);
    }

    public setPassword_result() {
    }

    public setPassword_result(
      UserIdPassword success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPassword_result(setPassword_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserIdPassword(other.success);
      }
    }

    public setPassword_result deepCopy() {
      return new setPassword_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UserIdPassword getSuccess() {
      return this.success;
    }

    public setPassword_result setSuccess(UserIdPassword success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserIdPassword)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPassword_result)
        return this.equals((setPassword_result)that);
      return false;
    }

    public boolean equals(setPassword_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setPassword_result typedOther = (setPassword_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPassword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPassword_resultStandardSchemeFactory implements SchemeFactory {
      public setPassword_resultStandardScheme getScheme() {
        return new setPassword_resultStandardScheme();
      }
    }

    private static class setPassword_resultStandardScheme extends StandardScheme<setPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserIdPassword();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPassword_resultTupleSchemeFactory implements SchemeFactory {
      public setPassword_resultTupleScheme getScheme() {
        return new setPassword_resultTupleScheme();
      }
    }

    private static class setPassword_resultTupleScheme extends TupleScheme<setPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UserIdPassword();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class remPassword_args implements org.apache.thrift.TBase<remPassword_args, remPassword_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remPassword_args");

    private static final org.apache.thrift.protocol.TField VRACH_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("vrachPcod", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LPU_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("lpuPcod", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PODR_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("podrPcod", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new remPassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new remPassword_argsTupleSchemeFactory());
    }

    public int vrachPcod; // required
    public int lpuPcod; // required
    public int podrPcod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VRACH_PCOD((short)1, "vrachPcod"),
      LPU_PCOD((short)2, "lpuPcod"),
      PODR_PCOD((short)3, "podrPcod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VRACH_PCOD
            return VRACH_PCOD;
          case 2: // LPU_PCOD
            return LPU_PCOD;
          case 3: // PODR_PCOD
            return PODR_PCOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VRACHPCOD_ISSET_ID = 0;
    private static final int __LPUPCOD_ISSET_ID = 1;
    private static final int __PODRPCOD_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VRACH_PCOD, new org.apache.thrift.meta_data.FieldMetaData("vrachPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LPU_PCOD, new org.apache.thrift.meta_data.FieldMetaData("lpuPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PODR_PCOD, new org.apache.thrift.meta_data.FieldMetaData("podrPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remPassword_args.class, metaDataMap);
    }

    public remPassword_args() {
    }

    public remPassword_args(
      int vrachPcod,
      int lpuPcod,
      int podrPcod)
    {
      this();
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public remPassword_args(remPassword_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.vrachPcod = other.vrachPcod;
      this.lpuPcod = other.lpuPcod;
      this.podrPcod = other.podrPcod;
    }

    public remPassword_args deepCopy() {
      return new remPassword_args(this);
    }

    @Override
    public void clear() {
      setVrachPcodIsSet(false);
      this.vrachPcod = 0;
      setLpuPcodIsSet(false);
      this.lpuPcod = 0;
      setPodrPcodIsSet(false);
      this.podrPcod = 0;
    }

    public int getVrachPcod() {
      return this.vrachPcod;
    }

    public remPassword_args setVrachPcod(int vrachPcod) {
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      return this;
    }

    public void unsetVrachPcod() {
      __isset_bit_vector.clear(__VRACHPCOD_ISSET_ID);
    }

    /** Returns true if field vrachPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetVrachPcod() {
      return __isset_bit_vector.get(__VRACHPCOD_ISSET_ID);
    }

    public void setVrachPcodIsSet(boolean value) {
      __isset_bit_vector.set(__VRACHPCOD_ISSET_ID, value);
    }

    public int getLpuPcod() {
      return this.lpuPcod;
    }

    public remPassword_args setLpuPcod(int lpuPcod) {
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      return this;
    }

    public void unsetLpuPcod() {
      __isset_bit_vector.clear(__LPUPCOD_ISSET_ID);
    }

    /** Returns true if field lpuPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetLpuPcod() {
      return __isset_bit_vector.get(__LPUPCOD_ISSET_ID);
    }

    public void setLpuPcodIsSet(boolean value) {
      __isset_bit_vector.set(__LPUPCOD_ISSET_ID, value);
    }

    public int getPodrPcod() {
      return this.podrPcod;
    }

    public remPassword_args setPodrPcod(int podrPcod) {
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
      return this;
    }

    public void unsetPodrPcod() {
      __isset_bit_vector.clear(__PODRPCOD_ISSET_ID);
    }

    /** Returns true if field podrPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetPodrPcod() {
      return __isset_bit_vector.get(__PODRPCOD_ISSET_ID);
    }

    public void setPodrPcodIsSet(boolean value) {
      __isset_bit_vector.set(__PODRPCOD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VRACH_PCOD:
        if (value == null) {
          unsetVrachPcod();
        } else {
          setVrachPcod((Integer)value);
        }
        break;

      case LPU_PCOD:
        if (value == null) {
          unsetLpuPcod();
        } else {
          setLpuPcod((Integer)value);
        }
        break;

      case PODR_PCOD:
        if (value == null) {
          unsetPodrPcod();
        } else {
          setPodrPcod((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VRACH_PCOD:
        return Integer.valueOf(getVrachPcod());

      case LPU_PCOD:
        return Integer.valueOf(getLpuPcod());

      case PODR_PCOD:
        return Integer.valueOf(getPodrPcod());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VRACH_PCOD:
        return isSetVrachPcod();
      case LPU_PCOD:
        return isSetLpuPcod();
      case PODR_PCOD:
        return isSetPodrPcod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof remPassword_args)
        return this.equals((remPassword_args)that);
      return false;
    }

    public boolean equals(remPassword_args that) {
      if (that == null)
        return false;

      boolean this_present_vrachPcod = true;
      boolean that_present_vrachPcod = true;
      if (this_present_vrachPcod || that_present_vrachPcod) {
        if (!(this_present_vrachPcod && that_present_vrachPcod))
          return false;
        if (this.vrachPcod != that.vrachPcod)
          return false;
      }

      boolean this_present_lpuPcod = true;
      boolean that_present_lpuPcod = true;
      if (this_present_lpuPcod || that_present_lpuPcod) {
        if (!(this_present_lpuPcod && that_present_lpuPcod))
          return false;
        if (this.lpuPcod != that.lpuPcod)
          return false;
      }

      boolean this_present_podrPcod = true;
      boolean that_present_podrPcod = true;
      if (this_present_podrPcod || that_present_podrPcod) {
        if (!(this_present_podrPcod && that_present_podrPcod))
          return false;
        if (this.podrPcod != that.podrPcod)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(remPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      remPassword_args typedOther = (remPassword_args)other;

      lastComparison = Boolean.valueOf(isSetVrachPcod()).compareTo(typedOther.isSetVrachPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVrachPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vrachPcod, typedOther.vrachPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLpuPcod()).compareTo(typedOther.isSetLpuPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLpuPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lpuPcod, typedOther.lpuPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPodrPcod()).compareTo(typedOther.isSetPodrPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPodrPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.podrPcod, typedOther.podrPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("remPassword_args(");
      boolean first = true;

      sb.append("vrachPcod:");
      sb.append(this.vrachPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lpuPcod:");
      sb.append(this.lpuPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("podrPcod:");
      sb.append(this.podrPcod);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class remPassword_argsStandardSchemeFactory implements SchemeFactory {
      public remPassword_argsStandardScheme getScheme() {
        return new remPassword_argsStandardScheme();
      }
    }

    private static class remPassword_argsStandardScheme extends StandardScheme<remPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, remPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VRACH_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vrachPcod = iprot.readI32();
                struct.setVrachPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LPU_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lpuPcod = iprot.readI32();
                struct.setLpuPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PODR_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.podrPcod = iprot.readI32();
                struct.setPodrPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, remPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VRACH_PCOD_FIELD_DESC);
        oprot.writeI32(struct.vrachPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LPU_PCOD_FIELD_DESC);
        oprot.writeI32(struct.lpuPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PODR_PCOD_FIELD_DESC);
        oprot.writeI32(struct.podrPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class remPassword_argsTupleSchemeFactory implements SchemeFactory {
      public remPassword_argsTupleScheme getScheme() {
        return new remPassword_argsTupleScheme();
      }
    }

    private static class remPassword_argsTupleScheme extends TupleScheme<remPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, remPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVrachPcod()) {
          optionals.set(0);
        }
        if (struct.isSetLpuPcod()) {
          optionals.set(1);
        }
        if (struct.isSetPodrPcod()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVrachPcod()) {
          oprot.writeI32(struct.vrachPcod);
        }
        if (struct.isSetLpuPcod()) {
          oprot.writeI32(struct.lpuPcod);
        }
        if (struct.isSetPodrPcod()) {
          oprot.writeI32(struct.podrPcod);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, remPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.vrachPcod = iprot.readI32();
          struct.setVrachPcodIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lpuPcod = iprot.readI32();
          struct.setLpuPcodIsSet(true);
        }
        if (incoming.get(2)) {
          struct.podrPcod = iprot.readI32();
          struct.setPodrPcodIsSet(true);
        }
      }
    }

  }

  public static class remPassword_result implements org.apache.thrift.TBase<remPassword_result, remPassword_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remPassword_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new remPassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new remPassword_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remPassword_result.class, metaDataMap);
    }

    public remPassword_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public remPassword_result(remPassword_result other) {
    }

    public remPassword_result deepCopy() {
      return new remPassword_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof remPassword_result)
        return this.equals((remPassword_result)that);
      return false;
    }

    public boolean equals(remPassword_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(remPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      remPassword_result typedOther = (remPassword_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("remPassword_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class remPassword_resultStandardSchemeFactory implements SchemeFactory {
      public remPassword_resultStandardScheme getScheme() {
        return new remPassword_resultStandardScheme();
      }
    }

    private static class remPassword_resultStandardScheme extends StandardScheme<remPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, remPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, remPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class remPassword_resultTupleSchemeFactory implements SchemeFactory {
      public remPassword_resultTupleScheme getScheme() {
        return new remPassword_resultTupleScheme();
      }
    }

    private static class remPassword_resultTupleScheme extends TupleScheme<remPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, remPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, remPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getPermissions_args implements org.apache.thrift.TBase<getPermissions_args, getPermissions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPermissions_args");

    private static final org.apache.thrift.protocol.TField VRACH_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("vrachPcod", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LPU_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("lpuPcod", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PODR_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("podrPcod", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPermissions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPermissions_argsTupleSchemeFactory());
    }

    public int vrachPcod; // required
    public int lpuPcod; // required
    public int podrPcod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VRACH_PCOD((short)1, "vrachPcod"),
      LPU_PCOD((short)2, "lpuPcod"),
      PODR_PCOD((short)3, "podrPcod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VRACH_PCOD
            return VRACH_PCOD;
          case 2: // LPU_PCOD
            return LPU_PCOD;
          case 3: // PODR_PCOD
            return PODR_PCOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VRACHPCOD_ISSET_ID = 0;
    private static final int __LPUPCOD_ISSET_ID = 1;
    private static final int __PODRPCOD_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VRACH_PCOD, new org.apache.thrift.meta_data.FieldMetaData("vrachPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LPU_PCOD, new org.apache.thrift.meta_data.FieldMetaData("lpuPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PODR_PCOD, new org.apache.thrift.meta_data.FieldMetaData("podrPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPermissions_args.class, metaDataMap);
    }

    public getPermissions_args() {
    }

    public getPermissions_args(
      int vrachPcod,
      int lpuPcod,
      int podrPcod)
    {
      this();
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPermissions_args(getPermissions_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.vrachPcod = other.vrachPcod;
      this.lpuPcod = other.lpuPcod;
      this.podrPcod = other.podrPcod;
    }

    public getPermissions_args deepCopy() {
      return new getPermissions_args(this);
    }

    @Override
    public void clear() {
      setVrachPcodIsSet(false);
      this.vrachPcod = 0;
      setLpuPcodIsSet(false);
      this.lpuPcod = 0;
      setPodrPcodIsSet(false);
      this.podrPcod = 0;
    }

    public int getVrachPcod() {
      return this.vrachPcod;
    }

    public getPermissions_args setVrachPcod(int vrachPcod) {
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      return this;
    }

    public void unsetVrachPcod() {
      __isset_bit_vector.clear(__VRACHPCOD_ISSET_ID);
    }

    /** Returns true if field vrachPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetVrachPcod() {
      return __isset_bit_vector.get(__VRACHPCOD_ISSET_ID);
    }

    public void setVrachPcodIsSet(boolean value) {
      __isset_bit_vector.set(__VRACHPCOD_ISSET_ID, value);
    }

    public int getLpuPcod() {
      return this.lpuPcod;
    }

    public getPermissions_args setLpuPcod(int lpuPcod) {
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      return this;
    }

    public void unsetLpuPcod() {
      __isset_bit_vector.clear(__LPUPCOD_ISSET_ID);
    }

    /** Returns true if field lpuPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetLpuPcod() {
      return __isset_bit_vector.get(__LPUPCOD_ISSET_ID);
    }

    public void setLpuPcodIsSet(boolean value) {
      __isset_bit_vector.set(__LPUPCOD_ISSET_ID, value);
    }

    public int getPodrPcod() {
      return this.podrPcod;
    }

    public getPermissions_args setPodrPcod(int podrPcod) {
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
      return this;
    }

    public void unsetPodrPcod() {
      __isset_bit_vector.clear(__PODRPCOD_ISSET_ID);
    }

    /** Returns true if field podrPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetPodrPcod() {
      return __isset_bit_vector.get(__PODRPCOD_ISSET_ID);
    }

    public void setPodrPcodIsSet(boolean value) {
      __isset_bit_vector.set(__PODRPCOD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VRACH_PCOD:
        if (value == null) {
          unsetVrachPcod();
        } else {
          setVrachPcod((Integer)value);
        }
        break;

      case LPU_PCOD:
        if (value == null) {
          unsetLpuPcod();
        } else {
          setLpuPcod((Integer)value);
        }
        break;

      case PODR_PCOD:
        if (value == null) {
          unsetPodrPcod();
        } else {
          setPodrPcod((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VRACH_PCOD:
        return Integer.valueOf(getVrachPcod());

      case LPU_PCOD:
        return Integer.valueOf(getLpuPcod());

      case PODR_PCOD:
        return Integer.valueOf(getPodrPcod());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VRACH_PCOD:
        return isSetVrachPcod();
      case LPU_PCOD:
        return isSetLpuPcod();
      case PODR_PCOD:
        return isSetPodrPcod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPermissions_args)
        return this.equals((getPermissions_args)that);
      return false;
    }

    public boolean equals(getPermissions_args that) {
      if (that == null)
        return false;

      boolean this_present_vrachPcod = true;
      boolean that_present_vrachPcod = true;
      if (this_present_vrachPcod || that_present_vrachPcod) {
        if (!(this_present_vrachPcod && that_present_vrachPcod))
          return false;
        if (this.vrachPcod != that.vrachPcod)
          return false;
      }

      boolean this_present_lpuPcod = true;
      boolean that_present_lpuPcod = true;
      if (this_present_lpuPcod || that_present_lpuPcod) {
        if (!(this_present_lpuPcod && that_present_lpuPcod))
          return false;
        if (this.lpuPcod != that.lpuPcod)
          return false;
      }

      boolean this_present_podrPcod = true;
      boolean that_present_podrPcod = true;
      if (this_present_podrPcod || that_present_podrPcod) {
        if (!(this_present_podrPcod && that_present_podrPcod))
          return false;
        if (this.podrPcod != that.podrPcod)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPermissions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPermissions_args typedOther = (getPermissions_args)other;

      lastComparison = Boolean.valueOf(isSetVrachPcod()).compareTo(typedOther.isSetVrachPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVrachPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vrachPcod, typedOther.vrachPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLpuPcod()).compareTo(typedOther.isSetLpuPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLpuPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lpuPcod, typedOther.lpuPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPodrPcod()).compareTo(typedOther.isSetPodrPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPodrPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.podrPcod, typedOther.podrPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPermissions_args(");
      boolean first = true;

      sb.append("vrachPcod:");
      sb.append(this.vrachPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lpuPcod:");
      sb.append(this.lpuPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("podrPcod:");
      sb.append(this.podrPcod);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPermissions_argsStandardSchemeFactory implements SchemeFactory {
      public getPermissions_argsStandardScheme getScheme() {
        return new getPermissions_argsStandardScheme();
      }
    }

    private static class getPermissions_argsStandardScheme extends StandardScheme<getPermissions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPermissions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VRACH_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vrachPcod = iprot.readI32();
                struct.setVrachPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LPU_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lpuPcod = iprot.readI32();
                struct.setLpuPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PODR_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.podrPcod = iprot.readI32();
                struct.setPodrPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPermissions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VRACH_PCOD_FIELD_DESC);
        oprot.writeI32(struct.vrachPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LPU_PCOD_FIELD_DESC);
        oprot.writeI32(struct.lpuPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PODR_PCOD_FIELD_DESC);
        oprot.writeI32(struct.podrPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPermissions_argsTupleSchemeFactory implements SchemeFactory {
      public getPermissions_argsTupleScheme getScheme() {
        return new getPermissions_argsTupleScheme();
      }
    }

    private static class getPermissions_argsTupleScheme extends TupleScheme<getPermissions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPermissions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVrachPcod()) {
          optionals.set(0);
        }
        if (struct.isSetLpuPcod()) {
          optionals.set(1);
        }
        if (struct.isSetPodrPcod()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVrachPcod()) {
          oprot.writeI32(struct.vrachPcod);
        }
        if (struct.isSetLpuPcod()) {
          oprot.writeI32(struct.lpuPcod);
        }
        if (struct.isSetPodrPcod()) {
          oprot.writeI32(struct.podrPcod);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPermissions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.vrachPcod = iprot.readI32();
          struct.setVrachPcodIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lpuPcod = iprot.readI32();
          struct.setLpuPcodIsSet(true);
        }
        if (incoming.get(2)) {
          struct.podrPcod = iprot.readI32();
          struct.setPodrPcodIsSet(true);
        }
      }
    }

  }

  public static class getPermissions_result implements org.apache.thrift.TBase<getPermissions_result, getPermissions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPermissions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPermissions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPermissions_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPermissions_result.class, metaDataMap);
    }

    public getPermissions_result() {
    }

    public getPermissions_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPermissions_result(getPermissions_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getPermissions_result deepCopy() {
      return new getPermissions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getPermissions_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPermissions_result)
        return this.equals((getPermissions_result)that);
      return false;
    }

    public boolean equals(getPermissions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPermissions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPermissions_result typedOther = (getPermissions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPermissions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPermissions_resultStandardSchemeFactory implements SchemeFactory {
      public getPermissions_resultStandardScheme getScheme() {
        return new getPermissions_resultStandardScheme();
      }
    }

    private static class getPermissions_resultStandardScheme extends StandardScheme<getPermissions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPermissions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPermissions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPermissions_resultTupleSchemeFactory implements SchemeFactory {
      public getPermissions_resultTupleScheme getScheme() {
        return new getPermissions_resultTupleScheme();
      }
    }

    private static class getPermissions_resultTupleScheme extends TupleScheme<getPermissions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPermissions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPermissions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setPermissions_args implements org.apache.thrift.TBase<setPermissions_args, setPermissions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPermissions_args");

    private static final org.apache.thrift.protocol.TField VRACH_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("vrachPcod", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LPU_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("lpuPcod", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PODR_PCOD_FIELD_DESC = new org.apache.thrift.protocol.TField("podrPcod", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PDOST_FIELD_DESC = new org.apache.thrift.protocol.TField("pdost", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPermissions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPermissions_argsTupleSchemeFactory());
    }

    public int vrachPcod; // required
    public int lpuPcod; // required
    public int podrPcod; // required
    public String pdost; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VRACH_PCOD((short)1, "vrachPcod"),
      LPU_PCOD((short)2, "lpuPcod"),
      PODR_PCOD((short)3, "podrPcod"),
      PDOST((short)4, "pdost");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VRACH_PCOD
            return VRACH_PCOD;
          case 2: // LPU_PCOD
            return LPU_PCOD;
          case 3: // PODR_PCOD
            return PODR_PCOD;
          case 4: // PDOST
            return PDOST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VRACHPCOD_ISSET_ID = 0;
    private static final int __LPUPCOD_ISSET_ID = 1;
    private static final int __PODRPCOD_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VRACH_PCOD, new org.apache.thrift.meta_data.FieldMetaData("vrachPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LPU_PCOD, new org.apache.thrift.meta_data.FieldMetaData("lpuPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PODR_PCOD, new org.apache.thrift.meta_data.FieldMetaData("podrPcod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PDOST, new org.apache.thrift.meta_data.FieldMetaData("pdost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPermissions_args.class, metaDataMap);
    }

    public setPermissions_args() {
    }

    public setPermissions_args(
      int vrachPcod,
      int lpuPcod,
      int podrPcod,
      String pdost)
    {
      this();
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
      this.pdost = pdost;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPermissions_args(setPermissions_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.vrachPcod = other.vrachPcod;
      this.lpuPcod = other.lpuPcod;
      this.podrPcod = other.podrPcod;
      if (other.isSetPdost()) {
        this.pdost = other.pdost;
      }
    }

    public setPermissions_args deepCopy() {
      return new setPermissions_args(this);
    }

    @Override
    public void clear() {
      setVrachPcodIsSet(false);
      this.vrachPcod = 0;
      setLpuPcodIsSet(false);
      this.lpuPcod = 0;
      setPodrPcodIsSet(false);
      this.podrPcod = 0;
      this.pdost = null;
    }

    public int getVrachPcod() {
      return this.vrachPcod;
    }

    public setPermissions_args setVrachPcod(int vrachPcod) {
      this.vrachPcod = vrachPcod;
      setVrachPcodIsSet(true);
      return this;
    }

    public void unsetVrachPcod() {
      __isset_bit_vector.clear(__VRACHPCOD_ISSET_ID);
    }

    /** Returns true if field vrachPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetVrachPcod() {
      return __isset_bit_vector.get(__VRACHPCOD_ISSET_ID);
    }

    public void setVrachPcodIsSet(boolean value) {
      __isset_bit_vector.set(__VRACHPCOD_ISSET_ID, value);
    }

    public int getLpuPcod() {
      return this.lpuPcod;
    }

    public setPermissions_args setLpuPcod(int lpuPcod) {
      this.lpuPcod = lpuPcod;
      setLpuPcodIsSet(true);
      return this;
    }

    public void unsetLpuPcod() {
      __isset_bit_vector.clear(__LPUPCOD_ISSET_ID);
    }

    /** Returns true if field lpuPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetLpuPcod() {
      return __isset_bit_vector.get(__LPUPCOD_ISSET_ID);
    }

    public void setLpuPcodIsSet(boolean value) {
      __isset_bit_vector.set(__LPUPCOD_ISSET_ID, value);
    }

    public int getPodrPcod() {
      return this.podrPcod;
    }

    public setPermissions_args setPodrPcod(int podrPcod) {
      this.podrPcod = podrPcod;
      setPodrPcodIsSet(true);
      return this;
    }

    public void unsetPodrPcod() {
      __isset_bit_vector.clear(__PODRPCOD_ISSET_ID);
    }

    /** Returns true if field podrPcod is set (has been assigned a value) and false otherwise */
    public boolean isSetPodrPcod() {
      return __isset_bit_vector.get(__PODRPCOD_ISSET_ID);
    }

    public void setPodrPcodIsSet(boolean value) {
      __isset_bit_vector.set(__PODRPCOD_ISSET_ID, value);
    }

    public String getPdost() {
      return this.pdost;
    }

    public setPermissions_args setPdost(String pdost) {
      this.pdost = pdost;
      return this;
    }

    public void unsetPdost() {
      this.pdost = null;
    }

    /** Returns true if field pdost is set (has been assigned a value) and false otherwise */
    public boolean isSetPdost() {
      return this.pdost != null;
    }

    public void setPdostIsSet(boolean value) {
      if (!value) {
        this.pdost = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VRACH_PCOD:
        if (value == null) {
          unsetVrachPcod();
        } else {
          setVrachPcod((Integer)value);
        }
        break;

      case LPU_PCOD:
        if (value == null) {
          unsetLpuPcod();
        } else {
          setLpuPcod((Integer)value);
        }
        break;

      case PODR_PCOD:
        if (value == null) {
          unsetPodrPcod();
        } else {
          setPodrPcod((Integer)value);
        }
        break;

      case PDOST:
        if (value == null) {
          unsetPdost();
        } else {
          setPdost((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VRACH_PCOD:
        return Integer.valueOf(getVrachPcod());

      case LPU_PCOD:
        return Integer.valueOf(getLpuPcod());

      case PODR_PCOD:
        return Integer.valueOf(getPodrPcod());

      case PDOST:
        return getPdost();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VRACH_PCOD:
        return isSetVrachPcod();
      case LPU_PCOD:
        return isSetLpuPcod();
      case PODR_PCOD:
        return isSetPodrPcod();
      case PDOST:
        return isSetPdost();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPermissions_args)
        return this.equals((setPermissions_args)that);
      return false;
    }

    public boolean equals(setPermissions_args that) {
      if (that == null)
        return false;

      boolean this_present_vrachPcod = true;
      boolean that_present_vrachPcod = true;
      if (this_present_vrachPcod || that_present_vrachPcod) {
        if (!(this_present_vrachPcod && that_present_vrachPcod))
          return false;
        if (this.vrachPcod != that.vrachPcod)
          return false;
      }

      boolean this_present_lpuPcod = true;
      boolean that_present_lpuPcod = true;
      if (this_present_lpuPcod || that_present_lpuPcod) {
        if (!(this_present_lpuPcod && that_present_lpuPcod))
          return false;
        if (this.lpuPcod != that.lpuPcod)
          return false;
      }

      boolean this_present_podrPcod = true;
      boolean that_present_podrPcod = true;
      if (this_present_podrPcod || that_present_podrPcod) {
        if (!(this_present_podrPcod && that_present_podrPcod))
          return false;
        if (this.podrPcod != that.podrPcod)
          return false;
      }

      boolean this_present_pdost = true && this.isSetPdost();
      boolean that_present_pdost = true && that.isSetPdost();
      if (this_present_pdost || that_present_pdost) {
        if (!(this_present_pdost && that_present_pdost))
          return false;
        if (!this.pdost.equals(that.pdost))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setPermissions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setPermissions_args typedOther = (setPermissions_args)other;

      lastComparison = Boolean.valueOf(isSetVrachPcod()).compareTo(typedOther.isSetVrachPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVrachPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vrachPcod, typedOther.vrachPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLpuPcod()).compareTo(typedOther.isSetLpuPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLpuPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lpuPcod, typedOther.lpuPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPodrPcod()).compareTo(typedOther.isSetPodrPcod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPodrPcod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.podrPcod, typedOther.podrPcod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPdost()).compareTo(typedOther.isSetPdost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPdost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pdost, typedOther.pdost);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPermissions_args(");
      boolean first = true;

      sb.append("vrachPcod:");
      sb.append(this.vrachPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lpuPcod:");
      sb.append(this.lpuPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("podrPcod:");
      sb.append(this.podrPcod);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pdost:");
      if (this.pdost == null) {
        sb.append("null");
      } else {
        sb.append(this.pdost);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPermissions_argsStandardSchemeFactory implements SchemeFactory {
      public setPermissions_argsStandardScheme getScheme() {
        return new setPermissions_argsStandardScheme();
      }
    }

    private static class setPermissions_argsStandardScheme extends StandardScheme<setPermissions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPermissions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VRACH_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vrachPcod = iprot.readI32();
                struct.setVrachPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LPU_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lpuPcod = iprot.readI32();
                struct.setLpuPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PODR_PCOD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.podrPcod = iprot.readI32();
                struct.setPodrPcodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PDOST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pdost = iprot.readString();
                struct.setPdostIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPermissions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VRACH_PCOD_FIELD_DESC);
        oprot.writeI32(struct.vrachPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LPU_PCOD_FIELD_DESC);
        oprot.writeI32(struct.lpuPcod);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PODR_PCOD_FIELD_DESC);
        oprot.writeI32(struct.podrPcod);
        oprot.writeFieldEnd();
        if (struct.pdost != null) {
          oprot.writeFieldBegin(PDOST_FIELD_DESC);
          oprot.writeString(struct.pdost);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPermissions_argsTupleSchemeFactory implements SchemeFactory {
      public setPermissions_argsTupleScheme getScheme() {
        return new setPermissions_argsTupleScheme();
      }
    }

    private static class setPermissions_argsTupleScheme extends TupleScheme<setPermissions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPermissions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVrachPcod()) {
          optionals.set(0);
        }
        if (struct.isSetLpuPcod()) {
          optionals.set(1);
        }
        if (struct.isSetPodrPcod()) {
          optionals.set(2);
        }
        if (struct.isSetPdost()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetVrachPcod()) {
          oprot.writeI32(struct.vrachPcod);
        }
        if (struct.isSetLpuPcod()) {
          oprot.writeI32(struct.lpuPcod);
        }
        if (struct.isSetPodrPcod()) {
          oprot.writeI32(struct.podrPcod);
        }
        if (struct.isSetPdost()) {
          oprot.writeString(struct.pdost);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPermissions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.vrachPcod = iprot.readI32();
          struct.setVrachPcodIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lpuPcod = iprot.readI32();
          struct.setLpuPcodIsSet(true);
        }
        if (incoming.get(2)) {
          struct.podrPcod = iprot.readI32();
          struct.setPodrPcodIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pdost = iprot.readString();
          struct.setPdostIsSet(true);
        }
      }
    }

  }

  public static class setPermissions_result implements org.apache.thrift.TBase<setPermissions_result, setPermissions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPermissions_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPermissions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPermissions_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPermissions_result.class, metaDataMap);
    }

    public setPermissions_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPermissions_result(setPermissions_result other) {
    }

    public setPermissions_result deepCopy() {
      return new setPermissions_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPermissions_result)
        return this.equals((setPermissions_result)that);
      return false;
    }

    public boolean equals(setPermissions_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setPermissions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setPermissions_result typedOther = (setPermissions_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPermissions_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPermissions_resultStandardSchemeFactory implements SchemeFactory {
      public setPermissions_resultStandardScheme getScheme() {
        return new setPermissions_resultStandardScheme();
      }
    }

    private static class setPermissions_resultStandardScheme extends StandardScheme<setPermissions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPermissions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPermissions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPermissions_resultTupleSchemeFactory implements SchemeFactory {
      public setPermissions_resultTupleScheme getScheme() {
        return new setPermissions_resultTupleScheme();
      }
    }

    private static class setPermissions_resultTupleScheme extends TupleScheme<setPermissions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPermissions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPermissions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getShabRazd_args implements org.apache.thrift.TBase<getShabRazd_args, getShabRazd_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShabRazd_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShabRazd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShabRazd_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShabRazd_args.class, metaDataMap);
    }

    public getShabRazd_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShabRazd_args(getShabRazd_args other) {
    }

    public getShabRazd_args deepCopy() {
      return new getShabRazd_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShabRazd_args)
        return this.equals((getShabRazd_args)that);
      return false;
    }

    public boolean equals(getShabRazd_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getShabRazd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getShabRazd_args typedOther = (getShabRazd_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShabRazd_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getShabRazd_argsStandardSchemeFactory implements SchemeFactory {
      public getShabRazd_argsStandardScheme getScheme() {
        return new getShabRazd_argsStandardScheme();
      }
    }

    private static class getShabRazd_argsStandardScheme extends StandardScheme<getShabRazd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShabRazd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShabRazd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShabRazd_argsTupleSchemeFactory implements SchemeFactory {
      public getShabRazd_argsTupleScheme getScheme() {
        return new getShabRazd_argsTupleScheme();
      }
    }

    private static class getShabRazd_argsTupleScheme extends TupleScheme<getShabRazd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShabRazd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShabRazd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getShabRazd_result implements org.apache.thrift.TBase<getShabRazd_result, getShabRazd_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShabRazd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShabRazd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShabRazd_resultTupleSchemeFactory());
    }

    public List<ShablonRazd> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShablonRazd.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShabRazd_result.class, metaDataMap);
    }

    public getShabRazd_result() {
    }

    public getShabRazd_result(
      List<ShablonRazd> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShabRazd_result(getShabRazd_result other) {
      if (other.isSetSuccess()) {
        List<ShablonRazd> __this__success = new ArrayList<ShablonRazd>();
        for (ShablonRazd other_element : other.success) {
          __this__success.add(new ShablonRazd(other_element));
        }
        this.success = __this__success;
      }
    }

    public getShabRazd_result deepCopy() {
      return new getShabRazd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ShablonRazd> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ShablonRazd elem) {
      if (this.success == null) {
        this.success = new ArrayList<ShablonRazd>();
      }
      this.success.add(elem);
    }

    public List<ShablonRazd> getSuccess() {
      return this.success;
    }

    public getShabRazd_result setSuccess(List<ShablonRazd> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ShablonRazd>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShabRazd_result)
        return this.equals((getShabRazd_result)that);
      return false;
    }

    public boolean equals(getShabRazd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getShabRazd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getShabRazd_result typedOther = (getShabRazd_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShabRazd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getShabRazd_resultStandardSchemeFactory implements SchemeFactory {
      public getShabRazd_resultStandardScheme getScheme() {
        return new getShabRazd_resultStandardScheme();
      }
    }

    private static class getShabRazd_resultStandardScheme extends StandardScheme<getShabRazd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShabRazd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<ShablonRazd>(_list80.size);
                  for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                  {
                    ShablonRazd _elem82; // required
                    _elem82 = new ShablonRazd();
                    _elem82.read(iprot);
                    struct.success.add(_elem82);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShabRazd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ShablonRazd _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShabRazd_resultTupleSchemeFactory implements SchemeFactory {
      public getShabRazd_resultTupleScheme getScheme() {
        return new getShabRazd_resultTupleScheme();
      }
    }

    private static class getShabRazd_resultTupleScheme extends TupleScheme<getShabRazd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShabRazd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ShablonRazd _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShabRazd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ShablonRazd>(_list85.size);
            for (int _i86 = 0; _i86 < _list85.size; ++_i86)
            {
              ShablonRazd _elem87; // required
              _elem87 = new ShablonRazd();
              _elem87.read(iprot);
              struct.success.add(_elem87);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getShabPok_args implements org.apache.thrift.TBase<getShabPok_args, getShabPok_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShabPok_args");

    private static final org.apache.thrift.protocol.TField ID_RAZD_FIELD_DESC = new org.apache.thrift.protocol.TField("id_razd", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CDOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cdol", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShabPok_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShabPok_argsTupleSchemeFactory());
    }

    public int id_razd; // required
    public String cdol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_RAZD((short)1, "id_razd"),
      CDOL((short)2, "cdol");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_RAZD
            return ID_RAZD;
          case 2: // CDOL
            return CDOL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_RAZD_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_RAZD, new org.apache.thrift.meta_data.FieldMetaData("id_razd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CDOL, new org.apache.thrift.meta_data.FieldMetaData("cdol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShabPok_args.class, metaDataMap);
    }

    public getShabPok_args() {
    }

    public getShabPok_args(
      int id_razd,
      String cdol)
    {
      this();
      this.id_razd = id_razd;
      setId_razdIsSet(true);
      this.cdol = cdol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShabPok_args(getShabPok_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.id_razd = other.id_razd;
      if (other.isSetCdol()) {
        this.cdol = other.cdol;
      }
    }

    public getShabPok_args deepCopy() {
      return new getShabPok_args(this);
    }

    @Override
    public void clear() {
      setId_razdIsSet(false);
      this.id_razd = 0;
      this.cdol = null;
    }

    public int getId_razd() {
      return this.id_razd;
    }

    public getShabPok_args setId_razd(int id_razd) {
      this.id_razd = id_razd;
      setId_razdIsSet(true);
      return this;
    }

    public void unsetId_razd() {
      __isset_bit_vector.clear(__ID_RAZD_ISSET_ID);
    }

    /** Returns true if field id_razd is set (has been assigned a value) and false otherwise */
    public boolean isSetId_razd() {
      return __isset_bit_vector.get(__ID_RAZD_ISSET_ID);
    }

    public void setId_razdIsSet(boolean value) {
      __isset_bit_vector.set(__ID_RAZD_ISSET_ID, value);
    }

    public String getCdol() {
      return this.cdol;
    }

    public getShabPok_args setCdol(String cdol) {
      this.cdol = cdol;
      return this;
    }

    public void unsetCdol() {
      this.cdol = null;
    }

    /** Returns true if field cdol is set (has been assigned a value) and false otherwise */
    public boolean isSetCdol() {
      return this.cdol != null;
    }

    public void setCdolIsSet(boolean value) {
      if (!value) {
        this.cdol = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID_RAZD:
        if (value == null) {
          unsetId_razd();
        } else {
          setId_razd((Integer)value);
        }
        break;

      case CDOL:
        if (value == null) {
          unsetCdol();
        } else {
          setCdol((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_RAZD:
        return Integer.valueOf(getId_razd());

      case CDOL:
        return getCdol();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID_RAZD:
        return isSetId_razd();
      case CDOL:
        return isSetCdol();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShabPok_args)
        return this.equals((getShabPok_args)that);
      return false;
    }

    public boolean equals(getShabPok_args that) {
      if (that == null)
        return false;

      boolean this_present_id_razd = true;
      boolean that_present_id_razd = true;
      if (this_present_id_razd || that_present_id_razd) {
        if (!(this_present_id_razd && that_present_id_razd))
          return false;
        if (this.id_razd != that.id_razd)
          return false;
      }

      boolean this_present_cdol = true && this.isSetCdol();
      boolean that_present_cdol = true && that.isSetCdol();
      if (this_present_cdol || that_present_cdol) {
        if (!(this_present_cdol && that_present_cdol))
          return false;
        if (!this.cdol.equals(that.cdol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getShabPok_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getShabPok_args typedOther = (getShabPok_args)other;

      lastComparison = Boolean.valueOf(isSetId_razd()).compareTo(typedOther.isSetId_razd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId_razd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_razd, typedOther.id_razd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCdol()).compareTo(typedOther.isSetCdol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCdol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdol, typedOther.cdol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShabPok_args(");
      boolean first = true;

      sb.append("id_razd:");
      sb.append(this.id_razd);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cdol:");
      if (this.cdol == null) {
        sb.append("null");
      } else {
        sb.append(this.cdol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getShabPok_argsStandardSchemeFactory implements SchemeFactory {
      public getShabPok_argsStandardScheme getScheme() {
        return new getShabPok_argsStandardScheme();
      }
    }

    private static class getShabPok_argsStandardScheme extends StandardScheme<getShabPok_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShabPok_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_RAZD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id_razd = iprot.readI32();
                struct.setId_razdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CDOL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cdol = iprot.readString();
                struct.setCdolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShabPok_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_RAZD_FIELD_DESC);
        oprot.writeI32(struct.id_razd);
        oprot.writeFieldEnd();
        if (struct.cdol != null) {
          oprot.writeFieldBegin(CDOL_FIELD_DESC);
          oprot.writeString(struct.cdol);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShabPok_argsTupleSchemeFactory implements SchemeFactory {
      public getShabPok_argsTupleScheme getScheme() {
        return new getShabPok_argsTupleScheme();
      }
    }

    private static class getShabPok_argsTupleScheme extends TupleScheme<getShabPok_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShabPok_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId_razd()) {
          optionals.set(0);
        }
        if (struct.isSetCdol()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId_razd()) {
          oprot.writeI32(struct.id_razd);
        }
        if (struct.isSetCdol()) {
          oprot.writeString(struct.cdol);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShabPok_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id_razd = iprot.readI32();
          struct.setId_razdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cdol = iprot.readString();
          struct.setCdolIsSet(true);
        }
      }
    }

  }

  public static class getShabPok_result implements org.apache.thrift.TBase<getShabPok_result, getShabPok_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShabPok_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShabPok_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShabPok_resultTupleSchemeFactory());
    }

    public List<ShablonPok> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShablonPok.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShabPok_result.class, metaDataMap);
    }

    public getShabPok_result() {
    }

    public getShabPok_result(
      List<ShablonPok> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShabPok_result(getShabPok_result other) {
      if (other.isSetSuccess()) {
        List<ShablonPok> __this__success = new ArrayList<ShablonPok>();
        for (ShablonPok other_element : other.success) {
          __this__success.add(new ShablonPok(other_element));
        }
        this.success = __this__success;
      }
    }

    public getShabPok_result deepCopy() {
      return new getShabPok_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ShablonPok> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ShablonPok elem) {
      if (this.success == null) {
        this.success = new ArrayList<ShablonPok>();
      }
      this.success.add(elem);
    }

    public List<ShablonPok> getSuccess() {
      return this.success;
    }

    public getShabPok_result setSuccess(List<ShablonPok> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ShablonPok>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShabPok_result)
        return this.equals((getShabPok_result)that);
      return false;
    }

    public boolean equals(getShabPok_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getShabPok_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getShabPok_result typedOther = (getShabPok_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShabPok_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getShabPok_resultStandardSchemeFactory implements SchemeFactory {
      public getShabPok_resultStandardScheme getScheme() {
        return new getShabPok_resultStandardScheme();
      }
    }

    private static class getShabPok_resultStandardScheme extends StandardScheme<getShabPok_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShabPok_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<ShablonPok>(_list88.size);
                  for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                  {
                    ShablonPok _elem90; // required
                    _elem90 = new ShablonPok();
                    _elem90.read(iprot);
                    struct.success.add(_elem90);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShabPok_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ShablonPok _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShabPok_resultTupleSchemeFactory implements SchemeFactory {
      public getShabPok_resultTupleScheme getScheme() {
        return new getShabPok_resultTupleScheme();
      }
    }

    private static class getShabPok_resultTupleScheme extends TupleScheme<getShabPok_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShabPok_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ShablonPok _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShabPok_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ShablonPok>(_list93.size);
            for (int _i94 = 0; _i94 < _list93.size; ++_i94)
            {
              ShablonPok _elem95; // required
              _elem95 = new ShablonPok();
              _elem95.read(iprot);
              struct.success.add(_elem95);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setShabPok_args implements org.apache.thrift.TBase<setShabPok_args, setShabPok_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setShabPok_args");

    private static final org.apache.thrift.protocol.TField SH_POK_FIELD_DESC = new org.apache.thrift.protocol.TField("shPok", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CDOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cdol", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setShabPok_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setShabPok_argsTupleSchemeFactory());
    }

    public ShablonPok shPok; // required
    public String cdol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SH_POK((short)1, "shPok"),
      CDOL((short)2, "cdol");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SH_POK
            return SH_POK;
          case 2: // CDOL
            return CDOL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SH_POK, new org.apache.thrift.meta_data.FieldMetaData("shPok", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShablonPok.class)));
      tmpMap.put(_Fields.CDOL, new org.apache.thrift.meta_data.FieldMetaData("cdol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setShabPok_args.class, metaDataMap);
    }

    public setShabPok_args() {
    }

    public setShabPok_args(
      ShablonPok shPok,
      String cdol)
    {
      this();
      this.shPok = shPok;
      this.cdol = cdol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setShabPok_args(setShabPok_args other) {
      if (other.isSetShPok()) {
        this.shPok = new ShablonPok(other.shPok);
      }
      if (other.isSetCdol()) {
        this.cdol = other.cdol;
      }
    }

    public setShabPok_args deepCopy() {
      return new setShabPok_args(this);
    }

    @Override
    public void clear() {
      this.shPok = null;
      this.cdol = null;
    }

    public ShablonPok getShPok() {
      return this.shPok;
    }

    public setShabPok_args setShPok(ShablonPok shPok) {
      this.shPok = shPok;
      return this;
    }

    public void unsetShPok() {
      this.shPok = null;
    }

    /** Returns true if field shPok is set (has been assigned a value) and false otherwise */
    public boolean isSetShPok() {
      return this.shPok != null;
    }

    public void setShPokIsSet(boolean value) {
      if (!value) {
        this.shPok = null;
      }
    }

    public String getCdol() {
      return this.cdol;
    }

    public setShabPok_args setCdol(String cdol) {
      this.cdol = cdol;
      return this;
    }

    public void unsetCdol() {
      this.cdol = null;
    }

    /** Returns true if field cdol is set (has been assigned a value) and false otherwise */
    public boolean isSetCdol() {
      return this.cdol != null;
    }

    public void setCdolIsSet(boolean value) {
      if (!value) {
        this.cdol = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SH_POK:
        if (value == null) {
          unsetShPok();
        } else {
          setShPok((ShablonPok)value);
        }
        break;

      case CDOL:
        if (value == null) {
          unsetCdol();
        } else {
          setCdol((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SH_POK:
        return getShPok();

      case CDOL:
        return getCdol();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SH_POK:
        return isSetShPok();
      case CDOL:
        return isSetCdol();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setShabPok_args)
        return this.equals((setShabPok_args)that);
      return false;
    }

    public boolean equals(setShabPok_args that) {
      if (that == null)
        return false;

      boolean this_present_shPok = true && this.isSetShPok();
      boolean that_present_shPok = true && that.isSetShPok();
      if (this_present_shPok || that_present_shPok) {
        if (!(this_present_shPok && that_present_shPok))
          return false;
        if (!this.shPok.equals(that.shPok))
          return false;
      }

      boolean this_present_cdol = true && this.isSetCdol();
      boolean that_present_cdol = true && that.isSetCdol();
      if (this_present_cdol || that_present_cdol) {
        if (!(this_present_cdol && that_present_cdol))
          return false;
        if (!this.cdol.equals(that.cdol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setShabPok_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setShabPok_args typedOther = (setShabPok_args)other;

      lastComparison = Boolean.valueOf(isSetShPok()).compareTo(typedOther.isSetShPok());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShPok()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shPok, typedOther.shPok);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCdol()).compareTo(typedOther.isSetCdol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCdol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdol, typedOther.cdol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setShabPok_args(");
      boolean first = true;

      sb.append("shPok:");
      if (this.shPok == null) {
        sb.append("null");
      } else {
        sb.append(this.shPok);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cdol:");
      if (this.cdol == null) {
        sb.append("null");
      } else {
        sb.append(this.cdol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setShabPok_argsStandardSchemeFactory implements SchemeFactory {
      public setShabPok_argsStandardScheme getScheme() {
        return new setShabPok_argsStandardScheme();
      }
    }

    private static class setShabPok_argsStandardScheme extends StandardScheme<setShabPok_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setShabPok_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SH_POK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.shPok = new ShablonPok();
                struct.shPok.read(iprot);
                struct.setShPokIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CDOL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cdol = iprot.readString();
                struct.setCdolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setShabPok_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.shPok != null) {
          oprot.writeFieldBegin(SH_POK_FIELD_DESC);
          struct.shPok.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cdol != null) {
          oprot.writeFieldBegin(CDOL_FIELD_DESC);
          oprot.writeString(struct.cdol);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setShabPok_argsTupleSchemeFactory implements SchemeFactory {
      public setShabPok_argsTupleScheme getScheme() {
        return new setShabPok_argsTupleScheme();
      }
    }

    private static class setShabPok_argsTupleScheme extends TupleScheme<setShabPok_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setShabPok_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShPok()) {
          optionals.set(0);
        }
        if (struct.isSetCdol()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetShPok()) {
          struct.shPok.write(oprot);
        }
        if (struct.isSetCdol()) {
          oprot.writeString(struct.cdol);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setShabPok_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.shPok = new ShablonPok();
          struct.shPok.read(iprot);
          struct.setShPokIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cdol = iprot.readString();
          struct.setCdolIsSet(true);
        }
      }
    }

  }

  public static class setShabPok_result implements org.apache.thrift.TBase<setShabPok_result, setShabPok_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setShabPok_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setShabPok_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setShabPok_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setShabPok_result.class, metaDataMap);
    }

    public setShabPok_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setShabPok_result(setShabPok_result other) {
    }

    public setShabPok_result deepCopy() {
      return new setShabPok_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setShabPok_result)
        return this.equals((setShabPok_result)that);
      return false;
    }

    public boolean equals(setShabPok_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setShabPok_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setShabPok_result typedOther = (setShabPok_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setShabPok_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setShabPok_resultStandardSchemeFactory implements SchemeFactory {
      public setShabPok_resultStandardScheme getScheme() {
        return new setShabPok_resultStandardScheme();
      }
    }

    private static class setShabPok_resultStandardScheme extends StandardScheme<setShabPok_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setShabPok_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setShabPok_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setShabPok_resultTupleSchemeFactory implements SchemeFactory {
      public setShabPok_resultTupleScheme getScheme() {
        return new setShabPok_resultTupleScheme();
      }
    }

    private static class setShabPok_resultTupleScheme extends TupleScheme<setShabPok_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setShabPok_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setShabPok_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setShabPokGrup_args implements org.apache.thrift.TBase<setShabPokGrup_args, setShabPokGrup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setShabPokGrup_args");

    private static final org.apache.thrift.protocol.TField SH_RAZD_FIELD_DESC = new org.apache.thrift.protocol.TField("shRazd", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CDOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cdol", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setShabPokGrup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setShabPokGrup_argsTupleSchemeFactory());
    }

    public ShablonRazd shRazd; // required
    public String cdol; // required
    public boolean value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SH_RAZD((short)1, "shRazd"),
      CDOL((short)2, "cdol"),
      VALUE((short)3, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SH_RAZD
            return SH_RAZD;
          case 2: // CDOL
            return CDOL;
          case 3: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VALUE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SH_RAZD, new org.apache.thrift.meta_data.FieldMetaData("shRazd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShablonRazd.class)));
      tmpMap.put(_Fields.CDOL, new org.apache.thrift.meta_data.FieldMetaData("cdol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setShabPokGrup_args.class, metaDataMap);
    }

    public setShabPokGrup_args() {
    }

    public setShabPokGrup_args(
      ShablonRazd shRazd,
      String cdol,
      boolean value)
    {
      this();
      this.shRazd = shRazd;
      this.cdol = cdol;
      this.value = value;
      setValueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setShabPokGrup_args(setShabPokGrup_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetShRazd()) {
        this.shRazd = new ShablonRazd(other.shRazd);
      }
      if (other.isSetCdol()) {
        this.cdol = other.cdol;
      }
      this.value = other.value;
    }

    public setShabPokGrup_args deepCopy() {
      return new setShabPokGrup_args(this);
    }

    @Override
    public void clear() {
      this.shRazd = null;
      this.cdol = null;
      setValueIsSet(false);
      this.value = false;
    }

    public ShablonRazd getShRazd() {
      return this.shRazd;
    }

    public setShabPokGrup_args setShRazd(ShablonRazd shRazd) {
      this.shRazd = shRazd;
      return this;
    }

    public void unsetShRazd() {
      this.shRazd = null;
    }

    /** Returns true if field shRazd is set (has been assigned a value) and false otherwise */
    public boolean isSetShRazd() {
      return this.shRazd != null;
    }

    public void setShRazdIsSet(boolean value) {
      if (!value) {
        this.shRazd = null;
      }
    }

    public String getCdol() {
      return this.cdol;
    }

    public setShabPokGrup_args setCdol(String cdol) {
      this.cdol = cdol;
      return this;
    }

    public void unsetCdol() {
      this.cdol = null;
    }

    /** Returns true if field cdol is set (has been assigned a value) and false otherwise */
    public boolean isSetCdol() {
      return this.cdol != null;
    }

    public void setCdolIsSet(boolean value) {
      if (!value) {
        this.cdol = null;
      }
    }

    public boolean isValue() {
      return this.value;
    }

    public setShabPokGrup_args setValue(boolean value) {
      this.value = value;
      setValueIsSet(true);
      return this;
    }

    public void unsetValue() {
      __isset_bit_vector.clear(__VALUE_ISSET_ID);
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return __isset_bit_vector.get(__VALUE_ISSET_ID);
    }

    public void setValueIsSet(boolean value) {
      __isset_bit_vector.set(__VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SH_RAZD:
        if (value == null) {
          unsetShRazd();
        } else {
          setShRazd((ShablonRazd)value);
        }
        break;

      case CDOL:
        if (value == null) {
          unsetCdol();
        } else {
          setCdol((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SH_RAZD:
        return getShRazd();

      case CDOL:
        return getCdol();

      case VALUE:
        return Boolean.valueOf(isValue());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SH_RAZD:
        return isSetShRazd();
      case CDOL:
        return isSetCdol();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setShabPokGrup_args)
        return this.equals((setShabPokGrup_args)that);
      return false;
    }

    public boolean equals(setShabPokGrup_args that) {
      if (that == null)
        return false;

      boolean this_present_shRazd = true && this.isSetShRazd();
      boolean that_present_shRazd = true && that.isSetShRazd();
      if (this_present_shRazd || that_present_shRazd) {
        if (!(this_present_shRazd && that_present_shRazd))
          return false;
        if (!this.shRazd.equals(that.shRazd))
          return false;
      }

      boolean this_present_cdol = true && this.isSetCdol();
      boolean that_present_cdol = true && that.isSetCdol();
      if (this_present_cdol || that_present_cdol) {
        if (!(this_present_cdol && that_present_cdol))
          return false;
        if (!this.cdol.equals(that.cdol))
          return false;
      }

      boolean this_present_value = true;
      boolean that_present_value = true;
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (this.value != that.value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setShabPokGrup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setShabPokGrup_args typedOther = (setShabPokGrup_args)other;

      lastComparison = Boolean.valueOf(isSetShRazd()).compareTo(typedOther.isSetShRazd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShRazd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shRazd, typedOther.shRazd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCdol()).compareTo(typedOther.isSetCdol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCdol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdol, typedOther.cdol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setShabPokGrup_args(");
      boolean first = true;

      sb.append("shRazd:");
      if (this.shRazd == null) {
        sb.append("null");
      } else {
        sb.append(this.shRazd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cdol:");
      if (this.cdol == null) {
        sb.append("null");
      } else {
        sb.append(this.cdol);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      sb.append(this.value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setShabPokGrup_argsStandardSchemeFactory implements SchemeFactory {
      public setShabPokGrup_argsStandardScheme getScheme() {
        return new setShabPokGrup_argsStandardScheme();
      }
    }

    private static class setShabPokGrup_argsStandardScheme extends StandardScheme<setShabPokGrup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setShabPokGrup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SH_RAZD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.shRazd = new ShablonRazd();
                struct.shRazd.read(iprot);
                struct.setShRazdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CDOL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cdol = iprot.readString();
                struct.setCdolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.value = iprot.readBool();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setShabPokGrup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.shRazd != null) {
          oprot.writeFieldBegin(SH_RAZD_FIELD_DESC);
          struct.shRazd.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cdol != null) {
          oprot.writeFieldBegin(CDOL_FIELD_DESC);
          oprot.writeString(struct.cdol);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeBool(struct.value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setShabPokGrup_argsTupleSchemeFactory implements SchemeFactory {
      public setShabPokGrup_argsTupleScheme getScheme() {
        return new setShabPokGrup_argsTupleScheme();
      }
    }

    private static class setShabPokGrup_argsTupleScheme extends TupleScheme<setShabPokGrup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setShabPokGrup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShRazd()) {
          optionals.set(0);
        }
        if (struct.isSetCdol()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetShRazd()) {
          struct.shRazd.write(oprot);
        }
        if (struct.isSetCdol()) {
          oprot.writeString(struct.cdol);
        }
        if (struct.isSetValue()) {
          oprot.writeBool(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setShabPokGrup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.shRazd = new ShablonRazd();
          struct.shRazd.read(iprot);
          struct.setShRazdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cdol = iprot.readString();
          struct.setCdolIsSet(true);
        }
        if (incoming.get(2)) {
          struct.value = iprot.readBool();
          struct.setValueIsSet(true);
        }
      }
    }

  }

  public static class setShabPokGrup_result implements org.apache.thrift.TBase<setShabPokGrup_result, setShabPokGrup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setShabPokGrup_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setShabPokGrup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setShabPokGrup_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setShabPokGrup_result.class, metaDataMap);
    }

    public setShabPokGrup_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setShabPokGrup_result(setShabPokGrup_result other) {
    }

    public setShabPokGrup_result deepCopy() {
      return new setShabPokGrup_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setShabPokGrup_result)
        return this.equals((setShabPokGrup_result)that);
      return false;
    }

    public boolean equals(setShabPokGrup_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setShabPokGrup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setShabPokGrup_result typedOther = (setShabPokGrup_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setShabPokGrup_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setShabPokGrup_resultStandardSchemeFactory implements SchemeFactory {
      public setShabPokGrup_resultStandardScheme getScheme() {
        return new setShabPokGrup_resultStandardScheme();
      }
    }

    private static class setShabPokGrup_resultStandardScheme extends StandardScheme<setShabPokGrup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setShabPokGrup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setShabPokGrup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setShabPokGrup_resultTupleSchemeFactory implements SchemeFactory {
      public setShabPokGrup_resultTupleScheme getScheme() {
        return new setShabPokGrup_resultTupleScheme();
      }
    }

    private static class setShabPokGrup_resultTupleScheme extends TupleScheme<setShabPokGrup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setShabPokGrup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setShabPokGrup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getShablonTextsEdit_args implements org.apache.thrift.TBase<getShablonTextsEdit_args, getShablonTextsEdit_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShablonTextsEdit_args");

    private static final org.apache.thrift.protocol.TField SH_POK_FIELD_DESC = new org.apache.thrift.protocol.TField("shPok", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CDOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cdol", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShablonTextsEdit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShablonTextsEdit_argsTupleSchemeFactory());
    }

    public ShablonPok shPok; // required
    public String cdol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SH_POK((short)1, "shPok"),
      CDOL((short)2, "cdol");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SH_POK
            return SH_POK;
          case 2: // CDOL
            return CDOL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SH_POK, new org.apache.thrift.meta_data.FieldMetaData("shPok", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShablonPok.class)));
      tmpMap.put(_Fields.CDOL, new org.apache.thrift.meta_data.FieldMetaData("cdol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShablonTextsEdit_args.class, metaDataMap);
    }

    public getShablonTextsEdit_args() {
    }

    public getShablonTextsEdit_args(
      ShablonPok shPok,
      String cdol)
    {
      this();
      this.shPok = shPok;
      this.cdol = cdol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShablonTextsEdit_args(getShablonTextsEdit_args other) {
      if (other.isSetShPok()) {
        this.shPok = new ShablonPok(other.shPok);
      }
      if (other.isSetCdol()) {
        this.cdol = other.cdol;
      }
    }

    public getShablonTextsEdit_args deepCopy() {
      return new getShablonTextsEdit_args(this);
    }

    @Override
    public void clear() {
      this.shPok = null;
      this.cdol = null;
    }

    public ShablonPok getShPok() {
      return this.shPok;
    }

    public getShablonTextsEdit_args setShPok(ShablonPok shPok) {
      this.shPok = shPok;
      return this;
    }

    public void unsetShPok() {
      this.shPok = null;
    }

    /** Returns true if field shPok is set (has been assigned a value) and false otherwise */
    public boolean isSetShPok() {
      return this.shPok != null;
    }

    public void setShPokIsSet(boolean value) {
      if (!value) {
        this.shPok = null;
      }
    }

    public String getCdol() {
      return this.cdol;
    }

    public getShablonTextsEdit_args setCdol(String cdol) {
      this.cdol = cdol;
      return this;
    }

    public void unsetCdol() {
      this.cdol = null;
    }

    /** Returns true if field cdol is set (has been assigned a value) and false otherwise */
    public boolean isSetCdol() {
      return this.cdol != null;
    }

    public void setCdolIsSet(boolean value) {
      if (!value) {
        this.cdol = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SH_POK:
        if (value == null) {
          unsetShPok();
        } else {
          setShPok((ShablonPok)value);
        }
        break;

      case CDOL:
        if (value == null) {
          unsetCdol();
        } else {
          setCdol((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SH_POK:
        return getShPok();

      case CDOL:
        return getCdol();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SH_POK:
        return isSetShPok();
      case CDOL:
        return isSetCdol();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShablonTextsEdit_args)
        return this.equals((getShablonTextsEdit_args)that);
      return false;
    }

    public boolean equals(getShablonTextsEdit_args that) {
      if (that == null)
        return false;

      boolean this_present_shPok = true && this.isSetShPok();
      boolean that_present_shPok = true && that.isSetShPok();
      if (this_present_shPok || that_present_shPok) {
        if (!(this_present_shPok && that_present_shPok))
          return false;
        if (!this.shPok.equals(that.shPok))
          return false;
      }

      boolean this_present_cdol = true && this.isSetCdol();
      boolean that_present_cdol = true && that.isSetCdol();
      if (this_present_cdol || that_present_cdol) {
        if (!(this_present_cdol && that_present_cdol))
          return false;
        if (!this.cdol.equals(that.cdol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getShablonTextsEdit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getShablonTextsEdit_args typedOther = (getShablonTextsEdit_args)other;

      lastComparison = Boolean.valueOf(isSetShPok()).compareTo(typedOther.isSetShPok());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShPok()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shPok, typedOther.shPok);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCdol()).compareTo(typedOther.isSetCdol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCdol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdol, typedOther.cdol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShablonTextsEdit_args(");
      boolean first = true;

      sb.append("shPok:");
      if (this.shPok == null) {
        sb.append("null");
      } else {
        sb.append(this.shPok);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cdol:");
      if (this.cdol == null) {
        sb.append("null");
      } else {
        sb.append(this.cdol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getShablonTextsEdit_argsStandardSchemeFactory implements SchemeFactory {
      public getShablonTextsEdit_argsStandardScheme getScheme() {
        return new getShablonTextsEdit_argsStandardScheme();
      }
    }

    private static class getShablonTextsEdit_argsStandardScheme extends StandardScheme<getShablonTextsEdit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShablonTextsEdit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SH_POK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.shPok = new ShablonPok();
                struct.shPok.read(iprot);
                struct.setShPokIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CDOL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cdol = iprot.readString();
                struct.setCdolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShablonTextsEdit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.shPok != null) {
          oprot.writeFieldBegin(SH_POK_FIELD_DESC);
          struct.shPok.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cdol != null) {
          oprot.writeFieldBegin(CDOL_FIELD_DESC);
          oprot.writeString(struct.cdol);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShablonTextsEdit_argsTupleSchemeFactory implements SchemeFactory {
      public getShablonTextsEdit_argsTupleScheme getScheme() {
        return new getShablonTextsEdit_argsTupleScheme();
      }
    }

    private static class getShablonTextsEdit_argsTupleScheme extends TupleScheme<getShablonTextsEdit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShablonTextsEdit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShPok()) {
          optionals.set(0);
        }
        if (struct.isSetCdol()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetShPok()) {
          struct.shPok.write(oprot);
        }
        if (struct.isSetCdol()) {
          oprot.writeString(struct.cdol);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShablonTextsEdit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.shPok = new ShablonPok();
          struct.shPok.read(iprot);
          struct.setShPokIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cdol = iprot.readString();
          struct.setCdolIsSet(true);
        }
      }
    }

  }

  public static class getShablonTextsEdit_result implements org.apache.thrift.TBase<getShablonTextsEdit_result, getShablonTextsEdit_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShablonTextsEdit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShablonTextsEdit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShablonTextsEdit_resultTupleSchemeFactory());
    }

    public List<ShablonText> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShablonText.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShablonTextsEdit_result.class, metaDataMap);
    }

    public getShablonTextsEdit_result() {
    }

    public getShablonTextsEdit_result(
      List<ShablonText> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShablonTextsEdit_result(getShablonTextsEdit_result other) {
      if (other.isSetSuccess()) {
        List<ShablonText> __this__success = new ArrayList<ShablonText>();
        for (ShablonText other_element : other.success) {
          __this__success.add(new ShablonText(other_element));
        }
        this.success = __this__success;
      }
    }

    public getShablonTextsEdit_result deepCopy() {
      return new getShablonTextsEdit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ShablonText> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ShablonText elem) {
      if (this.success == null) {
        this.success = new ArrayList<ShablonText>();
      }
      this.success.add(elem);
    }

    public List<ShablonText> getSuccess() {
      return this.success;
    }

    public getShablonTextsEdit_result setSuccess(List<ShablonText> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ShablonText>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShablonTextsEdit_result)
        return this.equals((getShablonTextsEdit_result)that);
      return false;
    }

    public boolean equals(getShablonTextsEdit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getShablonTextsEdit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getShablonTextsEdit_result typedOther = (getShablonTextsEdit_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShablonTextsEdit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getShablonTextsEdit_resultStandardSchemeFactory implements SchemeFactory {
      public getShablonTextsEdit_resultStandardScheme getScheme() {
        return new getShablonTextsEdit_resultStandardScheme();
      }
    }

    private static class getShablonTextsEdit_resultStandardScheme extends StandardScheme<getShablonTextsEdit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShablonTextsEdit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<ShablonText>(_list96.size);
                  for (int _i97 = 0; _i97 < _list96.size; ++_i97)
                  {
                    ShablonText _elem98; // required
                    _elem98 = new ShablonText();
                    _elem98.read(iprot);
                    struct.success.add(_elem98);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShablonTextsEdit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ShablonText _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShablonTextsEdit_resultTupleSchemeFactory implements SchemeFactory {
      public getShablonTextsEdit_resultTupleScheme getScheme() {
        return new getShablonTextsEdit_resultTupleScheme();
      }
    }

    private static class getShablonTextsEdit_resultTupleScheme extends TupleScheme<getShablonTextsEdit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShablonTextsEdit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ShablonText _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShablonTextsEdit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ShablonText>(_list101.size);
            for (int _i102 = 0; _i102 < _list101.size; ++_i102)
            {
              ShablonText _elem103; // required
              _elem103 = new ShablonText();
              _elem103.read(iprot);
              struct.success.add(_elem103);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getShablonTexts_args implements org.apache.thrift.TBase<getShablonTexts_args, getShablonTexts_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShablonTexts_args");

    private static final org.apache.thrift.protocol.TField SH_POK_FIELD_DESC = new org.apache.thrift.protocol.TField("shPok", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CDOL_FIELD_DESC = new org.apache.thrift.protocol.TField("cdol", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShablonTexts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShablonTexts_argsTupleSchemeFactory());
    }

    public ShablonPok shPok; // required
    public String cdol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SH_POK((short)1, "shPok"),
      CDOL((short)2, "cdol");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SH_POK
            return SH_POK;
          case 2: // CDOL
            return CDOL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SH_POK, new org.apache.thrift.meta_data.FieldMetaData("shPok", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShablonPok.class)));
      tmpMap.put(_Fields.CDOL, new org.apache.thrift.meta_data.FieldMetaData("cdol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShablonTexts_args.class, metaDataMap);
    }

    public getShablonTexts_args() {
    }

    public getShablonTexts_args(
      ShablonPok shPok,
      String cdol)
    {
      this();
      this.shPok = shPok;
      this.cdol = cdol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShablonTexts_args(getShablonTexts_args other) {
      if (other.isSetShPok()) {
        this.shPok = new ShablonPok(other.shPok);
      }
      if (other.isSetCdol()) {
        this.cdol = other.cdol;
      }
    }

    public getShablonTexts_args deepCopy() {
      return new getShablonTexts_args(this);
    }

    @Override
    public void clear() {
      this.shPok = null;
      this.cdol = null;
    }

    public ShablonPok getShPok() {
      return this.shPok;
    }

    public getShablonTexts_args setShPok(ShablonPok shPok) {
      this.shPok = shPok;
      return this;
    }

    public void unsetShPok() {
      this.shPok = null;
    }

    /** Returns true if field shPok is set (has been assigned a value) and false otherwise */
    public boolean isSetShPok() {
      return this.shPok != null;
    }

    public void setShPokIsSet(boolean value) {
      if (!value) {
        this.shPok = null;
      }
    }

    public String getCdol() {
      return this.cdol;
    }

    public getShablonTexts_args setCdol(String cdol) {
      this.cdol = cdol;
      return this;
    }

    public void unsetCdol() {
      this.cdol = null;
    }

    /** Returns true if field cdol is set (has been assigned a value) and false otherwise */
    public boolean isSetCdol() {
      return this.cdol != null;
    }

    public void setCdolIsSet(boolean value) {
      if (!value) {
        this.cdol = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SH_POK:
        if (value == null) {
          unsetShPok();
        } else {
          setShPok((ShablonPok)value);
        }
        break;

      case CDOL:
        if (value == null) {
          unsetCdol();
        } else {
          setCdol((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SH_POK:
        return getShPok();

      case CDOL:
        return getCdol();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SH_POK:
        return isSetShPok();
      case CDOL:
        return isSetCdol();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShablonTexts_args)
        return this.equals((getShablonTexts_args)that);
      return false;
    }

    public boolean equals(getShablonTexts_args that) {
      if (that == null)
        return false;

      boolean this_present_shPok = true && this.isSetShPok();
      boolean that_present_shPok = true && that.isSetShPok();
      if (this_present_shPok || that_present_shPok) {
        if (!(this_present_shPok && that_present_shPok))
          return false;
        if (!this.shPok.equals(that.shPok))
          return false;
      }

      boolean this_present_cdol = true && this.isSetCdol();
      boolean that_present_cdol = true && that.isSetCdol();
      if (this_present_cdol || that_present_cdol) {
        if (!(this_present_cdol && that_present_cdol))
          return false;
        if (!this.cdol.equals(that.cdol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getShablonTexts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getShablonTexts_args typedOther = (getShablonTexts_args)other;

      lastComparison = Boolean.valueOf(isSetShPok()).compareTo(typedOther.isSetShPok());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShPok()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shPok, typedOther.shPok);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCdol()).compareTo(typedOther.isSetCdol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCdol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdol, typedOther.cdol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShablonTexts_args(");
      boolean first = true;

      sb.append("shPok:");
      if (this.shPok == null) {
        sb.append("null");
      } else {
        sb.append(this.shPok);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cdol:");
      if (this.cdol == null) {
        sb.append("null");
      } else {
        sb.append(this.cdol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getShablonTexts_argsStandardSchemeFactory implements SchemeFactory {
      public getShablonTexts_argsStandardScheme getScheme() {
        return new getShablonTexts_argsStandardScheme();
      }
    }

    private static class getShablonTexts_argsStandardScheme extends StandardScheme<getShablonTexts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShablonTexts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SH_POK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.shPok = new ShablonPok();
                struct.shPok.read(iprot);
                struct.setShPokIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CDOL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cdol = iprot.readString();
                struct.setCdolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShablonTexts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.shPok != null) {
          oprot.writeFieldBegin(SH_POK_FIELD_DESC);
          struct.shPok.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cdol != null) {
          oprot.writeFieldBegin(CDOL_FIELD_DESC);
          oprot.writeString(struct.cdol);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShablonTexts_argsTupleSchemeFactory implements SchemeFactory {
      public getShablonTexts_argsTupleScheme getScheme() {
        return new getShablonTexts_argsTupleScheme();
      }
    }

    private static class getShablonTexts_argsTupleScheme extends TupleScheme<getShablonTexts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShablonTexts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShPok()) {
          optionals.set(0);
        }
        if (struct.isSetCdol()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetShPok()) {
          struct.shPok.write(oprot);
        }
        if (struct.isSetCdol()) {
          oprot.writeString(struct.cdol);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShablonTexts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.shPok = new ShablonPok();
          struct.shPok.read(iprot);
          struct.setShPokIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cdol = iprot.readString();
          struct.setCdolIsSet(true);
        }
      }
    }

  }

  public static class getShablonTexts_result implements org.apache.thrift.TBase<getShablonTexts_result, getShablonTexts_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShablonTexts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShablonTexts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShablonTexts_resultTupleSchemeFactory());
    }

    public List<ShablonText> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShablonText.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShablonTexts_result.class, metaDataMap);
    }

    public getShablonTexts_result() {
    }

    public getShablonTexts_result(
      List<ShablonText> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShablonTexts_result(getShablonTexts_result other) {
      if (other.isSetSuccess()) {
        List<ShablonText> __this__success = new ArrayList<ShablonText>();
        for (ShablonText other_element : other.success) {
          __this__success.add(new ShablonText(other_element));
        }
        this.success = __this__success;
      }
    }

    public getShablonTexts_result deepCopy() {
      return new getShablonTexts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ShablonText> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ShablonText elem) {
      if (this.success == null) {
        this.success = new ArrayList<ShablonText>();
      }
      this.success.add(elem);
    }

    public List<ShablonText> getSuccess() {
      return this.success;
    }

    public getShablonTexts_result setSuccess(List<ShablonText> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ShablonText>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShablonTexts_result)
        return this.equals((getShablonTexts_result)that);
      return false;
    }

    public boolean equals(getShablonTexts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getShablonTexts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getShablonTexts_result typedOther = (getShablonTexts_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShablonTexts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getShablonTexts_resultStandardSchemeFactory implements SchemeFactory {
      public getShablonTexts_resultStandardScheme getScheme() {
        return new getShablonTexts_resultStandardScheme();
      }
    }

    private static class getShablonTexts_resultStandardScheme extends StandardScheme<getShablonTexts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShablonTexts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<ShablonText>(_list104.size);
                  for (int _i105 = 0; _i105 < _list104.size; ++_i105)
                  {
                    ShablonText _elem106; // required
                    _elem106 = new ShablonText();
                    _elem106.read(iprot);
                    struct.success.add(_elem106);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShablonTexts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ShablonText _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShablonTexts_resultTupleSchemeFactory implements SchemeFactory {
      public getShablonTexts_resultTupleScheme getScheme() {
        return new getShablonTexts_resultTupleScheme();
      }
    }

    private static class getShablonTexts_resultTupleScheme extends TupleScheme<getShablonTexts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShablonTexts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ShablonText _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShablonTexts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ShablonText>(_list109.size);
            for (int _i110 = 0; _i110 < _list109.size; ++_i110)
            {
              ShablonText _elem111; // required
              _elem111 = new ShablonText();
              _elem111.read(iprot);
              struct.success.add(_elem111);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addShablonText_args implements org.apache.thrift.TBase<addShablonText_args, addShablonText_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addShablonText_args");

    private static final org.apache.thrift.protocol.TField SH_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("shText", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addShablonText_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addShablonText_argsTupleSchemeFactory());
    }

    public ShablonText shText; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SH_TEXT((short)1, "shText");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SH_TEXT
            return SH_TEXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SH_TEXT, new org.apache.thrift.meta_data.FieldMetaData("shText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShablonText.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addShablonText_args.class, metaDataMap);
    }

    public addShablonText_args() {
    }

    public addShablonText_args(
      ShablonText shText)
    {
      this();
      this.shText = shText;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addShablonText_args(addShablonText_args other) {
      if (other.isSetShText()) {
        this.shText = new ShablonText(other.shText);
      }
    }

    public addShablonText_args deepCopy() {
      return new addShablonText_args(this);
    }

    @Override
    public void clear() {
      this.shText = null;
    }

    public ShablonText getShText() {
      return this.shText;
    }

    public addShablonText_args setShText(ShablonText shText) {
      this.shText = shText;
      return this;
    }

    public void unsetShText() {
      this.shText = null;
    }

    /** Returns true if field shText is set (has been assigned a value) and false otherwise */
    public boolean isSetShText() {
      return this.shText != null;
    }

    public void setShTextIsSet(boolean value) {
      if (!value) {
        this.shText = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SH_TEXT:
        if (value == null) {
          unsetShText();
        } else {
          setShText((ShablonText)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SH_TEXT:
        return getShText();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SH_TEXT:
        return isSetShText();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addShablonText_args)
        return this.equals((addShablonText_args)that);
      return false;
    }

    public boolean equals(addShablonText_args that) {
      if (that == null)
        return false;

      boolean this_present_shText = true && this.isSetShText();
      boolean that_present_shText = true && that.isSetShText();
      if (this_present_shText || that_present_shText) {
        if (!(this_present_shText && that_present_shText))
          return false;
        if (!this.shText.equals(that.shText))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addShablonText_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addShablonText_args typedOther = (addShablonText_args)other;

      lastComparison = Boolean.valueOf(isSetShText()).compareTo(typedOther.isSetShText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shText, typedOther.shText);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addShablonText_args(");
      boolean first = true;

      sb.append("shText:");
      if (this.shText == null) {
        sb.append("null");
      } else {
        sb.append(this.shText);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addShablonText_argsStandardSchemeFactory implements SchemeFactory {
      public addShablonText_argsStandardScheme getScheme() {
        return new addShablonText_argsStandardScheme();
      }
    }

    private static class addShablonText_argsStandardScheme extends StandardScheme<addShablonText_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addShablonText_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SH_TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.shText = new ShablonText();
                struct.shText.read(iprot);
                struct.setShTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addShablonText_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.shText != null) {
          oprot.writeFieldBegin(SH_TEXT_FIELD_DESC);
          struct.shText.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addShablonText_argsTupleSchemeFactory implements SchemeFactory {
      public addShablonText_argsTupleScheme getScheme() {
        return new addShablonText_argsTupleScheme();
      }
    }

    private static class addShablonText_argsTupleScheme extends TupleScheme<addShablonText_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addShablonText_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShText()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetShText()) {
          struct.shText.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addShablonText_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.shText = new ShablonText();
          struct.shText.read(iprot);
          struct.setShTextIsSet(true);
        }
      }
    }

  }

  public static class addShablonText_result implements org.apache.thrift.TBase<addShablonText_result, addShablonText_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addShablonText_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addShablonText_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addShablonText_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addShablonText_result.class, metaDataMap);
    }

    public addShablonText_result() {
    }

    public addShablonText_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addShablonText_result(addShablonText_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public addShablonText_result deepCopy() {
      return new addShablonText_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addShablonText_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addShablonText_result)
        return this.equals((addShablonText_result)that);
      return false;
    }

    public boolean equals(addShablonText_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addShablonText_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addShablonText_result typedOther = (addShablonText_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addShablonText_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addShablonText_resultStandardSchemeFactory implements SchemeFactory {
      public addShablonText_resultStandardScheme getScheme() {
        return new addShablonText_resultStandardScheme();
      }
    }

    private static class addShablonText_resultStandardScheme extends StandardScheme<addShablonText_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addShablonText_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addShablonText_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addShablonText_resultTupleSchemeFactory implements SchemeFactory {
      public addShablonText_resultTupleScheme getScheme() {
        return new addShablonText_resultTupleScheme();
      }
    }

    private static class addShablonText_resultTupleScheme extends TupleScheme<addShablonText_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addShablonText_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addShablonText_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateShablonText_args implements org.apache.thrift.TBase<updateShablonText_args, updateShablonText_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateShablonText_args");

    private static final org.apache.thrift.protocol.TField SH_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("shText", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateShablonText_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateShablonText_argsTupleSchemeFactory());
    }

    public ShablonText shText; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SH_TEXT((short)1, "shText");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SH_TEXT
            return SH_TEXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SH_TEXT, new org.apache.thrift.meta_data.FieldMetaData("shText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShablonText.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateShablonText_args.class, metaDataMap);
    }

    public updateShablonText_args() {
    }

    public updateShablonText_args(
      ShablonText shText)
    {
      this();
      this.shText = shText;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateShablonText_args(updateShablonText_args other) {
      if (other.isSetShText()) {
        this.shText = new ShablonText(other.shText);
      }
    }

    public updateShablonText_args deepCopy() {
      return new updateShablonText_args(this);
    }

    @Override
    public void clear() {
      this.shText = null;
    }

    public ShablonText getShText() {
      return this.shText;
    }

    public updateShablonText_args setShText(ShablonText shText) {
      this.shText = shText;
      return this;
    }

    public void unsetShText() {
      this.shText = null;
    }

    /** Returns true if field shText is set (has been assigned a value) and false otherwise */
    public boolean isSetShText() {
      return this.shText != null;
    }

    public void setShTextIsSet(boolean value) {
      if (!value) {
        this.shText = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SH_TEXT:
        if (value == null) {
          unsetShText();
        } else {
          setShText((ShablonText)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SH_TEXT:
        return getShText();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SH_TEXT:
        return isSetShText();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateShablonText_args)
        return this.equals((updateShablonText_args)that);
      return false;
    }

    public boolean equals(updateShablonText_args that) {
      if (that == null)
        return false;

      boolean this_present_shText = true && this.isSetShText();
      boolean that_present_shText = true && that.isSetShText();
      if (this_present_shText || that_present_shText) {
        if (!(this_present_shText && that_present_shText))
          return false;
        if (!this.shText.equals(that.shText))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateShablonText_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateShablonText_args typedOther = (updateShablonText_args)other;

      lastComparison = Boolean.valueOf(isSetShText()).compareTo(typedOther.isSetShText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shText, typedOther.shText);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateShablonText_args(");
      boolean first = true;

      sb.append("shText:");
      if (this.shText == null) {
        sb.append("null");
      } else {
        sb.append(this.shText);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateShablonText_argsStandardSchemeFactory implements SchemeFactory {
      public updateShablonText_argsStandardScheme getScheme() {
        return new updateShablonText_argsStandardScheme();
      }
    }

    private static class updateShablonText_argsStandardScheme extends StandardScheme<updateShablonText_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateShablonText_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SH_TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.shText = new ShablonText();
                struct.shText.read(iprot);
                struct.setShTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateShablonText_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.shText != null) {
          oprot.writeFieldBegin(SH_TEXT_FIELD_DESC);
          struct.shText.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateShablonText_argsTupleSchemeFactory implements SchemeFactory {
      public updateShablonText_argsTupleScheme getScheme() {
        return new updateShablonText_argsTupleScheme();
      }
    }

    private static class updateShablonText_argsTupleScheme extends TupleScheme<updateShablonText_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateShablonText_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShText()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetShText()) {
          struct.shText.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateShablonText_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.shText = new ShablonText();
          struct.shText.read(iprot);
          struct.setShTextIsSet(true);
        }
      }
    }

  }

  public static class updateShablonText_result implements org.apache.thrift.TBase<updateShablonText_result, updateShablonText_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateShablonText_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateShablonText_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateShablonText_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateShablonText_result.class, metaDataMap);
    }

    public updateShablonText_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateShablonText_result(updateShablonText_result other) {
    }

    public updateShablonText_result deepCopy() {
      return new updateShablonText_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateShablonText_result)
        return this.equals((updateShablonText_result)that);
      return false;
    }

    public boolean equals(updateShablonText_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateShablonText_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateShablonText_result typedOther = (updateShablonText_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateShablonText_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateShablonText_resultStandardSchemeFactory implements SchemeFactory {
      public updateShablonText_resultStandardScheme getScheme() {
        return new updateShablonText_resultStandardScheme();
      }
    }

    private static class updateShablonText_resultStandardScheme extends StandardScheme<updateShablonText_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateShablonText_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateShablonText_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateShablonText_resultTupleSchemeFactory implements SchemeFactory {
      public updateShablonText_resultTupleScheme getScheme() {
        return new updateShablonText_resultTupleScheme();
      }
    }

    private static class updateShablonText_resultTupleScheme extends TupleScheme<updateShablonText_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateShablonText_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateShablonText_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
